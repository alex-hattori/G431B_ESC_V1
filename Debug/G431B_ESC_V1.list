
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012a64  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014b8  08012c48  08012c48  00022c48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014100  08014100  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08014100  08014100  00024100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014108  08014108  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014108  08014108  00024108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801410c  0801410c  0002410c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08014110  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004f7c  20000200  08014310  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000517c  08014310  0003517c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026d65  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000560a  00000000  00000000  00056f95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001f40  00000000  00000000  0005c5a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cf0  00000000  00000000  0005e4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000266cc  00000000  00000000  000601d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002774f  00000000  00000000  0008689c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e7945  00000000  00000000  000adfeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00195930  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009b90  00000000  00000000  00195980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	08012c2c 	.word	0x08012c2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	08012c2c 	.word	0x08012c2c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00d f95f 	bl	800e324 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b39      	ldr	r3, [pc, #228]	; (800114c <MX_ADC1_Init+0x104>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b37      	ldr	r3, [pc, #220]	; (800114c <MX_ADC1_Init+0x104>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b35      	ldr	r3, [pc, #212]	; (800114c <MX_ADC1_Init+0x104>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b33      	ldr	r3, [pc, #204]	; (800114c <MX_ADC1_Init+0x104>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b32      	ldr	r3, [pc, #200]	; (800114c <MX_ADC1_Init+0x104>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001088:	4b30      	ldr	r3, [pc, #192]	; (800114c <MX_ADC1_Init+0x104>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <MX_ADC1_Init+0x104>)
 8001090:	2208      	movs	r2, #8
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b2d      	ldr	r3, [pc, #180]	; (800114c <MX_ADC1_Init+0x104>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <MX_ADC1_Init+0x104>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_ADC1_Init+0x104>)
 80010a2:	2202      	movs	r2, #2
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_ADC1_Init+0x104>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_ADC1_Init+0x104>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b25      	ldr	r3, [pc, #148]	; (800114c <MX_ADC1_Init+0x104>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0x104>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_ADC1_Init+0x104>)
 80010c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_ADC1_Init+0x104>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	481e      	ldr	r0, [pc, #120]	; (800114c <MX_ADC1_Init+0x104>)
 80010d4:	f004 fd32 	bl	8005b3c <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010de:	f003 fa4c 	bl	800457a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	4817      	ldr	r0, [pc, #92]	; (800114c <MX_ADC1_Init+0x104>)
 80010ee:	f005 fc8d 	bl	8006a0c <HAL_ADCEx_MultiModeConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010f8:	f003 fa3f 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010fc:	4b14      	ldr	r3, [pc, #80]	; (8001150 <MX_ADC1_Init+0x108>)
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	237f      	movs	r3, #127	; 0x7f
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_ADC1_Init+0x104>)
 800111a:	f004 ff6b 	bl	8005ff4 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001124:	f003 fa29 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <MX_ADC1_Init+0x10c>)
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	230c      	movs	r3, #12
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0x104>)
 8001136:	f004 ff5d 	bl	8005ff4 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001140:	f003 fa1b 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3730      	adds	r7, #48	; 0x30
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	2000021c 	.word	0x2000021c
 8001150:	b6902000 	.word	0xb6902000
 8001154:	04300002 	.word	0x04300002

08001158 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800115e:	463b      	mov	r3, r7
 8001160:	2220      	movs	r2, #32
 8001162:	2100      	movs	r1, #0
 8001164:	4618      	mov	r0, r3
 8001166:	f00d f8dd 	bl	800e324 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800116a:	4b32      	ldr	r3, [pc, #200]	; (8001234 <MX_ADC2_Init+0xdc>)
 800116c:	4a32      	ldr	r2, [pc, #200]	; (8001238 <MX_ADC2_Init+0xe0>)
 800116e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001170:	4b30      	ldr	r3, [pc, #192]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001172:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001176:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001178:	4b2e      	ldr	r3, [pc, #184]	; (8001234 <MX_ADC2_Init+0xdc>)
 800117a:	2200      	movs	r2, #0
 800117c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800117e:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001180:	2200      	movs	r2, #0
 8001182:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001186:	2200      	movs	r2, #0
 8001188:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800118a:	4b2a      	ldr	r3, [pc, #168]	; (8001234 <MX_ADC2_Init+0xdc>)
 800118c:	2201      	movs	r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001192:	2208      	movs	r2, #8
 8001194:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001196:	4b27      	ldr	r3, [pc, #156]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001198:	2200      	movs	r2, #0
 800119a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800119c:	4b25      	ldr	r3, [pc, #148]	; (8001234 <MX_ADC2_Init+0xdc>)
 800119e:	2200      	movs	r2, #0
 80011a0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80011a2:	4b24      	ldr	r3, [pc, #144]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011a4:	2202      	movs	r2, #2
 80011a6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011a8:	4b22      	ldr	r3, [pc, #136]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b0:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b6:	4b1f      	ldr	r3, [pc, #124]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ca:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011cc:	4b19      	ldr	r3, [pc, #100]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011d4:	4817      	ldr	r0, [pc, #92]	; (8001234 <MX_ADC2_Init+0xdc>)
 80011d6:	f004 fcb1 	bl	8005b3c <HAL_ADC_Init>
 80011da:	4603      	mov	r3, r0
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d001      	beq.n	80011e4 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 80011e0:	f003 f9cb 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 80011e4:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_ADC2_Init+0xe4>)
 80011e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011e8:	2306      	movs	r3, #6
 80011ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f0:	237f      	movs	r3, #127	; 0x7f
 80011f2:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80011f4:	2304      	movs	r3, #4
 80011f6:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80011fc:	463b      	mov	r3, r7
 80011fe:	4619      	mov	r1, r3
 8001200:	480c      	ldr	r0, [pc, #48]	; (8001234 <MX_ADC2_Init+0xdc>)
 8001202:	f004 fef7 	bl	8005ff4 <HAL_ADC_ConfigChannel>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800120c:	f003 f9b5 	bl	800457a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_ADC2_Init+0xe8>)
 8001212:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001214:	230c      	movs	r3, #12
 8001216:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001218:	463b      	mov	r3, r7
 800121a:	4619      	mov	r1, r3
 800121c:	4805      	ldr	r0, [pc, #20]	; (8001234 <MX_ADC2_Init+0xdc>)
 800121e:	f004 fee9 	bl	8005ff4 <HAL_ADC_ConfigChannel>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001228:	f003 f9a7 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	3720      	adds	r7, #32
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000288 	.word	0x20000288
 8001238:	50000100 	.word	0x50000100
 800123c:	c3290000 	.word	0xc3290000
 8001240:	cb8c0000 	.word	0xcb8c0000

08001244 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08a      	sub	sp, #40	; 0x28
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001264:	d159      	bne.n	800131a <HAL_ADC_MspInit+0xd6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001266:	4b51      	ldr	r3, [pc, #324]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	3301      	adds	r3, #1
 800126c:	4a4f      	ldr	r2, [pc, #316]	; (80013ac <HAL_ADC_MspInit+0x168>)
 800126e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001270:	4b4e      	ldr	r3, [pc, #312]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b01      	cmp	r3, #1
 8001276:	d10b      	bne.n	8001290 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001278:	4b4d      	ldr	r3, [pc, #308]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800127a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127c:	4a4c      	ldr	r2, [pc, #304]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800127e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001284:	4b4a      	ldr	r3, [pc, #296]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001288:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800128c:	613b      	str	r3, [r7, #16]
 800128e:	693b      	ldr	r3, [r7, #16]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001290:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001292:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001294:	4a46      	ldr	r2, [pc, #280]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001296:	f043 0301 	orr.w	r3, r3, #1
 800129a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800129c:	4b44      	ldr	r3, [pc, #272]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800129e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a0:	f003 0301 	and.w	r3, r3, #1
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ac:	2303      	movs	r3, #3
 80012ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012be:	f006 fe69 	bl	8007f94 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012c2:	4b3c      	ldr	r3, [pc, #240]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012c4:	4a3c      	ldr	r2, [pc, #240]	; (80013b8 <HAL_ADC_MspInit+0x174>)
 80012c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012c8:	4b3a      	ldr	r3, [pc, #232]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012ca:	2205      	movs	r2, #5
 80012cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012ce:	4b39      	ldr	r3, [pc, #228]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012d4:	4b37      	ldr	r3, [pc, #220]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012da:	4b36      	ldr	r3, [pc, #216]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012dc:	2280      	movs	r2, #128	; 0x80
 80012de:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012e0:	4b34      	ldr	r3, [pc, #208]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012e6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012e8:	4b32      	ldr	r3, [pc, #200]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012ee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 80012f0:	4b30      	ldr	r3, [pc, #192]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012f6:	4b2f      	ldr	r3, [pc, #188]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012fc:	482d      	ldr	r0, [pc, #180]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 80012fe:	f005 fd39 	bl	8006d74 <HAL_DMA_Init>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d001      	beq.n	800130c <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 8001308:	f003 f937 	bl	800457a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 8001310:	655a      	str	r2, [r3, #84]	; 0x54
 8001312:	4a28      	ldr	r2, [pc, #160]	; (80013b4 <HAL_ADC_MspInit+0x170>)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001318:	e044      	b.n	80013a4 <HAL_ADC_MspInit+0x160>
  else if(adcHandle->Instance==ADC2)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a27      	ldr	r2, [pc, #156]	; (80013bc <HAL_ADC_MspInit+0x178>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d13f      	bne.n	80013a4 <HAL_ADC_MspInit+0x160>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001324:	4b21      	ldr	r3, [pc, #132]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	3301      	adds	r3, #1
 800132a:	4a20      	ldr	r2, [pc, #128]	; (80013ac <HAL_ADC_MspInit+0x168>)
 800132c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800132e:	4b1f      	ldr	r3, [pc, #124]	; (80013ac <HAL_ADC_MspInit+0x168>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b01      	cmp	r3, #1
 8001334:	d10b      	bne.n	800134e <HAL_ADC_MspInit+0x10a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001336:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800133a:	4a1d      	ldr	r2, [pc, #116]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 800133c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001340:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_ADC_MspInit+0x16c>)
 8001344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001346:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134a:	60bb      	str	r3, [r7, #8]
 800134c:	68bb      	ldr	r3, [r7, #8]
    hdma_adc2.Instance = DMA1_Channel2;
 800134e:	4b1c      	ldr	r3, [pc, #112]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001350:	4a1c      	ldr	r2, [pc, #112]	; (80013c4 <HAL_ADC_MspInit+0x180>)
 8001352:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001354:	4b1a      	ldr	r3, [pc, #104]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001356:	2224      	movs	r2, #36	; 0x24
 8001358:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800135a:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001360:	4b17      	ldr	r3, [pc, #92]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001368:	2280      	movs	r2, #128	; 0x80
 800136a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800136e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001372:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001374:	4b12      	ldr	r3, [pc, #72]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001376:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800137a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 800137c:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800137e:	2200      	movs	r2, #0
 8001380:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001382:	4b0f      	ldr	r3, [pc, #60]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 8001384:	2200      	movs	r2, #0
 8001386:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800138a:	f005 fcf3 	bl	8006d74 <HAL_DMA_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <HAL_ADC_MspInit+0x154>
      Error_Handler();
 8001394:	f003 f8f1 	bl	800457a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	4a09      	ldr	r2, [pc, #36]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 800139c:	655a      	str	r2, [r3, #84]	; 0x54
 800139e:	4a08      	ldr	r2, [pc, #32]	; (80013c0 <HAL_ADC_MspInit+0x17c>)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013a4:	bf00      	nop
 80013a6:	3728      	adds	r7, #40	; 0x28
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200003b4 	.word	0x200003b4
 80013b0:	40021000 	.word	0x40021000
 80013b4:	200002f4 	.word	0x200002f4
 80013b8:	40020008 	.word	0x40020008
 80013bc:	50000100 	.word	0x50000100
 80013c0:	20000354 	.word	0x20000354
 80013c4:	4002001c 	.word	0x4002001c

080013c8 <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80013c8:	b5b0      	push	{r4, r5, r7, lr}
 80013ca:	b088      	sub	sp, #32
 80013cc:	af02      	add	r7, sp, #8
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	607a      	str	r2, [r7, #4]
 80013d4:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 80013d6:	4b7d      	ldr	r3, [pc, #500]	; (80015cc <order_phases+0x204>)
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	7c1b      	ldrb	r3, [r3, #16]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 80013e4:	487a      	ldr	r0, [pc, #488]	; (80015d0 <order_phases+0x208>)
 80013e6:	f00d fc95 	bl	800ed14 <puts>
		cal->started = 1;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	2201      	movs	r2, #1
 80013ee:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	683a      	ldr	r2, [r7, #0]
 80013f4:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80015d4 <order_phases+0x20c>
 800140a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	edd3 7a05 	vldr	s15, [r3, #20]
 800141a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800141e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001426:	d529      	bpl.n	800147c <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	f04f 0200 	mov.w	r2, #0
 800142e:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	689b      	ldr	r3, [r3, #8]
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800143a:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        cal->cal_position.elec_velocity = 0;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8001444:	461a      	mov	r2, r3
 8001446:	f04f 0300 	mov.w	r3, #0
 800144a:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
        controller->i_d_des = I_CAL;
 800144e:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <order_phases+0x210>)
 8001450:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001452:	68bb      	ldr	r3, [r7, #8]
 8001454:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	f04f 0200 	mov.w	r2, #0
 800145e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001468:	332c      	adds	r3, #44	; 0x2c
 800146a:	4619      	mov	r1, r3
 800146c:	68b8      	ldr	r0, [r7, #8]
 800146e:	f001 fa35 	bl	80028dc <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	68da      	ldr	r2, [r3, #12]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	619a      	str	r2, [r3, #24]
    	return;
 800147a:	e0a4      	b.n	80015c6 <order_phases+0x1fe>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001482:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80015dc <order_phases+0x214>
 8001486:	eef4 7ac7 	vcmpe.f32	s15, s14
 800148a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800148e:	d51d      	bpl.n	80014cc <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	edd3 7a05 	vldr	s15, [r3, #20]
 8001496:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800149a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800149e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80014a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	687a      	ldr	r2, [r7, #4]
 80014b2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80014b6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014c0:	332c      	adds	r3, #44	; 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f001 fa09 	bl	80028dc <commutate>
    	return;
 80014ca:	e07c      	b.n	80015c6 <order_phases+0x1fe>
    }
	reset_foc(controller);
 80014cc:	68b8      	ldr	r0, [r7, #8]
 80014ce:	f001 f991 	bl	80027f4 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	edd3 7a06 	vldr	s15, [r3, #24]
 80014de:	ed97 7a05 	vldr	s14, [r7, #20]
 80014e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e6:	eef0 7ae7 	vabs.f32	s15, s15
 80014ea:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80015e0 <order_phases+0x218>
 80014ee:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80014f2:	ee16 0a90 	vmov	r0, s13
 80014f6:	f7ff f84f 	bl	8000598 <__aeabi_f2d>
 80014fa:	4602      	mov	r2, r0
 80014fc:	460b      	mov	r3, r1
 80014fe:	ec43 2b10 	vmov	d0, r2, r3
 8001502:	f011 f831 	bl	8012568 <round>
 8001506:	ec53 2b10 	vmov	r2, r3, d0
 800150a:	4610      	mov	r0, r2
 800150c:	4619      	mov	r1, r3
 800150e:	f7ff fb73 	bl	8000bf8 <__aeabi_d2uiz>
 8001512:	4603      	mov	r3, r0
 8001514:	b2da      	uxtb	r2, r3
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001520:	ed97 7a05 	vldr	s14, [r7, #20]
 8001524:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001528:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800152c:	dd07      	ble.n	800153e <order_phases+0x176>
		cal->phase_order = 0;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 8001536:	482b      	ldr	r0, [pc, #172]	; (80015e4 <order_phases+0x21c>)
 8001538:	f00d fbec 	bl	800ed14 <puts>
 800153c:	e014      	b.n	8001568 <order_phases+0x1a0>
	}
	else{
		cal->phase_order = 1;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800154c:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 800154e:	68bb      	ldr	r3, [r7, #8]
 8001550:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	693a      	ldr	r2, [r7, #16]
 800155e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 8001562:	4821      	ldr	r0, [pc, #132]	; (80015e8 <order_phases+0x220>)
 8001564:	f00d fbd6 	bl	800ed14 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	4619      	mov	r1, r3
 800156e:	481f      	ldr	r0, [pc, #124]	; (80015ec <order_phases+0x224>)
 8001570:	f00d fb4a 	bl	800ec08 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff f80d 	bl	8000598 <__aeabi_f2d>
 800157e:	4604      	mov	r4, r0
 8001580:	460d      	mov	r5, r1
 8001582:	6978      	ldr	r0, [r7, #20]
 8001584:	f7ff f808 	bl	8000598 <__aeabi_f2d>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	e9cd 2300 	strd	r2, r3, [sp]
 8001590:	4622      	mov	r2, r4
 8001592:	462b      	mov	r3, r5
 8001594:	4816      	ldr	r0, [pc, #88]	; (80015f0 <order_phases+0x228>)
 8001596:	f00d fb37 	bl	800ec08 <iprintf>
    PHASE_ORDER = cal->phase_order;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015a0:	461a      	mov	r2, r3
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <order_phases+0x204>)
 80015a4:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <order_phases+0x210>)
 80015b4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2201      	movs	r2, #1
 80015c2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 80015c6:	3718      	adds	r7, #24
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bdb0      	pop	{r4, r5, r7, pc}
 80015cc:	20004dd4 	.word	0x20004dd4
 80015d0:	08012c48 	.word	0x08012c48
 80015d4:	3851b717 	.word	0x3851b717
 80015d8:	20004cd4 	.word	0x20004cd4
 80015dc:	3fd06cbe 	.word	0x3fd06cbe
 80015e0:	40c90fdb 	.word	0x40c90fdb
 80015e4:	08012c6c 	.word	0x08012c6c
 80015e8:	08012c84 	.word	0x08012c84
 80015ec:	08012c9c 	.word	0x08012c9c
 80015f0:	08012cb0 	.word	0x08012cb0

080015f4 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 80015f4:	b5b0      	push	{r4, r5, r7, lr}
 80015f6:	b094      	sub	sp, #80	; 0x50
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	7c1b      	ldrb	r3, [r3, #16]
 8001606:	2b00      	cmp	r3, #0
 8001608:	d10f      	bne.n	800162a <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 800160a:	489e      	ldr	r0, [pc, #632]	; (8001884 <calibrate_encoder+0x290>)
 800160c:	f00d fb82 	bl	800ed14 <puts>
		cal->started = 1;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	683a      	ldr	r2, [r7, #0]
 800161a:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001622:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	683a      	ldr	r2, [r7, #0]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	ee07 3a90 	vmov	s15, r3
 8001636:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800163a:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8001888 <calibrate_encoder+0x294>
 800163e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	edd3 7a05 	vldr	s15, [r3, #20]
 800164e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800165a:	d525      	bpl.n	80016a8 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f04f 0200 	mov.w	r2, #0
 8001662:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	687a      	ldr	r2, [r7, #4]
 800166a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800166e:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
        controller->i_d_des = I_CAL;
 8001672:	4b86      	ldr	r3, [pc, #536]	; (800188c <calibrate_encoder+0x298>)
 8001674:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001676:	68bb      	ldr	r3, [r7, #8]
 8001678:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800168c:	332c      	adds	r3, #44	; 0x2c
 800168e:	4619      	mov	r1, r3
 8001690:	68b8      	ldr	r0, [r7, #8]
 8001692:	f001 f923 	bl	80028dc <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 80016a6:	e256      	b.n	8001b56 <calibrate_encoder+0x562>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	ed93 7a05 	vldr	s14, [r3, #20]
 80016ae:	4b77      	ldr	r3, [pc, #476]	; (800188c <calibrate_encoder+0x298>)
 80016b0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80016b4:	eddf 6a76 	vldr	s13, [pc, #472]	; 8001890 <calibrate_encoder+0x29c>
 80016b8:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80016bc:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 80016c0:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80016c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80016cc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	f140 808f 	bpl.w	80017f6 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	edd3 7a02 	vldr	s15, [r3, #8]
 80016de:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001894 <calibrate_encoder+0x2a0>
 80016e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80016f6:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001700:	332c      	adds	r3, #44	; 0x2c
 8001702:	4619      	mov	r1, r3
 8001704:	68b8      	ldr	r0, [r7, #8]
 8001706:	f001 f8e9 	bl	80028dc <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	ed93 7a05 	vldr	s14, [r3, #20]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800171a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800171e:	dc00      	bgt.n	8001722 <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 8001720:	e219      	b.n	8001b56 <calibrate_encoder+0x562>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	edd3 7a02 	vldr	s15, [r3, #8]
 8001728:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 80018a8 <calibrate_encoder+0x2b4>
 800172c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001730:	4b56      	ldr	r3, [pc, #344]	; (800188c <calibrate_encoder+0x298>)
 8001732:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001736:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001890 <calibrate_encoder+0x29c>
 800173a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800173e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001742:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001746:	ee17 3a90 	vmov	r3, s15
 800174a:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001750:	69bb      	ldr	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	14db      	asrs	r3, r3, #19
 800175a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001762:	4618      	mov	r0, r3
 8001764:	697b      	ldr	r3, [r7, #20]
 8001766:	441a      	add	r2, r3
 8001768:	6879      	ldr	r1, [r7, #4]
 800176a:	f100 030a 	add.w	r3, r0, #10
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	440b      	add	r3, r1
 8001772:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001778:	461d      	mov	r5, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800177e:	687a      	ldr	r2, [r7, #4]
 8001780:	330a      	adds	r3, #10
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	4413      	add	r3, r2
 8001786:	685c      	ldr	r4, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe ff03 	bl	8000598 <__aeabi_f2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	e9cd 2300 	strd	r2, r3, [sp]
 800179a:	4623      	mov	r3, r4
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	4629      	mov	r1, r5
 80017a0:	483d      	ldr	r0, [pc, #244]	; (8001898 <calibrate_encoder+0x2a4>)
 80017a2:	f00d fa31 	bl	800ec08 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017ac:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 800189c <calibrate_encoder+0x2a8>
 80017b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80017c6:	4b31      	ldr	r3, [pc, #196]	; (800188c <calibrate_encoder+0x298>)
 80017c8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80017cc:	eddf 6a34 	vldr	s13, [pc, #208]	; 80018a0 <calibrate_encoder+0x2ac>
 80017d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80017d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80017d8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80017dc:	eeb4 7a67 	vcmp.f32	s14, s15
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	f000 81b4 	beq.w	8001b50 <calibrate_encoder+0x55c>
			cal->sample_count++;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	b29a      	uxth	r2, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 80017f4:	e1af      	b.n	8001b56 <calibrate_encoder+0x562>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	ed93 7a05 	vldr	s14, [r3, #20]
 80017fc:	4b23      	ldr	r3, [pc, #140]	; (800188c <calibrate_encoder+0x298>)
 80017fe:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001802:	eddf 6a28 	vldr	s13, [pc, #160]	; 80018a4 <calibrate_encoder+0x2b0>
 8001806:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800180a:	eeb2 6a04 	vmov.f32	s12, #36	; 0x41200000  10.0
 800180e:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001812:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001816:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800181a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	f140 80a9 	bpl.w	8001978 <calibrate_encoder+0x384>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	edd3 7a02 	vldr	s15, [r3, #8]
 800182c:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001894 <calibrate_encoder+0x2a0>
 8001830:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <calibrate_encoder+0x298>)
 800183c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 8001844:	68bb      	ldr	r3, [r7, #8]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001858:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188
		commutate(controller, &cal->cal_position);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001862:	332c      	adds	r3, #44	; 0x2c
 8001864:	4619      	mov	r1, r3
 8001866:	68b8      	ldr	r0, [r7, #8]
 8001868:	f001 f838 	bl	80028dc <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001878:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001880:	dc14      	bgt.n	80018ac <calibrate_encoder+0x2b8>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 8001882:	e167      	b.n	8001b54 <calibrate_encoder+0x560>
 8001884:	08012ccc 	.word	0x08012ccc
 8001888:	3851b717 	.word	0x3851b717
 800188c:	20004cd4 	.word	0x20004cd4
 8001890:	40c90fdb 	.word	0x40c90fdb
 8001894:	3a03126e 	.word	0x3a03126e
 8001898:	08012cf4 	.word	0x08012cf4
 800189c:	3c20d97c 	.word	0x3c20d97c
 80018a0:	42800000 	.word	0x42800000
 80018a4:	41490fdb 	.word	0x41490fdb
 80018a8:	45800000 	.word	0x45800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 814f 	beq.w	8001b54 <calibrate_encoder+0x560>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	edd3 7a02 	vldr	s15, [r3, #8]
 80018bc:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 80018a8 <calibrate_encoder+0x2b4>
 80018c0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80018c4:	4ba5      	ldr	r3, [pc, #660]	; (8001b5c <calibrate_encoder+0x568>)
 80018c6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018ca:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001b60 <calibrate_encoder+0x56c>
 80018ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018da:	ee17 3a90 	vmov	r3, s15
 80018de:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80018e4:	6a3b      	ldr	r3, [r7, #32]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	14db      	asrs	r3, r3, #19
 80018ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80018f2:	69fa      	ldr	r2, [r7, #28]
 80018f4:	4413      	add	r3, r2
 80018f6:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	330a      	adds	r3, #10
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4413      	add	r3, r2
 8001904:	685a      	ldr	r2, [r3, #4]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	4413      	add	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800190e:	4610      	mov	r0, r2
 8001910:	0fda      	lsrs	r2, r3, #31
 8001912:	4413      	add	r3, r2
 8001914:	105b      	asrs	r3, r3, #1
 8001916:	4619      	mov	r1, r3
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	f100 030a 	add.w	r3, r0, #10
 800191e:	009b      	lsls	r3, r3, #2
 8001920:	4413      	add	r3, r2
 8001922:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001928:	461d      	mov	r5, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	330a      	adds	r3, #10
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	4413      	add	r3, r2
 8001936:	685c      	ldr	r4, [r3, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	4618      	mov	r0, r3
 800193e:	f7fe fe2b 	bl	8000598 <__aeabi_f2d>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	e9cd 2300 	strd	r2, r3, [sp]
 800194a:	4623      	mov	r3, r4
 800194c:	6a3a      	ldr	r2, [r7, #32]
 800194e:	4629      	mov	r1, r5
 8001950:	4884      	ldr	r0, [pc, #528]	; (8001b64 <calibrate_encoder+0x570>)
 8001952:	f00d f959 	bl	800ec08 <iprintf>
			cal->sample_count--;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800195a:	3b01      	subs	r3, #1
 800195c:	b29a      	uxth	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001968:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001b68 <calibrate_encoder+0x574>
 800196c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 8001976:	e0ed      	b.n	8001b54 <calibrate_encoder+0x560>
    }

    reset_foc(controller);
 8001978:	68b8      	ldr	r0, [r7, #8]
 800197a:	f000 ff3b 	bl	80027f4 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 8001982:	2300      	movs	r3, #0
 8001984:	643b      	str	r3, [r7, #64]	; 0x40
 8001986:	e00b      	b.n	80019a0 <calibrate_encoder+0x3ac>
		ezero_mean += cal->error_arr[i];
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800198c:	330a      	adds	r3, #10
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001996:	4413      	add	r3, r2
 8001998:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 800199a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800199c:	3301      	adds	r3, #1
 800199e:	643b      	str	r3, [r7, #64]	; 0x40
 80019a0:	4b6e      	ldr	r3, [pc, #440]	; (8001b5c <calibrate_encoder+0x568>)
 80019a2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019aa:	ee17 3a90 	vmov	r3, s15
 80019ae:	019b      	lsls	r3, r3, #6
 80019b0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019b2:	429a      	cmp	r2, r3
 80019b4:	dbe8      	blt.n	8001988 <calibrate_encoder+0x394>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 80019b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b8:	ee07 3a90 	vmov	s15, r3
 80019bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019c0:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <calibrate_encoder+0x568>)
 80019c2:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019c6:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001b6c <calibrate_encoder+0x578>
 80019ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019d2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80019d6:	ee17 2a90 	vmov	r2, s15
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 80019de:	2340      	movs	r3, #64	; 0x40
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	da00      	bge.n	80019ec <calibrate_encoder+0x3f8>
 80019ea:	333f      	adds	r3, #63	; 0x3f
 80019ec:	119b      	asrs	r3, r3, #6
 80019ee:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 80019f0:	2300      	movs	r3, #0
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019f4:	e0a0      	b.n	8001b38 <calibrate_encoder+0x544>
			int moving_avg = 0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 80019fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019fc:	0fda      	lsrs	r2, r3, #31
 80019fe:	4413      	add	r3, r2
 8001a00:	105b      	asrs	r3, r3, #1
 8001a02:	425b      	negs	r3, r3
 8001a04:	637b      	str	r3, [r7, #52]	; 0x34
 8001a06:	e068      	b.n	8001ada <calibrate_encoder+0x4e6>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a0a:	ee07 3a90 	vmov	s15, r3
 8001a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a12:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <calibrate_encoder+0x568>)
 8001a14:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a18:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a1c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001b6c <calibrate_encoder+0x578>
 8001a20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a24:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001b6c <calibrate_encoder+0x578>
 8001a28:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a2e:	ee07 3a90 	vmov	s15, r3
 8001a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a3e:	ee17 3a90 	vmov	r3, s15
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da13      	bge.n	8001a72 <calibrate_encoder+0x47e>
 8001a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a4c:	ee07 3a90 	vmov	s15, r3
 8001a50:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a54:	4b41      	ldr	r3, [pc, #260]	; (8001b5c <calibrate_encoder+0x568>)
 8001a56:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a5a:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001b6c <calibrate_encoder+0x578>
 8001a5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a6a:	ee17 3a90 	vmov	r3, s15
 8001a6e:	633b      	str	r3, [r7, #48]	; 0x30
 8001a70:	e027      	b.n	8001ac2 <calibrate_encoder+0x4ce>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	4b37      	ldr	r3, [pc, #220]	; (8001b5c <calibrate_encoder+0x568>)
 8001a7e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a82:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001b6c <calibrate_encoder+0x578>
 8001a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001a8e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9a:	dd12      	ble.n	8001ac2 <calibrate_encoder+0x4ce>
 8001a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a9e:	ee07 3a90 	vmov	s15, r3
 8001aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa6:	4b2d      	ldr	r3, [pc, #180]	; (8001b5c <calibrate_encoder+0x568>)
 8001aa8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aac:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001b6c <calibrate_encoder+0x578>
 8001ab0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ab8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001abc:	ee17 3a90 	vmov	r3, s15
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ac6:	330a      	adds	r3, #10
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4413      	add	r3, r2
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ad0:	4413      	add	r3, r2
 8001ad2:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
 8001ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001adc:	0fda      	lsrs	r2, r3, #31
 8001ade:	4413      	add	r3, r2
 8001ae0:	105b      	asrs	r3, r3, #1
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	db8e      	blt.n	8001a08 <calibrate_encoder+0x414>
			}
			moving_avg = moving_avg/window;
 8001aea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001aee:	fb92 f3f3 	sdiv	r3, r2, r3
 8001af2:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af8:	4413      	add	r3, r2
 8001afa:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001afe:	2b3f      	cmp	r3, #63	; 0x3f
 8001b00:	dd02      	ble.n	8001b08 <calibrate_encoder+0x514>
 8001b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b04:	3b40      	subs	r3, #64	; 0x40
 8001b06:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	69db      	ldr	r3, [r3, #28]
 8001b0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b0e:	1ad2      	subs	r2, r2, r3
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b18:	330a      	adds	r3, #10
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69db      	ldr	r3, [r3, #28]
 8001b24:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	461a      	mov	r2, r3
 8001b2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b2c:	4810      	ldr	r0, [pc, #64]	; (8001b70 <calibrate_encoder+0x57c>)
 8001b2e:	f00d f86b 	bl	800ec08 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b34:	3301      	adds	r3, #1
 8001b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b3c:	f77f af5b 	ble.w	80019f6 <calibrate_encoder+0x402>

		}

	cal->started = 0;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2200      	movs	r2, #0
 8001b44:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001b4e:	e002      	b.n	8001b56 <calibrate_encoder+0x562>
				return;
 8001b50:	bf00      	nop
 8001b52:	e000      	b.n	8001b56 <calibrate_encoder+0x562>
		return;
 8001b54:	bf00      	nop
}
 8001b56:	3748      	adds	r7, #72	; 0x48
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bdb0      	pop	{r4, r5, r7, pc}
 8001b5c:	20004cd4 	.word	0x20004cd4
 8001b60:	40c90fdb 	.word	0x40c90fdb
 8001b64:	08012cf4 	.word	0x08012cf4
 8001b68:	3c20d97c 	.word	0x3c20d97c
 8001b6c:	42800000 	.word	0x42800000
 8001b70:	08012d04 	.word	0x08012d04

08001b74 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001b7a:	4b1a      	ldr	r3, [pc, #104]	; (8001be4 <MX_DMA_Init+0x70>)
 8001b7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7e:	4a19      	ldr	r2, [pc, #100]	; (8001be4 <MX_DMA_Init+0x70>)
 8001b80:	f043 0304 	orr.w	r3, r3, #4
 8001b84:	6493      	str	r3, [r2, #72]	; 0x48
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <MX_DMA_Init+0x70>)
 8001b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8a:	f003 0304 	and.w	r3, r3, #4
 8001b8e:	607b      	str	r3, [r7, #4]
 8001b90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b92:	4b14      	ldr	r3, [pc, #80]	; (8001be4 <MX_DMA_Init+0x70>)
 8001b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b96:	4a13      	ldr	r2, [pc, #76]	; (8001be4 <MX_DMA_Init+0x70>)
 8001b98:	f043 0301 	orr.w	r3, r3, #1
 8001b9c:	6493      	str	r3, [r2, #72]	; 0x48
 8001b9e:	4b11      	ldr	r3, [pc, #68]	; (8001be4 <MX_DMA_Init+0x70>)
 8001ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ba2:	f003 0301 	and.w	r3, r3, #1
 8001ba6:	603b      	str	r3, [r7, #0]
 8001ba8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001baa:	2200      	movs	r2, #0
 8001bac:	2100      	movs	r1, #0
 8001bae:	200b      	movs	r0, #11
 8001bb0:	f005 f8ab 	bl	8006d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001bb4:	200b      	movs	r0, #11
 8001bb6:	f005 f8c2 	bl	8006d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001bba:	2200      	movs	r2, #0
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	200c      	movs	r0, #12
 8001bc0:	f005 f8a3 	bl	8006d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001bc4:	200c      	movs	r0, #12
 8001bc6:	f005 f8ba 	bl	8006d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	2100      	movs	r1, #0
 8001bce:	200d      	movs	r0, #13
 8001bd0:	f005 f89b 	bl	8006d0a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001bd4:	200d      	movs	r0, #13
 8001bd6:	f005 f8b2 	bl	8006d3e <HAL_NVIC_EnableIRQ>

}
 8001bda:	bf00      	nop
 8001bdc:	3708      	adds	r7, #8
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000

08001be8 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b090      	sub	sp, #64	; 0x40
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
 8001bf4:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001bf6:	a33b      	add	r3, pc, #236	; (adr r3, 8001ce4 <eeprom_restore+0xfc>)
 8001bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bfc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c00:	2300      	movs	r3, #0
 8001c02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c04:	e02c      	b.n	8001c60 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c08:	015b      	lsls	r3, r3, #5
 8001c0a:	4a35      	ldr	r2, [pc, #212]	; (8001ce0 <eeprom_restore+0xf8>)
 8001c0c:	4413      	add	r3, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c14:	2208      	movs	r2, #8
 8001c16:	4618      	mov	r0, r3
 8001c18:	f00c fb76 	bl	800e308 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c1c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c20:	4613      	mov	r3, r2
 8001c22:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c24:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c28:	f04f 0200 	mov.w	r2, #0
 8001c2c:	f04f 0300 	mov.w	r3, #0
 8001c30:	000a      	movs	r2, r1
 8001c32:	2300      	movs	r3, #0
 8001c34:	4613      	mov	r3, r2
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c3e:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c4a:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c4e:	3301      	adds	r3, #1
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	6a3a      	ldr	r2, [r7, #32]
 8001c58:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c5c:	3302      	adds	r3, #2
 8001c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3ce      	bcc.n	8001c06 <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001c68:	2300      	movs	r3, #0
 8001c6a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001c6c:	e02e      	b.n	8001ccc <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001c6e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	4413      	add	r3, r2
 8001c74:	015b      	lsls	r3, r3, #5
 8001c76:	4a1a      	ldr	r2, [pc, #104]	; (8001ce0 <eeprom_restore+0xf8>)
 8001c78:	4413      	add	r3, r2
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c80:	2208      	movs	r2, #8
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00c fb40 	bl	800e308 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c88:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c8c:	4613      	mov	r3, r2
 8001c8e:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001c90:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	4613      	mov	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001ca6:	617b      	str	r3, [r7, #20]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001caa:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	4413      	add	r3, r2
 8001cb4:	697a      	ldr	r2, [r7, #20]
 8001cb6:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cba:	3301      	adds	r3, #1
 8001cbc:	009b      	lsls	r3, r3, #2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	693a      	ldr	r2, [r7, #16]
 8001cc4:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cc8:	3302      	adds	r3, #2
 8001cca:	63bb      	str	r3, [r7, #56]	; 0x38
 8001ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d3cc      	bcc.n	8001c6e <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3740      	adds	r7, #64	; 0x40
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	0801d000 	.word	0x0801d000
 8001ce4:	deadbeef 	.word	0xdeadbeef
	...

08001cf0 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cf4:	b0a2      	sub	sp, #136	; 0x88
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6278      	str	r0, [r7, #36]	; 0x24
 8001cfa:	6239      	str	r1, [r7, #32]
 8001cfc:	61fa      	str	r2, [r7, #28]
 8001cfe:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001d00:	f005 ff2c 	bl	8007b5c <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
 8001d08:	2301      	movs	r3, #1
 8001d0a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d0c:	233a      	movs	r3, #58	; 0x3a
 8001d0e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d10:	2305      	movs	r3, #5
 8001d12:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t page_error = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d18:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d1c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d20:	4619      	mov	r1, r3
 8001d22:	4610      	mov	r0, r2
 8001d24:	f006 f812 	bl	8007d4c <HAL_FLASHEx_Erase>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if(result!=HAL_OK)
 8001d2e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d004      	beq.n	8001d40 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d36:	f005 ff33 	bl	8007ba0 <HAL_FLASH_Lock>
			return result;
 8001d3a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d3e:	e0bd      	b.n	8001ebc <eeprom_store+0x1cc>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d40:	a362      	add	r3, pc, #392	; (adr r3, 8001ecc <eeprom_store+0x1dc>)
 8001d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d46:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001d50:	e052      	b.n	8001df8 <eeprom_store+0x108>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001d52:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d5a:	4413      	add	r3, r2
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	63bb      	str	r3, [r7, #56]	; 0x38
			un2.a = float_regs[index+1];
 8001d60:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001d64:	3301      	adds	r3, #1
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d6a:	4413      	add	r3, r2
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	637b      	str	r3, [r7, #52]	; 0x34
			uint64_t temp = un2.b;
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	2200      	movs	r2, #0
 8001d74:	613b      	str	r3, [r7, #16]
 8001d76:	617a      	str	r2, [r7, #20]
 8001d78:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001d7c:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			data = (temp<<32)|un1.b;
 8001d80:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001d84:	f04f 0000 	mov.w	r0, #0
 8001d88:	f04f 0100 	mov.w	r1, #0
 8001d8c:	0011      	movs	r1, r2
 8001d8e:	2000      	movs	r0, #0
 8001d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d92:	2200      	movs	r2, #0
 8001d94:	4698      	mov	r8, r3
 8001d96:	4691      	mov	r9, r2
 8001d98:	ea40 0308 	orr.w	r3, r0, r8
 8001d9c:	60bb      	str	r3, [r7, #8]
 8001d9e:	ea41 0309 	orr.w	r3, r1, r9
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001da8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001dac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db0:	015b      	lsls	r3, r3, #5
 8001db2:	4a45      	ldr	r2, [pc, #276]	; (8001ec8 <eeprom_store+0x1d8>)
 8001db4:	1899      	adds	r1, r3, r2
 8001db6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001dba:	2000      	movs	r0, #0
 8001dbc:	f005 fe78 	bl	8007ab0 <HAL_FLASH_Program>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(result!=HAL_OK)
 8001dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00f      	beq.n	8001dee <eeprom_store+0xfe>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001dce:	f005 ff01 	bl	8007bd4 <HAL_FLASH_GetError>
 8001dd2:	6538      	str	r0, [r7, #80]	; 0x50
				if(error)
 8001dd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d004      	beq.n	8001de4 <eeprom_store+0xf4>
				{
					HAL_FLASH_Lock();
 8001dda:	f005 fee1 	bl	8007ba0 <HAL_FLASH_Lock>
					return error;
 8001dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e06b      	b.n	8001ebc <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001de4:	f005 fedc 	bl	8007ba0 <HAL_FLASH_Lock>
				return result;
 8001de8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001dec:	e066      	b.n	8001ebc <eeprom_store+0x1cc>
		for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001dee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001df2:	3302      	adds	r3, #2
 8001df4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001df8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	429a      	cmp	r2, r3
 8001e00:	d3a7      	bcc.n	8001d52 <eeprom_store+0x62>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e08:	e050      	b.n	8001eac <eeprom_store+0x1bc>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001e0a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	69fa      	ldr	r2, [r7, #28]
 8001e12:	4413      	add	r3, r2
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	633b      	str	r3, [r7, #48]	; 0x30
			un2.a = int_regs[index+1];
 8001e18:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	009b      	lsls	r3, r3, #2
 8001e20:	69fa      	ldr	r2, [r7, #28]
 8001e22:	4413      	add	r3, r2
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint64_t temp = un2.b;
 8001e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e34:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			data = (temp<<32)|un1.b;
 8001e38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e3c:	f04f 0200 	mov.w	r2, #0
 8001e40:	f04f 0300 	mov.w	r3, #0
 8001e44:	0003      	movs	r3, r0
 8001e46:	2200      	movs	r2, #0
 8001e48:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e4a:	2000      	movs	r0, #0
 8001e4c:	460c      	mov	r4, r1
 8001e4e:	4605      	mov	r5, r0
 8001e50:	ea42 0a04 	orr.w	sl, r2, r4
 8001e54:	ea43 0b05 	orr.w	fp, r3, r5
 8001e58:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001e5c:	6a3a      	ldr	r2, [r7, #32]
 8001e5e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e62:	4413      	add	r3, r2
 8001e64:	015b      	lsls	r3, r3, #5
 8001e66:	4a18      	ldr	r2, [pc, #96]	; (8001ec8 <eeprom_store+0x1d8>)
 8001e68:	1899      	adds	r1, r3, r2
 8001e6a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f005 fe1e 	bl	8007ab0 <HAL_FLASH_Program>
 8001e74:	4603      	mov	r3, r0
 8001e76:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if(result!=HAL_OK)
 8001e7a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00f      	beq.n	8001ea2 <eeprom_store+0x1b2>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e82:	f005 fea7 	bl	8007bd4 <HAL_FLASH_GetError>
 8001e86:	6638      	str	r0, [r7, #96]	; 0x60
				if(error)
 8001e88:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d004      	beq.n	8001e98 <eeprom_store+0x1a8>
				{
					HAL_FLASH_Lock();
 8001e8e:	f005 fe87 	bl	8007ba0 <HAL_FLASH_Lock>
					return error;
 8001e92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e94:	b2db      	uxtb	r3, r3
 8001e96:	e011      	b.n	8001ebc <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001e98:	f005 fe82 	bl	8007ba0 <HAL_FLASH_Lock>
				return result;
 8001e9c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ea0:	e00c      	b.n	8001ebc <eeprom_store+0x1cc>
		for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001ea2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ea6:	3302      	adds	r3, #2
 8001ea8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001eac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d3a9      	bcc.n	8001e0a <eeprom_store+0x11a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001eb6:	f005 fe73 	bl	8007ba0 <HAL_FLASH_Lock>
	return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3788      	adds	r7, #136	; 0x88
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0801d000 	.word	0x0801d000
 8001ecc:	deadbeef 	.word	0xdeadbeef
 8001ed0:	00000000 	.word	0x00000000

08001ed4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001ed8:	4b1f      	ldr	r3, [pc, #124]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001eda:	4a20      	ldr	r2, [pc, #128]	; (8001f5c <MX_FDCAN1_Init+0x88>)
 8001edc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8001ede:	4b1e      	ldr	r3, [pc, #120]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001ee4:	4b1c      	ldr	r3, [pc, #112]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001eea:	4b1b      	ldr	r3, [pc, #108]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001ef0:	4b19      	ldr	r3, [pc, #100]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8001ef6:	4b18      	ldr	r3, [pc, #96]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001efc:	4b16      	ldr	r3, [pc, #88]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f04:	2203      	movs	r2, #3
 8001f06:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f08:	4b13      	ldr	r3, [pc, #76]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001f0e:	4b12      	ldr	r3, [pc, #72]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f10:	220b      	movs	r2, #11
 8001f12:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f14:	4b10      	ldr	r3, [pc, #64]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f16:	2202      	movs	r2, #2
 8001f18:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f1a:	4b0f      	ldr	r3, [pc, #60]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f20:	4b0d      	ldr	r3, [pc, #52]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f22:	2201      	movs	r2, #1
 8001f24:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f2e:	2201      	movs	r2, #1
 8001f30:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8001f32:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f38:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f3e:	4b06      	ldr	r3, [pc, #24]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f44:	4804      	ldr	r0, [pc, #16]	; (8001f58 <MX_FDCAN1_Init+0x84>)
 8001f46:	f005 fa55 	bl	80073f4 <HAL_FDCAN_Init>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001f50:	f002 fb13 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001f54:	bf00      	nop
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	200003b8 	.word	0x200003b8
 8001f5c:	40006400 	.word	0x40006400

08001f60 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08a      	sub	sp, #40	; 0x28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	601a      	str	r2, [r3, #0]
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	609a      	str	r2, [r3, #8]
 8001f74:	60da      	str	r2, [r3, #12]
 8001f76:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2d      	ldr	r2, [pc, #180]	; (8002034 <HAL_FDCAN_MspInit+0xd4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d154      	bne.n	800202c <HAL_FDCAN_MspInit+0xcc>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001f82:	4b2d      	ldr	r3, [pc, #180]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f86:	4a2c      	ldr	r2, [pc, #176]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001f88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001f8e:	4b2a      	ldr	r3, [pc, #168]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f96:	613b      	str	r3, [r7, #16]
 8001f98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9e:	4a26      	ldr	r2, [pc, #152]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001fa0:	f043 0301 	orr.w	r3, r3, #1
 8001fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	60fb      	str	r3, [r7, #12]
 8001fb0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fb2:	4b21      	ldr	r3, [pc, #132]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb6:	4a20      	ldr	r2, [pc, #128]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001fb8:	f043 0302 	orr.w	r3, r3, #2
 8001fbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fbe:	4b1e      	ldr	r3, [pc, #120]	; (8002038 <HAL_FDCAN_MspInit+0xd8>)
 8001fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001fce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fd8:	2303      	movs	r3, #3
 8001fda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8001fdc:	2309      	movs	r3, #9
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fe0:	f107 0314 	add.w	r3, r7, #20
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fea:	f005 ffd3 	bl	8007f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002000:	2309      	movs	r3, #9
 8002002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002004:	f107 0314 	add.w	r3, r7, #20
 8002008:	4619      	mov	r1, r3
 800200a:	480c      	ldr	r0, [pc, #48]	; (800203c <HAL_FDCAN_MspInit+0xdc>)
 800200c:	f005 ffc2 	bl	8007f94 <HAL_GPIO_Init>

    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PB9);
 8002010:	4b0b      	ldr	r3, [pc, #44]	; (8002040 <HAL_FDCAN_MspInit+0xe0>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_FDCAN_MspInit+0xe0>)
 8002016:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800201a:	6053      	str	r3, [r2, #4]

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 800201c:	2200      	movs	r2, #0
 800201e:	2100      	movs	r1, #0
 8002020:	2015      	movs	r0, #21
 8002022:	f004 fe72 	bl	8006d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8002026:	2015      	movs	r0, #21
 8002028:	f004 fe89 	bl	8006d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40006400 	.word	0x40006400
 8002038:	40021000 	.word	0x40021000
 800203c:	48000400 	.word	0x48000400
 8002040:	40010000 	.word	0x40010000

08002044 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002044:	b480      	push	{r7}
 8002046:	b087      	sub	sp, #28
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800205c:	60fb      	str	r3, [r7, #12]
		dtc_u = 1.0f - controller->dtc_u;
		dtc_v = 1.0f - controller->dtc_v;
		dtc_w = 1.0f - controller->dtc_w;
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <set_dtc+0x108>)
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d136      	bne.n	80020d4 <set_dtc+0x90>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002066:	4b3a      	ldr	r3, [pc, #232]	; (8002150 <set_dtc+0x10c>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002074:	edd7 7a05 	vldr	s15, [r7, #20]
 8002078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800207c:	4b34      	ldr	r3, [pc, #208]	; (8002150 <set_dtc+0x10c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002084:	ee17 2a90 	vmov	r2, s15
 8002088:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 800208a:	4b31      	ldr	r3, [pc, #196]	; (8002150 <set_dtc+0x10c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002098:	edd7 7a04 	vldr	s15, [r7, #16]
 800209c:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020a0:	4b2b      	ldr	r3, [pc, #172]	; (8002150 <set_dtc+0x10c>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020a8:	ee17 2a90 	vmov	r2, s15
 80020ac:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80020ae:	4b28      	ldr	r3, [pc, #160]	; (8002150 <set_dtc+0x10c>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80020c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020c4:	4b22      	ldr	r3, [pc, #136]	; (8002150 <set_dtc+0x10c>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020cc:	ee17 2a90 	vmov	r2, s15
 80020d0:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80020d2:	e035      	b.n	8002140 <set_dtc+0xfc>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80020d4:	4b1e      	ldr	r3, [pc, #120]	; (8002150 <set_dtc+0x10c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020da:	ee07 3a90 	vmov	s15, r3
 80020de:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80020e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80020e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ea:	4b19      	ldr	r3, [pc, #100]	; (8002150 <set_dtc+0x10c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020f2:	ee17 2a90 	vmov	r2, s15
 80020f6:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 80020f8:	4b15      	ldr	r3, [pc, #84]	; (8002150 <set_dtc+0x10c>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fe:	ee07 3a90 	vmov	s15, r3
 8002102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002106:	edd7 7a04 	vldr	s15, [r7, #16]
 800210a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <set_dtc+0x10c>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002116:	ee17 2a90 	vmov	r2, s15
 800211a:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800211c:	4b0c      	ldr	r3, [pc, #48]	; (8002150 <set_dtc+0x10c>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002122:	ee07 3a90 	vmov	s15, r3
 8002126:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800212a:	edd7 7a03 	vldr	s15, [r7, #12]
 800212e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002132:	4b07      	ldr	r3, [pc, #28]	; (8002150 <set_dtc+0x10c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800213a:	ee17 2a90 	vmov	r2, s15
 800213e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002140:	bf00      	nop
 8002142:	371c      	adds	r7, #28
 8002144:	46bd      	mov	sp, r7
 8002146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214a:	4770      	bx	lr
 800214c:	20004dd4 	.word	0x20004dd4
 8002150:	2000508c 	.word	0x2000508c

08002154 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 800215c:	4b41      	ldr	r3, [pc, #260]	; (8002264 <analog_sample+0x110>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d112      	bne.n	800218a <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800216a:	461a      	mov	r2, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8002176:	461a      	mov	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 8002182:	461a      	mov	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	e011      	b.n	80021ae <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f8b3 32fc 	ldrh.w	r3, [r3, #764]	; 0x2fc
 8002190:	461a      	mov	r2, r3
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800219c:	461a      	mov	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80021a8:	461a      	mov	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	60da      	str	r2, [r3, #12]
	}

    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80021b4:	2202      	movs	r2, #2
 80021b6:	4619      	mov	r1, r3
 80021b8:	482b      	ldr	r0, [pc, #172]	; (8002268 <analog_sample+0x114>)
 80021ba:	f003 fe49 	bl	8005e50 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f503 733f 	add.w	r3, r3, #764	; 0x2fc
 80021c4:	2202      	movs	r2, #2
 80021c6:	4619      	mov	r1, r3
 80021c8:	4828      	ldr	r0, [pc, #160]	; (800226c <analog_sample+0x118>)
 80021ca:	f003 fe41 	bl	8005e50 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 80021d4:	461a      	mov	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021e6:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002270 <analog_sample+0x11c>
 80021ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	ee07 3a90 	vmov	s15, r3
 8002204:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002208:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002274 <analog_sample+0x120>
 800220c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	689a      	ldr	r2, [r3, #8]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	ee07 3a90 	vmov	s15, r3
 8002226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800222a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002274 <analog_sample+0x120>
 800222e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	ee07 3a90 	vmov	s15, r3
 8002248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800224c:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002274 <analog_sample+0x120>
 8002250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800225a:	bf00      	nop
 800225c:	3708      	adds	r7, #8
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20004dd4 	.word	0x20004dd4
 8002268:	2000021c 	.word	0x2000021c
 800226c:	20000288 	.word	0x20000288
 8002270:	3c092822 	.word	0x3c092822
 8002274:	bcf0aa87 	.word	0xbcf0aa87

08002278 <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 8002278:	b580      	push	{r7, lr}
 800227a:	b088      	sub	sp, #32
 800227c:	af00      	add	r7, sp, #0
 800227e:	ed87 0a05 	vstr	s0, [r7, #20]
 8002282:	edc7 0a04 	vstr	s1, [r7, #16]
 8002286:	ed87 1a03 	vstr	s2, [r7, #12]
 800228a:	60b8      	str	r0, [r7, #8]
 800228c:	6079      	str	r1, [r7, #4]
 800228e:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 8002290:	ed97 0a05 	vldr	s0, [r7, #20]
 8002294:	f002 fa9a 	bl	80047cc <cos_lut>
 8002298:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 800229c:	ed97 0a05 	vldr	s0, [r7, #20]
 80022a0:	f002 fa5a 	bl	8004758 <sin_lut>
 80022a4:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80022a8:	ed97 7a07 	vldr	s14, [r7, #28]
 80022ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80022b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022b4:	edd7 6a06 	vldr	s13, [r7, #24]
 80022b8:	edd7 7a03 	vldr	s15, [r7, #12]
 80022bc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80022ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80022ce:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002378 <abc+0x100>
 80022d2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022d6:	edd7 7a07 	vldr	s15, [r7, #28]
 80022da:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80022de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022e2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80022f2:	eddf 6a22 	vldr	s13, [pc, #136]	; 800237c <abc+0x104>
 80022f6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80022fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80022fe:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002302:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002306:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800230a:	edd7 7a03 	vldr	s15, [r7, #12]
 800230e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 800231c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002320:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800237c <abc+0x104>
 8002324:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002328:	edd7 7a07 	vldr	s15, [r7, #28]
 800232c:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002330:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002334:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002338:	edd7 7a04 	vldr	s15, [r7, #16]
 800233c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002340:	edd7 7a07 	vldr	s15, [r7, #28]
 8002344:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002378 <abc+0x100>
 8002348:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800234c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002350:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002354:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002358:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800235c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002360:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	edc3 7a00 	vstr	s15, [r3]
    }
 800236e:	bf00      	nop
 8002370:	3720      	adds	r7, #32
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
 8002376:	bf00      	nop
 8002378:	3f5db3d7 	.word	0x3f5db3d7
 800237c:	bf5db3d7 	.word	0xbf5db3d7

08002380 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	ed87 0a05 	vstr	s0, [r7, #20]
 800238a:	edc7 0a04 	vstr	s1, [r7, #16]
 800238e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002392:	edc7 1a02 	vstr	s3, [r7, #8]
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 800239a:	ed97 0a05 	vldr	s0, [r7, #20]
 800239e:	f002 fa15 	bl	80047cc <cos_lut>
 80023a2:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80023a6:	ed97 0a05 	vldr	s0, [r7, #20]
 80023aa:	f002 f9d5 	bl	8004758 <sin_lut>
 80023ae:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80023b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80023b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80023ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023be:	edd7 7a06 	vldr	s15, [r7, #24]
 80023c2:	eddf 6a34 	vldr	s13, [pc, #208]	; 8002494 <dq0+0x114>
 80023c6:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023ca:	edd7 7a07 	vldr	s15, [r7, #28]
 80023ce:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023d2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023d6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80023da:	edd7 7a03 	vldr	s15, [r7, #12]
 80023de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80023e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80023ea:	eddf 6a2b 	vldr	s13, [pc, #172]	; 8002498 <dq0+0x118>
 80023ee:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80023f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80023f6:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80023fa:	ee67 7a86 	vmul.f32	s15, s15, s12
 80023fe:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002402:	edd7 7a02 	vldr	s15, [r7, #8]
 8002406:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800240a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800249c <dq0+0x11c>
 8002412:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 800241c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002420:	eeb1 7a67 	vneg.f32	s14, s15
 8002424:	edd7 7a04 	vldr	s15, [r7, #16]
 8002428:	ee27 7a27 	vmul.f32	s14, s14, s15
 800242c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002430:	eddf 6a19 	vldr	s13, [pc, #100]	; 8002498 <dq0+0x118>
 8002434:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002438:	edd7 7a06 	vldr	s15, [r7, #24]
 800243c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002440:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002444:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002448:	edd7 7a03 	vldr	s15, [r7, #12]
 800244c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002450:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002454:	edd7 7a07 	vldr	s15, [r7, #28]
 8002458:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8002494 <dq0+0x114>
 800245c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002460:	edd7 7a06 	vldr	s15, [r7, #24]
 8002464:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002468:	ee67 7a86 	vmul.f32	s15, s15, s12
 800246c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002470:	edd7 7a02 	vldr	s15, [r7, #8]
 8002474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002478:	ee77 7a67 	vsub.f32	s15, s14, s15
 800247c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 800249c <dq0+0x11c>
 8002480:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	edc3 7a00 	vstr	s15, [r3]

    }
 800248a:	bf00      	nop
 800248c:	3720      	adds	r7, #32
 800248e:	46bd      	mov	sp, r7
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	3f5db3d7 	.word	0x3f5db3d7
 8002498:	bf5db3d7 	.word	0xbf5db3d7
 800249c:	3f2aaaab 	.word	0x3f2aaaab

080024a0 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80024a0:	b580      	push	{r7, lr}
 80024a2:	ed2d 8b02 	vpush	{d8}
 80024a6:	b08a      	sub	sp, #40	; 0x28
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	ed87 0a07 	vstr	s0, [r7, #28]
 80024ae:	edc7 0a06 	vstr	s1, [r7, #24]
 80024b2:	ed87 1a05 	vstr	s2, [r7, #20]
 80024b6:	edc7 1a04 	vstr	s3, [r7, #16]
 80024ba:	60f8      	str	r0, [r7, #12]
 80024bc:	60b9      	str	r1, [r7, #8]
 80024be:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80024c0:	ed97 1a04 	vldr	s2, [r7, #16]
 80024c4:	edd7 0a05 	vldr	s1, [r7, #20]
 80024c8:	ed97 0a06 	vldr	s0, [r7, #24]
 80024cc:	f002 f8c6 	bl	800465c <fminf3>
 80024d0:	eeb0 8a40 	vmov.f32	s16, s0
 80024d4:	ed97 1a04 	vldr	s2, [r7, #16]
 80024d8:	edd7 0a05 	vldr	s1, [r7, #20]
 80024dc:	ed97 0a06 	vldr	s0, [r7, #24]
 80024e0:	f002 f888 	bl	80045f4 <fmaxf3>
 80024e4:	eef0 7a40 	vmov.f32	s15, s0
 80024e8:	ee78 7a27 	vadd.f32	s15, s16, s15
 80024ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80024f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024f4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 80024f8:	4b41      	ldr	r3, [pc, #260]	; (8002600 <svm+0x160>)
 80024fa:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80024fc:	ed97 7a06 	vldr	s14, [r7, #24]
 8002500:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002504:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002508:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800250c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002510:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002604 <svm+0x164>
 8002514:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002518:	edd7 7a07 	vldr	s15, [r7, #28]
 800251c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002520:	edd7 7a08 	vldr	s15, [r7, #32]
 8002524:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002528:	eddf 0a37 	vldr	s1, [pc, #220]	; 8002608 <svm+0x168>
 800252c:	eeb0 0a67 	vmov.f32	s0, s15
 8002530:	f002 f828 	bl	8004584 <fast_fmaxf>
 8002534:	eef0 7a40 	vmov.f32	s15, s0
 8002538:	eddf 0a34 	vldr	s1, [pc, #208]	; 800260c <svm+0x16c>
 800253c:	eeb0 0a67 	vmov.f32	s0, s15
 8002540:	f002 f83c 	bl	80045bc <fast_fminf>
 8002544:	eef0 7a40 	vmov.f32	s15, s0
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 800254e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002552:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800255a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800255e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002562:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002604 <svm+0x164>
 8002566:	ee67 6a87 	vmul.f32	s13, s15, s14
 800256a:	edd7 7a07 	vldr	s15, [r7, #28]
 800256e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002572:	edd7 7a08 	vldr	s15, [r7, #32]
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	eddf 0a23 	vldr	s1, [pc, #140]	; 8002608 <svm+0x168>
 800257e:	eeb0 0a67 	vmov.f32	s0, s15
 8002582:	f001 ffff 	bl	8004584 <fast_fmaxf>
 8002586:	eef0 7a40 	vmov.f32	s15, s0
 800258a:	eddf 0a20 	vldr	s1, [pc, #128]	; 800260c <svm+0x16c>
 800258e:	eeb0 0a67 	vmov.f32	s0, s15
 8002592:	f002 f813 	bl	80045bc <fast_fminf>
 8002596:	eef0 7a40 	vmov.f32	s15, s0
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80025a0:	ed97 7a04 	vldr	s14, [r7, #16]
 80025a4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80025a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025ac:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025b4:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002604 <svm+0x164>
 80025b8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80025bc:	edd7 7a07 	vldr	s15, [r7, #28]
 80025c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025c4:	edd7 7a08 	vldr	s15, [r7, #32]
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025cc:	eddf 0a0e 	vldr	s1, [pc, #56]	; 8002608 <svm+0x168>
 80025d0:	eeb0 0a67 	vmov.f32	s0, s15
 80025d4:	f001 ffd6 	bl	8004584 <fast_fmaxf>
 80025d8:	eef0 7a40 	vmov.f32	s15, s0
 80025dc:	eddf 0a0b 	vldr	s1, [pc, #44]	; 800260c <svm+0x16c>
 80025e0:	eeb0 0a67 	vmov.f32	s0, s15
 80025e4:	f001 ffea 	bl	80045bc <fast_fminf>
 80025e8:	eef0 7a40 	vmov.f32	s15, s0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	edc3 7a00 	vstr	s15, [r3]

    }
 80025f2:	bf00      	nop
 80025f4:	3728      	adds	r7, #40	; 0x28
 80025f6:	46bd      	mov	sp, r7
 80025f8:	ecbd 8b02 	vpop	{d8}
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	3ef0a3d7 	.word	0x3ef0a3d7
 8002604:	3f933333 	.word	0x3f933333
 8002608:	00000000 	.word	0x00000000
 800260c:	3f70a3d7 	.word	0x3f70a3d7

08002610 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002610:	b580      	push	{r7, lr}
 8002612:	b088      	sub	sp, #32
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 800261c:	2300      	movs	r3, #0
 800261e:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]
    int n = 1000;
 8002624:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002628:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	f04f 0200 	mov.w	r2, #0
 8002630:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f04f 0200 	mov.w	r2, #0
 8002638:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff fcfe 	bl	8002044 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 8002648:	2300      	movs	r3, #0
 800264a:	613b      	str	r3, [r7, #16]
 800264c:	e014      	b.n	8002678 <zero_current+0x68>
    	analog_sample(controller);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f7ff fd80 	bl	8002154 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	69fa      	ldr	r2, [r7, #28]
 800265a:	4413      	add	r3, r2
 800265c:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	69ba      	ldr	r2, [r7, #24]
 8002664:	4413      	add	r3, r2
 8002666:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	68db      	ldr	r3, [r3, #12]
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4413      	add	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	3301      	adds	r3, #1
 8002676:	613b      	str	r3, [r7, #16]
 8002678:	693a      	ldr	r2, [r7, #16]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	dbe6      	blt.n	800264e <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 8002680:	69fa      	ldr	r2, [r7, #28]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	fb92 f2f3 	sdiv	r2, r2, r3
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 800268e:	69ba      	ldr	r2, [r7, #24]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	fb92 f2f3 	sdiv	r2, r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	fb92 f2f3 	sdiv	r2, r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 80026aa:	bf00      	nop
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
	...

080026b4 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	4a42      	ldr	r2, [pc, #264]	; (80027c8 <init_controller_params+0x114>)
 80026c0:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a40      	ldr	r2, [pc, #256]	; (80027c8 <init_controller_params+0x114>)
 80026c6:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 80026c8:	4b40      	ldr	r3, [pc, #256]	; (80027cc <init_controller_params+0x118>)
 80026ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80026ce:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80027d0 <init_controller_params+0x11c>
 80026d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 80026dc:	4b3b      	ldr	r3, [pc, #236]	; (80027cc <init_controller_params+0x118>)
 80026de:	edd3 7a02 	vldr	s15, [r3, #8]
 80026e2:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 80027d0 <init_controller_params+0x11c>
 80026e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 80026f0:	4b36      	ldr	r3, [pc, #216]	; (80027cc <init_controller_params+0x118>)
 80026f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80026f6:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80027d4 <init_controller_params+0x120>
 80026fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026fe:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80027d8 <init_controller_params+0x124>
 8002702:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002706:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800270a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800270e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002712:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002716:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800271a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 800272a:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80027dc <init_controller_params+0x128>
 800272e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002738:	4b29      	ldr	r3, [pc, #164]	; (80027e0 <init_controller_params+0x12c>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002742:	2300      	movs	r3, #0
 8002744:	60fb      	str	r3, [r7, #12]
 8002746:	e036      	b.n	80027b6 <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	ee07 3a90 	vmov	s15, r3
 800274e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002752:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80027e4 <init_controller_params+0x130>
 8002756:	ee67 7a87 	vmul.f32	s15, s15, s14
 800275a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027e8 <init_controller_params+0x134>
 800275e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002762:	ee16 0a90 	vmov	r0, s13
 8002766:	f7fd ff17 	bl	8000598 <__aeabi_f2d>
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	ec43 2b10 	vmov	d0, r2, r3
 8002772:	f00f ff91 	bl	8012698 <exp>
 8002776:	ec51 0b10 	vmov	r0, r1, d0
 800277a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800277e:	4b1b      	ldr	r3, [pc, #108]	; (80027ec <init_controller_params+0x138>)
 8002780:	f7fd ff62 	bl	8000648 <__aeabi_dmul>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4610      	mov	r0, r2
 800278a:	4619      	mov	r1, r3
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	4b17      	ldr	r3, [pc, #92]	; (80027f0 <init_controller_params+0x13c>)
 8002792:	f7fd fda3 	bl	80002dc <__adddf3>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	f7fe fa4b 	bl	8000c38 <__aeabi_d2f>
 80027a2:	4601      	mov	r1, r0
 80027a4:	687a      	ldr	r2, [r7, #4]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	333c      	adds	r3, #60	; 0x3c
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2b7f      	cmp	r3, #127	; 0x7f
 80027ba:	ddc5      	ble.n	8002748 <init_controller_params+0x94>
    }
}
 80027bc:	bf00      	nop
 80027be:	bf00      	nop
 80027c0:	3710      	adds	r7, #16
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	3d3851ec 	.word	0x3d3851ec
 80027cc:	20004cd4 	.word	0x20004cd4
 80027d0:	38d1b717 	.word	0x38d1b717
 80027d4:	3851b717 	.word	0x3851b717
 80027d8:	40c90fdb 	.word	0x40c90fdb
 80027dc:	3dcccccd 	.word	0x3dcccccd
 80027e0:	20004dd4 	.word	0x20004dd4
 80027e4:	bc000000 	.word	0xbc000000
 80027e8:	3d03126f 	.word	0x3d03126f
 80027ec:	3ff33333 	.word	0x3ff33333
 80027f0:	3ff00000 	.word	0x3ff00000

080027f4 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 80027f4:	b480      	push	{r7}
 80027f6:	b083      	sub	sp, #12
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 80027fc:	4b36      	ldr	r3, [pc, #216]	; (80028d8 <reset_foc+0xe4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002802:	ee07 3a90 	vmov	s15, r3
 8002806:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800280a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800280e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002812:	4b31      	ldr	r3, [pc, #196]	; (80028d8 <reset_foc+0xe4>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800281a:	ee17 2a90 	vmov	r2, s15
 800281e:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002820:	4b2d      	ldr	r3, [pc, #180]	; (80028d8 <reset_foc+0xe4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002826:	ee07 3a90 	vmov	s15, r3
 800282a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800282e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002832:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002836:	4b28      	ldr	r3, [pc, #160]	; (80028d8 <reset_foc+0xe4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800283e:	ee17 2a90 	vmov	r2, s15
 8002842:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002844:	4b24      	ldr	r3, [pc, #144]	; (80028d8 <reset_foc+0xe4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	ee07 3a90 	vmov	s15, r3
 800284e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002852:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800285a:	4b1f      	ldr	r3, [pc, #124]	; (80028d8 <reset_foc+0xe4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002862:	ee17 2a90 	vmov	r2, s15
 8002866:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f04f 0200 	mov.w	r2, #0
 8002892:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	f04f 0200 	mov.w	r2, #0
 80028a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f04f 0200 	mov.w	r2, #0
 80028b6:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 80028ca:	bf00      	nop
 80028cc:	370c      	adds	r7, #12
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	2000508c 	.word	0x2000508c

080028dc <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	edd3 6a18 	vldr	s13, [r3, #96]	; 0x60
 80028fc:	4bd7      	ldr	r3, [pc, #860]	; (8002c5c <commutate+0x380>)
 80028fe:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	edd3 6a03 	vldr	s13, [r3, #12]
 8002912:	4bd2      	ldr	r3, [pc, #840]	; (8002c5c <commutate+0x380>)
 8002914:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002918:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	ed93 7a05 	vldr	s14, [r3, #20]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	edd3 6a06 	vldr	s13, [r3, #24]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	ed93 6a07 	vldr	s12, [r3, #28]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	3340      	adds	r3, #64	; 0x40
 8002944:	4619      	mov	r1, r3
 8002946:	4610      	mov	r0, r2
 8002948:	eef0 1a46 	vmov.f32	s3, s12
 800294c:	eeb0 1a66 	vmov.f32	s2, s13
 8002950:	eef0 0a47 	vmov.f32	s1, s14
 8002954:	eeb0 0a67 	vmov.f32	s0, s15
 8002958:	f7ff fd12 	bl	8002380 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002962:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002c60 <commutate+0x384>
 8002966:	ee27 7a87 	vmul.f32	s14, s15, s14
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002970:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002c64 <commutate+0x388>
 8002974:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002978:	ee77 7a27 	vadd.f32	s15, s14, s15
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002988:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002c60 <commutate+0x384>
 800298c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002996:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002c64 <commutate+0x388>
 800299a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800299e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029ae:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002c68 <commutate+0x38c>
 80029b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	edd3 7a08 	vldr	s15, [r3, #32]
 80029bc:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002c6c <commutate+0x390>
 80029c0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80029c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80029d4:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002c70 <commutate+0x394>
 80029d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029dc:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002c74 <commutate+0x398>
 80029e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029e4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002c78 <commutate+0x39c>
 80029e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 80029f2:	4b9a      	ldr	r3, [pc, #616]	; (8002c5c <commutate+0x380>)
 80029f4:	68da      	ldr	r2, [r3, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002a0e:	eeb0 0a67 	vmov.f32	s0, s15
 8002a12:	4610      	mov	r0, r2
 8002a14:	f001 fe56 	bl	80046c4 <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002a24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a28:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002a38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a3c:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002a46:	f04f 0300 	mov.w	r3, #0
 8002a4a:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002a52:	edd7 7a07 	vldr	s15, [r7, #28]
 8002a56:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002a60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a64:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002a7e:	eef0 0a47 	vmov.f32	s1, s14
 8002a82:	eeb0 0a67 	vmov.f32	s0, s15
 8002a86:	f001 fd99 	bl	80045bc <fast_fminf>
 8002a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002a94:	eef1 7a67 	vneg.f32	s15, s15
 8002a98:	eef0 0a67 	vmov.f32	s1, s15
 8002a9c:	eeb0 0a47 	vmov.f32	s0, s14
 8002aa0:	f001 fd70 	bl	8004584 <fast_fmaxf>
 8002aa4:	eef0 7a40 	vmov.f32	s15, s0
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002ac0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ac4:	edd7 7a07 	vldr	s15, [r7, #28]
 8002ac8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002ae2:	eef0 0a47 	vmov.f32	s1, s14
 8002ae6:	eeb0 0a67 	vmov.f32	s0, s15
 8002aea:	f001 fd67 	bl	80045bc <fast_fminf>
 8002aee:	eeb0 7a40 	vmov.f32	s14, s0
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002af8:	eef1 7a67 	vneg.f32	s15, s15
 8002afc:	eef0 0a67 	vmov.f32	s1, s15
 8002b00:	eeb0 0a47 	vmov.f32	s0, s14
 8002b04:	f001 fd3e 	bl	8004584 <fast_fmaxf>
 8002b08:	eef0 7a40 	vmov.f32	s15, s0
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002b2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b36:	eeb0 0a67 	vmov.f32	s0, s15
 8002b3a:	f00f fe15 	bl	8012768 <sqrtf>
 8002b3e:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002b48:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002b56:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8002b5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002b7a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002b7e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002b9c:	eef0 0a47 	vmov.f32	s1, s14
 8002ba0:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba4:	f001 fd0a 	bl	80045bc <fast_fminf>
 8002ba8:	eeb0 7a40 	vmov.f32	s14, s0
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002bb2:	eef1 7a67 	vneg.f32	s15, s15
 8002bb6:	eef0 0a67 	vmov.f32	s1, s15
 8002bba:	eeb0 0a47 	vmov.f32	s0, s14
 8002bbe:	f001 fce1 	bl	8004584 <fast_fmaxf>
 8002bc2:	eef0 7a40 	vmov.f32	s15, s0
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002bd8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002be8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bf0:	eeb0 0a67 	vmov.f32	s0, s15
 8002bf4:	f00f fdb8 	bl	8012768 <sqrtf>
 8002bf8:	eef0 7a40 	vmov.f32	s15, s0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002c08:	edd7 0a03 	vldr	s1, [r7, #12]
 8002c0c:	eeb0 0a67 	vmov.f32	s0, s15
 8002c10:	f001 fcd4 	bl	80045bc <fast_fminf>
 8002c14:	eeb0 7a40 	vmov.f32	s14, s0
 8002c18:	edd7 7a03 	vldr	s15, [r7, #12]
 8002c1c:	eef1 7a67 	vneg.f32	s15, s15
 8002c20:	eef0 0a67 	vmov.f32	s1, s15
 8002c24:	eeb0 0a47 	vmov.f32	s0, s14
 8002c28:	f001 fcac 	bl	8004584 <fast_fmaxf>
 8002c2c:	eef0 7a40 	vmov.f32	s15, s0
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002c48:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4c:	4610      	mov	r0, r2
 8002c4e:	f001 fd39 	bl	80046c4 <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	e011      	b.n	8002c80 <commutate+0x3a4>
 8002c5c:	20004cd4 	.word	0x20004cd4
 8002c60:	3f7d70a4 	.word	0x3f7d70a4
 8002c64:	3c23d70a 	.word	0x3c23d70a
 8002c68:	3f666666 	.word	0x3f666666
 8002c6c:	3dcccccd 	.word	0x3dcccccd
 8002c70:	3f933333 	.word	0x3f933333
 8002c74:	3f70a3d7 	.word	0x3f70a3d7
 8002c78:	3f13cd3a 	.word	0x3f13cd3a
 8002c7c:	389d4951 	.word	0x389d4951
 8002c80:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002c84:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002c7c <commutate+0x3a0>
 8002c88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	336c      	adds	r3, #108	; 0x6c
 8002cac:	461a      	mov	r2, r3
 8002cae:	eeb0 1a66 	vmov.f32	s2, s13
 8002cb2:	eef0 0a47 	vmov.f32	s1, s14
 8002cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8002cba:	f7ff fadd 	bl	8002278 <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	3360      	adds	r3, #96	; 0x60
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	eef0 1a46 	vmov.f32	s3, s12
 8002cec:	eeb0 1a66 	vmov.f32	s2, s13
 8002cf0:	eef0 0a47 	vmov.f32	s1, s14
 8002cf4:	eeb0 0a67 	vmov.f32	s0, s15
 8002cf8:	f7ff fbd2 	bl	80024a0 <svm>
       set_dtc(controller);
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	f7ff f9a1 	bl	8002044 <set_dtc>

    }
 8002d02:	bf00      	nop
 8002d04:	3720      	adds	r7, #32
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop

08002d0c <torque_control>:
void torque_control(ControllerStruct *controller){
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8002d26:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002d2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8002d34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002d4a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002d4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002d52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d56:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	; (8002d90 <torque_control+0x84>)
 8002d5c:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002d60:	4b0b      	ldr	r3, [pc, #44]	; (8002d90 <torque_control+0x84>)
 8002d62:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002d66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d6a:	edd7 6a03 	vldr	s13, [r7, #12]
 8002d6e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f04f 0200 	mov.w	r2, #0
 8002d7e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	20004cd4 	.word	0x20004cd4

08002d94 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f04f 0200 	mov.w	r2, #0
 8002da2:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f04f 0200 	mov.w	r2, #0
 8002dac:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f04f 0200 	mov.w	r2, #0
 8002db6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	f04f 0200 	mov.w	r2, #0
 8002dca:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr

08002de4 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 8002de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af02      	add	r7, sp, #8
 8002dea:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	785a      	ldrb	r2, [r3, #1]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	d00d      	beq.n	8002e14 <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 f925 	bl	8003048 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	78db      	ldrb	r3, [r3, #3]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	785a      	ldrb	r2, [r3, #1]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f8c0 	bl	8002f94 <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b06      	cmp	r3, #6
 8002e1a:	f200 80a9 	bhi.w	8002f70 <run_fsm+0x18c>
 8002e1e:	a201      	add	r2, pc, #4	; (adr r2, 8002e24 <run_fsm+0x40>)
 8002e20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e24:	08002f6f 	.word	0x08002f6f
 8002e28:	08002e41 	.word	0x08002e41
 8002e2c:	08002f29 	.word	0x08002f29
 8002e30:	08002f71 	.word	0x08002f71
 8002e34:	08002f6f 	.word	0x08002f6f
 8002e38:	08002f65 	.word	0x08002f65
 8002e3c:	08002f6f 	.word	0x08002f6f
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8002e40:	4b4d      	ldr	r3, [pc, #308]	; (8002f78 <run_fsm+0x194>)
 8002e42:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d108      	bne.n	8002e5c <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002e4a:	4b4c      	ldr	r3, [pc, #304]	; (8002f7c <run_fsm+0x198>)
 8002e4c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e50:	4a49      	ldr	r2, [pc, #292]	; (8002f78 <run_fsm+0x194>)
 8002e52:	494a      	ldr	r1, [pc, #296]	; (8002f7c <run_fsm+0x198>)
 8002e54:	484a      	ldr	r0, [pc, #296]	; (8002f80 <run_fsm+0x19c>)
 8002e56:	f7fe fab7 	bl	80013c8 <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 8002e5a:	e089      	b.n	8002f70 <run_fsm+0x18c>
			 else if(!comm_encoder_cal.done_cal){
 8002e5c:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <run_fsm+0x194>)
 8002e5e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d108      	bne.n	8002e78 <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 8002e66:	4b45      	ldr	r3, [pc, #276]	; (8002f7c <run_fsm+0x198>)
 8002e68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002e6c:	4a42      	ldr	r2, [pc, #264]	; (8002f78 <run_fsm+0x194>)
 8002e6e:	4943      	ldr	r1, [pc, #268]	; (8002f7c <run_fsm+0x198>)
 8002e70:	4843      	ldr	r0, [pc, #268]	; (8002f80 <run_fsm+0x19c>)
 8002e72:	f7fe fbbf 	bl	80015f4 <calibrate_encoder>
			 break;
 8002e76:	e07b      	b.n	8002f70 <run_fsm+0x18c>
				 E_ZERO = comm_encoder_cal.ezero;
 8002e78:	4b3f      	ldr	r3, [pc, #252]	; (8002f78 <run_fsm+0x194>)
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	4a41      	ldr	r2, [pc, #260]	; (8002f84 <run_fsm+0x1a0>)
 8002e7e:	6153      	str	r3, [r2, #20]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, comm_encoder.ppairs, TWO_PI_F*fmodf((comm_encoder.ppairs*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 8002e80:	4b40      	ldr	r3, [pc, #256]	; (8002f84 <run_fsm+0x1a0>)
 8002e82:	695e      	ldr	r6, [r3, #20]
 8002e84:	4b3e      	ldr	r3, [pc, #248]	; (8002f80 <run_fsm+0x19c>)
 8002e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7fd fb85 	bl	8000598 <__aeabi_f2d>
 8002e8e:	4604      	mov	r4, r0
 8002e90:	460d      	mov	r5, r1
 8002e92:	4b3b      	ldr	r3, [pc, #236]	; (8002f80 <run_fsm+0x19c>)
 8002e94:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002e98:	4b3a      	ldr	r3, [pc, #232]	; (8002f84 <run_fsm+0x1a0>)
 8002e9a:	695b      	ldr	r3, [r3, #20]
 8002e9c:	425b      	negs	r3, r3
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eaa:	eddf 6a37 	vldr	s13, [pc, #220]	; 8002f88 <run_fsm+0x1a4>
 8002eae:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002eb2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002eb6:	eeb0 0a47 	vmov.f32	s0, s14
 8002eba:	f00f fc35 	bl	8012728 <fmodf>
 8002ebe:	eef0 7a40 	vmov.f32	s15, s0
 8002ec2:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002f8c <run_fsm+0x1a8>
 8002ec6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eca:	ee17 0a90 	vmov	r0, s15
 8002ece:	f7fd fb63 	bl	8000598 <__aeabi_f2d>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	e9cd 2300 	strd	r2, r3, [sp]
 8002eda:	4622      	mov	r2, r4
 8002edc:	462b      	mov	r3, r5
 8002ede:	4631      	mov	r1, r6
 8002ee0:	482b      	ldr	r0, [pc, #172]	; (8002f90 <run_fsm+0x1ac>)
 8002ee2:	f00b fe91 	bl	800ec08 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 8002ee6:	4b26      	ldr	r3, [pc, #152]	; (8002f80 <run_fsm+0x19c>)
 8002ee8:	4a23      	ldr	r2, [pc, #140]	; (8002f78 <run_fsm+0x194>)
 8002eea:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002eee:	33dc      	adds	r3, #220	; 0xdc
 8002ef0:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002ef4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f00b fa05 	bl	800e308 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8002efe:	4b21      	ldr	r3, [pc, #132]	; (8002f84 <run_fsm+0x1a0>)
 8002f00:	4a1d      	ldr	r2, [pc, #116]	; (8002f78 <run_fsm+0x194>)
 8002f02:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8002f06:	331c      	adds	r3, #28
 8002f08:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8002f0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f10:	4618      	mov	r0, r3
 8002f12:	f00b f9f9 	bl	800e308 <memcpy>
				 store_eeprom_regs();
 8002f16:	f002 fb1b 	bl	8005550 <store_eeprom_regs>
				 load_eeprom_regs();
 8002f1a:	f002 fb27 	bl	800556c <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 8002f1e:	211b      	movs	r1, #27
 8002f20:	6878      	ldr	r0, [r7, #4]
 8002f22:	f000 f8d7 	bl	80030d4 <update_fsm>
			 break;
 8002f26:	e023      	b.n	8002f70 <run_fsm+0x18c>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 8002f28:	4b16      	ldr	r3, [pc, #88]	; (8002f84 <run_fsm+0x1a0>)
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	dd0a      	ble.n	8002f46 <run_fsm+0x162>
 8002f30:	4b12      	ldr	r3, [pc, #72]	; (8002f7c <run_fsm+0x198>)
 8002f32:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8002f36:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <run_fsm+0x1a0>)
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	429a      	cmp	r2, r3
 8002f3c:	dd03      	ble.n	8002f46 <run_fsm+0x162>
				 zero_commands(&controller);
 8002f3e:	480f      	ldr	r0, [pc, #60]	; (8002f7c <run_fsm+0x198>)
 8002f40:	f7ff ff28 	bl	8002d94 <zero_commands>
 8002f44:	e002      	b.n	8002f4c <run_fsm+0x168>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 8002f46:	480d      	ldr	r0, [pc, #52]	; (8002f7c <run_fsm+0x198>)
 8002f48:	f7ff fee0 	bl	8002d0c <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 8002f4c:	490c      	ldr	r1, [pc, #48]	; (8002f80 <run_fsm+0x19c>)
 8002f4e:	480b      	ldr	r0, [pc, #44]	; (8002f7c <run_fsm+0x198>)
 8002f50:	f7ff fcc4 	bl	80028dc <commutate>
			 controller.timeout ++;
 8002f54:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <run_fsm+0x198>)
 8002f56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f5a:	3301      	adds	r3, #1
 8002f5c:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <run_fsm+0x198>)
 8002f5e:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8002f62:	e005      	b.n	8002f70 <run_fsm+0x18c>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8002f64:	2164      	movs	r1, #100	; 0x64
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <run_fsm+0x19c>)
 8002f68:	f001 fede 	bl	8004d28 <ps_print>
			 break;
 8002f6c:	e000      	b.n	8002f70 <run_fsm+0x18c>
			 break;
 8002f6e:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8002f70:	bf00      	nop
 8002f72:	370c      	adds	r7, #12
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f78:	200009bc 	.word	0x200009bc
 8002f7c:	200004c8 	.word	0x200004c8
 8002f80:	200007d8 	.word	0x200007d8
 8002f84:	20004dd4 	.word	0x20004dd4
 8002f88:	45800000 	.word	0x45800000
 8002f8c:	40c90fdb 	.word	0x40c90fdb
 8002f90:	08012d10 	.word	0x08012d10

08002f94 <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d841      	bhi.n	8003028 <fsm_enter_state+0x94>
 8002fa4:	a201      	add	r2, pc, #4	; (adr r2, 8002fac <fsm_enter_state+0x18>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08002fc5 	.word	0x08002fc5
 8002fb0:	08002fe9 	.word	0x08002fe9
 8002fb4:	08002fd1 	.word	0x08002fd1
 8002fb8:	08003029 	.word	0x08003029
 8002fbc:	08002fcb 	.word	0x08002fcb
 8002fc0:	08003027 	.word	0x08003027
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 8002fc4:	f000 f950 	bl	8003268 <enter_menu_state>
				break;
 8002fc8:	e02e      	b.n	8003028 <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 8002fca:	f000 f979 	bl	80032c0 <enter_setup_state>
				break;
 8002fce:	e02b      	b.n	8003028 <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	2140      	movs	r1, #64	; 0x40
 8002fd4:	4816      	ldr	r0, [pc, #88]	; (8003030 <fsm_enter_state+0x9c>)
 8002fd6:	f005 f95f 	bl	8008298 <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8002fda:	4816      	ldr	r0, [pc, #88]	; (8003034 <fsm_enter_state+0xa0>)
 8002fdc:	f7ff fc0a 	bl	80027f4 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 8002fe0:	4814      	ldr	r0, [pc, #80]	; (8003034 <fsm_enter_state+0xa0>)
 8002fe2:	f000 fda1 	bl	8003b28 <enable_gd>

				break;
 8002fe6:	e01f      	b.n	8003028 <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8002fe8:	4b13      	ldr	r3, [pc, #76]	; (8003038 <fsm_enter_state+0xa4>)
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8002ff0:	4b11      	ldr	r3, [pc, #68]	; (8003038 <fsm_enter_state+0xa4>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8002ff8:	4b0f      	ldr	r3, [pc, #60]	; (8003038 <fsm_enter_state+0xa4>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8002ffe:	4b0f      	ldr	r3, [pc, #60]	; (800303c <fsm_enter_state+0xa8>)
 8003000:	2200      	movs	r2, #0
 8003002:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 8003006:	f44f 7280 	mov.w	r2, #256	; 0x100
 800300a:	2100      	movs	r1, #0
 800300c:	480c      	ldr	r0, [pc, #48]	; (8003040 <fsm_enter_state+0xac>)
 800300e:	f00b f989 	bl	800e324 <memset>
				PHASE_ORDER = 0;
 8003012:	4b0c      	ldr	r3, [pc, #48]	; (8003044 <fsm_enter_state+0xb0>)
 8003014:	2200      	movs	r2, #0
 8003016:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 8003018:	4806      	ldr	r0, [pc, #24]	; (8003034 <fsm_enter_state+0xa0>)
 800301a:	f7ff faf9 	bl	8002610 <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 800301e:	4805      	ldr	r0, [pc, #20]	; (8003034 <fsm_enter_state+0xa0>)
 8003020:	f000 fd82 	bl	8003b28 <enable_gd>
				break;
 8003024:	e000      	b.n	8003028 <fsm_enter_state+0x94>
				break;
 8003026:	bf00      	nop

		}
 }
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	48000800 	.word	0x48000800
 8003034:	200004c8 	.word	0x200004c8
 8003038:	200009bc 	.word	0x200009bc
 800303c:	200007d8 	.word	0x200007d8
 8003040:	200008b4 	.word	0x200008b4
 8003044:	20004dd4 	.word	0x20004dd4

08003048 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d834      	bhi.n	80030c2 <fsm_exit_state+0x7a>
 8003058:	a201      	add	r2, pc, #4	; (adr r2, 8003060 <fsm_exit_state+0x18>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003079 	.word	0x08003079
 8003064:	080030b5 	.word	0x080030b5
 8003068:	08003091 	.word	0x08003091
 800306c:	080030c3 	.word	0x080030c3
 8003070:	08003081 	.word	0x08003081
 8003074:	08003089 	.word	0x08003089
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2201      	movs	r2, #1
 800307c:	70da      	strb	r2, [r3, #3]
				break;
 800307e:	e020      	b.n	80030c2 <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2201      	movs	r2, #1
 8003084:	70da      	strb	r2, [r3, #3]
				break;
 8003086:	e01c      	b.n	80030c2 <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	70da      	strb	r2, [r3, #3]
				break;
 800308e:	e018      	b.n	80030c2 <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 8003096:	480d      	ldr	r0, [pc, #52]	; (80030cc <fsm_exit_state+0x84>)
 8003098:	f7ff fbac 	bl	80027f4 <reset_foc>
					disable_gd(&controller);
 800309c:	480b      	ldr	r0, [pc, #44]	; (80030cc <fsm_exit_state+0x84>)
 800309e:	f000 fd69 	bl	8003b74 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80030a2:	2200      	movs	r2, #0
 80030a4:	2140      	movs	r1, #64	; 0x40
 80030a6:	480a      	ldr	r0, [pc, #40]	; (80030d0 <fsm_exit_state+0x88>)
 80030a8:	f005 f8f6 	bl	8008298 <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 80030ac:	4807      	ldr	r0, [pc, #28]	; (80030cc <fsm_exit_state+0x84>)
 80030ae:	f7ff fe71 	bl	8002d94 <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 80030b2:	e006      	b.n	80030c2 <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 80030b4:	4805      	ldr	r0, [pc, #20]	; (80030cc <fsm_exit_state+0x84>)
 80030b6:	f000 fd5d 	bl	8003b74 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2201      	movs	r2, #1
 80030be:	70da      	strb	r2, [r3, #3]
				break;
 80030c0:	bf00      	nop
		}

 }
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200004c8 	.word	0x200004c8
 80030d0:	48000800 	.word	0x48000800

080030d4 <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	460b      	mov	r3, r1
 80030de:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b1b      	cmp	r3, #27
 80030e4:	d106      	bne.n	80030f4 <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	70da      	strb	r2, [r3, #3]
		return;
 80030f2:	e0ad      	b.n	8003250 <update_fsm+0x17c>
	}
	switch(fsmstate->state){
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b05      	cmp	r3, #5
 80030fa:	f200 80a9 	bhi.w	8003250 <update_fsm+0x17c>
 80030fe:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <update_fsm+0x30>)
 8003100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003104:	0800311d 	.word	0x0800311d
 8003108:	08003251 	.word	0x08003251
 800310c:	08003251 	.word	0x08003251
 8003110:	08003251 	.word	0x08003251
 8003114:	08003215 	.word	0x08003215
 8003118:	08003251 	.word	0x08003251
		case MENU_MODE:
			switch (fsm_input){
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	3b63      	subs	r3, #99	; 0x63
 8003120:	2b17      	cmp	r3, #23
 8003122:	f200 8094 	bhi.w	800324e <update_fsm+0x17a>
 8003126:	a201      	add	r2, pc, #4	; (adr r2, 800312c <update_fsm+0x58>)
 8003128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800312c:	0800318d 	.word	0x0800318d
 8003130:	0800324f 	.word	0x0800324f
 8003134:	080031a9 	.word	0x080031a9
 8003138:	0800324f 	.word	0x0800324f
 800313c:	0800324f 	.word	0x0800324f
 8003140:	0800324f 	.word	0x0800324f
 8003144:	0800324f 	.word	0x0800324f
 8003148:	0800324f 	.word	0x0800324f
 800314c:	0800324f 	.word	0x0800324f
 8003150:	0800324f 	.word	0x0800324f
 8003154:	0800319b 	.word	0x0800319b
 8003158:	0800324f 	.word	0x0800324f
 800315c:	0800324f 	.word	0x0800324f
 8003160:	0800324f 	.word	0x0800324f
 8003164:	0800324f 	.word	0x0800324f
 8003168:	0800324f 	.word	0x0800324f
 800316c:	080031b7 	.word	0x080031b7
 8003170:	0800324f 	.word	0x0800324f
 8003174:	0800324f 	.word	0x0800324f
 8003178:	0800324f 	.word	0x0800324f
 800317c:	0800324f 	.word	0x0800324f
 8003180:	0800324f 	.word	0x0800324f
 8003184:	0800324f 	.word	0x0800324f
 8003188:	080031c5 	.word	0x080031c5
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	70da      	strb	r2, [r3, #3]
					break;
 8003198:	e03b      	b.n	8003212 <update_fsm+0x13e>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2200      	movs	r2, #0
 80031a4:	70da      	strb	r2, [r3, #3]
					break;
 80031a6:	e034      	b.n	8003212 <update_fsm+0x13e>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2205      	movs	r2, #5
 80031ac:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	70da      	strb	r2, [r3, #3]
					break;
 80031b4:	e02d      	b.n	8003212 <update_fsm+0x13e>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2204      	movs	r2, #4
 80031ba:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2200      	movs	r2, #0
 80031c0:	70da      	strb	r2, [r3, #3]
					break;
 80031c2:	e026      	b.n	8003212 <update_fsm+0x13e>
				case ZERO_CMD:
					comm_encoder.m_zero = 0;
 80031c4:	4b24      	ldr	r3, [pc, #144]	; (8003258 <update_fsm+0x184>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
					comm_encoder.mech_zero = 0.0f;
 80031cc:	4b22      	ldr	r3, [pc, #136]	; (8003258 <update_fsm+0x184>)
 80031ce:	f04f 0200 	mov.w	r2, #0
 80031d2:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
					ps_sample(&comm_encoder, DT);
 80031d6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800325c <update_fsm+0x188>
 80031da:	481f      	ldr	r0, [pc, #124]	; (8003258 <update_fsm+0x184>)
 80031dc:	f001 fc34 	bl	8004a48 <ps_sample>
//					int zero_count = comm_encoder.count;
//					M_ZERO = zero_count;
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <update_fsm+0x184>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <update_fsm+0x18c>)
 80031e6:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 80031e8:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <update_fsm+0x18c>)
 80031ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ec:	4a1a      	ldr	r2, [pc, #104]	; (8003258 <update_fsm+0x184>)
 80031ee:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
					store_eeprom_regs();
 80031f2:	f002 f9ad 	bl	8005550 <store_eeprom_regs>
					load_eeprom_regs();
 80031f6:	f002 f9b9 	bl	800556c <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 80031fa:	4b17      	ldr	r3, [pc, #92]	; (8003258 <update_fsm+0x184>)
 80031fc:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9c9 	bl	8000598 <__aeabi_f2d>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4816      	ldr	r0, [pc, #88]	; (8003264 <update_fsm+0x190>)
 800320c:	f00b fcfc 	bl	800ec08 <iprintf>
					break;
 8003210:	bf00      	nop
				}
			break;
 8003212:	e01c      	b.n	800324e <update_fsm+0x17a>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	2b0d      	cmp	r3, #13
 8003218:	d103      	bne.n	8003222 <update_fsm+0x14e>
				process_user_input(fsmstate);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f9c4 	bl	80035a8 <process_user_input>
				break;
 8003220:	e016      	b.n	8003250 <update_fsm+0x17c>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	7b1b      	ldrb	r3, [r3, #12]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d103      	bne.n	8003232 <update_fsm+0x15e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	735a      	strb	r2, [r3, #13]
 8003230:	e006      	b.n	8003240 <update_fsm+0x16c>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	7b1b      	ldrb	r3, [r3, #12]
 8003236:	3b01      	subs	r3, #1
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	4413      	add	r3, r2
 800323c:	78fa      	ldrb	r2, [r7, #3]
 800323e:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	7b1b      	ldrb	r3, [r3, #12]
 8003244:	3301      	adds	r3, #1
 8003246:	b2da      	uxtb	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 800324c:	e000      	b.n	8003250 <update_fsm+0x17c>
			break;
 800324e:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
 8003256:	bf00      	nop
 8003258:	200007d8 	.word	0x200007d8
 800325c:	3851b717 	.word	0x3851b717
 8003260:	20004cd4 	.word	0x20004cd4
 8003264:	08012d2c 	.word	0x08012d2c

08003268 <enter_menu_state>:


 void enter_menu_state(void){
 8003268:	b580      	push	{r7, lr}
 800326a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 800326c:	480c      	ldr	r0, [pc, #48]	; (80032a0 <enter_menu_state+0x38>)
 800326e:	f00b fccb 	bl	800ec08 <iprintf>
	    printf(" Commands:\n\r");
 8003272:	480c      	ldr	r0, [pc, #48]	; (80032a4 <enter_menu_state+0x3c>)
 8003274:	f00b fcc8 	bl	800ec08 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003278:	480b      	ldr	r0, [pc, #44]	; (80032a8 <enter_menu_state+0x40>)
 800327a:	f00b fcc5 	bl	800ec08 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800327e:	480b      	ldr	r0, [pc, #44]	; (80032ac <enter_menu_state+0x44>)
 8003280:	f00b fcc2 	bl	800ec08 <iprintf>
	    printf(" s - Setup\n\r");
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <enter_menu_state+0x48>)
 8003286:	f00b fcbf 	bl	800ec08 <iprintf>
	    printf(" e - Display Encoder\n\r");
 800328a:	480a      	ldr	r0, [pc, #40]	; (80032b4 <enter_menu_state+0x4c>)
 800328c:	f00b fcbc 	bl	800ec08 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 8003290:	4809      	ldr	r0, [pc, #36]	; (80032b8 <enter_menu_state+0x50>)
 8003292:	f00b fcb9 	bl	800ec08 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 8003296:	4809      	ldr	r0, [pc, #36]	; (80032bc <enter_menu_state+0x54>)
 8003298:	f00b fcb6 	bl	800ec08 <iprintf>

	    //gpio.led->write(0);
 }
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	08012d54 	.word	0x08012d54
 80032a4:	08012d5c 	.word	0x08012d5c
 80032a8:	08012d6c 	.word	0x08012d6c
 80032ac:	08012d80 	.word	0x08012d80
 80032b0:	08012d9c 	.word	0x08012d9c
 80032b4:	08012dac 	.word	0x08012dac
 80032b8:	08012dc4 	.word	0x08012dc4
 80032bc:	08012de0 	.word	0x08012de0

080032c0 <enter_setup_state>:

 void enter_setup_state(void){
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 80032c6:	487d      	ldr	r0, [pc, #500]	; (80034bc <enter_setup_state+0x1fc>)
 80032c8:	f00b fc9e 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <enter_setup_state+0x200>)
 80032ce:	9301      	str	r3, [sp, #4]
 80032d0:	4b7c      	ldr	r3, [pc, #496]	; (80034c4 <enter_setup_state+0x204>)
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	4b7c      	ldr	r3, [pc, #496]	; (80034c8 <enter_setup_state+0x208>)
 80032d6:	4a7d      	ldr	r2, [pc, #500]	; (80034cc <enter_setup_state+0x20c>)
 80032d8:	497d      	ldr	r1, [pc, #500]	; (80034d0 <enter_setup_state+0x210>)
 80032da:	487e      	ldr	r0, [pc, #504]	; (80034d4 <enter_setup_state+0x214>)
 80032dc:	f00b fc94 	bl	800ec08 <iprintf>
	    printf("\r\n Motor:\r\n");
 80032e0:	487d      	ldr	r0, [pc, #500]	; (80034d8 <enter_setup_state+0x218>)
 80032e2:	f00b fd17 	bl	800ed14 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 80032e6:	4b7d      	ldr	r3, [pc, #500]	; (80034dc <enter_setup_state+0x21c>)
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7fd f954 	bl	8000598 <__aeabi_f2d>
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032f8:	4b79      	ldr	r3, [pc, #484]	; (80034e0 <enter_setup_state+0x220>)
 80032fa:	9300      	str	r3, [sp, #0]
 80032fc:	4b79      	ldr	r3, [pc, #484]	; (80034e4 <enter_setup_state+0x224>)
 80032fe:	4a7a      	ldr	r2, [pc, #488]	; (80034e8 <enter_setup_state+0x228>)
 8003300:	497a      	ldr	r1, [pc, #488]	; (80034ec <enter_setup_state+0x22c>)
 8003302:	487b      	ldr	r0, [pc, #492]	; (80034f0 <enter_setup_state+0x230>)
 8003304:	f00b fc80 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003308:	4b74      	ldr	r3, [pc, #464]	; (80034dc <enter_setup_state+0x21c>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	4618      	mov	r0, r3
 800330e:	f7fd f943 	bl	8000598 <__aeabi_f2d>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800331a:	4b71      	ldr	r3, [pc, #452]	; (80034e0 <enter_setup_state+0x220>)
 800331c:	9300      	str	r3, [sp, #0]
 800331e:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <enter_setup_state+0x224>)
 8003320:	4a74      	ldr	r2, [pc, #464]	; (80034f4 <enter_setup_state+0x234>)
 8003322:	4975      	ldr	r1, [pc, #468]	; (80034f8 <enter_setup_state+0x238>)
 8003324:	4875      	ldr	r0, [pc, #468]	; (80034fc <enter_setup_state+0x23c>)
 8003326:	f00b fc6f 	bl	800ec08 <iprintf>
	    printf("\r\n Control:\r\n");
 800332a:	4875      	ldr	r0, [pc, #468]	; (8003500 <enter_setup_state+0x240>)
 800332c:	f00b fcf2 	bl	800ed14 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003330:	4b6a      	ldr	r3, [pc, #424]	; (80034dc <enter_setup_state+0x21c>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	4618      	mov	r0, r3
 8003336:	f7fd f92f 	bl	8000598 <__aeabi_f2d>
 800333a:	4602      	mov	r2, r0
 800333c:	460b      	mov	r3, r1
 800333e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003342:	4b70      	ldr	r3, [pc, #448]	; (8003504 <enter_setup_state+0x244>)
 8003344:	9300      	str	r3, [sp, #0]
 8003346:	4b70      	ldr	r3, [pc, #448]	; (8003508 <enter_setup_state+0x248>)
 8003348:	4a70      	ldr	r2, [pc, #448]	; (800350c <enter_setup_state+0x24c>)
 800334a:	4971      	ldr	r1, [pc, #452]	; (8003510 <enter_setup_state+0x250>)
 800334c:	4871      	ldr	r0, [pc, #452]	; (8003514 <enter_setup_state+0x254>)
 800334e:	f00b fc5b 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003352:	4b62      	ldr	r3, [pc, #392]	; (80034dc <enter_setup_state+0x21c>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4618      	mov	r0, r3
 8003358:	f7fd f91e 	bl	8000598 <__aeabi_f2d>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003364:	4b6c      	ldr	r3, [pc, #432]	; (8003518 <enter_setup_state+0x258>)
 8003366:	9300      	str	r3, [sp, #0]
 8003368:	4b6c      	ldr	r3, [pc, #432]	; (800351c <enter_setup_state+0x25c>)
 800336a:	4a6d      	ldr	r2, [pc, #436]	; (8003520 <enter_setup_state+0x260>)
 800336c:	496d      	ldr	r1, [pc, #436]	; (8003524 <enter_setup_state+0x264>)
 800336e:	4869      	ldr	r0, [pc, #420]	; (8003514 <enter_setup_state+0x254>)
 8003370:	f00b fc4a 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <enter_setup_state+0x21c>)
 8003376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003378:	4618      	mov	r0, r3
 800337a:	f7fd f90d 	bl	8000598 <__aeabi_f2d>
 800337e:	4602      	mov	r2, r0
 8003380:	460b      	mov	r3, r1
 8003382:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003386:	4b56      	ldr	r3, [pc, #344]	; (80034e0 <enter_setup_state+0x220>)
 8003388:	9300      	str	r3, [sp, #0]
 800338a:	4b55      	ldr	r3, [pc, #340]	; (80034e0 <enter_setup_state+0x220>)
 800338c:	4a66      	ldr	r2, [pc, #408]	; (8003528 <enter_setup_state+0x268>)
 800338e:	4967      	ldr	r1, [pc, #412]	; (800352c <enter_setup_state+0x26c>)
 8003390:	4860      	ldr	r0, [pc, #384]	; (8003514 <enter_setup_state+0x254>)
 8003392:	f00b fc39 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 8003396:	4b51      	ldr	r3, [pc, #324]	; (80034dc <enter_setup_state+0x21c>)
 8003398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800339a:	4618      	mov	r0, r3
 800339c:	f7fd f8fc 	bl	8000598 <__aeabi_f2d>
 80033a0:	4602      	mov	r2, r0
 80033a2:	460b      	mov	r3, r1
 80033a4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033a8:	4b4d      	ldr	r3, [pc, #308]	; (80034e0 <enter_setup_state+0x220>)
 80033aa:	9300      	str	r3, [sp, #0]
 80033ac:	4b4c      	ldr	r3, [pc, #304]	; (80034e0 <enter_setup_state+0x220>)
 80033ae:	4a60      	ldr	r2, [pc, #384]	; (8003530 <enter_setup_state+0x270>)
 80033b0:	4960      	ldr	r1, [pc, #384]	; (8003534 <enter_setup_state+0x274>)
 80033b2:	4858      	ldr	r0, [pc, #352]	; (8003514 <enter_setup_state+0x254>)
 80033b4:	f00b fc28 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 80033b8:	4b48      	ldr	r3, [pc, #288]	; (80034dc <enter_setup_state+0x21c>)
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd f8eb 	bl	8000598 <__aeabi_f2d>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033ca:	4b5b      	ldr	r3, [pc, #364]	; (8003538 <enter_setup_state+0x278>)
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	4b53      	ldr	r3, [pc, #332]	; (800351c <enter_setup_state+0x25c>)
 80033d0:	4a5a      	ldr	r2, [pc, #360]	; (800353c <enter_setup_state+0x27c>)
 80033d2:	495b      	ldr	r1, [pc, #364]	; (8003540 <enter_setup_state+0x280>)
 80033d4:	484f      	ldr	r0, [pc, #316]	; (8003514 <enter_setup_state+0x254>)
 80033d6:	f00b fc17 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 80033da:	4b40      	ldr	r3, [pc, #256]	; (80034dc <enter_setup_state+0x21c>)
 80033dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd f8da 	bl	8000598 <__aeabi_f2d>
 80033e4:	4602      	mov	r2, r0
 80033e6:	460b      	mov	r3, r1
 80033e8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033ec:	4b55      	ldr	r3, [pc, #340]	; (8003544 <enter_setup_state+0x284>)
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4b4a      	ldr	r3, [pc, #296]	; (800351c <enter_setup_state+0x25c>)
 80033f2:	4a55      	ldr	r2, [pc, #340]	; (8003548 <enter_setup_state+0x288>)
 80033f4:	4955      	ldr	r1, [pc, #340]	; (800354c <enter_setup_state+0x28c>)
 80033f6:	4847      	ldr	r0, [pc, #284]	; (8003514 <enter_setup_state+0x254>)
 80033f8:	f00b fc06 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 80033fc:	4b37      	ldr	r3, [pc, #220]	; (80034dc <enter_setup_state+0x21c>)
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	4618      	mov	r0, r3
 8003402:	f7fd f8c9 	bl	8000598 <__aeabi_f2d>
 8003406:	4602      	mov	r2, r0
 8003408:	460b      	mov	r3, r1
 800340a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800340e:	4b50      	ldr	r3, [pc, #320]	; (8003550 <enter_setup_state+0x290>)
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	4b42      	ldr	r3, [pc, #264]	; (800351c <enter_setup_state+0x25c>)
 8003414:	4a4f      	ldr	r2, [pc, #316]	; (8003554 <enter_setup_state+0x294>)
 8003416:	4950      	ldr	r1, [pc, #320]	; (8003558 <enter_setup_state+0x298>)
 8003418:	483e      	ldr	r0, [pc, #248]	; (8003514 <enter_setup_state+0x254>)
 800341a:	f00b fbf5 	bl	800ec08 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 800341e:	4b2f      	ldr	r3, [pc, #188]	; (80034dc <enter_setup_state+0x21c>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd f8b8 	bl	8000598 <__aeabi_f2d>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003430:	4b4a      	ldr	r3, [pc, #296]	; (800355c <enter_setup_state+0x29c>)
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4b39      	ldr	r3, [pc, #228]	; (800351c <enter_setup_state+0x25c>)
 8003436:	4a4a      	ldr	r2, [pc, #296]	; (8003560 <enter_setup_state+0x2a0>)
 8003438:	494a      	ldr	r1, [pc, #296]	; (8003564 <enter_setup_state+0x2a4>)
 800343a:	4836      	ldr	r0, [pc, #216]	; (8003514 <enter_setup_state+0x254>)
 800343c:	f00b fbe4 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 8003440:	4b26      	ldr	r3, [pc, #152]	; (80034dc <enter_setup_state+0x21c>)
 8003442:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003444:	4618      	mov	r0, r3
 8003446:	f7fd f8a7 	bl	8000598 <__aeabi_f2d>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003452:	4b23      	ldr	r3, [pc, #140]	; (80034e0 <enter_setup_state+0x220>)
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	4b31      	ldr	r3, [pc, #196]	; (800351c <enter_setup_state+0x25c>)
 8003458:	4a43      	ldr	r2, [pc, #268]	; (8003568 <enter_setup_state+0x2a8>)
 800345a:	4944      	ldr	r1, [pc, #272]	; (800356c <enter_setup_state+0x2ac>)
 800345c:	482d      	ldr	r0, [pc, #180]	; (8003514 <enter_setup_state+0x254>)
 800345e:	f00b fbd3 	bl	800ec08 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003462:	4843      	ldr	r0, [pc, #268]	; (8003570 <enter_setup_state+0x2b0>)
 8003464:	f00b fc56 	bl	800ed14 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003468:	4b42      	ldr	r3, [pc, #264]	; (8003574 <enter_setup_state+0x2b4>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	9301      	str	r3, [sp, #4]
 800346e:	4b42      	ldr	r3, [pc, #264]	; (8003578 <enter_setup_state+0x2b8>)
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	4b1c      	ldr	r3, [pc, #112]	; (80034e4 <enter_setup_state+0x224>)
 8003474:	4a41      	ldr	r2, [pc, #260]	; (800357c <enter_setup_state+0x2bc>)
 8003476:	4942      	ldr	r1, [pc, #264]	; (8003580 <enter_setup_state+0x2c0>)
 8003478:	4842      	ldr	r0, [pc, #264]	; (8003584 <enter_setup_state+0x2c4>)
 800347a:	f00b fbc5 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 800347e:	4b3d      	ldr	r3, [pc, #244]	; (8003574 <enter_setup_state+0x2b4>)
 8003480:	689b      	ldr	r3, [r3, #8]
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	4b3c      	ldr	r3, [pc, #240]	; (8003578 <enter_setup_state+0x2b8>)
 8003486:	9300      	str	r3, [sp, #0]
 8003488:	4b16      	ldr	r3, [pc, #88]	; (80034e4 <enter_setup_state+0x224>)
 800348a:	4a3f      	ldr	r2, [pc, #252]	; (8003588 <enter_setup_state+0x2c8>)
 800348c:	493f      	ldr	r1, [pc, #252]	; (800358c <enter_setup_state+0x2cc>)
 800348e:	483d      	ldr	r0, [pc, #244]	; (8003584 <enter_setup_state+0x2c4>)
 8003490:	f00b fbba 	bl	800ec08 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 8003494:	4b37      	ldr	r3, [pc, #220]	; (8003574 <enter_setup_state+0x2b4>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	9301      	str	r3, [sp, #4]
 800349a:	4b3d      	ldr	r3, [pc, #244]	; (8003590 <enter_setup_state+0x2d0>)
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	4b11      	ldr	r3, [pc, #68]	; (80034e4 <enter_setup_state+0x224>)
 80034a0:	4a3c      	ldr	r2, [pc, #240]	; (8003594 <enter_setup_state+0x2d4>)
 80034a2:	493d      	ldr	r1, [pc, #244]	; (8003598 <enter_setup_state+0x2d8>)
 80034a4:	483d      	ldr	r0, [pc, #244]	; (800359c <enter_setup_state+0x2dc>)
 80034a6:	f00b fbaf 	bl	800ec08 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80034aa:	483d      	ldr	r0, [pc, #244]	; (80035a0 <enter_setup_state+0x2e0>)
 80034ac:	f00b fbac 	bl	800ec08 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 80034b0:	483c      	ldr	r0, [pc, #240]	; (80035a4 <enter_setup_state+0x2e4>)
 80034b2:	f00b fba9 	bl	800ec08 <iprintf>
 }
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	08012df8 	.word	0x08012df8
 80034c0:	08012e4c 	.word	0x08012e4c
 80034c4:	08012e5c 	.word	0x08012e5c
 80034c8:	08012e14 	.word	0x08012e14
 80034cc:	08012e18 	.word	0x08012e18
 80034d0:	08012e24 	.word	0x08012e24
 80034d4:	08012e2c 	.word	0x08012e2c
 80034d8:	08012e60 	.word	0x08012e60
 80034dc:	20004cd4 	.word	0x20004cd4
 80034e0:	08012ea0 	.word	0x08012ea0
 80034e4:	08012e6c 	.word	0x08012e6c
 80034e8:	08012e70 	.word	0x08012e70
 80034ec:	08012e7c 	.word	0x08012e7c
 80034f0:	08012e80 	.word	0x08012e80
 80034f4:	08012ea4 	.word	0x08012ea4
 80034f8:	08012ebc 	.word	0x08012ebc
 80034fc:	08012ec0 	.word	0x08012ec0
 8003500:	08012ee0 	.word	0x08012ee0
 8003504:	08012f30 	.word	0x08012f30
 8003508:	08012ef0 	.word	0x08012ef0
 800350c:	08012ef4 	.word	0x08012ef4
 8003510:	08012f0c 	.word	0x08012f0c
 8003514:	08012f10 	.word	0x08012f10
 8003518:	08012f54 	.word	0x08012f54
 800351c:	08012f38 	.word	0x08012f38
 8003520:	08012f3c 	.word	0x08012f3c
 8003524:	08012f50 	.word	0x08012f50
 8003528:	08012f5c 	.word	0x08012f5c
 800352c:	08012f78 	.word	0x08012f78
 8003530:	08012f7c 	.word	0x08012f7c
 8003534:	08012f9c 	.word	0x08012f9c
 8003538:	08012fc0 	.word	0x08012fc0
 800353c:	08012fa0 	.word	0x08012fa0
 8003540:	08012fbc 	.word	0x08012fbc
 8003544:	08012fec 	.word	0x08012fec
 8003548:	08012fc8 	.word	0x08012fc8
 800354c:	08012fe8 	.word	0x08012fe8
 8003550:	0801300c 	.word	0x0801300c
 8003554:	08012ff0 	.word	0x08012ff0
 8003558:	08013008 	.word	0x08013008
 800355c:	08013030 	.word	0x08013030
 8003560:	08013014 	.word	0x08013014
 8003564:	0801302c 	.word	0x0801302c
 8003568:	08013038 	.word	0x08013038
 800356c:	08013054 	.word	0x08013054
 8003570:	08013058 	.word	0x08013058
 8003574:	20004dd4 	.word	0x20004dd4
 8003578:	08013090 	.word	0x08013090
 800357c:	08013064 	.word	0x08013064
 8003580:	0801306c 	.word	0x0801306c
 8003584:	08013070 	.word	0x08013070
 8003588:	08013094 	.word	0x08013094
 800358c:	080130a4 	.word	0x080130a4
 8003590:	080130e8 	.word	0x080130e8
 8003594:	080130a8 	.word	0x080130a8
 8003598:	080130c8 	.word	0x080130c8
 800359c:	080130cc 	.word	0x080130cc
 80035a0:	080130f0 	.word	0x080130f0
 80035a4:	0801313c 	.word	0x0801313c

080035a8 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80035a8:	b580      	push	{r7, lr}
 80035aa:	b082      	sub	sp, #8
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7b5b      	ldrb	r3, [r3, #13]
 80035b4:	3b61      	subs	r3, #97	; 0x61
 80035b6:	2b17      	cmp	r3, #23
 80035b8:	f200 828a 	bhi.w	8003ad0 <process_user_input+0x528>
 80035bc:	a201      	add	r2, pc, #4	; (adr r2, 80035c4 <process_user_input+0x1c>)
 80035be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c2:	bf00      	nop
 80035c4:	08003823 	.word	0x08003823
 80035c8:	08003625 	.word	0x08003625
 80035cc:	080037cf 	.word	0x080037cf
 80035d0:	080039a1 	.word	0x080039a1
 80035d4:	08003ad1 	.word	0x08003ad1
 80035d8:	08003709 	.word	0x08003709
 80035dc:	08003877 	.word	0x08003877
 80035e0:	0800377b 	.word	0x0800377b
 80035e4:	08003679 	.word	0x08003679
 80035e8:	08003ad1 	.word	0x08003ad1
 80035ec:	080038bb 	.word	0x080038bb
 80035f0:	080036b5 	.word	0x080036b5
 80035f4:	08003697 	.word	0x08003697
 80035f8:	08003ad1 	.word	0x08003ad1
 80035fc:	08003a8d 	.word	0x08003a8d
 8003600:	080039e5 	.word	0x080039e5
 8003604:	08003ad1 	.word	0x08003ad1
 8003608:	08003ad1 	.word	0x08003ad1
 800360c:	08003ad1 	.word	0x08003ad1
 8003610:	0800375d 	.word	0x0800375d
 8003614:	08003ad1 	.word	0x08003ad1
 8003618:	08003a39 	.word	0x08003a39
 800361c:	08003ad1 	.word	0x08003ad1
 8003620:	080038ff 	.word	0x080038ff
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	3304      	adds	r3, #4
 8003628:	4618      	mov	r0, r3
 800362a:	f00a fe3b 	bl	800e2a4 <atof>
 800362e:	ec53 2b10 	vmov	r2, r3, d0
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f7fd faff 	bl	8000c38 <__aeabi_d2f>
 800363a:	4603      	mov	r3, r0
 800363c:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003944 <process_user_input+0x39c>
 8003640:	ee00 3a10 	vmov	s0, r3
 8003644:	f00e fff1 	bl	801262a <fminf>
 8003648:	eef0 7a40 	vmov.f32	s15, s0
 800364c:	eddf 0abe 	vldr	s1, [pc, #760]	; 8003948 <process_user_input+0x3a0>
 8003650:	eeb0 0a67 	vmov.f32	s0, s15
 8003654:	f00e ffce 	bl	80125f4 <fmaxf>
 8003658:	eef0 7a40 	vmov.f32	s15, s0
 800365c:	4bbb      	ldr	r3, [pc, #748]	; (800394c <process_user_input+0x3a4>)
 800365e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003662:	4bba      	ldr	r3, [pc, #744]	; (800394c <process_user_input+0x3a4>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	4618      	mov	r0, r3
 8003668:	f7fc ff96 	bl	8000598 <__aeabi_f2d>
 800366c:	4602      	mov	r2, r0
 800366e:	460b      	mov	r3, r1
 8003670:	48b7      	ldr	r0, [pc, #732]	; (8003950 <process_user_input+0x3a8>)
 8003672:	f00b fac9 	bl	800ec08 <iprintf>
			 break;
 8003676:	e232      	b.n	8003ade <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3304      	adds	r3, #4
 800367c:	4618      	mov	r0, r3
 800367e:	f00a fe14 	bl	800e2aa <atoi>
 8003682:	4603      	mov	r3, r0
 8003684:	4ab3      	ldr	r2, [pc, #716]	; (8003954 <process_user_input+0x3ac>)
 8003686:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 8003688:	4bb2      	ldr	r3, [pc, #712]	; (8003954 <process_user_input+0x3ac>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	4619      	mov	r1, r3
 800368e:	48b2      	ldr	r0, [pc, #712]	; (8003958 <process_user_input+0x3b0>)
 8003690:	f00b faba 	bl	800ec08 <iprintf>
			 break;
 8003694:	e223      	b.n	8003ade <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	3304      	adds	r3, #4
 800369a:	4618      	mov	r0, r3
 800369c:	f00a fe05 	bl	800e2aa <atoi>
 80036a0:	4603      	mov	r3, r0
 80036a2:	4aac      	ldr	r2, [pc, #688]	; (8003954 <process_user_input+0x3ac>)
 80036a4:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 80036a6:	4bab      	ldr	r3, [pc, #684]	; (8003954 <process_user_input+0x3ac>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	4619      	mov	r1, r3
 80036ac:	48ab      	ldr	r0, [pc, #684]	; (800395c <process_user_input+0x3b4>)
 80036ae:	f00b faab 	bl	800ec08 <iprintf>
			 break;
 80036b2:	e214      	b.n	8003ade <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	3304      	adds	r3, #4
 80036b8:	4618      	mov	r0, r3
 80036ba:	f00a fdf3 	bl	800e2a4 <atof>
 80036be:	ec53 2b10 	vmov	r2, r3, d0
 80036c2:	4610      	mov	r0, r2
 80036c4:	4619      	mov	r1, r3
 80036c6:	f7fd fab7 	bl	8000c38 <__aeabi_d2f>
 80036ca:	4603      	mov	r3, r0
 80036cc:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003960 <process_user_input+0x3b8>
 80036d0:	ee00 3a10 	vmov	s0, r3
 80036d4:	f00e ffa9 	bl	801262a <fminf>
 80036d8:	eef0 7a40 	vmov.f32	s15, s0
 80036dc:	eddf 0aaf 	vldr	s1, [pc, #700]	; 800399c <process_user_input+0x3f4>
 80036e0:	eeb0 0a67 	vmov.f32	s0, s15
 80036e4:	f00e ff86 	bl	80125f4 <fmaxf>
 80036e8:	eef0 7a40 	vmov.f32	s15, s0
 80036ec:	4b97      	ldr	r3, [pc, #604]	; (800394c <process_user_input+0x3a4>)
 80036ee:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 80036f2:	4b96      	ldr	r3, [pc, #600]	; (800394c <process_user_input+0x3a4>)
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fc ff4e 	bl	8000598 <__aeabi_f2d>
 80036fc:	4602      	mov	r2, r0
 80036fe:	460b      	mov	r3, r1
 8003700:	4898      	ldr	r0, [pc, #608]	; (8003964 <process_user_input+0x3bc>)
 8003702:	f00b fa81 	bl	800ec08 <iprintf>
			 break;
 8003706:	e1ea      	b.n	8003ade <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	3304      	adds	r3, #4
 800370c:	4618      	mov	r0, r3
 800370e:	f00a fdc9 	bl	800e2a4 <atof>
 8003712:	ec53 2b10 	vmov	r2, r3, d0
 8003716:	4610      	mov	r0, r2
 8003718:	4619      	mov	r1, r3
 800371a:	f7fd fa8d 	bl	8000c38 <__aeabi_d2f>
 800371e:	4603      	mov	r3, r0
 8003720:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003968 <process_user_input+0x3c0>
 8003724:	ee00 3a10 	vmov	s0, r3
 8003728:	f00e ff7f 	bl	801262a <fminf>
 800372c:	eef0 7a40 	vmov.f32	s15, s0
 8003730:	eddf 0a9a 	vldr	s1, [pc, #616]	; 800399c <process_user_input+0x3f4>
 8003734:	eeb0 0a67 	vmov.f32	s0, s15
 8003738:	f00e ff5c 	bl	80125f4 <fmaxf>
 800373c:	eef0 7a40 	vmov.f32	s15, s0
 8003740:	4b82      	ldr	r3, [pc, #520]	; (800394c <process_user_input+0x3a4>)
 8003742:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003746:	4b81      	ldr	r3, [pc, #516]	; (800394c <process_user_input+0x3a4>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fc ff24 	bl	8000598 <__aeabi_f2d>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4885      	ldr	r0, [pc, #532]	; (800396c <process_user_input+0x3c4>)
 8003756:	f00b fa57 	bl	800ec08 <iprintf>
			 break;
 800375a:	e1c0      	b.n	8003ade <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	3304      	adds	r3, #4
 8003760:	4618      	mov	r0, r3
 8003762:	f00a fda2 	bl	800e2aa <atoi>
 8003766:	4603      	mov	r3, r0
 8003768:	4a7a      	ldr	r2, [pc, #488]	; (8003954 <process_user_input+0x3ac>)
 800376a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 800376c:	4b79      	ldr	r3, [pc, #484]	; (8003954 <process_user_input+0x3ac>)
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	4619      	mov	r1, r3
 8003772:	487f      	ldr	r0, [pc, #508]	; (8003970 <process_user_input+0x3c8>)
 8003774:	f00b fa48 	bl	800ec08 <iprintf>
			 break;
 8003778:	e1b1      	b.n	8003ade <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	3304      	adds	r3, #4
 800377e:	4618      	mov	r0, r3
 8003780:	f00a fd90 	bl	800e2a4 <atof>
 8003784:	ec53 2b10 	vmov	r2, r3, d0
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	f7fd fa54 	bl	8000c38 <__aeabi_d2f>
 8003790:	4603      	mov	r3, r0
 8003792:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003974 <process_user_input+0x3cc>
 8003796:	ee00 3a10 	vmov	s0, r3
 800379a:	f00e ff46 	bl	801262a <fminf>
 800379e:	eef0 7a40 	vmov.f32	s15, s0
 80037a2:	eddf 0a7e 	vldr	s1, [pc, #504]	; 800399c <process_user_input+0x3f4>
 80037a6:	eeb0 0a67 	vmov.f32	s0, s15
 80037aa:	f00e ff23 	bl	80125f4 <fmaxf>
 80037ae:	eef0 7a40 	vmov.f32	s15, s0
 80037b2:	4b66      	ldr	r3, [pc, #408]	; (800394c <process_user_input+0x3a4>)
 80037b4:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 80037b8:	4b64      	ldr	r3, [pc, #400]	; (800394c <process_user_input+0x3a4>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fc feeb 	bl	8000598 <__aeabi_f2d>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	486c      	ldr	r0, [pc, #432]	; (8003978 <process_user_input+0x3d0>)
 80037c8:	f00b fa1e 	bl	800ec08 <iprintf>
			 break;
 80037cc:	e187      	b.n	8003ade <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	4618      	mov	r0, r3
 80037d4:	f00a fd66 	bl	800e2a4 <atof>
 80037d8:	ec53 2b10 	vmov	r2, r3, d0
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	f7fd fa2a 	bl	8000c38 <__aeabi_d2f>
 80037e4:	4603      	mov	r3, r0
 80037e6:	eddf 0a65 	vldr	s1, [pc, #404]	; 800397c <process_user_input+0x3d4>
 80037ea:	ee00 3a10 	vmov	s0, r3
 80037ee:	f00e ff1c 	bl	801262a <fminf>
 80037f2:	eef0 7a40 	vmov.f32	s15, s0
 80037f6:	eddf 0a69 	vldr	s1, [pc, #420]	; 800399c <process_user_input+0x3f4>
 80037fa:	eeb0 0a67 	vmov.f32	s0, s15
 80037fe:	f00e fef9 	bl	80125f4 <fmaxf>
 8003802:	eef0 7a40 	vmov.f32	s15, s0
 8003806:	4b51      	ldr	r3, [pc, #324]	; (800394c <process_user_input+0x3a4>)
 8003808:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 800380c:	4b4f      	ldr	r3, [pc, #316]	; (800394c <process_user_input+0x3a4>)
 800380e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003810:	4618      	mov	r0, r3
 8003812:	f7fc fec1 	bl	8000598 <__aeabi_f2d>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4859      	ldr	r0, [pc, #356]	; (8003980 <process_user_input+0x3d8>)
 800381c:	f00b f9f4 	bl	800ec08 <iprintf>
			 break;
 8003820:	e15d      	b.n	8003ade <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	3304      	adds	r3, #4
 8003826:	4618      	mov	r0, r3
 8003828:	f00a fd3c 	bl	800e2a4 <atof>
 800382c:	ec53 2b10 	vmov	r2, r3, d0
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7fd fa00 	bl	8000c38 <__aeabi_d2f>
 8003838:	4603      	mov	r3, r0
 800383a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 800383e:	ee00 3a10 	vmov	s0, r3
 8003842:	f00e fef2 	bl	801262a <fminf>
 8003846:	eef0 7a40 	vmov.f32	s15, s0
 800384a:	eddf 0a54 	vldr	s1, [pc, #336]	; 800399c <process_user_input+0x3f4>
 800384e:	eeb0 0a67 	vmov.f32	s0, s15
 8003852:	f00e fecf 	bl	80125f4 <fmaxf>
 8003856:	eef0 7a40 	vmov.f32	s15, s0
 800385a:	4b3c      	ldr	r3, [pc, #240]	; (800394c <process_user_input+0x3a4>)
 800385c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003860:	4b3a      	ldr	r3, [pc, #232]	; (800394c <process_user_input+0x3a4>)
 8003862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003864:	4618      	mov	r0, r3
 8003866:	f7fc fe97 	bl	8000598 <__aeabi_f2d>
 800386a:	4602      	mov	r2, r0
 800386c:	460b      	mov	r3, r1
 800386e:	4845      	ldr	r0, [pc, #276]	; (8003984 <process_user_input+0x3dc>)
 8003870:	f00b f9ca 	bl	800ec08 <iprintf>
			 break;
 8003874:	e133      	b.n	8003ade <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	4618      	mov	r0, r3
 800387c:	f00a fd12 	bl	800e2a4 <atof>
 8003880:	ec53 2b10 	vmov	r2, r3, d0
 8003884:	4610      	mov	r0, r2
 8003886:	4619      	mov	r1, r3
 8003888:	f7fd f9d6 	bl	8000c38 <__aeabi_d2f>
 800388c:	4603      	mov	r3, r0
 800388e:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8003988 <process_user_input+0x3e0>
 8003892:	ee00 3a10 	vmov	s0, r3
 8003896:	f00e fead 	bl	80125f4 <fmaxf>
 800389a:	eef0 7a40 	vmov.f32	s15, s0
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <process_user_input+0x3a4>)
 80038a0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 80038a4:	4b29      	ldr	r3, [pc, #164]	; (800394c <process_user_input+0x3a4>)
 80038a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7fc fe75 	bl	8000598 <__aeabi_f2d>
 80038ae:	4602      	mov	r2, r0
 80038b0:	460b      	mov	r3, r1
 80038b2:	4836      	ldr	r0, [pc, #216]	; (800398c <process_user_input+0x3e4>)
 80038b4:	f00b f9a8 	bl	800ec08 <iprintf>
			 break;
 80038b8:	e111      	b.n	8003ade <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	3304      	adds	r3, #4
 80038be:	4618      	mov	r0, r3
 80038c0:	f00a fcf0 	bl	800e2a4 <atof>
 80038c4:	ec53 2b10 	vmov	r2, r3, d0
 80038c8:	4610      	mov	r0, r2
 80038ca:	4619      	mov	r1, r3
 80038cc:	f7fd f9b4 	bl	8000c38 <__aeabi_d2f>
 80038d0:	4603      	mov	r3, r0
 80038d2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003990 <process_user_input+0x3e8>
 80038d6:	ee00 3a10 	vmov	s0, r3
 80038da:	f00e fe8b 	bl	80125f4 <fmaxf>
 80038de:	eef0 7a40 	vmov.f32	s15, s0
 80038e2:	4b1a      	ldr	r3, [pc, #104]	; (800394c <process_user_input+0x3a4>)
 80038e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 80038e8:	4b18      	ldr	r3, [pc, #96]	; (800394c <process_user_input+0x3a4>)
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fe53 	bl	8000598 <__aeabi_f2d>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4827      	ldr	r0, [pc, #156]	; (8003994 <process_user_input+0x3ec>)
 80038f8:	f00b f986 	bl	800ec08 <iprintf>
			 break;
 80038fc:	e0ef      	b.n	8003ade <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	3304      	adds	r3, #4
 8003902:	4618      	mov	r0, r3
 8003904:	f00a fcce 	bl	800e2a4 <atof>
 8003908:	ec53 2b10 	vmov	r2, r3, d0
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f992 	bl	8000c38 <__aeabi_d2f>
 8003914:	4603      	mov	r3, r0
 8003916:	eddf 0a21 	vldr	s1, [pc, #132]	; 800399c <process_user_input+0x3f4>
 800391a:	ee00 3a10 	vmov	s0, r3
 800391e:	f00e fe69 	bl	80125f4 <fmaxf>
 8003922:	eef0 7a40 	vmov.f32	s15, s0
 8003926:	4b09      	ldr	r3, [pc, #36]	; (800394c <process_user_input+0x3a4>)
 8003928:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 800392c:	4b07      	ldr	r3, [pc, #28]	; (800394c <process_user_input+0x3a4>)
 800392e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003930:	4618      	mov	r0, r3
 8003932:	f7fc fe31 	bl	8000598 <__aeabi_f2d>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	4817      	ldr	r0, [pc, #92]	; (8003998 <process_user_input+0x3f0>)
 800393c:	f00b f964 	bl	800ec08 <iprintf>
			 break;
 8003940:	e0cd      	b.n	8003ade <process_user_input+0x536>
 8003942:	bf00      	nop
 8003944:	44fa0000 	.word	0x44fa0000
 8003948:	42c80000 	.word	0x42c80000
 800394c:	20004cd4 	.word	0x20004cd4
 8003950:	08013168 	.word	0x08013168
 8003954:	20004dd4 	.word	0x20004dd4
 8003958:	0801317c 	.word	0x0801317c
 800395c:	08013190 	.word	0x08013190
 8003960:	42700000 	.word	0x42700000
 8003964:	080131a8 	.word	0x080131a8
 8003968:	42040000 	.word	0x42040000
 800396c:	080131bc 	.word	0x080131bc
 8003970:	080131d4 	.word	0x080131d4
 8003974:	43160000 	.word	0x43160000
 8003978:	080131ec 	.word	0x080131ec
 800397c:	42200000 	.word	0x42200000
 8003980:	08013204 	.word	0x08013204
 8003984:	0801321c 	.word	0x0801321c
 8003988:	3a83126f 	.word	0x3a83126f
 800398c:	08013230 	.word	0x08013230
 8003990:	38d1b717 	.word	0x38d1b717
 8003994:	08013240 	.word	0x08013240
 8003998:	08013250 	.word	0x08013250
 800399c:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3304      	adds	r3, #4
 80039a4:	4618      	mov	r0, r3
 80039a6:	f00a fc7d 	bl	800e2a4 <atof>
 80039aa:	ec53 2b10 	vmov	r2, r3, d0
 80039ae:	4610      	mov	r0, r2
 80039b0:	4619      	mov	r1, r3
 80039b2:	f7fd f941 	bl	8000c38 <__aeabi_d2f>
 80039b6:	4603      	mov	r3, r0
 80039b8:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 800399c <process_user_input+0x3f4>
 80039bc:	ee00 3a10 	vmov	s0, r3
 80039c0:	f00e fe18 	bl	80125f4 <fmaxf>
 80039c4:	eef0 7a40 	vmov.f32	s15, s0
 80039c8:	4b50      	ldr	r3, [pc, #320]	; (8003b0c <process_user_input+0x564>)
 80039ca:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 80039ce:	4b4f      	ldr	r3, [pc, #316]	; (8003b0c <process_user_input+0x564>)
 80039d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d2:	4618      	mov	r0, r3
 80039d4:	f7fc fde0 	bl	8000598 <__aeabi_f2d>
 80039d8:	4602      	mov	r2, r0
 80039da:	460b      	mov	r3, r1
 80039dc:	484c      	ldr	r0, [pc, #304]	; (8003b10 <process_user_input+0x568>)
 80039de:	f00b f913 	bl	800ec08 <iprintf>
			 break;
 80039e2:	e07c      	b.n	8003ade <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3304      	adds	r3, #4
 80039e8:	4618      	mov	r0, r3
 80039ea:	f00a fc5b 	bl	800e2a4 <atof>
 80039ee:	ec53 2b10 	vmov	r2, r3, d0
 80039f2:	4610      	mov	r0, r2
 80039f4:	4619      	mov	r1, r3
 80039f6:	f7fd f91f 	bl	8000c38 <__aeabi_d2f>
 80039fa:	4603      	mov	r3, r0
 80039fc:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003b14 <process_user_input+0x56c>
 8003a00:	ee00 3a10 	vmov	s0, r3
 8003a04:	f00e fdf6 	bl	80125f4 <fmaxf>
 8003a08:	eef0 7a40 	vmov.f32	s15, s0
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <process_user_input+0x564>)
 8003a0e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 8003a12:	4b3e      	ldr	r3, [pc, #248]	; (8003b0c <process_user_input+0x564>)
 8003a14:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003a18:	eef1 7a67 	vneg.f32	s15, s15
 8003a1c:	4b3b      	ldr	r3, [pc, #236]	; (8003b0c <process_user_input+0x564>)
 8003a1e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003a22:	4b3a      	ldr	r3, [pc, #232]	; (8003b0c <process_user_input+0x564>)
 8003a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7fc fdb6 	bl	8000598 <__aeabi_f2d>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4839      	ldr	r0, [pc, #228]	; (8003b18 <process_user_input+0x570>)
 8003a32:	f00b f8e9 	bl	800ec08 <iprintf>
			 break;
 8003a36:	e052      	b.n	8003ade <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	3304      	adds	r3, #4
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f00a fc31 	bl	800e2a4 <atof>
 8003a42:	ec53 2b10 	vmov	r2, r3, d0
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	f7fd f8f5 	bl	8000c38 <__aeabi_d2f>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003b14 <process_user_input+0x56c>
 8003a54:	ee00 3a10 	vmov	s0, r3
 8003a58:	f00e fdcc 	bl	80125f4 <fmaxf>
 8003a5c:	eef0 7a40 	vmov.f32	s15, s0
 8003a60:	4b2a      	ldr	r3, [pc, #168]	; (8003b0c <process_user_input+0x564>)
 8003a62:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003a66:	4b29      	ldr	r3, [pc, #164]	; (8003b0c <process_user_input+0x564>)
 8003a68:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003a6c:	eef1 7a67 	vneg.f32	s15, s15
 8003a70:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <process_user_input+0x564>)
 8003a72:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003a76:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <process_user_input+0x564>)
 8003a78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fc fd8c 	bl	8000598 <__aeabi_f2d>
 8003a80:	4602      	mov	r2, r0
 8003a82:	460b      	mov	r3, r1
 8003a84:	4825      	ldr	r0, [pc, #148]	; (8003b1c <process_user_input+0x574>)
 8003a86:	f00b f8bf 	bl	800ec08 <iprintf>
			 break;
 8003a8a:	e028      	b.n	8003ade <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3304      	adds	r3, #4
 8003a90:	4618      	mov	r0, r3
 8003a92:	f00a fc07 	bl	800e2a4 <atof>
 8003a96:	ec53 2b10 	vmov	r2, r3, d0
 8003a9a:	4610      	mov	r0, r2
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	f7fd f8cb 	bl	8000c38 <__aeabi_d2f>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003b14 <process_user_input+0x56c>
 8003aa8:	ee00 3a10 	vmov	s0, r3
 8003aac:	f00e fda2 	bl	80125f4 <fmaxf>
 8003ab0:	eef0 7a40 	vmov.f32	s15, s0
 8003ab4:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <process_user_input+0x564>)
 8003ab6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <process_user_input+0x564>)
 8003abc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7fc fd6a 	bl	8000598 <__aeabi_f2d>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4815      	ldr	r0, [pc, #84]	; (8003b20 <process_user_input+0x578>)
 8003aca:	f00b f89d 	bl	800ec08 <iprintf>
			 break;
 8003ace:	e006      	b.n	8003ade <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4813      	ldr	r0, [pc, #76]	; (8003b24 <process_user_input+0x57c>)
 8003ad8:	f00b f896 	bl	800ec08 <iprintf>
			 break;
 8003adc:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003ade:	f001 fd37 	bl	8005550 <store_eeprom_regs>
	 load_eeprom_regs();
 8003ae2:	f001 fd43 	bl	800556c <load_eeprom_regs>

	 enter_setup_state();
 8003ae6:	f7ff fbeb 	bl	80032c0 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	3304      	adds	r3, #4
 8003afa:	2208      	movs	r2, #8
 8003afc:	2100      	movs	r1, #0
 8003afe:	4618      	mov	r0, r3
 8003b00:	f00a fc10 	bl	800e324 <memset>
 }
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	20004cd4 	.word	0x20004cd4
 8003b10:	08013264 	.word	0x08013264
 8003b14:	00000000 	.word	0x00000000
 8003b18:	08013278 	.word	0x08013278
 8003b1c:	0801328c 	.word	0x0801328c
 8003b20:	080132a0 	.word	0x080132a0
 8003b24:	080132b4 	.word	0x080132b4

08003b28 <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b082      	sub	sp, #8
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003b38:	2100      	movs	r1, #0
 8003b3a:	480d      	ldr	r0, [pc, #52]	; (8003b70 <enable_gd+0x48>)
 8003b3c:	f007 fb86 	bl	800b24c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003b40:	2104      	movs	r1, #4
 8003b42:	480b      	ldr	r0, [pc, #44]	; (8003b70 <enable_gd+0x48>)
 8003b44:	f007 fb82 	bl	800b24c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003b48:	2108      	movs	r1, #8
 8003b4a:	4809      	ldr	r0, [pc, #36]	; (8003b70 <enable_gd+0x48>)
 8003b4c:	f007 fb7e 	bl	800b24c <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003b50:	2100      	movs	r1, #0
 8003b52:	4807      	ldr	r0, [pc, #28]	; (8003b70 <enable_gd+0x48>)
 8003b54:	f008 fc7a 	bl	800c44c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003b58:	2104      	movs	r1, #4
 8003b5a:	4805      	ldr	r0, [pc, #20]	; (8003b70 <enable_gd+0x48>)
 8003b5c:	f008 fc76 	bl	800c44c <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003b60:	2108      	movs	r1, #8
 8003b62:	4803      	ldr	r0, [pc, #12]	; (8003b70 <enable_gd+0x48>)
 8003b64:	f008 fc72 	bl	800c44c <HAL_TIMEx_PWMN_Start>
//    printf("enabled\r\n");
}
 8003b68:	bf00      	nop
 8003b6a:	3708      	adds	r7, #8
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	2000508c 	.word	0x2000508c

08003b74 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003b84:	4b30      	ldr	r3, [pc, #192]	; (8003c48 <disable_gd+0xd4>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8a:	ee07 3a90 	vmov	s15, r3
 8003b8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b92:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003c4c <disable_gd+0xd8>
 8003b96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003b9a:	4b2b      	ldr	r3, [pc, #172]	; (8003c48 <disable_gd+0xd4>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ba2:	ee17 2a90 	vmov	r2, s15
 8003ba6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003ba8:	4b27      	ldr	r3, [pc, #156]	; (8003c48 <disable_gd+0xd4>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bae:	ee07 3a90 	vmov	s15, r3
 8003bb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bb6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003c4c <disable_gd+0xd8>
 8003bba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <disable_gd+0xd4>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bc6:	ee17 2a90 	vmov	r2, s15
 8003bca:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003bcc:	4b1e      	ldr	r3, [pc, #120]	; (8003c48 <disable_gd+0xd4>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd2:	ee07 3a90 	vmov	s15, r3
 8003bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bda:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003c4c <disable_gd+0xd8>
 8003bde:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003be2:	4b19      	ldr	r3, [pc, #100]	; (8003c48 <disable_gd+0xd4>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bea:	ee17 2a90 	vmov	r2, s15
 8003bee:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003bf6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003bfa:	f004 fb4d 	bl	8008298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c08:	f004 fb46 	bl	8008298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c16:	f004 fb3f 	bl	8008298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c20:	480b      	ldr	r0, [pc, #44]	; (8003c50 <disable_gd+0xdc>)
 8003c22:	f004 fb39 	bl	8008298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003c26:	2200      	movs	r2, #0
 8003c28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c30:	f004 fb32 	bl	8008298 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003c34:	2200      	movs	r2, #0
 8003c36:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003c3a:	4806      	ldr	r0, [pc, #24]	; (8003c54 <disable_gd+0xe0>)
 8003c3c:	f004 fb2c 	bl	8008298 <HAL_GPIO_WritePin>

}
 8003c40:	bf00      	nop
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	2000508c 	.word	0x2000508c
 8003c4c:	00000000 	.word	0x00000000
 8003c50:	48000800 	.word	0x48000800
 8003c54:	48000400 	.word	0x48000400

08003c58 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b08a      	sub	sp, #40	; 0x28
 8003c5c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c5e:	f107 0314 	add.w	r3, r7, #20
 8003c62:	2200      	movs	r2, #0
 8003c64:	601a      	str	r2, [r3, #0]
 8003c66:	605a      	str	r2, [r3, #4]
 8003c68:	609a      	str	r2, [r3, #8]
 8003c6a:	60da      	str	r2, [r3, #12]
 8003c6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003c70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c72:	4a2f      	ldr	r2, [pc, #188]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c7a:	4b2d      	ldr	r3, [pc, #180]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003c7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	613b      	str	r3, [r7, #16]
 8003c84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003c86:	4b2a      	ldr	r3, [pc, #168]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003c88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8a:	4a29      	ldr	r2, [pc, #164]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003c8c:	f043 0320 	orr.w	r3, r3, #32
 8003c90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c92:	4b27      	ldr	r3, [pc, #156]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	60fb      	str	r3, [r7, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c9e:	4b24      	ldr	r3, [pc, #144]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca2:	4a23      	ldr	r2, [pc, #140]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003ca4:	f043 0301 	orr.w	r3, r3, #1
 8003ca8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003caa:	4b21      	ldr	r3, [pc, #132]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cae:	f003 0301 	and.w	r3, r3, #1
 8003cb2:	60bb      	str	r3, [r7, #8]
 8003cb4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cb6:	4b1e      	ldr	r3, [pc, #120]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cba:	4a1d      	ldr	r2, [pc, #116]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003cbc:	f043 0302 	orr.w	r3, r3, #2
 8003cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003cc2:	4b1b      	ldr	r3, [pc, #108]	; (8003d30 <MX_GPIO_Init+0xd8>)
 8003cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc6:	f003 0302 	and.w	r3, r3, #2
 8003cca:	607b      	str	r3, [r7, #4]
 8003ccc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f644 0140 	movw	r1, #18496	; 0x4840
 8003cd4:	4817      	ldr	r0, [pc, #92]	; (8003d34 <MX_GPIO_Init+0xdc>)
 8003cd6:	f004 fadf 	bl	8008298 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ce0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ce4:	f004 fad8 	bl	8008298 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 8003ce8:	f644 0340 	movw	r3, #18496	; 0x4840
 8003cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfa:	f107 0314 	add.w	r3, r7, #20
 8003cfe:	4619      	mov	r1, r3
 8003d00:	480c      	ldr	r0, [pc, #48]	; (8003d34 <MX_GPIO_Init+0xdc>)
 8003d02:	f004 f947 	bl	8007f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d10:	2300      	movs	r3, #0
 8003d12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d14:	2300      	movs	r3, #0
 8003d16:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d18:	f107 0314 	add.w	r3, r7, #20
 8003d1c:	4619      	mov	r1, r3
 8003d1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d22:	f004 f937 	bl	8007f94 <HAL_GPIO_Init>

}
 8003d26:	bf00      	nop
 8003d28:	3728      	adds	r7, #40	; 0x28
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
 8003d2e:	bf00      	nop
 8003d30:	40021000 	.word	0x40021000
 8003d34:	48000800 	.word	0x48000800

08003d38 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003d3c:	4b1e      	ldr	r3, [pc, #120]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d3e:	4a1f      	ldr	r2, [pc, #124]	; (8003dbc <MX_I2C1_Init+0x84>)
 8003d40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00802F62;
 8003d42:	4b1d      	ldr	r3, [pc, #116]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d44:	4a1e      	ldr	r2, [pc, #120]	; (8003dc0 <MX_I2C1_Init+0x88>)
 8003d46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003d4e:	4b1a      	ldr	r3, [pc, #104]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d50:	2201      	movs	r2, #1
 8003d52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003d54:	4b18      	ldr	r3, [pc, #96]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003d5a:	4b17      	ldr	r3, [pc, #92]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003d60:	4b15      	ldr	r3, [pc, #84]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d62:	2200      	movs	r2, #0
 8003d64:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003d66:	4b14      	ldr	r3, [pc, #80]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d6e:	2200      	movs	r2, #0
 8003d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003d72:	4811      	ldr	r0, [pc, #68]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d74:	f004 faa8 	bl	80082c8 <HAL_I2C_Init>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d001      	beq.n	8003d82 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003d7e:	f000 fbfc 	bl	800457a <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003d82:	2100      	movs	r1, #0
 8003d84:	480c      	ldr	r0, [pc, #48]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d86:	f005 ffcb 	bl	8009d20 <HAL_I2CEx_ConfigAnalogFilter>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d001      	beq.n	8003d94 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003d90:	f000 fbf3 	bl	800457a <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003d94:	2100      	movs	r1, #0
 8003d96:	4808      	ldr	r0, [pc, #32]	; (8003db8 <MX_I2C1_Init+0x80>)
 8003d98:	f006 f80d 	bl	8009db6 <HAL_I2CEx_ConfigDigitalFilter>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003da2:	f000 fbea 	bl	800457a <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8003da6:	4b07      	ldr	r3, [pc, #28]	; (8003dc4 <MX_I2C1_Init+0x8c>)
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	4a06      	ldr	r2, [pc, #24]	; (8003dc4 <MX_I2C1_Init+0x8c>)
 8003dac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003db0:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003db2:	bf00      	nop
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	2000041c 	.word	0x2000041c
 8003dbc:	40005400 	.word	0x40005400
 8003dc0:	00802f62 	.word	0x00802f62
 8003dc4:	40010000 	.word	0x40010000

08003dc8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b08a      	sub	sp, #40	; 0x28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	601a      	str	r2, [r3, #0]
 8003dd8:	605a      	str	r2, [r3, #4]
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	60da      	str	r2, [r3, #12]
 8003dde:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a2c      	ldr	r2, [pc, #176]	; (8003e98 <HAL_I2C_MspInit+0xd0>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d151      	bne.n	8003e8e <HAL_I2C_MspInit+0xc6>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dea:	4b2c      	ldr	r3, [pc, #176]	; (8003e9c <HAL_I2C_MspInit+0xd4>)
 8003dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dee:	4a2b      	ldr	r2, [pc, #172]	; (8003e9c <HAL_I2C_MspInit+0xd4>)
 8003df0:	f043 0302 	orr.w	r3, r3, #2
 8003df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003df6:	4b29      	ldr	r3, [pc, #164]	; (8003e9c <HAL_I2C_MspInit+0xd4>)
 8003df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	613b      	str	r3, [r7, #16]
 8003e00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8003e02:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e08:	2312      	movs	r3, #18
 8003e0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	2300      	movs	r3, #0
 8003e12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e14:	2304      	movs	r3, #4
 8003e16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e18:	f107 0314 	add.w	r3, r7, #20
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4820      	ldr	r0, [pc, #128]	; (8003ea0 <HAL_I2C_MspInit+0xd8>)
 8003e20:	f004 f8b8 	bl	8007f94 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <HAL_I2C_MspInit+0xd4>)
 8003e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e28:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_I2C_MspInit+0xd4>)
 8003e2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003e30:	4b1a      	ldr	r3, [pc, #104]	; (8003e9c <HAL_I2C_MspInit+0xd4>)
 8003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e3e:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <HAL_I2C_MspInit+0xe0>)
 8003e40:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8003e42:	4b18      	ldr	r3, [pc, #96]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e44:	2210      	movs	r2, #16
 8003e46:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e48:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e4e:	4b15      	ldr	r3, [pc, #84]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e50:	2200      	movs	r2, #0
 8003e52:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e54:	4b13      	ldr	r3, [pc, #76]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e56:	2280      	movs	r2, #128	; 0x80
 8003e58:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e5a:	4b12      	ldr	r3, [pc, #72]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e60:	4b10      	ldr	r3, [pc, #64]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e62:	2200      	movs	r2, #0
 8003e64:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003e66:	4b0f      	ldr	r3, [pc, #60]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e68:	2200      	movs	r2, #0
 8003e6a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e6c:	4b0d      	ldr	r3, [pc, #52]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e6e:	2200      	movs	r2, #0
 8003e70:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003e72:	480c      	ldr	r0, [pc, #48]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e74:	f002 ff7e 	bl	8006d74 <HAL_DMA_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d001      	beq.n	8003e82 <HAL_I2C_MspInit+0xba>
    {
      Error_Handler();
 8003e7e:	f000 fb7c 	bl	800457a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a07      	ldr	r2, [pc, #28]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e86:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e88:	4a06      	ldr	r2, [pc, #24]	; (8003ea4 <HAL_I2C_MspInit+0xdc>)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003e8e:	bf00      	nop
 8003e90:	3728      	adds	r7, #40	; 0x28
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40005400 	.word	0x40005400
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	48000400 	.word	0x48000400
 8003ea4:	20000468 	.word	0x20000468
 8003ea8:	40020030 	.word	0x40020030

08003eac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	6039      	str	r1, [r7, #0]
 8003eb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003eb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	db0a      	blt.n	8003ed6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	490c      	ldr	r1, [pc, #48]	; (8003ef8 <__NVIC_SetPriority+0x4c>)
 8003ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003eca:	0112      	lsls	r2, r2, #4
 8003ecc:	b2d2      	uxtb	r2, r2
 8003ece:	440b      	add	r3, r1
 8003ed0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ed4:	e00a      	b.n	8003eec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	b2da      	uxtb	r2, r3
 8003eda:	4908      	ldr	r1, [pc, #32]	; (8003efc <__NVIC_SetPriority+0x50>)
 8003edc:	79fb      	ldrb	r3, [r7, #7]
 8003ede:	f003 030f 	and.w	r3, r3, #15
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	0112      	lsls	r2, r2, #4
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	440b      	add	r3, r1
 8003eea:	761a      	strb	r2, [r3, #24]
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	e000e100 	.word	0xe000e100
 8003efc:	e000ed00 	.word	0xe000ed00

08003f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003f04:	f001 fb69 	bl	80055da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003f08:	f000 facc 	bl	80044a4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 8003f0c:	2064      	movs	r0, #100	; 0x64
 8003f0e:	f001 fbd5 	bl	80056bc <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003f12:	f7ff fea1 	bl	8003c58 <MX_GPIO_Init>
  MX_DMA_Init();
 8003f16:	f7fd fe2d 	bl	8001b74 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8003f1a:	f001 fa5d 	bl	80053d8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8003f1e:	f001 f8f1 	bl	8005104 <MX_TIM1_Init>
  MX_I2C1_Init();
 8003f22:	f7ff ff09 	bl	8003d38 <MX_I2C1_Init>
  MX_OPAMP1_Init();
 8003f26:	f000 fc69 	bl	80047fc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8003f2a:	f000 fc95 	bl	8004858 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 8003f2e:	f000 fcc1 	bl	80048b4 <MX_OPAMP3_Init>
  MX_ADC1_Init();
 8003f32:	f7fd f889 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8003f36:	f7fd f90f 	bl	8001158 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8003f3a:	f7fd ffcb 	bl	8001ed4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  load_eeprom_regs();
 8003f3e:	f001 fb15 	bl	800556c <load_eeprom_regs>
  /* Sanitize configs in case flash is empty*/
  if(E_ZERO==-1){E_ZERO = 0;}
 8003f42:	4bae      	ldr	r3, [pc, #696]	; (80041fc <main+0x2fc>)
 8003f44:	695b      	ldr	r3, [r3, #20]
 8003f46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4a:	d102      	bne.n	8003f52 <main+0x52>
 8003f4c:	4bab      	ldr	r3, [pc, #684]	; (80041fc <main+0x2fc>)
 8003f4e:	2200      	movs	r2, #0
 8003f50:	615a      	str	r2, [r3, #20]
  if(M_ZERO==-1){M_ZERO = 0;}
 8003f52:	4baa      	ldr	r3, [pc, #680]	; (80041fc <main+0x2fc>)
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f5a:	d102      	bne.n	8003f62 <main+0x62>
 8003f5c:	4ba7      	ldr	r3, [pc, #668]	; (80041fc <main+0x2fc>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]
  if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 8003f62:	4ba7      	ldr	r3, [pc, #668]	; (8004200 <main+0x300>)
 8003f64:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f68:	eef4 7a67 	vcmp.f32	s15, s15
 8003f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f70:	d609      	bvs.n	8003f86 <main+0x86>
 8003f72:	4ba3      	ldr	r3, [pc, #652]	; (8004200 <main+0x300>)
 8003f74:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f78:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003f7c:	eef4 7a47 	vcmp.f32	s15, s14
 8003f80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f84:	d102      	bne.n	8003f8c <main+0x8c>
 8003f86:	4b9e      	ldr	r3, [pc, #632]	; (8004200 <main+0x300>)
 8003f88:	4a9e      	ldr	r2, [pc, #632]	; (8004204 <main+0x304>)
 8003f8a:	609a      	str	r2, [r3, #8]
  if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8003f8c:	4b9c      	ldr	r3, [pc, #624]	; (8004200 <main+0x300>)
 8003f8e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f92:	eef4 7a67 	vcmp.f32	s15, s15
 8003f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f9a:	d609      	bvs.n	8003fb0 <main+0xb0>
 8003f9c:	4b98      	ldr	r3, [pc, #608]	; (8004200 <main+0x300>)
 8003f9e:	edd3 7a03 	vldr	s15, [r3, #12]
 8003fa2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003fa6:	eef4 7a47 	vcmp.f32	s15, s14
 8003faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fae:	d102      	bne.n	8003fb6 <main+0xb6>
 8003fb0:	4b93      	ldr	r3, [pc, #588]	; (8004200 <main+0x300>)
 8003fb2:	4a95      	ldr	r2, [pc, #596]	; (8004208 <main+0x308>)
 8003fb4:	60da      	str	r2, [r3, #12]
  if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8003fb6:	4b92      	ldr	r3, [pc, #584]	; (8004200 <main+0x300>)
 8003fb8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fbc:	eef4 7a67 	vcmp.f32	s15, s15
 8003fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc4:	d609      	bvs.n	8003fda <main+0xda>
 8003fc6:	4b8e      	ldr	r3, [pc, #568]	; (8004200 <main+0x300>)
 8003fc8:	edd3 7a06 	vldr	s15, [r3, #24]
 8003fcc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003fd0:	eef4 7a47 	vcmp.f32	s15, s14
 8003fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd8:	d103      	bne.n	8003fe2 <main+0xe2>
 8003fda:	4b89      	ldr	r3, [pc, #548]	; (8004200 <main+0x300>)
 8003fdc:	f04f 0200 	mov.w	r2, #0
 8003fe0:	619a      	str	r2, [r3, #24]
  if(CAN_ID==-1){CAN_ID = 1;}
 8003fe2:	4b86      	ldr	r3, [pc, #536]	; (80041fc <main+0x2fc>)
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fea:	d102      	bne.n	8003ff2 <main+0xf2>
 8003fec:	4b83      	ldr	r3, [pc, #524]	; (80041fc <main+0x2fc>)
 8003fee:	2201      	movs	r2, #1
 8003ff0:	605a      	str	r2, [r3, #4]
  if(CAN_MASTER==-1){CAN_MASTER = 0;}
 8003ff2:	4b82      	ldr	r3, [pc, #520]	; (80041fc <main+0x2fc>)
 8003ff4:	689b      	ldr	r3, [r3, #8]
 8003ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ffa:	d102      	bne.n	8004002 <main+0x102>
 8003ffc:	4b7f      	ldr	r3, [pc, #508]	; (80041fc <main+0x2fc>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	609a      	str	r2, [r3, #8]
  if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 8004002:	4b7e      	ldr	r3, [pc, #504]	; (80041fc <main+0x2fc>)
 8004004:	68db      	ldr	r3, [r3, #12]
 8004006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800400a:	d102      	bne.n	8004012 <main+0x112>
 800400c:	4b7b      	ldr	r3, [pc, #492]	; (80041fc <main+0x2fc>)
 800400e:	2200      	movs	r2, #0
 8004010:	60da      	str	r2, [r3, #12]
  if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 8004012:	4b7b      	ldr	r3, [pc, #492]	; (8004200 <main+0x300>)
 8004014:	edd3 7a07 	vldr	s15, [r3, #28]
 8004018:	eef4 7a67 	vcmp.f32	s15, s15
 800401c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004020:	d609      	bvs.n	8004036 <main+0x136>
 8004022:	4b77      	ldr	r3, [pc, #476]	; (8004200 <main+0x300>)
 8004024:	edd3 7a07 	vldr	s15, [r3, #28]
 8004028:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800402c:	eef4 7a47 	vcmp.f32	s15, s14
 8004030:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004034:	d103      	bne.n	800403e <main+0x13e>
 8004036:	4b72      	ldr	r3, [pc, #456]	; (8004200 <main+0x300>)
 8004038:	f04f 0200 	mov.w	r2, #0
 800403c:	61da      	str	r2, [r3, #28]
  if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800403e:	4b70      	ldr	r3, [pc, #448]	; (8004200 <main+0x300>)
 8004040:	edd3 7a08 	vldr	s15, [r3, #32]
 8004044:	eef4 7a67 	vcmp.f32	s15, s15
 8004048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404c:	d609      	bvs.n	8004062 <main+0x162>
 800404e:	4b6c      	ldr	r3, [pc, #432]	; (8004200 <main+0x300>)
 8004050:	edd3 7a08 	vldr	s15, [r3, #32]
 8004054:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004058:	eef4 7a47 	vcmp.f32	s15, s14
 800405c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004060:	d102      	bne.n	8004068 <main+0x168>
 8004062:	4b67      	ldr	r3, [pc, #412]	; (8004200 <main+0x300>)
 8004064:	4a69      	ldr	r2, [pc, #420]	; (800420c <main+0x30c>)
 8004066:	621a      	str	r2, [r3, #32]
  if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004068:	4b65      	ldr	r3, [pc, #404]	; (8004200 <main+0x300>)
 800406a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800406e:	eef4 7a67 	vcmp.f32	s15, s15
 8004072:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004076:	d609      	bvs.n	800408c <main+0x18c>
 8004078:	4b61      	ldr	r3, [pc, #388]	; (8004200 <main+0x300>)
 800407a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800407e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004082:	eef4 7a47 	vcmp.f32	s15, s14
 8004086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800408a:	d102      	bne.n	8004092 <main+0x192>
 800408c:	4b5c      	ldr	r3, [pc, #368]	; (8004200 <main+0x300>)
 800408e:	4a60      	ldr	r2, [pc, #384]	; (8004210 <main+0x310>)
 8004090:	625a      	str	r2, [r3, #36]	; 0x24
  if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 8004092:	4b5b      	ldr	r3, [pc, #364]	; (8004200 <main+0x300>)
 8004094:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004098:	eef4 7a67 	vcmp.f32	s15, s15
 800409c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a0:	d609      	bvs.n	80040b6 <main+0x1b6>
 80040a2:	4b57      	ldr	r3, [pc, #348]	; (8004200 <main+0x300>)
 80040a4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80040a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040ac:	eef4 7a47 	vcmp.f32	s15, s14
 80040b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040b4:	d102      	bne.n	80040bc <main+0x1bc>
 80040b6:	4b52      	ldr	r3, [pc, #328]	; (8004200 <main+0x300>)
 80040b8:	4a56      	ldr	r2, [pc, #344]	; (8004214 <main+0x314>)
 80040ba:	641a      	str	r2, [r3, #64]	; 0x40
  if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 80040bc:	4b50      	ldr	r3, [pc, #320]	; (8004200 <main+0x300>)
 80040be:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80040c2:	eef4 7a67 	vcmp.f32	s15, s15
 80040c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040ca:	d609      	bvs.n	80040e0 <main+0x1e0>
 80040cc:	4b4c      	ldr	r3, [pc, #304]	; (8004200 <main+0x300>)
 80040ce:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80040d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80040d6:	eef4 7a47 	vcmp.f32	s15, s14
 80040da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040de:	d102      	bne.n	80040e6 <main+0x1e6>
 80040e0:	4b47      	ldr	r3, [pc, #284]	; (8004200 <main+0x300>)
 80040e2:	4a4d      	ldr	r2, [pc, #308]	; (8004218 <main+0x318>)
 80040e4:	629a      	str	r2, [r3, #40]	; 0x28
  if(isnan(GR) || GR==-1){GR = 1.0f;}
 80040e6:	4b46      	ldr	r3, [pc, #280]	; (8004200 <main+0x300>)
 80040e8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80040ec:	eef4 7a67 	vcmp.f32	s15, s15
 80040f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040f4:	d609      	bvs.n	800410a <main+0x20a>
 80040f6:	4b42      	ldr	r3, [pc, #264]	; (8004200 <main+0x300>)
 80040f8:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80040fc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004100:	eef4 7a47 	vcmp.f32	s15, s14
 8004104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004108:	d103      	bne.n	8004112 <main+0x212>
 800410a:	4b3d      	ldr	r3, [pc, #244]	; (8004200 <main+0x300>)
 800410c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004110:	63da      	str	r2, [r3, #60]	; 0x3c
  if(isnan(KT) || KT==-1){KT = 1.0f;}
 8004112:	4b3b      	ldr	r3, [pc, #236]	; (8004200 <main+0x300>)
 8004114:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004118:	eef4 7a67 	vcmp.f32	s15, s15
 800411c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004120:	d609      	bvs.n	8004136 <main+0x236>
 8004122:	4b37      	ldr	r3, [pc, #220]	; (8004200 <main+0x300>)
 8004124:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004128:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800412c:	eef4 7a47 	vcmp.f32	s15, s14
 8004130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004134:	d103      	bne.n	800413e <main+0x23e>
 8004136:	4b32      	ldr	r3, [pc, #200]	; (8004200 <main+0x300>)
 8004138:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800413c:	631a      	str	r2, [r3, #48]	; 0x30
  if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800413e:	4b30      	ldr	r3, [pc, #192]	; (8004200 <main+0x300>)
 8004140:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004144:	eef4 7a67 	vcmp.f32	s15, s15
 8004148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414c:	d609      	bvs.n	8004162 <main+0x262>
 800414e:	4b2c      	ldr	r3, [pc, #176]	; (8004200 <main+0x300>)
 8004150:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004154:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004158:	eef4 7a47 	vcmp.f32	s15, s14
 800415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004160:	d102      	bne.n	8004168 <main+0x268>
 8004162:	4b27      	ldr	r3, [pc, #156]	; (8004200 <main+0x300>)
 8004164:	4a2d      	ldr	r2, [pc, #180]	; (800421c <main+0x31c>)
 8004166:	655a      	str	r2, [r3, #84]	; 0x54
  if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004168:	4b25      	ldr	r3, [pc, #148]	; (8004200 <main+0x300>)
 800416a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800416e:	eef4 7a67 	vcmp.f32	s15, s15
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	d609      	bvs.n	800418c <main+0x28c>
 8004178:	4b21      	ldr	r3, [pc, #132]	; (8004200 <main+0x300>)
 800417a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800417e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004182:	eef4 7a47 	vcmp.f32	s15, s14
 8004186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418a:	d102      	bne.n	8004192 <main+0x292>
 800418c:	4b1c      	ldr	r3, [pc, #112]	; (8004200 <main+0x300>)
 800418e:	4a21      	ldr	r2, [pc, #132]	; (8004214 <main+0x314>)
 8004190:	659a      	str	r2, [r3, #88]	; 0x58
  if(isnan(P_MAX)){P_MAX = 12.5f;}
 8004192:	4b1b      	ldr	r3, [pc, #108]	; (8004200 <main+0x300>)
 8004194:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004198:	eef4 7a67 	vcmp.f32	s15, s15
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d702      	bvc.n	80041a8 <main+0x2a8>
 80041a2:	4b17      	ldr	r3, [pc, #92]	; (8004200 <main+0x300>)
 80041a4:	4a1e      	ldr	r2, [pc, #120]	; (8004220 <main+0x320>)
 80041a6:	649a      	str	r2, [r3, #72]	; 0x48
  if(isnan(P_MIN)){P_MIN = -12.5f;}
 80041a8:	4b15      	ldr	r3, [pc, #84]	; (8004200 <main+0x300>)
 80041aa:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 80041ae:	eef4 7a67 	vcmp.f32	s15, s15
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	d702      	bvc.n	80041be <main+0x2be>
 80041b8:	4b11      	ldr	r3, [pc, #68]	; (8004200 <main+0x300>)
 80041ba:	4a1a      	ldr	r2, [pc, #104]	; (8004224 <main+0x324>)
 80041bc:	645a      	str	r2, [r3, #68]	; 0x44
  if(isnan(V_MAX)){V_MAX = 200.0f;}
 80041be:	4b10      	ldr	r3, [pc, #64]	; (8004200 <main+0x300>)
 80041c0:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80041c4:	eef4 7a67 	vcmp.f32	s15, s15
 80041c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041cc:	d702      	bvc.n	80041d4 <main+0x2d4>
 80041ce:	4b0c      	ldr	r3, [pc, #48]	; (8004200 <main+0x300>)
 80041d0:	4a15      	ldr	r2, [pc, #84]	; (8004228 <main+0x328>)
 80041d2:	651a      	str	r2, [r3, #80]	; 0x50
  if(isnan(V_MIN)){V_MIN = -200.0f;}
 80041d4:	4b0a      	ldr	r3, [pc, #40]	; (8004200 <main+0x300>)
 80041d6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80041da:	eef4 7a67 	vcmp.f32	s15, s15
 80041de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041e2:	d702      	bvc.n	80041ea <main+0x2ea>
 80041e4:	4b06      	ldr	r3, [pc, #24]	; (8004200 <main+0x300>)
 80041e6:	4a11      	ldr	r2, [pc, #68]	; (800422c <main+0x32c>)
 80041e8:	64da      	str	r2, [r3, #76]	; 0x4c
  if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 80041ea:	4b05      	ldr	r3, [pc, #20]	; (8004200 <main+0x300>)
 80041ec:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80041f0:	eef4 7a67 	vcmp.f32	s15, s15
 80041f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f8:	e01a      	b.n	8004230 <main+0x330>
 80041fa:	bf00      	nop
 80041fc:	20004dd4 	.word	0x20004dd4
 8004200:	20004cd4 	.word	0x20004cd4
 8004204:	447a0000 	.word	0x447a0000
 8004208:	42200000 	.word	0x42200000
 800420c:	42fa0000 	.word	0x42fa0000
 8004210:	41600000 	.word	0x41600000
 8004214:	40a00000 	.word	0x40a00000
 8004218:	41a80000 	.word	0x41a80000
 800421c:	43fa0000 	.word	0x43fa0000
 8004220:	41480000 	.word	0x41480000
 8004224:	c1480000 	.word	0xc1480000
 8004228:	43480000 	.word	0x43480000
 800422c:	c3480000 	.word	0xc3480000
 8004230:	d703      	bvc.n	800423a <main+0x33a>
 8004232:	4b80      	ldr	r3, [pc, #512]	; (8004434 <main+0x534>)
 8004234:	f04f 0200 	mov.w	r2, #0
 8004238:	65da      	str	r2, [r3, #92]	; 0x5c
  if(isnan(T_MAX)){T_MAX = 10.0f;}
 800423a:	4b7e      	ldr	r3, [pc, #504]	; (8004434 <main+0x534>)
 800423c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004240:	eef4 7a67 	vcmp.f32	s15, s15
 8004244:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004248:	d702      	bvc.n	8004250 <main+0x350>
 800424a:	4b7a      	ldr	r3, [pc, #488]	; (8004434 <main+0x534>)
 800424c:	4a7a      	ldr	r2, [pc, #488]	; (8004438 <main+0x538>)
 800424e:	661a      	str	r2, [r3, #96]	; 0x60

  printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 8004250:	f04f 0200 	mov.w	r2, #0
 8004254:	4b79      	ldr	r3, [pc, #484]	; (800443c <main+0x53c>)
 8004256:	487a      	ldr	r0, [pc, #488]	; (8004440 <main+0x540>)
 8004258:	f00a fcd6 	bl	800ec08 <iprintf>
/* Controller Setup */
init_controller_params(&controller);
 800425c:	4879      	ldr	r0, [pc, #484]	; (8004444 <main+0x544>)
 800425e:	f7fe fa29 	bl	80026b4 <init_controller_params>

/* calibration "encoder" zeroing */
memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 8004262:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8004266:	2100      	movs	r1, #0
 8004268:	4877      	ldr	r0, [pc, #476]	; (8004448 <main+0x548>)
 800426a:	f00a f85b 	bl	800e324 <memset>

/* commutation encoder setup */
comm_encoder.m_zero = M_ZERO;
 800426e:	4b77      	ldr	r3, [pc, #476]	; (800444c <main+0x54c>)
 8004270:	691b      	ldr	r3, [r3, #16]
 8004272:	4a77      	ldr	r2, [pc, #476]	; (8004450 <main+0x550>)
 8004274:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
comm_encoder.e_zero = E_ZERO;
 8004278:	4b74      	ldr	r3, [pc, #464]	; (800444c <main+0x54c>)
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	4a74      	ldr	r2, [pc, #464]	; (8004450 <main+0x550>)
 800427e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
comm_encoder.ppairs = PPAIRS;
 8004282:	4b6c      	ldr	r3, [pc, #432]	; (8004434 <main+0x534>)
 8004284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004286:	4a72      	ldr	r2, [pc, #456]	; (8004450 <main+0x550>)
 8004288:	6693      	str	r3, [r2, #104]	; 0x68
comm_encoder.mech_zero = MECH_ZERO;
 800428a:	4b6a      	ldr	r3, [pc, #424]	; (8004434 <main+0x534>)
 800428c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800428e:	4a70      	ldr	r2, [pc, #448]	; (8004450 <main+0x550>)
 8004290:	f8c2 31e0 	str.w	r3, [r2, #480]	; 0x1e0
ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004294:	2164      	movs	r1, #100	; 0x64
 8004296:	486e      	ldr	r0, [pc, #440]	; (8004450 <main+0x550>)
 8004298:	f000 fbb0 	bl	80049fc <ps_warmup>
ps_sample(&comm_encoder, DT);
 800429c:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004454 <main+0x554>
 80042a0:	486b      	ldr	r0, [pc, #428]	; (8004450 <main+0x550>)
 80042a2:	f000 fbd1 	bl	8004a48 <ps_sample>
ps_sample(&comm_encoder, DT);
 80042a6:	ed9f 0a6b 	vldr	s0, [pc, #428]	; 8004454 <main+0x554>
 80042aa:	4869      	ldr	r0, [pc, #420]	; (8004450 <main+0x550>)
 80042ac:	f000 fbcc 	bl	8004a48 <ps_sample>
ps_sample(&comm_encoder, DT);
 80042b0:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8004454 <main+0x554>
 80042b4:	4866      	ldr	r0, [pc, #408]	; (8004450 <main+0x550>)
 80042b6:	f000 fbc7 	bl	8004a48 <ps_sample>
if(comm_encoder.angle_multiturn[0]>PI_F){
 80042ba:	4b65      	ldr	r3, [pc, #404]	; (8004450 <main+0x550>)
 80042bc:	edd3 7a03 	vldr	s15, [r3, #12]
 80042c0:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8004458 <main+0x558>
 80042c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80042c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042cc:	dd14      	ble.n	80042f8 <main+0x3f8>
  comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 80042ce:	4b60      	ldr	r3, [pc, #384]	; (8004450 <main+0x550>)
 80042d0:	edd3 7a03 	vldr	s15, [r3, #12]
 80042d4:	ed9f 7a61 	vldr	s14, [pc, #388]	; 800445c <main+0x55c>
 80042d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042dc:	4b5c      	ldr	r3, [pc, #368]	; (8004450 <main+0x550>)
 80042de:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns--;
 80042e2:	4b5b      	ldr	r3, [pc, #364]	; (8004450 <main+0x550>)
 80042e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042e8:	3b01      	subs	r3, #1
 80042ea:	4a59      	ldr	r2, [pc, #356]	; (8004450 <main+0x550>)
 80042ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Added\r\n");
 80042f0:	485b      	ldr	r0, [pc, #364]	; (8004460 <main+0x560>)
 80042f2:	f00a fd0f 	bl	800ed14 <puts>
 80042f6:	e01d      	b.n	8004334 <main+0x434>
}
else if(comm_encoder.angle_multiturn[0]<-PI_F){
 80042f8:	4b55      	ldr	r3, [pc, #340]	; (8004450 <main+0x550>)
 80042fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80042fe:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8004464 <main+0x564>
 8004302:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004306:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800430a:	d513      	bpl.n	8004334 <main+0x434>
  comm_encoder.angle_multiturn[0] += TWO_PI_F;
 800430c:	4b50      	ldr	r3, [pc, #320]	; (8004450 <main+0x550>)
 800430e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004312:	ed9f 7a52 	vldr	s14, [pc, #328]	; 800445c <main+0x55c>
 8004316:	ee77 7a87 	vadd.f32	s15, s15, s14
 800431a:	4b4d      	ldr	r3, [pc, #308]	; (8004450 <main+0x550>)
 800431c:	edc3 7a03 	vstr	s15, [r3, #12]
  comm_encoder.turns++;
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <main+0x550>)
 8004322:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004326:	3301      	adds	r3, #1
 8004328:	4a49      	ldr	r2, [pc, #292]	; (8004450 <main+0x550>)
 800432a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  printf("Subtracted\r\n");
 800432e:	484e      	ldr	r0, [pc, #312]	; (8004468 <main+0x568>)
 8004330:	f00a fcf0 	bl	800ed14 <puts>
}


if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
 8004334:	4b46      	ldr	r3, [pc, #280]	; (8004450 <main+0x550>)
 8004336:	4a45      	ldr	r2, [pc, #276]	; (800444c <main+0x54c>)
 8004338:	33dc      	adds	r3, #220	; 0xdc
 800433a:	f102 011c 	add.w	r1, r2, #28
 800433e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004342:	4618      	mov	r0, r3
 8004344:	f009 ffe0 	bl	800e308 <memcpy>

/* Turn on ADCs */
//   HAL_ADC_Start(&hadc1);
//   HAL_Delay(10);
//   HAL_ADC_Start(&hadc2);
	HAL_OPAMP_Start(&hopamp1);
 8004348:	4848      	ldr	r0, [pc, #288]	; (800446c <main+0x56c>)
 800434a:	f005 fe51 	bl	8009ff0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 800434e:	4848      	ldr	r0, [pc, #288]	; (8004470 <main+0x570>)
 8004350:	f005 fe4e 	bl	8009ff0 <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8004354:	4847      	ldr	r0, [pc, #284]	; (8004474 <main+0x574>)
 8004356:	f005 fe4b 	bl	8009ff0 <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 800435a:	2202      	movs	r2, #2
 800435c:	4946      	ldr	r1, [pc, #280]	; (8004478 <main+0x578>)
 800435e:	4847      	ldr	r0, [pc, #284]	; (800447c <main+0x57c>)
 8004360:	f001 fd76 	bl	8005e50 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 8004364:	2202      	movs	r2, #2
 8004366:	4946      	ldr	r1, [pc, #280]	; (8004480 <main+0x580>)
 8004368:	4846      	ldr	r0, [pc, #280]	; (8004484 <main+0x584>)
 800436a:	f001 fd71 	bl	8005e50 <HAL_ADC_Start_DMA>

   disable_gd(&controller);
 800436e:	4835      	ldr	r0, [pc, #212]	; (8004444 <main+0x544>)
 8004370:	f7ff fc00 	bl	8003b74 <disable_gd>
   HAL_Delay(10);
 8004374:	200a      	movs	r0, #10
 8004376:	f001 f9a1 	bl	80056bc <HAL_Delay>

   zero_current(&controller);
 800437a:	4832      	ldr	r0, [pc, #200]	; (8004444 <main+0x544>)
 800437c:	f7fe f948 	bl	8002610 <zero_current>
   HAL_Delay(100);
 8004380:	2064      	movs	r0, #100	; 0x64
 8004382:	f001 f99b 	bl	80056bc <HAL_Delay>
   printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 8004386:	4b2f      	ldr	r3, [pc, #188]	; (8004444 <main+0x544>)
 8004388:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800438c:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <main+0x544>)
 800438e:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004392:	4b2c      	ldr	r3, [pc, #176]	; (8004444 <main+0x544>)
 8004394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004398:	483b      	ldr	r0, [pc, #236]	; (8004488 <main+0x588>)
 800439a:	f00a fc35 	bl	800ec08 <iprintf>
   printf("Vbus: %f\r\n",controller.v_bus);
 800439e:	4b29      	ldr	r3, [pc, #164]	; (8004444 <main+0x544>)
 80043a0:	6a1b      	ldr	r3, [r3, #32]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fc f8f8 	bl	8000598 <__aeabi_f2d>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	4837      	ldr	r0, [pc, #220]	; (800448c <main+0x58c>)
 80043ae:	f00a fc2b 	bl	800ec08 <iprintf>
   /* Turn on PWM */
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80043b2:	2100      	movs	r1, #0
 80043b4:	4836      	ldr	r0, [pc, #216]	; (8004490 <main+0x590>)
 80043b6:	f006 ff49 	bl	800b24c <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80043ba:	2104      	movs	r1, #4
 80043bc:	4834      	ldr	r0, [pc, #208]	; (8004490 <main+0x590>)
 80043be:	f006 ff45 	bl	800b24c <HAL_TIM_PWM_Start>
      HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 80043c2:	2108      	movs	r1, #8
 80043c4:	4832      	ldr	r0, [pc, #200]	; (8004490 <main+0x590>)
 80043c6:	f006 ff41 	bl	800b24c <HAL_TIM_PWM_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80043ca:	2100      	movs	r1, #0
 80043cc:	4830      	ldr	r0, [pc, #192]	; (8004490 <main+0x590>)
 80043ce:	f008 f83d 	bl	800c44c <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80043d2:	2104      	movs	r1, #4
 80043d4:	482e      	ldr	r0, [pc, #184]	; (8004490 <main+0x590>)
 80043d6:	f008 f839 	bl	800c44c <HAL_TIMEx_PWMN_Start>
      HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 80043da:	2108      	movs	r1, #8
 80043dc:	482c      	ldr	r0, [pc, #176]	; (8004490 <main+0x590>)
 80043de:	f008 f835 	bl	800c44c <HAL_TIMEx_PWMN_Start>

      disable_gd(&controller);
 80043e2:	4818      	ldr	r0, [pc, #96]	; (8004444 <main+0x544>)
 80043e4:	f7ff fbc6 	bl	8003b74 <disable_gd>

	  /* CAN setup */
      HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 80043e8:	2200      	movs	r2, #0
 80043ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80043ee:	4829      	ldr	r0, [pc, #164]	; (8004494 <main+0x594>)
 80043f0:	f003 ff52 	bl	8008298 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 80043f4:	2200      	movs	r2, #0
 80043f6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80043fa:	4826      	ldr	r0, [pc, #152]	; (8004494 <main+0x594>)
 80043fc:	f003 ff4c 	bl	8008298 <HAL_GPIO_WritePin>
	  can_tx_init(&can_tx);
	  HAL_CAN_Start(&CAN_H); //start CAN
	  __HAL_CAN_ENABLE_IT(&CAN_H, CAN_IT_RX_FIFO0_MSG_PENDING); // Start can interrupt  */

	  /* Set Interrupt Priorities */
	  NVIC_SetPriority(PWM_ISR, 1); // commutation > communication
 8004400:	2101      	movs	r1, #1
 8004402:	2019      	movs	r0, #25
 8004404:	f7ff fd52 	bl	8003eac <__NVIC_SetPriority>
	  NVIC_SetPriority(CAN_ISR, 3);
 8004408:	2103      	movs	r1, #3
 800440a:	2015      	movs	r0, #21
 800440c:	f7ff fd4e 	bl	8003eac <__NVIC_SetPriority>

	  /* Start the FSM */
	  state.state = MENU_MODE;
 8004410:	4b21      	ldr	r3, [pc, #132]	; (8004498 <main+0x598>)
 8004412:	2200      	movs	r2, #0
 8004414:	701a      	strb	r2, [r3, #0]
	  state.next_state = MENU_MODE;
 8004416:	4b20      	ldr	r3, [pc, #128]	; (8004498 <main+0x598>)
 8004418:	2200      	movs	r2, #0
 800441a:	705a      	strb	r2, [r3, #1]
	  state.ready = 1;
 800441c:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <main+0x598>)
 800441e:	2201      	movs	r2, #1
 8004420:	70da      	strb	r2, [r3, #3]


  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004422:	2201      	movs	r2, #1
 8004424:	491d      	ldr	r1, [pc, #116]	; (800449c <main+0x59c>)
 8004426:	481e      	ldr	r0, [pc, #120]	; (80044a0 <main+0x5a0>)
 8004428:	f008 fb4a 	bl	800cac0 <HAL_UART_Receive_IT>
   HAL_TIM_Base_Start_IT(&htim1);
 800442c:	4818      	ldr	r0, [pc, #96]	; (8004490 <main+0x590>)
 800442e:	f006 fe41 	bl	800b0b4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8004432:	e7fe      	b.n	8004432 <main+0x532>
 8004434:	20004cd4 	.word	0x20004cd4
 8004438:	41200000 	.word	0x41200000
 800443c:	3ff00000 	.word	0x3ff00000
 8004440:	080132dc 	.word	0x080132dc
 8004444:	200004c8 	.word	0x200004c8
 8004448:	20004ae8 	.word	0x20004ae8
 800444c:	20004dd4 	.word	0x20004dd4
 8004450:	200007d8 	.word	0x200007d8
 8004454:	3851b717 	.word	0x3851b717
 8004458:	40490fdb 	.word	0x40490fdb
 800445c:	40c90fdb 	.word	0x40c90fdb
 8004460:	08013300 	.word	0x08013300
 8004464:	c0490fdb 	.word	0xc0490fdb
 8004468:	08013308 	.word	0x08013308
 800446c:	20004fd4 	.word	0x20004fd4
 8004470:	20005010 	.word	0x20005010
 8004474:	2000504c 	.word	0x2000504c
 8004478:	200007c0 	.word	0x200007c0
 800447c:	2000021c 	.word	0x2000021c
 8004480:	200007c4 	.word	0x200007c4
 8004484:	20000288 	.word	0x20000288
 8004488:	08013314 	.word	0x08013314
 800448c:	08013354 	.word	0x08013354
 8004490:	2000508c 	.word	0x2000508c
 8004494:	48000800 	.word	0x48000800
 8004498:	200007c8 	.word	0x200007c8
 800449c:	20004cd0 	.word	0x20004cd0
 80044a0:	200050d8 	.word	0x200050d8

080044a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b0a4      	sub	sp, #144	; 0x90
 80044a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80044aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80044ae:	2238      	movs	r2, #56	; 0x38
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f009 ff36 	bl	800e324 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80044b8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80044bc:	2200      	movs	r2, #0
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	605a      	str	r2, [r3, #4]
 80044c2:	609a      	str	r2, [r3, #8]
 80044c4:	60da      	str	r2, [r3, #12]
 80044c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80044c8:	463b      	mov	r3, r7
 80044ca:	2244      	movs	r2, #68	; 0x44
 80044cc:	2100      	movs	r1, #0
 80044ce:	4618      	mov	r0, r3
 80044d0:	f009 ff28 	bl	800e324 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80044d4:	2000      	movs	r0, #0
 80044d6:	f005 fdbd 	bl	800a054 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80044da:	2301      	movs	r3, #1
 80044dc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80044de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80044e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044e4:	2302      	movs	r3, #2
 80044e6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044e8:	2303      	movs	r3, #3
 80044ea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80044ec:	2302      	movs	r3, #2
 80044ee:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80044f0:	2354      	movs	r3, #84	; 0x54
 80044f2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044f6:	2302      	movs	r3, #2
 80044f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80044fc:	2302      	movs	r3, #2
 80044fe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004502:	2302      	movs	r3, #2
 8004504:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004508:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800450c:	4618      	mov	r0, r3
 800450e:	f005 fe55 	bl	800a1bc <HAL_RCC_OscConfig>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004518:	f000 f82f 	bl	800457a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800451c:	230f      	movs	r3, #15
 800451e:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004520:	2303      	movs	r3, #3
 8004522:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004524:	2300      	movs	r3, #0
 8004526:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004528:	2300      	movs	r3, #0
 800452a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800452c:	2300      	movs	r3, #0
 800452e:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004530:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004534:	2104      	movs	r1, #4
 8004536:	4618      	mov	r0, r3
 8004538:	f006 f958 	bl	800a7ec <HAL_RCC_ClockConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d001      	beq.n	8004546 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8004542:	f000 f81a 	bl	800457a <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1
 8004546:	f249 0342 	movw	r3, #36930	; 0x9042
 800454a:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_ADC12|RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800454c:	2300      	movs	r3, #0
 800454e:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004550:	2300      	movs	r3, #0
 8004552:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8004554:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004558:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800455a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800455e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004560:	463b      	mov	r3, r7
 8004562:	4618      	mov	r0, r3
 8004564:	f006 fb5e 	bl	800ac24 <HAL_RCCEx_PeriphCLKConfig>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d001      	beq.n	8004572 <SystemClock_Config+0xce>
  {
    Error_Handler();
 800456e:	f000 f804 	bl	800457a <Error_Handler>
  }
}
 8004572:	bf00      	nop
 8004574:	3790      	adds	r7, #144	; 0x90
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}

0800457a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800457a:	b480      	push	{r7}
 800457c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800457e:	b672      	cpsid	i
}
 8004580:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004582:	e7fe      	b.n	8004582 <Error_Handler+0x8>

08004584 <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 8004584:	b480      	push	{r7}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	ed87 0a01 	vstr	s0, [r7, #4]
 800458e:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 8004592:	ed97 7a01 	vldr	s14, [r7, #4]
 8004596:	edd7 7a00 	vldr	s15, [r7]
 800459a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800459e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a2:	dd01      	ble.n	80045a8 <fast_fmaxf+0x24>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	e000      	b.n	80045aa <fast_fmaxf+0x26>
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	ee07 3a90 	vmov	s15, r3
    }
 80045ae:	eeb0 0a67 	vmov.f32	s0, s15
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <fast_fminf>:

float fast_fminf(float x, float y){
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	ed87 0a01 	vstr	s0, [r7, #4]
 80045c6:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80045ca:	ed97 7a01 	vldr	s14, [r7, #4]
 80045ce:	edd7 7a00 	vldr	s15, [r7]
 80045d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045da:	d501      	bpl.n	80045e0 <fast_fminf+0x24>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	e000      	b.n	80045e2 <fast_fminf+0x26>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	ee07 3a90 	vmov	s15, r3
    }
 80045e6:	eeb0 0a67 	vmov.f32	s0, s15
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80045f4:	b480      	push	{r7}
 80045f6:	b085      	sub	sp, #20
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	ed87 0a03 	vstr	s0, [r7, #12]
 80045fe:	edc7 0a02 	vstr	s1, [r7, #8]
 8004602:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 8004606:	ed97 7a03 	vldr	s14, [r7, #12]
 800460a:	edd7 7a02 	vldr	s15, [r7, #8]
 800460e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004616:	dd0c      	ble.n	8004632 <fmaxf3+0x3e>
 8004618:	ed97 7a03 	vldr	s14, [r7, #12]
 800461c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004620:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004628:	dd01      	ble.n	800462e <fmaxf3+0x3a>
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	e00d      	b.n	800464a <fmaxf3+0x56>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	e00b      	b.n	800464a <fmaxf3+0x56>
 8004632:	ed97 7a02 	vldr	s14, [r7, #8]
 8004636:	edd7 7a01 	vldr	s15, [r7, #4]
 800463a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004642:	dd01      	ble.n	8004648 <fmaxf3+0x54>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	e000      	b.n	800464a <fmaxf3+0x56>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	ee07 3a90 	vmov	s15, r3
    }
 800464e:	eeb0 0a67 	vmov.f32	s0, s15
 8004652:	3714      	adds	r7, #20
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <fminf3>:

float fminf3(float x, float y, float z){
 800465c:	b480      	push	{r7}
 800465e:	b085      	sub	sp, #20
 8004660:	af00      	add	r7, sp, #0
 8004662:	ed87 0a03 	vstr	s0, [r7, #12]
 8004666:	edc7 0a02 	vstr	s1, [r7, #8]
 800466a:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 800466e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004672:	edd7 7a02 	vldr	s15, [r7, #8]
 8004676:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800467a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800467e:	d50c      	bpl.n	800469a <fminf3+0x3e>
 8004680:	ed97 7a03 	vldr	s14, [r7, #12]
 8004684:	edd7 7a01 	vldr	s15, [r7, #4]
 8004688:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800468c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004690:	d501      	bpl.n	8004696 <fminf3+0x3a>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	e00d      	b.n	80046b2 <fminf3+0x56>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	e00b      	b.n	80046b2 <fminf3+0x56>
 800469a:	ed97 7a02 	vldr	s14, [r7, #8]
 800469e:	edd7 7a01 	vldr	s15, [r7, #4]
 80046a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80046a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046aa:	d501      	bpl.n	80046b0 <fminf3+0x54>
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	e000      	b.n	80046b2 <fminf3+0x56>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	ee07 3a90 	vmov	s15, r3
    }
 80046b6:	eeb0 0a67 	vmov.f32	s0, s15
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	ed93 7a00 	vldr	s14, [r3]
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	edd3 7a00 	vldr	s15, [r3]
 80046de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	edd3 6a00 	vldr	s13, [r3]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80046f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046f6:	eeb0 0a67 	vmov.f32	s0, s15
 80046fa:	f00e f835 	bl	8012768 <sqrtf>
 80046fe:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 8004702:	ed97 7a05 	vldr	s14, [r7, #20]
 8004706:	edd7 7a01 	vldr	s15, [r7, #4]
 800470a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	dc00      	bgt.n	8004716 <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 8004714:	e01b      	b.n	800474e <limit_norm+0x8a>
        *x = *x * limit/norm;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	ed93 7a00 	vldr	s14, [r3]
 800471c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004720:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004724:	ed97 7a05 	vldr	s14, [r7, #20]
 8004728:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	ed93 7a00 	vldr	s14, [r3]
 8004738:	edd7 7a01 	vldr	s15, [r7, #4]
 800473c:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004740:	ed97 7a05 	vldr	s14, [r7, #20]
 8004744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	edc3 7a00 	vstr	s15, [r3]
    }
 800474e:	bf00      	nop
 8004750:	3718      	adds	r7, #24
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <sin_lut>:
    float span = x_max - x_min;
    float offset = x_min;
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
    }

float sin_lut(float theta){
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004762:	eddf 0a17 	vldr	s1, [pc, #92]	; 80047c0 <sin_lut+0x68>
 8004766:	ed97 0a01 	vldr	s0, [r7, #4]
 800476a:	f00d ffdd 	bl	8012728 <fmodf>
 800476e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004772:	edd7 7a01 	vldr	s15, [r7, #4]
 8004776:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800477a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800477e:	d506      	bpl.n	800478e <sin_lut+0x36>
 8004780:	edd7 7a01 	vldr	s15, [r7, #4]
 8004784:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80047c0 <sin_lut+0x68>
 8004788:	ee77 7a87 	vadd.f32	s15, s15, s14
 800478c:	e001      	b.n	8004792 <sin_lut+0x3a>
 800478e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004792:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004796:	edd7 7a01 	vldr	s15, [r7, #4]
 800479a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80047c4 <sin_lut+0x6c>
 800479e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80047a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80047a6:	ee17 3a90 	vmov	r3, s15
 80047aa:	4a07      	ldr	r2, [pc, #28]	; (80047c8 <sin_lut+0x70>)
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4413      	add	r3, r2
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	ee07 3a90 	vmov	s15, r3
}
 80047b6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ba:	3708      	adds	r7, #8
 80047bc:	46bd      	mov	sp, r7
 80047be:	bd80      	pop	{r7, pc}
 80047c0:	40c90fdb 	.word	0x40c90fdb
 80047c4:	42a2f983 	.word	0x42a2f983
 80047c8:	080133dc 	.word	0x080133dc

080047cc <cos_lut>:

float cos_lut(float theta){
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b082      	sub	sp, #8
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 80047d6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 80047f8 <cos_lut+0x2c>
 80047da:	edd7 7a01 	vldr	s15, [r7, #4]
 80047de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80047e2:	eeb0 0a67 	vmov.f32	s0, s15
 80047e6:	f7ff ffb7 	bl	8004758 <sin_lut>
 80047ea:	eef0 7a40 	vmov.f32	s15, s0
}
 80047ee:	eeb0 0a67 	vmov.f32	s0, s15
 80047f2:	3708      	adds	r7, #8
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bd80      	pop	{r7, pc}
 80047f8:	3fc90fdb 	.word	0x3fc90fdb

080047fc <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004800:	4b13      	ldr	r3, [pc, #76]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004802:	4a14      	ldr	r2, [pc, #80]	; (8004854 <MX_OPAMP1_Init+0x58>)
 8004804:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004808:	2280      	movs	r2, #128	; 0x80
 800480a:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 800480c:	4b10      	ldr	r3, [pc, #64]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800480e:	2240      	movs	r2, #64	; 0x40
 8004810:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004812:	4b0f      	ldr	r3, [pc, #60]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004814:	2200      	movs	r2, #0
 8004816:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800481a:	2201      	movs	r2, #1
 800481c:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800481e:	4b0c      	ldr	r3, [pc, #48]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004820:	2200      	movs	r2, #0
 8004822:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004826:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800482a:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800482e:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004832:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004834:	4b06      	ldr	r3, [pc, #24]	; (8004850 <MX_OPAMP1_Init+0x54>)
 8004836:	2200      	movs	r2, #0
 8004838:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 800483a:	4805      	ldr	r0, [pc, #20]	; (8004850 <MX_OPAMP1_Init+0x54>)
 800483c:	f005 fb08 	bl	8009e50 <HAL_OPAMP_Init>
 8004840:	4603      	mov	r3, r0
 8004842:	2b00      	cmp	r3, #0
 8004844:	d001      	beq.n	800484a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8004846:	f7ff fe98 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20004fd4 	.word	0x20004fd4
 8004854:	40010300 	.word	0x40010300

08004858 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800485e:	4a14      	ldr	r2, [pc, #80]	; (80048b0 <MX_OPAMP2_Init+0x58>)
 8004860:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004862:	4b12      	ldr	r3, [pc, #72]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800486a:	2240      	movs	r2, #64	; 0x40
 800486c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 800486e:	4b0f      	ldr	r3, [pc, #60]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004870:	2200      	movs	r2, #0
 8004872:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004876:	2201      	movs	r2, #1
 8004878:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 800487a:	4b0c      	ldr	r3, [pc, #48]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800487c:	2200      	movs	r2, #0
 800487e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004880:	4b0a      	ldr	r3, [pc, #40]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004882:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004886:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004888:	4b08      	ldr	r3, [pc, #32]	; (80048ac <MX_OPAMP2_Init+0x54>)
 800488a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800488e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004890:	4b06      	ldr	r3, [pc, #24]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004892:	2200      	movs	r2, #0
 8004894:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8004896:	4805      	ldr	r0, [pc, #20]	; (80048ac <MX_OPAMP2_Init+0x54>)
 8004898:	f005 fada 	bl	8009e50 <HAL_OPAMP_Init>
 800489c:	4603      	mov	r3, r0
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d001      	beq.n	80048a6 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 80048a2:	f7ff fe6a 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 80048a6:	bf00      	nop
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20005010 	.word	0x20005010
 80048b0:	40010304 	.word	0x40010304

080048b4 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 80048b8:	4b13      	ldr	r3, [pc, #76]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048ba:	4a14      	ldr	r2, [pc, #80]	; (800490c <MX_OPAMP3_Init+0x58>)
 80048bc:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 80048be:	4b12      	ldr	r3, [pc, #72]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048c0:	2280      	movs	r2, #128	; 0x80
 80048c2:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 80048c4:	4b10      	ldr	r3, [pc, #64]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048c6:	2240      	movs	r2, #64	; 0x40
 80048c8:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 80048ca:	4b0f      	ldr	r3, [pc, #60]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048cc:	2200      	movs	r2, #0
 80048ce:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 80048d0:	4b0d      	ldr	r3, [pc, #52]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 80048d6:	4b0c      	ldr	r3, [pc, #48]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048d8:	2200      	movs	r2, #0
 80048da:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 80048dc:	4b0a      	ldr	r3, [pc, #40]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80048e2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 80048e4:	4b08      	ldr	r3, [pc, #32]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048e6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 80048ea:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 80048ec:	4b06      	ldr	r3, [pc, #24]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 80048f2:	4805      	ldr	r0, [pc, #20]	; (8004908 <MX_OPAMP3_Init+0x54>)
 80048f4:	f005 faac 	bl	8009e50 <HAL_OPAMP_Init>
 80048f8:	4603      	mov	r3, r0
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d001      	beq.n	8004902 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 80048fe:	f7ff fe3c 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004902:	bf00      	nop
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	2000504c 	.word	0x2000504c
 800490c:	40010308 	.word	0x40010308

08004910 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b08a      	sub	sp, #40	; 0x28
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004918:	f107 0314 	add.w	r3, r7, #20
 800491c:	2200      	movs	r2, #0
 800491e:	601a      	str	r2, [r3, #0]
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	609a      	str	r2, [r3, #8]
 8004924:	60da      	str	r2, [r3, #12]
 8004926:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a2e      	ldr	r2, [pc, #184]	; (80049e8 <HAL_OPAMP_MspInit+0xd8>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d119      	bne.n	8004966 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004932:	4b2e      	ldr	r3, [pc, #184]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004936:	4a2d      	ldr	r2, [pc, #180]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004938:	f043 0301 	orr.w	r3, r3, #1
 800493c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800493e:	4b2b      	ldr	r3, [pc, #172]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004942:	f003 0301 	and.w	r3, r3, #1
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 800494a:	230a      	movs	r3, #10
 800494c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800494e:	2303      	movs	r3, #3
 8004950:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004952:	2300      	movs	r3, #0
 8004954:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004956:	f107 0314 	add.w	r3, r7, #20
 800495a:	4619      	mov	r1, r3
 800495c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004960:	f003 fb18 	bl	8007f94 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8004964:	e03b      	b.n	80049de <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	4a21      	ldr	r2, [pc, #132]	; (80049f0 <HAL_OPAMP_MspInit+0xe0>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d119      	bne.n	80049a4 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004970:	4b1e      	ldr	r3, [pc, #120]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004974:	4a1d      	ldr	r2, [pc, #116]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 8004976:	f043 0301 	orr.w	r3, r3, #1
 800497a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800497c:	4b1b      	ldr	r3, [pc, #108]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 800497e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004980:	f003 0301 	and.w	r3, r3, #1
 8004984:	60fb      	str	r3, [r7, #12]
 8004986:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004988:	23a0      	movs	r3, #160	; 0xa0
 800498a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800498c:	2303      	movs	r3, #3
 800498e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004990:	2300      	movs	r3, #0
 8004992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004994:	f107 0314 	add.w	r3, r7, #20
 8004998:	4619      	mov	r1, r3
 800499a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800499e:	f003 faf9 	bl	8007f94 <HAL_GPIO_Init>
}
 80049a2:	e01c      	b.n	80049de <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a12      	ldr	r2, [pc, #72]	; (80049f4 <HAL_OPAMP_MspInit+0xe4>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d117      	bne.n	80049de <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80049ae:	4b0f      	ldr	r3, [pc, #60]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 80049b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049b2:	4a0e      	ldr	r2, [pc, #56]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 80049b4:	f043 0302 	orr.w	r3, r3, #2
 80049b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80049ba:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_OPAMP_MspInit+0xdc>)
 80049bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80049c6:	2305      	movs	r3, #5
 80049c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049ca:	2303      	movs	r3, #3
 80049cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049d2:	f107 0314 	add.w	r3, r7, #20
 80049d6:	4619      	mov	r1, r3
 80049d8:	4807      	ldr	r0, [pc, #28]	; (80049f8 <HAL_OPAMP_MspInit+0xe8>)
 80049da:	f003 fadb 	bl	8007f94 <HAL_GPIO_Init>
}
 80049de:	bf00      	nop
 80049e0:	3728      	adds	r7, #40	; 0x28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40010300 	.word	0x40010300
 80049ec:	40021000 	.word	0x40021000
 80049f0:	40010304 	.word	0x40010304
 80049f4:	40010308 	.word	0x40010308
 80049f8:	48000400 	.word	0x48000400

080049fc <ps_warmup>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void ps_warmup(EncoderStruct * encoder, int n){
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af04      	add	r7, sp, #16
 8004a02:	6078      	str	r0, [r7, #4]
 8004a04:	6039      	str	r1, [r7, #0]
//	encoder->config.bit.SF = 3;
//	encoder->config.bit.FTH = 7;
//	encoder->config.bit.WD = 0;
//	HAL_I2C_Mem_Write(&ENC_I2C, ENC_ADDRESS,0x01,I2C_MEMADD_SIZE_8BIT, (uint8_t*)&encoder->config.raw, 2,2);
	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
	for(int i = 0; i<n; i++){
 8004a06:	2300      	movs	r3, #0
 8004a08:	60fb      	str	r3, [r7, #12]
 8004a0a:	e012      	b.n	8004a32 <ps_warmup+0x36>
		encoder->data.raw = 0;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	805a      	strh	r2, [r3, #2]
		HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3302      	adds	r3, #2
 8004a16:	2202      	movs	r2, #2
 8004a18:	9202      	str	r2, [sp, #8]
 8004a1a:	2202      	movs	r2, #2
 8004a1c:	9201      	str	r2, [sp, #4]
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	2301      	movs	r3, #1
 8004a22:	220c      	movs	r2, #12
 8004a24:	216c      	movs	r1, #108	; 0x6c
 8004a26:	4807      	ldr	r0, [pc, #28]	; (8004a44 <ps_warmup+0x48>)
 8004a28:	f003 fcde 	bl	80083e8 <HAL_I2C_Mem_Read>
	for(int i = 0; i<n; i++){
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	dbe8      	blt.n	8004a0c <ps_warmup+0x10>
	}
}
 8004a3a:	bf00      	nop
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}
 8004a44:	2000041c 	.word	0x2000041c

08004a48 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08c      	sub	sp, #48	; 0x30
 8004a4c:	af02      	add	r7, sp, #8
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	685a      	ldr	r2, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	609a      	str	r2, [r3, #8]
	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
 8004a5c:	2313      	movs	r3, #19
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a60:	e011      	b.n	8004a86 <ps_sample+0x3e>
 8004a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a64:	3b01      	subs	r3, #1
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	3302      	adds	r3, #2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	3302      	adds	r3, #2
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	440b      	add	r3, r1
 8004a7c:	3304      	adds	r3, #4
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	3b01      	subs	r3, #1
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	dcea      	bgt.n	8004a62 <ps_sample+0x1a>
	//memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float)); // this is much slower for some reason

	/* I2C read/write */
//	encoder->data.raw = 0;
//	HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
	uint16_t angle = ((encoder->data.bit.angle8_12<<8)&0xF00)|encoder->data.bit.angle0_7;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	885b      	ldrh	r3, [r3, #2]
 8004a90:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	021b      	lsls	r3, r3, #8
 8004a98:	b21b      	sxth	r3, r3
 8004a9a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004a9e:	b21a      	sxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	885b      	ldrh	r3, [r3, #2]
 8004aa4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8004aa8:	b2db      	uxtb	r3, r3
 8004aaa:	b21b      	sxth	r3, r3
 8004aac:	4313      	orrs	r3, r2
 8004aae:	b21b      	sxth	r3, r3
 8004ab0:	83fb      	strh	r3, [r7, #30]
	encoder->raw = angle;
 8004ab2:	8bfa      	ldrh	r2, [r7, #30]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	675a      	str	r2, [r3, #116]	; 0x74

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004abc:	11db      	asrs	r3, r3, #7
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	3336      	adds	r3, #54	; 0x36
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	4413      	add	r3, r2
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	61bb      	str	r3, [r7, #24]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ace:	11db      	asrs	r3, r3, #7
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	425a      	negs	r2, r3
 8004ad4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ad8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004adc:	bf58      	it	pl
 8004ade:	4253      	negpl	r3, r2
 8004ae0:	687a      	ldr	r2, [r7, #4]
 8004ae2:	3336      	adds	r3, #54	; 0x36
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	617b      	str	r3, [r7, #20]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004aec:	697a      	ldr	r2, [r7, #20]
 8004aee:	69bb      	ldr	r3, [r7, #24]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	687a      	ldr	r2, [r7, #4]
 8004af4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004af6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004afa:	fb02 f303 	mul.w	r3, r2, r3
 8004afe:	11db      	asrs	r3, r3, #7
 8004b00:	69ba      	ldr	r2, [r7, #24]
 8004b02:	4413      	add	r3, r2
 8004b04:	613b      	str	r3, [r7, #16]
	encoder->count = encoder->raw - off_interp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8004b0a:	693b      	ldr	r3, [r7, #16]
 8004b0c:	1ad2      	subs	r2, r2, r3
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	679a      	str	r2, [r3, #120]	; 0x78


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004b16:	ee07 3a90 	vmov	s15, r3
 8004b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004b1e:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8004d10 <ps_sample+0x2c8>
 8004b22:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b36:	ee17 3a90 	vmov	r3, s15
 8004b3a:	60fb      	str	r3, [r7, #12]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	ee07 3a90 	vmov	s15, r3
 8004b48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004b4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b50:	ed9f 7a70 	vldr	s14, [pc, #448]	; 8004d14 <ps_sample+0x2cc>
 8004b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b64:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004b68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6c:	d507      	bpl.n	8004b7e <ps_sample+0x136>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b74:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8004d14 <ps_sample+0x2cc>
 8004b78:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004b7c:	e002      	b.n	8004b84 <ps_sample+0x13c>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004b94:	4b60      	ldr	r3, [pc, #384]	; (8004d18 <ps_sample+0x2d0>)
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004ba2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ba6:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8004d10 <ps_sample+0x2c8>
 8004baa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	int_angle = (int)encoder->elec_angle;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004bba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004bbe:	ee17 3a90 	vmov	r3, s15
 8004bc2:	60fb      	str	r3, [r7, #12]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	ed93 7a17 	vldr	s14, [r3, #92]	; 0x5c
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	ee07 3a90 	vmov	s15, r3
 8004bd0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004bd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004bd8:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 8004d14 <ps_sample+0x2cc>
 8004bdc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004bec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bf4:	d507      	bpl.n	8004c06 <ps_sample+0x1be>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004bfc:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8004d14 <ps_sample+0x2cc>
 8004c00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004c04:	e002      	b.n	8004c0c <ps_sample+0x1c4>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
	/* Rollover */
	int rollover = 0;
 8004c12:	2300      	movs	r3, #0
 8004c14:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004c26:	edc7 7a02 	vstr	s15, [r7, #8]
	if(angle_diff > PI_F){rollover = -1;}
 8004c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c2e:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8004d1c <ps_sample+0x2d4>
 8004c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c3a:	dd03      	ble.n	8004c44 <ps_sample+0x1fc>
 8004c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8004c40:	623b      	str	r3, [r7, #32]
 8004c42:	e00a      	b.n	8004c5a <ps_sample+0x212>
	else if(angle_diff < -PI_F){rollover = 1;}
 8004c44:	edd7 7a02 	vldr	s15, [r7, #8]
 8004c48:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8004d20 <ps_sample+0x2d8>
 8004c4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c54:	d501      	bpl.n	8004c5a <ps_sample+0x212>
 8004c56:	2301      	movs	r3, #1
 8004c58:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	441a      	add	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	if(!encoder->first_sample){
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	f893 31dc 	ldrb.w	r3, [r3, #476]	; 0x1dc
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d107      	bne.n	8004c84 <ps_sample+0x23c>
		encoder->turns = 0;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		encoder->first_sample = 1;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 21dc 	strb.w	r2, [r3, #476]	; 0x1dc
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	ed93 7a01 	vldr	s14, [r3, #4]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c90:	ee07 3a90 	vmov	s15, r3
 8004c94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c98:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8004d14 <ps_sample+0x2cc>
 8004c9c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004ca0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	edd3 7a78 	vldr	s15, [r3, #480]	; 0x1e0
 8004caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	ed93 7a03 	vldr	s14, [r3, #12]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8004cc0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004cc4:	edd7 7a00 	vldr	s15, [r7]
 8004cc8:	eeb3 7a03 	vmov.f32	s14, #51	; 0x41980000  19.0
 8004ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004cd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8004ce6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64
	HAL_I2C_Mem_Read_DMA(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	3302      	adds	r3, #2
 8004cf4:	2202      	movs	r2, #2
 8004cf6:	9201      	str	r2, [sp, #4]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	220c      	movs	r2, #12
 8004cfe:	216c      	movs	r1, #108	; 0x6c
 8004d00:	4808      	ldr	r0, [pc, #32]	; (8004d24 <ps_sample+0x2dc>)
 8004d02:	f003 fc8b 	bl	800861c <HAL_I2C_Mem_Read_DMA>

}
 8004d06:	bf00      	nop
 8004d08:	3728      	adds	r7, #40	; 0x28
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	45800000 	.word	0x45800000
 8004d14:	40c90fdb 	.word	0x40c90fdb
 8004d18:	20004dd4 	.word	0x20004dd4
 8004d1c:	40490fdb 	.word	0x40490fdb
 8004d20:	c0490fdb 	.word	0xc0490fdb
 8004d24:	2000041c 	.word	0x2000041c

08004d28 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b082      	sub	sp, #8
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d36:	4619      	mov	r1, r3
 8004d38:	481d      	ldr	r0, [pc, #116]	; (8004db0 <ps_print+0x88>)
 8004d3a:	f009 ff65 	bl	800ec08 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004d42:	4619      	mov	r1, r3
 8004d44:	481b      	ldr	r0, [pc, #108]	; (8004db4 <ps_print+0x8c>)
 8004d46:	f009 ff5f 	bl	800ec08 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	4618      	mov	r0, r3
 8004d50:	f7fb fc22 	bl	8000598 <__aeabi_f2d>
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	4817      	ldr	r0, [pc, #92]	; (8004db8 <ps_print+0x90>)
 8004d5a:	f009 ff55 	bl	800ec08 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f7fb fc18 	bl	8000598 <__aeabi_f2d>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	460b      	mov	r3, r1
 8004d6c:	4813      	ldr	r0, [pc, #76]	; (8004dbc <ps_print+0x94>)
 8004d6e:	f009 ff4b 	bl	800ec08 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fb fc0e 	bl	8000598 <__aeabi_f2d>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	460b      	mov	r3, r1
 8004d80:	480f      	ldr	r0, [pc, #60]	; (8004dc0 <ps_print+0x98>)
 8004d82:	f009 ff41 	bl	800ec08 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	480d      	ldr	r0, [pc, #52]	; (8004dc4 <ps_print+0x9c>)
 8004d90:	f009 ff3a 	bl	800ec08 <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f7fb fbfd 	bl	8000598 <__aeabi_f2d>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	4809      	ldr	r0, [pc, #36]	; (8004dc8 <ps_print+0xa0>)
 8004da4:	f009 ff30 	bl	800ec08 <iprintf>
	//HAL_Delay(dt_ms);
}
 8004da8:	bf00      	nop
 8004daa:	3708      	adds	r7, #8
 8004dac:	46bd      	mov	sp, r7
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	08013360 	.word	0x08013360
 8004db4:	08013368 	.word	0x08013368
 8004db8:	08013380 	.word	0x08013380
 8004dbc:	08013394 	.word	0x08013394
 8004dc0:	080133a8 	.word	0x080133a8
 8004dc4:	080133bc 	.word	0x080133bc
 8004dc8:	080133cc 	.word	0x080133cc

08004dcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004dd2:	4b0f      	ldr	r3, [pc, #60]	; (8004e10 <HAL_MspInit+0x44>)
 8004dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dd6:	4a0e      	ldr	r2, [pc, #56]	; (8004e10 <HAL_MspInit+0x44>)
 8004dd8:	f043 0301 	orr.w	r3, r3, #1
 8004ddc:	6613      	str	r3, [r2, #96]	; 0x60
 8004dde:	4b0c      	ldr	r3, [pc, #48]	; (8004e10 <HAL_MspInit+0x44>)
 8004de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	607b      	str	r3, [r7, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004dea:	4b09      	ldr	r3, [pc, #36]	; (8004e10 <HAL_MspInit+0x44>)
 8004dec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dee:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <HAL_MspInit+0x44>)
 8004df0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004df4:	6593      	str	r3, [r2, #88]	; 0x58
 8004df6:	4b06      	ldr	r3, [pc, #24]	; (8004e10 <HAL_MspInit+0x44>)
 8004df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dfe:	603b      	str	r3, [r7, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8004e02:	f005 f9cb 	bl	800a19c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004e06:	bf00      	nop
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	40021000 	.word	0x40021000

08004e14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004e14:	b480      	push	{r7}
 8004e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004e18:	e7fe      	b.n	8004e18 <NMI_Handler+0x4>

08004e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004e1e:	e7fe      	b.n	8004e1e <HardFault_Handler+0x4>

08004e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004e24:	e7fe      	b.n	8004e24 <MemManage_Handler+0x4>

08004e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004e26:	b480      	push	{r7}
 8004e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004e2a:	e7fe      	b.n	8004e2a <BusFault_Handler+0x4>

08004e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004e30:	e7fe      	b.n	8004e30 <UsageFault_Handler+0x4>

08004e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004e32:	b480      	push	{r7}
 8004e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e60:	f000 fc0e 	bl	8005680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e64:	bf00      	nop
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <DMA1_Channel1_IRQHandler+0x10>)
 8004e6e:	f002 f964 	bl	800713a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	200002f4 	.word	0x200002f4

08004e7c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <DMA1_Channel2_IRQHandler+0x10>)
 8004e82:	f002 f95a 	bl	800713a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000354 	.word	0x20000354

08004e90 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8004e94:	4802      	ldr	r0, [pc, #8]	; (8004ea0 <DMA1_Channel3_IRQHandler+0x10>)
 8004e96:	f002 f950 	bl	800713a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004e9a:	bf00      	nop
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000468 	.word	0x20000468

08004ea4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004ea8:	4802      	ldr	r0, [pc, #8]	; (8004eb4 <FDCAN1_IT0_IRQHandler+0x10>)
 8004eaa:	f002 fbfd 	bl	80076a8 <HAL_FDCAN_IRQHandler>
//  else{
//	  unpack_cmd(can_rx, controller.commands);	// Unpack commands
//	  controller.timeout = 0;					// Reset timeout counter
//  }
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004eae:	bf00      	nop
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	200003b8 	.word	0x200003b8

08004eb8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ec2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ec6:	f003 f9e7 	bl	8008298 <HAL_GPIO_WritePin>
	analog_sample(&controller);
 8004eca:	480f      	ldr	r0, [pc, #60]	; (8004f08 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004ecc:	f7fd f942 	bl	8002154 <analog_sample>
	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8004ed0:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8004f0c <TIM1_UP_TIM16_IRQHandler+0x54>
 8004ed4:	480e      	ldr	r0, [pc, #56]	; (8004f10 <TIM1_UP_TIM16_IRQHandler+0x58>)
 8004ed6:	f7ff fdb7 	bl	8004a48 <ps_sample>
	/* Run Finite State Machine */
	run_fsm(&state);
 8004eda:	480e      	ldr	r0, [pc, #56]	; (8004f14 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 8004edc:	f7fd ff82 	bl	8002de4 <run_fsm>
	/* increment loop count */
	controller.loop_count++;
 8004ee0:	4b09      	ldr	r3, [pc, #36]	; (8004f08 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004ee2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004ee6:	3301      	adds	r3, #1
 8004ee8:	4a07      	ldr	r2, [pc, #28]	; (8004f08 <TIM1_UP_TIM16_IRQHandler+0x50>)
 8004eea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004eee:	480a      	ldr	r0, [pc, #40]	; (8004f18 <TIM1_UP_TIM16_IRQHandler+0x60>)
 8004ef0:	f006 faac 	bl	800b44c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004efe:	f003 f9cb 	bl	8008298 <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004f02:	bf00      	nop
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	200004c8 	.word	0x200004c8
 8004f0c:	3851b717 	.word	0x3851b717
 8004f10:	200007d8 	.word	0x200007d8
 8004f14:	200007c8 	.word	0x200007c8
 8004f18:	2000508c 	.word	0x2000508c

08004f1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f22:	4809      	ldr	r0, [pc, #36]	; (8004f48 <USART2_IRQHandler+0x2c>)
 8004f24:	f007 fe12 	bl	800cb4c <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 8004f28:	4b08      	ldr	r3, [pc, #32]	; (8004f4c <USART2_IRQHandler+0x30>)
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 8004f2e:	79fb      	ldrb	r3, [r7, #7]
 8004f30:	4619      	mov	r1, r3
 8004f32:	4807      	ldr	r0, [pc, #28]	; (8004f50 <USART2_IRQHandler+0x34>)
 8004f34:	f7fe f8ce 	bl	80030d4 <update_fsm>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004f38:	4803      	ldr	r0, [pc, #12]	; (8004f48 <USART2_IRQHandler+0x2c>)
 8004f3a:	f007 fe07 	bl	800cb4c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004f3e:	bf00      	nop
 8004f40:	3708      	adds	r7, #8
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}
 8004f46:	bf00      	nop
 8004f48:	200050d8 	.word	0x200050d8
 8004f4c:	20004cd0 	.word	0x20004cd0
 8004f50:	200007c8 	.word	0x200007c8

08004f54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004f54:	b480      	push	{r7}
 8004f56:	af00      	add	r7, sp, #0
	return 1;
 8004f58:	2301      	movs	r3, #1
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <_kill>:

int _kill(int pid, int sig)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8004f6e:	f009 f9a1 	bl	800e2b4 <__errno>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2216      	movs	r2, #22
 8004f76:	601a      	str	r2, [r3, #0]
	return -1;
 8004f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3708      	adds	r7, #8
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <_exit>:

void _exit (int status)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b082      	sub	sp, #8
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8004f90:	6878      	ldr	r0, [r7, #4]
 8004f92:	f7ff ffe7 	bl	8004f64 <_kill>
	while (1) {}		/* Make sure we hang here */
 8004f96:	e7fe      	b.n	8004f96 <_exit+0x12>

08004f98 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
 8004fa8:	e00a      	b.n	8004fc0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004faa:	f3af 8000 	nop.w
 8004fae:	4601      	mov	r1, r0
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	1c5a      	adds	r2, r3, #1
 8004fb4:	60ba      	str	r2, [r7, #8]
 8004fb6:	b2ca      	uxtb	r2, r1
 8004fb8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	617b      	str	r3, [r7, #20]
 8004fc0:	697a      	ldr	r2, [r7, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	dbf0      	blt.n	8004faa <_read+0x12>
	}

return len;
 8004fc8:	687b      	ldr	r3, [r7, #4]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b086      	sub	sp, #24
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	60f8      	str	r0, [r7, #12]
 8004fda:	60b9      	str	r1, [r7, #8]
 8004fdc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004fde:	2300      	movs	r3, #0
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	e009      	b.n	8004ff8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	60ba      	str	r2, [r7, #8]
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	4618      	mov	r0, r3
 8004fee:	f000 fa8b 	bl	8005508 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	dbf1      	blt.n	8004fe4 <_write+0x12>
	}
	return len;
 8005000:	687b      	ldr	r3, [r7, #4]
}
 8005002:	4618      	mov	r0, r3
 8005004:	3718      	adds	r7, #24
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <_close>:

int _close(int file)
{
 800500a:	b480      	push	{r7}
 800500c:	b083      	sub	sp, #12
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
	return -1;
 8005012:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005016:	4618      	mov	r0, r3
 8005018:	370c      	adds	r7, #12
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr

08005022 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005022:	b480      	push	{r7}
 8005024:	b083      	sub	sp, #12
 8005026:	af00      	add	r7, sp, #0
 8005028:	6078      	str	r0, [r7, #4]
 800502a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005032:	605a      	str	r2, [r3, #4]
	return 0;
 8005034:	2300      	movs	r3, #0
}
 8005036:	4618      	mov	r0, r3
 8005038:	370c      	adds	r7, #12
 800503a:	46bd      	mov	sp, r7
 800503c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005040:	4770      	bx	lr

08005042 <_isatty>:

int _isatty(int file)
{
 8005042:	b480      	push	{r7}
 8005044:	b083      	sub	sp, #12
 8005046:	af00      	add	r7, sp, #0
 8005048:	6078      	str	r0, [r7, #4]
	return 1;
 800504a:	2301      	movs	r3, #1
}
 800504c:	4618      	mov	r0, r3
 800504e:	370c      	adds	r7, #12
 8005050:	46bd      	mov	sp, r7
 8005052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005056:	4770      	bx	lr

08005058 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
	return 0;
 8005064:	2300      	movs	r3, #0
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
	...

08005074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800507c:	4a14      	ldr	r2, [pc, #80]	; (80050d0 <_sbrk+0x5c>)
 800507e:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <_sbrk+0x60>)
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005088:	4b13      	ldr	r3, [pc, #76]	; (80050d8 <_sbrk+0x64>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d102      	bne.n	8005096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005090:	4b11      	ldr	r3, [pc, #68]	; (80050d8 <_sbrk+0x64>)
 8005092:	4a12      	ldr	r2, [pc, #72]	; (80050dc <_sbrk+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005096:	4b10      	ldr	r3, [pc, #64]	; (80050d8 <_sbrk+0x64>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	429a      	cmp	r2, r3
 80050a2:	d207      	bcs.n	80050b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80050a4:	f009 f906 	bl	800e2b4 <__errno>
 80050a8:	4603      	mov	r3, r0
 80050aa:	220c      	movs	r2, #12
 80050ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80050ae:	f04f 33ff 	mov.w	r3, #4294967295
 80050b2:	e009      	b.n	80050c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <_sbrk+0x64>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80050ba:	4b07      	ldr	r3, [pc, #28]	; (80050d8 <_sbrk+0x64>)
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4413      	add	r3, r2
 80050c2:	4a05      	ldr	r2, [pc, #20]	; (80050d8 <_sbrk+0x64>)
 80050c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80050c6:	68fb      	ldr	r3, [r7, #12]
}
 80050c8:	4618      	mov	r0, r3
 80050ca:	3718      	adds	r7, #24
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bd80      	pop	{r7, pc}
 80050d0:	20008000 	.word	0x20008000
 80050d4:	00000400 	.word	0x00000400
 80050d8:	20005088 	.word	0x20005088
 80050dc:	20005180 	.word	0x20005180

080050e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80050e4:	4b06      	ldr	r3, [pc, #24]	; (8005100 <SystemInit+0x20>)
 80050e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ea:	4a05      	ldr	r2, [pc, #20]	; (8005100 <SystemInit+0x20>)
 80050ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80050f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80050f4:	bf00      	nop
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	e000ed00 	.word	0xe000ed00

08005104 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b09c      	sub	sp, #112	; 0x70
 8005108:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800510a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800510e:	2200      	movs	r2, #0
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	605a      	str	r2, [r3, #4]
 8005114:	609a      	str	r2, [r3, #8]
 8005116:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005118:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800511c:	2200      	movs	r2, #0
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8005124:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005128:	2200      	movs	r2, #0
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	609a      	str	r2, [r3, #8]
 8005130:	60da      	str	r2, [r3, #12]
 8005132:	611a      	str	r2, [r3, #16]
 8005134:	615a      	str	r2, [r3, #20]
 8005136:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005138:	1d3b      	adds	r3, r7, #4
 800513a:	2234      	movs	r2, #52	; 0x34
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f009 f8f0 	bl	800e324 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005144:	4b54      	ldr	r3, [pc, #336]	; (8005298 <MX_TIM1_Init+0x194>)
 8005146:	4a55      	ldr	r2, [pc, #340]	; (800529c <MX_TIM1_Init+0x198>)
 8005148:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800514a:	4b53      	ldr	r3, [pc, #332]	; (8005298 <MX_TIM1_Init+0x194>)
 800514c:	2200      	movs	r2, #0
 800514e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005150:	4b51      	ldr	r3, [pc, #324]	; (8005298 <MX_TIM1_Init+0x194>)
 8005152:	2220      	movs	r2, #32
 8005154:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 8400;
 8005156:	4b50      	ldr	r3, [pc, #320]	; (8005298 <MX_TIM1_Init+0x194>)
 8005158:	f242 02d0 	movw	r2, #8400	; 0x20d0
 800515c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800515e:	4b4e      	ldr	r3, [pc, #312]	; (8005298 <MX_TIM1_Init+0x194>)
 8005160:	2200      	movs	r2, #0
 8005162:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005164:	4b4c      	ldr	r3, [pc, #304]	; (8005298 <MX_TIM1_Init+0x194>)
 8005166:	2201      	movs	r2, #1
 8005168:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800516a:	4b4b      	ldr	r3, [pc, #300]	; (8005298 <MX_TIM1_Init+0x194>)
 800516c:	2280      	movs	r2, #128	; 0x80
 800516e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005170:	4849      	ldr	r0, [pc, #292]	; (8005298 <MX_TIM1_Init+0x194>)
 8005172:	f005 ff47 	bl	800b004 <HAL_TIM_Base_Init>
 8005176:	4603      	mov	r3, r0
 8005178:	2b00      	cmp	r3, #0
 800517a:	d001      	beq.n	8005180 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800517c:	f7ff f9fd 	bl	800457a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005180:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005184:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005186:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800518a:	4619      	mov	r1, r3
 800518c:	4842      	ldr	r0, [pc, #264]	; (8005298 <MX_TIM1_Init+0x194>)
 800518e:	f006 fbed 	bl	800b96c <HAL_TIM_ConfigClockSource>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005198:	f7ff f9ef 	bl	800457a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800519c:	483e      	ldr	r0, [pc, #248]	; (8005298 <MX_TIM1_Init+0x194>)
 800519e:	f005 fff3 	bl	800b188 <HAL_TIM_PWM_Init>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80051a8:	f7ff f9e7 	bl	800457a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80051ac:	2320      	movs	r3, #32
 80051ae:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80051b0:	2300      	movs	r3, #0
 80051b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051b4:	2300      	movs	r3, #0
 80051b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80051b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80051bc:	4619      	mov	r1, r3
 80051be:	4836      	ldr	r0, [pc, #216]	; (8005298 <MX_TIM1_Init+0x194>)
 80051c0:	f007 f9f8 	bl	800c5b4 <HAL_TIMEx_MasterConfigSynchronization>
 80051c4:	4603      	mov	r3, r0
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d001      	beq.n	80051ce <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80051ca:	f7ff f9d6 	bl	800457a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80051ce:	2370      	movs	r3, #112	; 0x70
 80051d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80051d2:	2300      	movs	r3, #0
 80051d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80051d6:	2302      	movs	r3, #2
 80051d8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80051da:	2308      	movs	r3, #8
 80051dc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80051de:	2304      	movs	r3, #4
 80051e0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80051e2:	2300      	movs	r3, #0
 80051e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80051e6:	2300      	movs	r3, #0
 80051e8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80051ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80051ee:	2200      	movs	r2, #0
 80051f0:	4619      	mov	r1, r3
 80051f2:	4829      	ldr	r0, [pc, #164]	; (8005298 <MX_TIM1_Init+0x194>)
 80051f4:	f006 faaa 	bl	800b74c <HAL_TIM_PWM_ConfigChannel>
 80051f8:	4603      	mov	r3, r0
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80051fe:	f7ff f9bc 	bl	800457a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8005202:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005206:	2204      	movs	r2, #4
 8005208:	4619      	mov	r1, r3
 800520a:	4823      	ldr	r0, [pc, #140]	; (8005298 <MX_TIM1_Init+0x194>)
 800520c:	f006 fa9e 	bl	800b74c <HAL_TIM_PWM_ConfigChannel>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8005216:	f7ff f9b0 	bl	800457a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800521a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800521e:	2208      	movs	r2, #8
 8005220:	4619      	mov	r1, r3
 8005222:	481d      	ldr	r0, [pc, #116]	; (8005298 <MX_TIM1_Init+0x194>)
 8005224:	f006 fa92 	bl	800b74c <HAL_TIM_PWM_ConfigChannel>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 800522e:	f7ff f9a4 	bl	800457a <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8005232:	4819      	ldr	r0, [pc, #100]	; (8005298 <MX_TIM1_Init+0x194>)
 8005234:	f007 fae0 	bl	800c7f8 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8005238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800523c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800523e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005242:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005244:	2300      	movs	r3, #0
 8005246:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8005248:	2364      	movs	r3, #100	; 0x64
 800524a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005250:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005254:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005256:	2300      	movs	r3, #0
 8005258:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800525a:	2300      	movs	r3, #0
 800525c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005262:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005266:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800526c:	2300      	movs	r3, #0
 800526e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005270:	2300      	movs	r3, #0
 8005272:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005274:	1d3b      	adds	r3, r7, #4
 8005276:	4619      	mov	r1, r3
 8005278:	4807      	ldr	r0, [pc, #28]	; (8005298 <MX_TIM1_Init+0x194>)
 800527a:	f007 fa1d 	bl	800c6b8 <HAL_TIMEx_ConfigBreakDeadTime>
 800527e:	4603      	mov	r3, r0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d001      	beq.n	8005288 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8005284:	f7ff f979 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005288:	4803      	ldr	r0, [pc, #12]	; (8005298 <MX_TIM1_Init+0x194>)
 800528a:	f000 f82f 	bl	80052ec <HAL_TIM_MspPostInit>

}
 800528e:	bf00      	nop
 8005290:	3770      	adds	r7, #112	; 0x70
 8005292:	46bd      	mov	sp, r7
 8005294:	bd80      	pop	{r7, pc}
 8005296:	bf00      	nop
 8005298:	2000508c 	.word	0x2000508c
 800529c:	40012c00 	.word	0x40012c00

080052a0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a0d      	ldr	r2, [pc, #52]	; (80052e4 <HAL_TIM_Base_MspInit+0x44>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d113      	bne.n	80052da <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80052b2:	4b0d      	ldr	r3, [pc, #52]	; (80052e8 <HAL_TIM_Base_MspInit+0x48>)
 80052b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052b6:	4a0c      	ldr	r2, [pc, #48]	; (80052e8 <HAL_TIM_Base_MspInit+0x48>)
 80052b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80052bc:	6613      	str	r3, [r2, #96]	; 0x60
 80052be:	4b0a      	ldr	r3, [pc, #40]	; (80052e8 <HAL_TIM_Base_MspInit+0x48>)
 80052c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 80052ca:	2200      	movs	r2, #0
 80052cc:	2100      	movs	r1, #0
 80052ce:	2019      	movs	r0, #25
 80052d0:	f001 fd1b 	bl	8006d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052d4:	2019      	movs	r0, #25
 80052d6:	f001 fd32 	bl	8006d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80052da:	bf00      	nop
 80052dc:	3710      	adds	r7, #16
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40021000 	.word	0x40021000

080052ec <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b08a      	sub	sp, #40	; 0x28
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80052f4:	f107 0314 	add.w	r3, r7, #20
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
 80052fc:	605a      	str	r2, [r3, #4]
 80052fe:	609a      	str	r2, [r3, #8]
 8005300:	60da      	str	r2, [r3, #12]
 8005302:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a2f      	ldr	r2, [pc, #188]	; (80053c8 <HAL_TIM_MspPostInit+0xdc>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d157      	bne.n	80053be <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800530e:	4b2f      	ldr	r3, [pc, #188]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 8005310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005312:	4a2e      	ldr	r2, [pc, #184]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 8005314:	f043 0304 	orr.w	r3, r3, #4
 8005318:	64d3      	str	r3, [r2, #76]	; 0x4c
 800531a:	4b2c      	ldr	r3, [pc, #176]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 800531c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800531e:	f003 0304 	and.w	r3, r3, #4
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005326:	4b29      	ldr	r3, [pc, #164]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 8005328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800532a:	4a28      	ldr	r2, [pc, #160]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 800532c:	f043 0302 	orr.w	r3, r3, #2
 8005330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005332:	4b26      	ldr	r3, [pc, #152]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 8005334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005336:	f003 0302 	and.w	r3, r3, #2
 800533a:	60fb      	str	r3, [r7, #12]
 800533c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800533e:	4b23      	ldr	r3, [pc, #140]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 8005340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005342:	4a22      	ldr	r2, [pc, #136]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 8005344:	f043 0301 	orr.w	r3, r3, #1
 8005348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800534a:	4b20      	ldr	r3, [pc, #128]	; (80053cc <HAL_TIM_MspPostInit+0xe0>)
 800534c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	60bb      	str	r3, [r7, #8]
 8005354:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005356:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800535a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800535c:	2302      	movs	r3, #2
 800535e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005364:	2300      	movs	r3, #0
 8005366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005368:	2304      	movs	r3, #4
 800536a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800536c:	f107 0314 	add.w	r3, r7, #20
 8005370:	4619      	mov	r1, r3
 8005372:	4817      	ldr	r0, [pc, #92]	; (80053d0 <HAL_TIM_MspPostInit+0xe4>)
 8005374:	f002 fe0e 	bl	8007f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800537c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800537e:	2302      	movs	r3, #2
 8005380:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005382:	2300      	movs	r3, #0
 8005384:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005386:	2300      	movs	r3, #0
 8005388:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800538a:	2304      	movs	r3, #4
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800538e:	f107 0314 	add.w	r3, r7, #20
 8005392:	4619      	mov	r1, r3
 8005394:	480f      	ldr	r0, [pc, #60]	; (80053d4 <HAL_TIM_MspPostInit+0xe8>)
 8005396:	f002 fdfd 	bl	8007f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800539a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800539e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80053a0:	2302      	movs	r3, #2
 80053a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a4:	2300      	movs	r3, #0
 80053a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053a8:	2300      	movs	r3, #0
 80053aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80053ac:	2306      	movs	r3, #6
 80053ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053b0:	f107 0314 	add.w	r3, r7, #20
 80053b4:	4619      	mov	r1, r3
 80053b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80053ba:	f002 fdeb 	bl	8007f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80053be:	bf00      	nop
 80053c0:	3728      	adds	r7, #40	; 0x28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	40012c00 	.word	0x40012c00
 80053cc:	40021000 	.word	0x40021000
 80053d0:	48000800 	.word	0x48000800
 80053d4:	48000400 	.word	0x48000400

080053d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80053dc:	4b22      	ldr	r3, [pc, #136]	; (8005468 <MX_USART2_UART_Init+0x90>)
 80053de:	4a23      	ldr	r2, [pc, #140]	; (800546c <MX_USART2_UART_Init+0x94>)
 80053e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80053e2:	4b21      	ldr	r3, [pc, #132]	; (8005468 <MX_USART2_UART_Init+0x90>)
 80053e4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80053e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80053ea:	4b1f      	ldr	r3, [pc, #124]	; (8005468 <MX_USART2_UART_Init+0x90>)
 80053ec:	2200      	movs	r2, #0
 80053ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80053f0:	4b1d      	ldr	r3, [pc, #116]	; (8005468 <MX_USART2_UART_Init+0x90>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80053f6:	4b1c      	ldr	r3, [pc, #112]	; (8005468 <MX_USART2_UART_Init+0x90>)
 80053f8:	2200      	movs	r2, #0
 80053fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80053fc:	4b1a      	ldr	r3, [pc, #104]	; (8005468 <MX_USART2_UART_Init+0x90>)
 80053fe:	220c      	movs	r2, #12
 8005400:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005402:	4b19      	ldr	r3, [pc, #100]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005404:	2200      	movs	r2, #0
 8005406:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8005408:	4b17      	ldr	r3, [pc, #92]	; (8005468 <MX_USART2_UART_Init+0x90>)
 800540a:	2200      	movs	r2, #0
 800540c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800540e:	4b16      	ldr	r3, [pc, #88]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005410:	2200      	movs	r2, #0
 8005412:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005414:	4b14      	ldr	r3, [pc, #80]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005416:	2200      	movs	r2, #0
 8005418:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800541a:	4b13      	ldr	r3, [pc, #76]	; (8005468 <MX_USART2_UART_Init+0x90>)
 800541c:	2200      	movs	r2, #0
 800541e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8005420:	4811      	ldr	r0, [pc, #68]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005422:	f007 fa67 	bl	800c8f4 <HAL_UART_Init>
 8005426:	4603      	mov	r3, r0
 8005428:	2b00      	cmp	r3, #0
 800542a:	d001      	beq.n	8005430 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800542c:	f7ff f8a5 	bl	800457a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005430:	2100      	movs	r1, #0
 8005432:	480d      	ldr	r0, [pc, #52]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005434:	f008 fe6b 	bl	800e10e <HAL_UARTEx_SetTxFifoThreshold>
 8005438:	4603      	mov	r3, r0
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800543e:	f7ff f89c 	bl	800457a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005442:	2100      	movs	r1, #0
 8005444:	4808      	ldr	r0, [pc, #32]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005446:	f008 fea0 	bl	800e18a <HAL_UARTEx_SetRxFifoThreshold>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d001      	beq.n	8005454 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005450:	f7ff f893 	bl	800457a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005454:	4804      	ldr	r0, [pc, #16]	; (8005468 <MX_USART2_UART_Init+0x90>)
 8005456:	f008 fe21 	bl	800e09c <HAL_UARTEx_DisableFifoMode>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d001      	beq.n	8005464 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005460:	f7ff f88b 	bl	800457a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005464:	bf00      	nop
 8005466:	bd80      	pop	{r7, pc}
 8005468:	200050d8 	.word	0x200050d8
 800546c:	40004400 	.word	0x40004400

08005470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b08a      	sub	sp, #40	; 0x28
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	2200      	movs	r2, #0
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	605a      	str	r2, [r3, #4]
 8005482:	609a      	str	r2, [r3, #8]
 8005484:	60da      	str	r2, [r3, #12]
 8005486:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a1b      	ldr	r2, [pc, #108]	; (80054fc <HAL_UART_MspInit+0x8c>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d12f      	bne.n	80054f2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005492:	4b1b      	ldr	r3, [pc, #108]	; (8005500 <HAL_UART_MspInit+0x90>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	4a1a      	ldr	r2, [pc, #104]	; (8005500 <HAL_UART_MspInit+0x90>)
 8005498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800549c:	6593      	str	r3, [r2, #88]	; 0x58
 800549e:	4b18      	ldr	r3, [pc, #96]	; (8005500 <HAL_UART_MspInit+0x90>)
 80054a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	613b      	str	r3, [r7, #16]
 80054a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80054aa:	4b15      	ldr	r3, [pc, #84]	; (8005500 <HAL_UART_MspInit+0x90>)
 80054ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ae:	4a14      	ldr	r2, [pc, #80]	; (8005500 <HAL_UART_MspInit+0x90>)
 80054b0:	f043 0302 	orr.w	r3, r3, #2
 80054b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054b6:	4b12      	ldr	r3, [pc, #72]	; (8005500 <HAL_UART_MspInit+0x90>)
 80054b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054ba:	f003 0302 	and.w	r3, r3, #2
 80054be:	60fb      	str	r3, [r7, #12]
 80054c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 80054c2:	2318      	movs	r3, #24
 80054c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c6:	2302      	movs	r3, #2
 80054c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054ce:	2300      	movs	r3, #0
 80054d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80054d2:	2307      	movs	r3, #7
 80054d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80054d6:	f107 0314 	add.w	r3, r7, #20
 80054da:	4619      	mov	r1, r3
 80054dc:	4809      	ldr	r0, [pc, #36]	; (8005504 <HAL_UART_MspInit+0x94>)
 80054de:	f002 fd59 	bl	8007f94 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80054e2:	2200      	movs	r2, #0
 80054e4:	2100      	movs	r1, #0
 80054e6:	2026      	movs	r0, #38	; 0x26
 80054e8:	f001 fc0f 	bl	8006d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80054ec:	2026      	movs	r0, #38	; 0x26
 80054ee:	f001 fc26 	bl	8006d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80054f2:	bf00      	nop
 80054f4:	3728      	adds	r7, #40	; 0x28
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	40004400 	.word	0x40004400
 8005500:	40021000 	.word	0x40021000
 8005504:	48000400 	.word	0x48000400

08005508 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8005510:	1d39      	adds	r1, r7, #4
 8005512:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005516:	2201      	movs	r2, #1
 8005518:	4803      	ldr	r0, [pc, #12]	; (8005528 <__io_putchar+0x20>)
 800551a:	f007 fa3b 	bl	800c994 <HAL_UART_Transmit>
return 0;
 800551e:	2300      	movs	r3, #0
}
 8005520:	4618      	mov	r0, r3
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	200050d8 	.word	0x200050d8

0800552c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005534:	2201      	movs	r2, #1
 8005536:	4904      	ldr	r1, [pc, #16]	; (8005548 <HAL_UART_RxCpltCallback+0x1c>)
 8005538:	4804      	ldr	r0, [pc, #16]	; (800554c <HAL_UART_RxCpltCallback+0x20>)
 800553a:	f007 fac1 	bl	800cac0 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	20004cd0 	.word	0x20004cd0
 800554c:	200050d8 	.word	0x200050d8

08005550 <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 8005550:	b580      	push	{r7, lr}
 8005552:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005554:	2380      	movs	r3, #128	; 0x80
 8005556:	4a03      	ldr	r2, [pc, #12]	; (8005564 <store_eeprom_regs+0x14>)
 8005558:	2140      	movs	r1, #64	; 0x40
 800555a:	4803      	ldr	r0, [pc, #12]	; (8005568 <store_eeprom_regs+0x18>)
 800555c:	f7fc fbc8 	bl	8001cf0 <eeprom_store>
}
 8005560:	bf00      	nop
 8005562:	bd80      	pop	{r7, pc}
 8005564:	20004dd4 	.word	0x20004dd4
 8005568:	20004cd4 	.word	0x20004cd4

0800556c <load_eeprom_regs>:

void load_eeprom_regs()
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005570:	2380      	movs	r3, #128	; 0x80
 8005572:	4a03      	ldr	r2, [pc, #12]	; (8005580 <load_eeprom_regs+0x14>)
 8005574:	2140      	movs	r1, #64	; 0x40
 8005576:	4803      	ldr	r0, [pc, #12]	; (8005584 <load_eeprom_regs+0x18>)
 8005578:	f7fc fb36 	bl	8001be8 <eeprom_restore>
}
 800557c:	bf00      	nop
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20004dd4 	.word	0x20004dd4
 8005584:	20004cd4 	.word	0x20004cd4

08005588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005588:	480d      	ldr	r0, [pc, #52]	; (80055c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800558a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800558c:	480d      	ldr	r0, [pc, #52]	; (80055c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800558e:	490e      	ldr	r1, [pc, #56]	; (80055c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005590:	4a0e      	ldr	r2, [pc, #56]	; (80055cc <LoopForever+0xe>)
  movs r3, #0
 8005592:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005594:	e002      	b.n	800559c <LoopCopyDataInit>

08005596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800559a:	3304      	adds	r3, #4

0800559c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800559c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800559e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055a0:	d3f9      	bcc.n	8005596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055a2:	4a0b      	ldr	r2, [pc, #44]	; (80055d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80055a4:	4c0b      	ldr	r4, [pc, #44]	; (80055d4 <LoopForever+0x16>)
  movs r3, #0
 80055a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055a8:	e001      	b.n	80055ae <LoopFillZerobss>

080055aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055ac:	3204      	adds	r2, #4

080055ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055b0:	d3fb      	bcc.n	80055aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80055b2:	f7ff fd95 	bl	80050e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055b6:	f008 fe83 	bl	800e2c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80055ba:	f7fe fca1 	bl	8003f00 <main>

080055be <LoopForever>:

LoopForever:
    b LoopForever
 80055be:	e7fe      	b.n	80055be <LoopForever>
  ldr   r0, =_estack
 80055c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80055c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055c8:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 80055cc:	08014110 	.word	0x08014110
  ldr r2, =_sbss
 80055d0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 80055d4:	2000517c 	.word	0x2000517c

080055d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80055d8:	e7fe      	b.n	80055d8 <ADC1_2_IRQHandler>

080055da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80055da:	b580      	push	{r7, lr}
 80055dc:	b082      	sub	sp, #8
 80055de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80055e0:	2300      	movs	r3, #0
 80055e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80055e4:	2003      	movs	r0, #3
 80055e6:	f001 fb85 	bl	8006cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80055ea:	2000      	movs	r0, #0
 80055ec:	f000 f80e 	bl	800560c <HAL_InitTick>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d002      	beq.n	80055fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	71fb      	strb	r3, [r7, #7]
 80055fa:	e001      	b.n	8005600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80055fc:	f7ff fbe6 	bl	8004dcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005600:	79fb      	ldrb	r3, [r7, #7]

}
 8005602:	4618      	mov	r0, r3
 8005604:	3708      	adds	r7, #8
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}
	...

0800560c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005614:	2300      	movs	r3, #0
 8005616:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005618:	4b16      	ldr	r3, [pc, #88]	; (8005674 <HAL_InitTick+0x68>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d022      	beq.n	8005666 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005620:	4b15      	ldr	r3, [pc, #84]	; (8005678 <HAL_InitTick+0x6c>)
 8005622:	681a      	ldr	r2, [r3, #0]
 8005624:	4b13      	ldr	r3, [pc, #76]	; (8005674 <HAL_InitTick+0x68>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800562c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005630:	fbb2 f3f3 	udiv	r3, r2, r3
 8005634:	4618      	mov	r0, r3
 8005636:	f001 fb90 	bl	8006d5a <HAL_SYSTICK_Config>
 800563a:	4603      	mov	r3, r0
 800563c:	2b00      	cmp	r3, #0
 800563e:	d10f      	bne.n	8005660 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2b0f      	cmp	r3, #15
 8005644:	d809      	bhi.n	800565a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005646:	2200      	movs	r2, #0
 8005648:	6879      	ldr	r1, [r7, #4]
 800564a:	f04f 30ff 	mov.w	r0, #4294967295
 800564e:	f001 fb5c 	bl	8006d0a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005652:	4a0a      	ldr	r2, [pc, #40]	; (800567c <HAL_InitTick+0x70>)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6013      	str	r3, [r2, #0]
 8005658:	e007      	b.n	800566a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
 800565e:	e004      	b.n	800566a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	73fb      	strb	r3, [r7, #15]
 8005664:	e001      	b.n	800566a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800566a:	7bfb      	ldrb	r3, [r7, #15]
}
 800566c:	4618      	mov	r0, r3
 800566e:	3710      	adds	r7, #16
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}
 8005674:	20000008 	.word	0x20000008
 8005678:	20000000 	.word	0x20000000
 800567c:	20000004 	.word	0x20000004

08005680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005680:	b480      	push	{r7}
 8005682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005684:	4b05      	ldr	r3, [pc, #20]	; (800569c <HAL_IncTick+0x1c>)
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	4b05      	ldr	r3, [pc, #20]	; (80056a0 <HAL_IncTick+0x20>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4413      	add	r3, r2
 800568e:	4a03      	ldr	r2, [pc, #12]	; (800569c <HAL_IncTick+0x1c>)
 8005690:	6013      	str	r3, [r2, #0]
}
 8005692:	bf00      	nop
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20005168 	.word	0x20005168
 80056a0:	20000008 	.word	0x20000008

080056a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056a4:	b480      	push	{r7}
 80056a6:	af00      	add	r7, sp, #0
  return uwTick;
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <HAL_GetTick+0x14>)
 80056aa:	681b      	ldr	r3, [r3, #0]
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr
 80056b6:	bf00      	nop
 80056b8:	20005168 	.word	0x20005168

080056bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b084      	sub	sp, #16
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80056c4:	f7ff ffee 	bl	80056a4 <HAL_GetTick>
 80056c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056d4:	d004      	beq.n	80056e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80056d6:	4b09      	ldr	r3, [pc, #36]	; (80056fc <HAL_Delay+0x40>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68fa      	ldr	r2, [r7, #12]
 80056dc:	4413      	add	r3, r2
 80056de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80056e0:	bf00      	nop
 80056e2:	f7ff ffdf 	bl	80056a4 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d8f7      	bhi.n	80056e2 <HAL_Delay+0x26>
  {
  }
}
 80056f2:	bf00      	nop
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}
 80056fc:	20000008 	.word	0x20000008

08005700 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	431a      	orrs	r2, r3
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	609a      	str	r2, [r3, #8]
}
 800571a:	bf00      	nop
 800571c:	370c      	adds	r7, #12
 800571e:	46bd      	mov	sp, r7
 8005720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005724:	4770      	bx	lr

08005726 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005726:	b480      	push	{r7}
 8005728:	b083      	sub	sp, #12
 800572a:	af00      	add	r7, sp, #0
 800572c:	6078      	str	r0, [r7, #4]
 800572e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800575c:	4618      	mov	r0, r3
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005768:	b480      	push	{r7}
 800576a:	b087      	sub	sp, #28
 800576c:	af00      	add	r7, sp, #0
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	60b9      	str	r1, [r7, #8]
 8005772:	607a      	str	r2, [r7, #4]
 8005774:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	3360      	adds	r3, #96	; 0x60
 800577a:	461a      	mov	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4413      	add	r3, r2
 8005782:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	4b08      	ldr	r3, [pc, #32]	; (80057ac <LL_ADC_SetOffset+0x44>)
 800578a:	4013      	ands	r3, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005792:	683a      	ldr	r2, [r7, #0]
 8005794:	430a      	orrs	r2, r1
 8005796:	4313      	orrs	r3, r2
 8005798:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr
 80057ac:	03fff000 	.word	0x03fff000

080057b0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3360      	adds	r3, #96	; 0x60
 80057be:	461a      	mov	r2, r3
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	4413      	add	r3, r2
 80057c6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80057d0:	4618      	mov	r0, r3
 80057d2:	3714      	adds	r7, #20
 80057d4:	46bd      	mov	sp, r7
 80057d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057da:	4770      	bx	lr

080057dc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	3360      	adds	r3, #96	; 0x60
 80057ec:	461a      	mov	r2, r3
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	431a      	orrs	r2, r3
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005806:	bf00      	nop
 8005808:	371c      	adds	r7, #28
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr

08005812 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005812:	b480      	push	{r7}
 8005814:	b087      	sub	sp, #28
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	3360      	adds	r3, #96	; 0x60
 8005822:	461a      	mov	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4413      	add	r3, r2
 800582a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	431a      	orrs	r2, r3
 8005838:	697b      	ldr	r3, [r7, #20]
 800583a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800583c:	bf00      	nop
 800583e:	371c      	adds	r7, #28
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005848:	b480      	push	{r7}
 800584a:	b087      	sub	sp, #28
 800584c:	af00      	add	r7, sp, #0
 800584e:	60f8      	str	r0, [r7, #12]
 8005850:	60b9      	str	r1, [r7, #8]
 8005852:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	3360      	adds	r3, #96	; 0x60
 8005858:	461a      	mov	r2, r3
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	009b      	lsls	r3, r3, #2
 800585e:	4413      	add	r3, r2
 8005860:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	431a      	orrs	r2, r3
 800586e:	697b      	ldr	r3, [r7, #20]
 8005870:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005872:	bf00      	nop
 8005874:	371c      	adds	r7, #28
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800587e:	b480      	push	{r7}
 8005880:	b083      	sub	sp, #12
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
 8005886:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	615a      	str	r2, [r3, #20]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	68db      	ldr	r3, [r3, #12]
 80058b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80058bc:	2300      	movs	r3, #0
}
 80058be:	4618      	mov	r0, r3
 80058c0:	370c      	adds	r7, #12
 80058c2:	46bd      	mov	sp, r7
 80058c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c8:	4770      	bx	lr

080058ca <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80058ca:	b480      	push	{r7}
 80058cc:	b087      	sub	sp, #28
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	3330      	adds	r3, #48	; 0x30
 80058da:	461a      	mov	r2, r3
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	0a1b      	lsrs	r3, r3, #8
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	f003 030c 	and.w	r3, r3, #12
 80058e6:	4413      	add	r3, r2
 80058e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f003 031f 	and.w	r3, r3, #31
 80058f4:	211f      	movs	r1, #31
 80058f6:	fa01 f303 	lsl.w	r3, r1, r3
 80058fa:	43db      	mvns	r3, r3
 80058fc:	401a      	ands	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	0e9b      	lsrs	r3, r3, #26
 8005902:	f003 011f 	and.w	r1, r3, #31
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	f003 031f 	and.w	r3, r3, #31
 800590c:	fa01 f303 	lsl.w	r3, r1, r3
 8005910:	431a      	orrs	r2, r3
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005916:	bf00      	nop
 8005918:	371c      	adds	r7, #28
 800591a:	46bd      	mov	sp, r7
 800591c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005920:	4770      	bx	lr

08005922 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005922:	b480      	push	{r7}
 8005924:	b087      	sub	sp, #28
 8005926:	af00      	add	r7, sp, #0
 8005928:	60f8      	str	r0, [r7, #12]
 800592a:	60b9      	str	r1, [r7, #8]
 800592c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	3314      	adds	r3, #20
 8005932:	461a      	mov	r2, r3
 8005934:	68bb      	ldr	r3, [r7, #8]
 8005936:	0e5b      	lsrs	r3, r3, #25
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	f003 0304 	and.w	r3, r3, #4
 800593e:	4413      	add	r3, r2
 8005940:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	0d1b      	lsrs	r3, r3, #20
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2107      	movs	r1, #7
 8005950:	fa01 f303 	lsl.w	r3, r1, r3
 8005954:	43db      	mvns	r3, r3
 8005956:	401a      	ands	r2, r3
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	0d1b      	lsrs	r3, r3, #20
 800595c:	f003 031f 	and.w	r3, r3, #31
 8005960:	6879      	ldr	r1, [r7, #4]
 8005962:	fa01 f303 	lsl.w	r3, r1, r3
 8005966:	431a      	orrs	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	60f8      	str	r0, [r7, #12]
 8005980:	60b9      	str	r1, [r7, #8]
 8005982:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005990:	43db      	mvns	r3, r3
 8005992:	401a      	ands	r2, r3
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f003 0318 	and.w	r3, r3, #24
 800599a:	4908      	ldr	r1, [pc, #32]	; (80059bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800599c:	40d9      	lsrs	r1, r3
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	400b      	ands	r3, r1
 80059a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80059a6:	431a      	orrs	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80059ae:	bf00      	nop
 80059b0:	3714      	adds	r7, #20
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	0007ffff 	.word	0x0007ffff

080059c0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80059c0:	b480      	push	{r7}
 80059c2:	b083      	sub	sp, #12
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 031f 	and.w	r3, r3, #31
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80059ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	6093      	str	r3, [r2, #8]
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b083      	sub	sp, #12
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a14:	d101      	bne.n	8005a1a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005a16:	2301      	movs	r3, #1
 8005a18:	e000      	b.n	8005a1c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005a38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a3c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	689b      	ldr	r3, [r3, #8]
 8005a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a64:	d101      	bne.n	8005a6a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005a66:	2301      	movs	r3, #1
 8005a68:	e000      	b.n	8005a6c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	689b      	ldr	r3, [r3, #8]
 8005a84:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a8c:	f043 0201 	orr.w	r2, r3, #1
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f003 0301 	and.w	r3, r3, #1
 8005ab0:	2b01      	cmp	r3, #1
 8005ab2:	d101      	bne.n	8005ab8 <LL_ADC_IsEnabled+0x18>
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	e000      	b.n	8005aba <LL_ADC_IsEnabled+0x1a>
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b083      	sub	sp, #12
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ad6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ada:	f043 0204 	orr.w	r2, r3, #4
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005ae2:	bf00      	nop
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	f003 0304 	and.w	r3, r3, #4
 8005afe:	2b04      	cmp	r3, #4
 8005b00:	d101      	bne.n	8005b06 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0308 	and.w	r3, r3, #8
 8005b24:	2b08      	cmp	r3, #8
 8005b26:	d101      	bne.n	8005b2c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e000      	b.n	8005b2e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
	...

08005b3c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005b3c:	b590      	push	{r4, r7, lr}
 8005b3e:	b089      	sub	sp, #36	; 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005b44:	2300      	movs	r3, #0
 8005b46:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005b48:	2300      	movs	r3, #0
 8005b4a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d101      	bne.n	8005b56 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	e177      	b.n	8005e46 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d109      	bne.n	8005b78 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f7fb fb6d 	bl	8001244 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff ff3f 	bl	8005a00 <LL_ADC_IsDeepPowerDownEnabled>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	f7ff ff25 	bl	80059dc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7ff ff5a 	bl	8005a50 <LL_ADC_IsInternalRegulatorEnabled>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d115      	bne.n	8005bce <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ff3e 	bl	8005a28 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8005bac:	4b9c      	ldr	r3, [pc, #624]	; (8005e20 <HAL_ADC_Init+0x2e4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	099b      	lsrs	r3, r3, #6
 8005bb2:	4a9c      	ldr	r2, [pc, #624]	; (8005e24 <HAL_ADC_Init+0x2e8>)
 8005bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8005bb8:	099b      	lsrs	r3, r3, #6
 8005bba:	3301      	adds	r3, #1
 8005bbc:	005b      	lsls	r3, r3, #1
 8005bbe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bc0:	e002      	b.n	8005bc8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8005bc2:	68bb      	ldr	r3, [r7, #8]
 8005bc4:	3b01      	subs	r3, #1
 8005bc6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1f9      	bne.n	8005bc2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7ff ff3c 	bl	8005a50 <LL_ADC_IsInternalRegulatorEnabled>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10d      	bne.n	8005bfa <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005be2:	f043 0210 	orr.w	r2, r3, #16
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bee:	f043 0201 	orr.w	r2, r3, #1
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7ff ff75 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005c04:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	f003 0310 	and.w	r3, r3, #16
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	f040 8110 	bne.w	8005e34 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f040 810c 	bne.w	8005e34 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c20:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005c24:	f043 0202 	orr.w	r2, r3, #2
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff35 	bl	8005aa0 <LL_ADC_IsEnabled>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d111      	bne.n	8005c60 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005c3c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005c40:	f7ff ff2e 	bl	8005aa0 <LL_ADC_IsEnabled>
 8005c44:	4604      	mov	r4, r0
 8005c46:	4878      	ldr	r0, [pc, #480]	; (8005e28 <HAL_ADC_Init+0x2ec>)
 8005c48:	f7ff ff2a 	bl	8005aa0 <LL_ADC_IsEnabled>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	4323      	orrs	r3, r4
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d105      	bne.n	8005c60 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4874      	ldr	r0, [pc, #464]	; (8005e2c <HAL_ADC_Init+0x2f0>)
 8005c5c:	f7ff fd50 	bl	8005700 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	7f5b      	ldrb	r3, [r3, #29]
 8005c64:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c6a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005c70:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005c76:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c7e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005c80:	4313      	orrs	r3, r2
 8005c82:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005c8a:	2b01      	cmp	r3, #1
 8005c8c:	d106      	bne.n	8005c9c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	3b01      	subs	r3, #1
 8005c94:	045b      	lsls	r3, r3, #17
 8005c96:	69ba      	ldr	r2, [r7, #24]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d009      	beq.n	8005cb8 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	4b5c      	ldr	r3, [pc, #368]	; (8005e30 <HAL_ADC_Init+0x2f4>)
 8005cc0:	4013      	ands	r3, r2
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6812      	ldr	r2, [r2, #0]
 8005cc6:	69b9      	ldr	r1, [r7, #24]
 8005cc8:	430b      	orrs	r3, r1
 8005cca:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	430a      	orrs	r2, r1
 8005ce0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	f7ff ff01 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005cec:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff ff0e 	bl	8005b14 <LL_ADC_INJ_IsConversionOngoing>
 8005cf8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d16d      	bne.n	8005ddc <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d16a      	bne.n	8005ddc <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d0a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d12:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005d14:	4313      	orrs	r3, r2
 8005d16:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	68db      	ldr	r3, [r3, #12]
 8005d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d22:	f023 0302 	bic.w	r3, r3, #2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	69b9      	ldr	r1, [r7, #24]
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d017      	beq.n	8005d68 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	691a      	ldr	r2, [r3, #16]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005d46:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d50:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d58:	687a      	ldr	r2, [r7, #4]
 8005d5a:	6911      	ldr	r1, [r2, #16]
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	6812      	ldr	r2, [r2, #0]
 8005d60:	430b      	orrs	r3, r1
 8005d62:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005d66:	e013      	b.n	8005d90 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	691a      	ldr	r2, [r3, #16]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d76:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	6812      	ldr	r2, [r2, #0]
 8005d84:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005d88:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005d8c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d118      	bne.n	8005dcc <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	691b      	ldr	r3, [r3, #16]
 8005da0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005da4:	f023 0304 	bic.w	r3, r3, #4
 8005da8:	687a      	ldr	r2, [r7, #4]
 8005daa:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005db0:	4311      	orrs	r1, r2
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005db6:	4311      	orrs	r1, r2
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005dbc:	430a      	orrs	r2, r1
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f042 0201 	orr.w	r2, r2, #1
 8005dc8:	611a      	str	r2, [r3, #16]
 8005dca:	e007      	b.n	8005ddc <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	691a      	ldr	r2, [r3, #16]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	695b      	ldr	r3, [r3, #20]
 8005de0:	2b01      	cmp	r3, #1
 8005de2:	d10c      	bne.n	8005dfe <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dea:	f023 010f 	bic.w	r1, r3, #15
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6a1b      	ldr	r3, [r3, #32]
 8005df2:	1e5a      	subs	r2, r3, #1
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	631a      	str	r2, [r3, #48]	; 0x30
 8005dfc:	e007      	b.n	8005e0e <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 020f 	bic.w	r2, r2, #15
 8005e0c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e12:	f023 0303 	bic.w	r3, r3, #3
 8005e16:	f043 0201 	orr.w	r2, r3, #1
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e1e:	e011      	b.n	8005e44 <HAL_ADC_Init+0x308>
 8005e20:	20000000 	.word	0x20000000
 8005e24:	053e2d63 	.word	0x053e2d63
 8005e28:	50000100 	.word	0x50000100
 8005e2c:	50000300 	.word	0x50000300
 8005e30:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f043 0210 	orr.w	r2, r3, #16
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005e40:	2301      	movs	r3, #1
 8005e42:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005e44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e46:	4618      	mov	r0, r3
 8005e48:	3724      	adds	r7, #36	; 0x24
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd90      	pop	{r4, r7, pc}
 8005e4e:	bf00      	nop

08005e50 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b086      	sub	sp, #24
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	60f8      	str	r0, [r7, #12]
 8005e58:	60b9      	str	r1, [r7, #8]
 8005e5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005e5c:	4851      	ldr	r0, [pc, #324]	; (8005fa4 <HAL_ADC_Start_DMA+0x154>)
 8005e5e:	f7ff fdaf 	bl	80059c0 <LL_ADC_GetMultimode>
 8005e62:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff fe40 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f040 808f 	bne.w	8005f94 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_ADC_Start_DMA+0x34>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e08a      	b.n	8005f9a <HAL_ADC_Start_DMA+0x14a>
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d005      	beq.n	8005e9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b05      	cmp	r3, #5
 8005e96:	d002      	beq.n	8005e9e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	2b09      	cmp	r3, #9
 8005e9c:	d173      	bne.n	8005f86 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8005e9e:	68f8      	ldr	r0, [r7, #12]
 8005ea0:	f000 fc98 	bl	80067d4 <ADC_Enable>
 8005ea4:	4603      	mov	r3, r0
 8005ea6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d166      	bne.n	8005f7c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005eb6:	f023 0301 	bic.w	r3, r3, #1
 8005eba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a38      	ldr	r2, [pc, #224]	; (8005fa8 <HAL_ADC_Start_DMA+0x158>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d002      	beq.n	8005ed2 <HAL_ADC_Start_DMA+0x82>
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	e001      	b.n	8005ed6 <HAL_ADC_Start_DMA+0x86>
 8005ed2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8005ed6:	68fa      	ldr	r2, [r7, #12]
 8005ed8:	6812      	ldr	r2, [r2, #0]
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d002      	beq.n	8005ee4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d105      	bne.n	8005ef0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ee8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d006      	beq.n	8005f0a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f00:	f023 0206 	bic.w	r2, r3, #6
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	661a      	str	r2, [r3, #96]	; 0x60
 8005f08:	e002      	b.n	8005f10 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f14:	4a25      	ldr	r2, [pc, #148]	; (8005fac <HAL_ADC_Start_DMA+0x15c>)
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1c:	4a24      	ldr	r2, [pc, #144]	; (8005fb0 <HAL_ADC_Start_DMA+0x160>)
 8005f1e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f24:	4a23      	ldr	r2, [pc, #140]	; (8005fb4 <HAL_ADC_Start_DMA+0x164>)
 8005f26:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	221c      	movs	r2, #28
 8005f2e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685a      	ldr	r2, [r3, #4]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0210 	orr.w	r2, r2, #16
 8005f46:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f042 0201 	orr.w	r2, r2, #1
 8005f56:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3340      	adds	r3, #64	; 0x40
 8005f62:	4619      	mov	r1, r3
 8005f64:	68ba      	ldr	r2, [r7, #8]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f000 ffac 	bl	8006ec4 <HAL_DMA_Start_IT>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4618      	mov	r0, r3
 8005f76:	f7ff fda6 	bl	8005ac6 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8005f7a:	e00d      	b.n	8005f98 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8005f84:	e008      	b.n	8005f98 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8005f92:	e001      	b.n	8005f98 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8005f94:	2302      	movs	r3, #2
 8005f96:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f98:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	3718      	adds	r7, #24
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd80      	pop	{r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	50000300 	.word	0x50000300
 8005fa8:	50000100 	.word	0x50000100
 8005fac:	08006899 	.word	0x08006899
 8005fb0:	08006971 	.word	0x08006971
 8005fb4:	0800698d 	.word	0x0800698d

08005fb8 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8005fc0:	bf00      	nop
 8005fc2:	370c      	adds	r7, #12
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fca:	4770      	bx	lr

08005fcc <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr

08005fe0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005fe0:	b480      	push	{r7}
 8005fe2:	b083      	sub	sp, #12
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b0b6      	sub	sp, #216	; 0xd8
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]
 8005ffc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006004:	2300      	movs	r3, #0
 8006006:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800600e:	2b01      	cmp	r3, #1
 8006010:	d101      	bne.n	8006016 <HAL_ADC_ConfigChannel+0x22>
 8006012:	2302      	movs	r3, #2
 8006014:	e3c8      	b.n	80067a8 <HAL_ADC_ConfigChannel+0x7b4>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2201      	movs	r2, #1
 800601a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4618      	mov	r0, r3
 8006024:	f7ff fd63 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	f040 83ad 	bne.w	800678a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	6818      	ldr	r0, [r3, #0]
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	6859      	ldr	r1, [r3, #4]
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	461a      	mov	r2, r3
 800603e:	f7ff fc44 	bl	80058ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff fd51 	bl	8005aee <LL_ADC_REG_IsConversionOngoing>
 800604c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4618      	mov	r0, r3
 8006056:	f7ff fd5d 	bl	8005b14 <LL_ADC_INJ_IsConversionOngoing>
 800605a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800605e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006062:	2b00      	cmp	r3, #0
 8006064:	f040 81d9 	bne.w	800641a <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006068:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800606c:	2b00      	cmp	r3, #0
 800606e:	f040 81d4 	bne.w	800641a <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	689b      	ldr	r3, [r3, #8]
 8006076:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800607a:	d10f      	bne.n	800609c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6818      	ldr	r0, [r3, #0]
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	2200      	movs	r2, #0
 8006086:	4619      	mov	r1, r3
 8006088:	f7ff fc4b 	bl	8005922 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006094:	4618      	mov	r0, r3
 8006096:	f7ff fbf2 	bl	800587e <LL_ADC_SetSamplingTimeCommonConfig>
 800609a:	e00e      	b.n	80060ba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6818      	ldr	r0, [r3, #0]
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	6819      	ldr	r1, [r3, #0]
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	461a      	mov	r2, r3
 80060aa:	f7ff fc3a 	bl	8005922 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2100      	movs	r1, #0
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7ff fbe2 	bl	800587e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695a      	ldr	r2, [r3, #20]
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	08db      	lsrs	r3, r3, #3
 80060c6:	f003 0303 	and.w	r3, r3, #3
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	691b      	ldr	r3, [r3, #16]
 80060d8:	2b04      	cmp	r3, #4
 80060da:	d022      	beq.n	8006122 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6818      	ldr	r0, [r3, #0]
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	6919      	ldr	r1, [r3, #16]
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681a      	ldr	r2, [r3, #0]
 80060e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060ec:	f7ff fb3c 	bl	8005768 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6818      	ldr	r0, [r3, #0]
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	6919      	ldr	r1, [r3, #16]
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	461a      	mov	r2, r3
 80060fe:	f7ff fb88 	bl	8005812 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6818      	ldr	r0, [r3, #0]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	6919      	ldr	r1, [r3, #16]
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	7f1b      	ldrb	r3, [r3, #28]
 800610e:	2b01      	cmp	r3, #1
 8006110:	d102      	bne.n	8006118 <HAL_ADC_ConfigChannel+0x124>
 8006112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006116:	e000      	b.n	800611a <HAL_ADC_ConfigChannel+0x126>
 8006118:	2300      	movs	r3, #0
 800611a:	461a      	mov	r2, r3
 800611c:	f7ff fb94 	bl	8005848 <LL_ADC_SetOffsetSaturation>
 8006120:	e17b      	b.n	800641a <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2100      	movs	r1, #0
 8006128:	4618      	mov	r0, r3
 800612a:	f7ff fb41 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 800612e:	4603      	mov	r3, r0
 8006130:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <HAL_ADC_ConfigChannel+0x15a>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2100      	movs	r1, #0
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff fb36 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 8006144:	4603      	mov	r3, r0
 8006146:	0e9b      	lsrs	r3, r3, #26
 8006148:	f003 021f 	and.w	r2, r3, #31
 800614c:	e01e      	b.n	800618c <HAL_ADC_ConfigChannel+0x198>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2100      	movs	r1, #0
 8006154:	4618      	mov	r0, r3
 8006156:	f7ff fb2b 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 800615a:	4603      	mov	r3, r0
 800615c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006160:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006164:	fa93 f3a3 	rbit	r3, r3
 8006168:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800616c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006170:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006174:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d101      	bne.n	8006180 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800617c:	2320      	movs	r3, #32
 800617e:	e004      	b.n	800618a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006180:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006184:	fab3 f383 	clz	r3, r3
 8006188:	b2db      	uxtb	r3, r3
 800618a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006194:	2b00      	cmp	r3, #0
 8006196:	d105      	bne.n	80061a4 <HAL_ADC_ConfigChannel+0x1b0>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	0e9b      	lsrs	r3, r3, #26
 800619e:	f003 031f 	and.w	r3, r3, #31
 80061a2:	e018      	b.n	80061d6 <HAL_ADC_ConfigChannel+0x1e2>
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061ac:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80061b0:	fa93 f3a3 	rbit	r3, r3
 80061b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80061b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80061bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80061c0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80061c8:	2320      	movs	r3, #32
 80061ca:	e004      	b.n	80061d6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80061cc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80061d0:	fab3 f383 	clz	r3, r3
 80061d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d106      	bne.n	80061e8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	2100      	movs	r1, #0
 80061e2:	4618      	mov	r0, r3
 80061e4:	f7ff fafa 	bl	80057dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2101      	movs	r1, #1
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7ff fade 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 80061f4:	4603      	mov	r3, r0
 80061f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d10a      	bne.n	8006214 <HAL_ADC_ConfigChannel+0x220>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2101      	movs	r1, #1
 8006204:	4618      	mov	r0, r3
 8006206:	f7ff fad3 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 800620a:	4603      	mov	r3, r0
 800620c:	0e9b      	lsrs	r3, r3, #26
 800620e:	f003 021f 	and.w	r2, r3, #31
 8006212:	e01e      	b.n	8006252 <HAL_ADC_ConfigChannel+0x25e>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	2101      	movs	r1, #1
 800621a:	4618      	mov	r0, r3
 800621c:	f7ff fac8 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 8006220:	4603      	mov	r3, r0
 8006222:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006226:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800622a:	fa93 f3a3 	rbit	r3, r3
 800622e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006232:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006236:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800623a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800623e:	2b00      	cmp	r3, #0
 8006240:	d101      	bne.n	8006246 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006242:	2320      	movs	r3, #32
 8006244:	e004      	b.n	8006250 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006246:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800624a:	fab3 f383 	clz	r3, r3
 800624e:	b2db      	uxtb	r3, r3
 8006250:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625a:	2b00      	cmp	r3, #0
 800625c:	d105      	bne.n	800626a <HAL_ADC_ConfigChannel+0x276>
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	0e9b      	lsrs	r3, r3, #26
 8006264:	f003 031f 	and.w	r3, r3, #31
 8006268:	e018      	b.n	800629c <HAL_ADC_ConfigChannel+0x2a8>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006276:	fa93 f3a3 	rbit	r3, r3
 800627a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800627e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006282:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006286:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d101      	bne.n	8006292 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800628e:	2320      	movs	r3, #32
 8006290:	e004      	b.n	800629c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006292:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006296:	fab3 f383 	clz	r3, r3
 800629a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800629c:	429a      	cmp	r2, r3
 800629e:	d106      	bne.n	80062ae <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2101      	movs	r1, #1
 80062a8:	4618      	mov	r0, r3
 80062aa:	f7ff fa97 	bl	80057dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2102      	movs	r1, #2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fa7b 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <HAL_ADC_ConfigChannel+0x2e6>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2102      	movs	r1, #2
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff fa70 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 80062d0:	4603      	mov	r3, r0
 80062d2:	0e9b      	lsrs	r3, r3, #26
 80062d4:	f003 021f 	and.w	r2, r3, #31
 80062d8:	e01e      	b.n	8006318 <HAL_ADC_ConfigChannel+0x324>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2102      	movs	r1, #2
 80062e0:	4618      	mov	r0, r3
 80062e2:	f7ff fa65 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 80062e6:	4603      	mov	r3, r0
 80062e8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80062f0:	fa93 f3a3 	rbit	r3, r3
 80062f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80062f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80062fc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006300:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006304:	2b00      	cmp	r3, #0
 8006306:	d101      	bne.n	800630c <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8006308:	2320      	movs	r3, #32
 800630a:	e004      	b.n	8006316 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 800630c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006310:	fab3 f383 	clz	r3, r3
 8006314:	b2db      	uxtb	r3, r3
 8006316:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006320:	2b00      	cmp	r3, #0
 8006322:	d105      	bne.n	8006330 <HAL_ADC_ConfigChannel+0x33c>
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	0e9b      	lsrs	r3, r3, #26
 800632a:	f003 031f 	and.w	r3, r3, #31
 800632e:	e016      	b.n	800635e <HAL_ADC_ConfigChannel+0x36a>
 8006330:	683b      	ldr	r3, [r7, #0]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006338:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800633c:	fa93 f3a3 	rbit	r3, r3
 8006340:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006342:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006344:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006348:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800634c:	2b00      	cmp	r3, #0
 800634e:	d101      	bne.n	8006354 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006350:	2320      	movs	r3, #32
 8006352:	e004      	b.n	800635e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006354:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006358:	fab3 f383 	clz	r3, r3
 800635c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800635e:	429a      	cmp	r2, r3
 8006360:	d106      	bne.n	8006370 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	2200      	movs	r2, #0
 8006368:	2102      	movs	r1, #2
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fa36 	bl	80057dc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2103      	movs	r1, #3
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fa1a 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 800637c:	4603      	mov	r3, r0
 800637e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006382:	2b00      	cmp	r3, #0
 8006384:	d10a      	bne.n	800639c <HAL_ADC_ConfigChannel+0x3a8>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	2103      	movs	r1, #3
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fa0f 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 8006392:	4603      	mov	r3, r0
 8006394:	0e9b      	lsrs	r3, r3, #26
 8006396:	f003 021f 	and.w	r2, r3, #31
 800639a:	e017      	b.n	80063cc <HAL_ADC_ConfigChannel+0x3d8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2103      	movs	r1, #3
 80063a2:	4618      	mov	r0, r3
 80063a4:	f7ff fa04 	bl	80057b0 <LL_ADC_GetOffsetChannel>
 80063a8:	4603      	mov	r3, r0
 80063aa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063ae:	fa93 f3a3 	rbit	r3, r3
 80063b2:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80063b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b6:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80063b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80063be:	2320      	movs	r3, #32
 80063c0:	e003      	b.n	80063ca <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80063c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80063c4:	fab3 f383 	clz	r3, r3
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d105      	bne.n	80063e4 <HAL_ADC_ConfigChannel+0x3f0>
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	0e9b      	lsrs	r3, r3, #26
 80063de:	f003 031f 	and.w	r3, r3, #31
 80063e2:	e011      	b.n	8006408 <HAL_ADC_ConfigChannel+0x414>
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80063ec:	fa93 f3a3 	rbit	r3, r3
 80063f0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80063f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80063f4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d101      	bne.n	8006400 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80063fc:	2320      	movs	r3, #32
 80063fe:	e003      	b.n	8006408 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8006400:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006402:	fab3 f383 	clz	r3, r3
 8006406:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006408:	429a      	cmp	r2, r3
 800640a:	d106      	bne.n	800641a <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2200      	movs	r2, #0
 8006412:	2103      	movs	r1, #3
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff f9e1 	bl	80057dc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	4618      	mov	r0, r3
 8006420:	f7ff fb3e 	bl	8005aa0 <LL_ADC_IsEnabled>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	f040 8140 	bne.w	80066ac <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6818      	ldr	r0, [r3, #0]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	6819      	ldr	r1, [r3, #0]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	461a      	mov	r2, r3
 800643a:	f7ff fa9d 	bl	8005978 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	4a8f      	ldr	r2, [pc, #572]	; (8006680 <HAL_ADC_ConfigChannel+0x68c>)
 8006444:	4293      	cmp	r3, r2
 8006446:	f040 8131 	bne.w	80066ac <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006456:	2b00      	cmp	r3, #0
 8006458:	d10b      	bne.n	8006472 <HAL_ADC_ConfigChannel+0x47e>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	0e9b      	lsrs	r3, r3, #26
 8006460:	3301      	adds	r3, #1
 8006462:	f003 031f 	and.w	r3, r3, #31
 8006466:	2b09      	cmp	r3, #9
 8006468:	bf94      	ite	ls
 800646a:	2301      	movls	r3, #1
 800646c:	2300      	movhi	r3, #0
 800646e:	b2db      	uxtb	r3, r3
 8006470:	e019      	b.n	80064a6 <HAL_ADC_ConfigChannel+0x4b2>
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006478:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800647a:	fa93 f3a3 	rbit	r3, r3
 800647e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006480:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006482:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006484:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006486:	2b00      	cmp	r3, #0
 8006488:	d101      	bne.n	800648e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800648a:	2320      	movs	r3, #32
 800648c:	e003      	b.n	8006496 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800648e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3301      	adds	r3, #1
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	2b09      	cmp	r3, #9
 800649e:	bf94      	ite	ls
 80064a0:	2301      	movls	r3, #1
 80064a2:	2300      	movhi	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d079      	beq.n	800659e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d107      	bne.n	80064c6 <HAL_ADC_ConfigChannel+0x4d2>
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	0e9b      	lsrs	r3, r3, #26
 80064bc:	3301      	adds	r3, #1
 80064be:	069b      	lsls	r3, r3, #26
 80064c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064c4:	e015      	b.n	80064f2 <HAL_ADC_ConfigChannel+0x4fe>
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064ce:	fa93 f3a3 	rbit	r3, r3
 80064d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80064d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80064d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80064de:	2320      	movs	r3, #32
 80064e0:	e003      	b.n	80064ea <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80064e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064e4:	fab3 f383 	clz	r3, r3
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	3301      	adds	r3, #1
 80064ec:	069b      	lsls	r3, r3, #26
 80064ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d109      	bne.n	8006512 <HAL_ADC_ConfigChannel+0x51e>
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	0e9b      	lsrs	r3, r3, #26
 8006504:	3301      	adds	r3, #1
 8006506:	f003 031f 	and.w	r3, r3, #31
 800650a:	2101      	movs	r1, #1
 800650c:	fa01 f303 	lsl.w	r3, r1, r3
 8006510:	e017      	b.n	8006542 <HAL_ADC_ConfigChannel+0x54e>
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006518:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800651a:	fa93 f3a3 	rbit	r3, r3
 800651e:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006526:	2b00      	cmp	r3, #0
 8006528:	d101      	bne.n	800652e <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800652a:	2320      	movs	r3, #32
 800652c:	e003      	b.n	8006536 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 800652e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006530:	fab3 f383 	clz	r3, r3
 8006534:	b2db      	uxtb	r3, r3
 8006536:	3301      	adds	r3, #1
 8006538:	f003 031f 	and.w	r3, r3, #31
 800653c:	2101      	movs	r1, #1
 800653e:	fa01 f303 	lsl.w	r3, r1, r3
 8006542:	ea42 0103 	orr.w	r1, r2, r3
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800654e:	2b00      	cmp	r3, #0
 8006550:	d10a      	bne.n	8006568 <HAL_ADC_ConfigChannel+0x574>
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	0e9b      	lsrs	r3, r3, #26
 8006558:	3301      	adds	r3, #1
 800655a:	f003 021f 	and.w	r2, r3, #31
 800655e:	4613      	mov	r3, r2
 8006560:	005b      	lsls	r3, r3, #1
 8006562:	4413      	add	r3, r2
 8006564:	051b      	lsls	r3, r3, #20
 8006566:	e018      	b.n	800659a <HAL_ADC_ConfigChannel+0x5a6>
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800656e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006570:	fa93 f3a3 	rbit	r3, r3
 8006574:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657c:	2b00      	cmp	r3, #0
 800657e:	d101      	bne.n	8006584 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006580:	2320      	movs	r3, #32
 8006582:	e003      	b.n	800658c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	fab3 f383 	clz	r3, r3
 800658a:	b2db      	uxtb	r3, r3
 800658c:	3301      	adds	r3, #1
 800658e:	f003 021f 	and.w	r2, r3, #31
 8006592:	4613      	mov	r3, r2
 8006594:	005b      	lsls	r3, r3, #1
 8006596:	4413      	add	r3, r2
 8006598:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800659a:	430b      	orrs	r3, r1
 800659c:	e081      	b.n	80066a2 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d107      	bne.n	80065ba <HAL_ADC_ConfigChannel+0x5c6>
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	0e9b      	lsrs	r3, r3, #26
 80065b0:	3301      	adds	r3, #1
 80065b2:	069b      	lsls	r3, r3, #26
 80065b4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065b8:	e015      	b.n	80065e6 <HAL_ADC_ConfigChannel+0x5f2>
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80065c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c2:	fa93 f3a3 	rbit	r3, r3
 80065c6:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80065c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065ca:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80065cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80065d2:	2320      	movs	r3, #32
 80065d4:	e003      	b.n	80065de <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80065d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d8:	fab3 f383 	clz	r3, r3
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	3301      	adds	r3, #1
 80065e0:	069b      	lsls	r3, r3, #26
 80065e2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d109      	bne.n	8006606 <HAL_ADC_ConfigChannel+0x612>
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	0e9b      	lsrs	r3, r3, #26
 80065f8:	3301      	adds	r3, #1
 80065fa:	f003 031f 	and.w	r3, r3, #31
 80065fe:	2101      	movs	r1, #1
 8006600:	fa01 f303 	lsl.w	r3, r1, r3
 8006604:	e017      	b.n	8006636 <HAL_ADC_ConfigChannel+0x642>
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800660c:	6a3b      	ldr	r3, [r7, #32]
 800660e:	fa93 f3a3 	rbit	r3, r3
 8006612:	61fb      	str	r3, [r7, #28]
  return result;
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	2b00      	cmp	r3, #0
 800661c:	d101      	bne.n	8006622 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 800661e:	2320      	movs	r3, #32
 8006620:	e003      	b.n	800662a <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006624:	fab3 f383 	clz	r3, r3
 8006628:	b2db      	uxtb	r3, r3
 800662a:	3301      	adds	r3, #1
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	2101      	movs	r1, #1
 8006632:	fa01 f303 	lsl.w	r3, r1, r3
 8006636:	ea42 0103 	orr.w	r1, r2, r3
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10d      	bne.n	8006662 <HAL_ADC_ConfigChannel+0x66e>
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	0e9b      	lsrs	r3, r3, #26
 800664c:	3301      	adds	r3, #1
 800664e:	f003 021f 	and.w	r2, r3, #31
 8006652:	4613      	mov	r3, r2
 8006654:	005b      	lsls	r3, r3, #1
 8006656:	4413      	add	r3, r2
 8006658:	3b1e      	subs	r3, #30
 800665a:	051b      	lsls	r3, r3, #20
 800665c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006660:	e01e      	b.n	80066a0 <HAL_ADC_ConfigChannel+0x6ac>
 8006662:	683b      	ldr	r3, [r7, #0]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	fa93 f3a3 	rbit	r3, r3
 800666e:	613b      	str	r3, [r7, #16]
  return result;
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d104      	bne.n	8006684 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800667a:	2320      	movs	r3, #32
 800667c:	e006      	b.n	800668c <HAL_ADC_ConfigChannel+0x698>
 800667e:	bf00      	nop
 8006680:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	fab3 f383 	clz	r3, r3
 800668a:	b2db      	uxtb	r3, r3
 800668c:	3301      	adds	r3, #1
 800668e:	f003 021f 	and.w	r2, r3, #31
 8006692:	4613      	mov	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	4413      	add	r3, r2
 8006698:	3b1e      	subs	r3, #30
 800669a:	051b      	lsls	r3, r3, #20
 800669c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80066a0:	430b      	orrs	r3, r1
 80066a2:	683a      	ldr	r2, [r7, #0]
 80066a4:	6892      	ldr	r2, [r2, #8]
 80066a6:	4619      	mov	r1, r3
 80066a8:	f7ff f93b 	bl	8005922 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	4b3f      	ldr	r3, [pc, #252]	; (80067b0 <HAL_ADC_ConfigChannel+0x7bc>)
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d071      	beq.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80066b8:	483e      	ldr	r0, [pc, #248]	; (80067b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80066ba:	f7ff f847 	bl	800574c <LL_ADC_GetCommonPathInternalCh>
 80066be:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	4a3c      	ldr	r2, [pc, #240]	; (80067b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d004      	beq.n	80066d6 <HAL_ADC_ConfigChannel+0x6e2>
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4a3a      	ldr	r2, [pc, #232]	; (80067bc <HAL_ADC_ConfigChannel+0x7c8>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d127      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80066d6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d121      	bne.n	8006726 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80066ea:	d157      	bne.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80066ec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80066f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066f4:	4619      	mov	r1, r3
 80066f6:	482f      	ldr	r0, [pc, #188]	; (80067b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80066f8:	f7ff f815 	bl	8005726 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066fc:	4b30      	ldr	r3, [pc, #192]	; (80067c0 <HAL_ADC_ConfigChannel+0x7cc>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	099b      	lsrs	r3, r3, #6
 8006702:	4a30      	ldr	r2, [pc, #192]	; (80067c4 <HAL_ADC_ConfigChannel+0x7d0>)
 8006704:	fba2 2303 	umull	r2, r3, r2, r3
 8006708:	099b      	lsrs	r3, r3, #6
 800670a:	1c5a      	adds	r2, r3, #1
 800670c:	4613      	mov	r3, r2
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006716:	e002      	b.n	800671e <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	3b01      	subs	r3, #1
 800671c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d1f9      	bne.n	8006718 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006724:	e03a      	b.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a27      	ldr	r2, [pc, #156]	; (80067c8 <HAL_ADC_ConfigChannel+0x7d4>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d113      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x764>
 8006730:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006734:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006738:	2b00      	cmp	r3, #0
 800673a:	d10d      	bne.n	8006758 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	4a22      	ldr	r2, [pc, #136]	; (80067cc <HAL_ADC_ConfigChannel+0x7d8>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d02a      	beq.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006746:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800674a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800674e:	4619      	mov	r1, r3
 8006750:	4818      	ldr	r0, [pc, #96]	; (80067b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8006752:	f7fe ffe8 	bl	8005726 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006756:	e021      	b.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	4a1c      	ldr	r2, [pc, #112]	; (80067d0 <HAL_ADC_ConfigChannel+0x7dc>)
 800675e:	4293      	cmp	r3, r2
 8006760:	d11c      	bne.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006762:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d116      	bne.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a16      	ldr	r2, [pc, #88]	; (80067cc <HAL_ADC_ConfigChannel+0x7d8>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d011      	beq.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006778:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800677c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006780:	4619      	mov	r1, r3
 8006782:	480c      	ldr	r0, [pc, #48]	; (80067b4 <HAL_ADC_ConfigChannel+0x7c0>)
 8006784:	f7fe ffcf 	bl	8005726 <LL_ADC_SetCommonPathInternalCh>
 8006788:	e008      	b.n	800679c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800678e:	f043 0220 	orr.w	r2, r3, #32
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80067a4:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	37d8      	adds	r7, #216	; 0xd8
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}
 80067b0:	80080000 	.word	0x80080000
 80067b4:	50000300 	.word	0x50000300
 80067b8:	c3210000 	.word	0xc3210000
 80067bc:	90c00010 	.word	0x90c00010
 80067c0:	20000000 	.word	0x20000000
 80067c4:	053e2d63 	.word	0x053e2d63
 80067c8:	c7520000 	.word	0xc7520000
 80067cc:	50000100 	.word	0x50000100
 80067d0:	cb840000 	.word	0xcb840000

080067d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b084      	sub	sp, #16
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4618      	mov	r0, r3
 80067e2:	f7ff f95d 	bl	8005aa0 <LL_ADC_IsEnabled>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d14d      	bne.n	8006888 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689a      	ldr	r2, [r3, #8]
 80067f2:	4b28      	ldr	r3, [pc, #160]	; (8006894 <ADC_Enable+0xc0>)
 80067f4:	4013      	ands	r3, r2
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00d      	beq.n	8006816 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fe:	f043 0210 	orr.w	r2, r3, #16
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800680a:	f043 0201 	orr.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	e039      	b.n	800688a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f7ff f92c 	bl	8005a78 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006820:	f7fe ff40 	bl	80056a4 <HAL_GetTick>
 8006824:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006826:	e028      	b.n	800687a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4618      	mov	r0, r3
 800682e:	f7ff f937 	bl	8005aa0 <LL_ADC_IsEnabled>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	4618      	mov	r0, r3
 800683e:	f7ff f91b 	bl	8005a78 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006842:	f7fe ff2f 	bl	80056a4 <HAL_GetTick>
 8006846:	4602      	mov	r2, r0
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	1ad3      	subs	r3, r2, r3
 800684c:	2b02      	cmp	r3, #2
 800684e:	d914      	bls.n	800687a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0301 	and.w	r3, r3, #1
 800685a:	2b01      	cmp	r3, #1
 800685c:	d00d      	beq.n	800687a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006862:	f043 0210 	orr.w	r2, r3, #16
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800686e:	f043 0201 	orr.w	r2, r3, #1
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e007      	b.n	800688a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b01      	cmp	r3, #1
 8006886:	d1cf      	bne.n	8006828 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	8000003f 	.word	0x8000003f

08006898 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068aa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d14b      	bne.n	800694a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068b6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f003 0308 	and.w	r3, r3, #8
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d021      	beq.n	8006910 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	4618      	mov	r0, r3
 80068d2:	f7fe ffe7 	bl	80058a4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d032      	beq.n	8006942 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12b      	bne.n	8006942 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d11f      	bne.n	8006942 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006906:	f043 0201 	orr.w	r2, r3, #1
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	65da      	str	r2, [r3, #92]	; 0x5c
 800690e:	e018      	b.n	8006942 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d111      	bne.n	8006942 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006922:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800692e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006932:	2b00      	cmp	r3, #0
 8006934:	d105      	bne.n	8006942 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800693a:	f043 0201 	orr.w	r2, r3, #1
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006942:	68f8      	ldr	r0, [r7, #12]
 8006944:	f7ff fb38 	bl	8005fb8 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006948:	e00e      	b.n	8006968 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006956:	68f8      	ldr	r0, [r7, #12]
 8006958:	f7ff fb42 	bl	8005fe0 <HAL_ADC_ErrorCallback>
}
 800695c:	e004      	b.n	8006968 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006962:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	4798      	blx	r3
}
 8006968:	bf00      	nop
 800696a:	3710      	adds	r7, #16
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}

08006970 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b084      	sub	sp, #16
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f7ff fb24 	bl	8005fcc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006984:	bf00      	nop
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800699e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069aa:	f043 0204 	orr.w	r2, r3, #4
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80069b2:	68f8      	ldr	r0, [r7, #12]
 80069b4:	f7ff fb14 	bl	8005fe0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80069b8:	bf00      	nop
 80069ba:	3710      	adds	r7, #16
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}

080069c0 <LL_ADC_IsEnabled>:
{
 80069c0:	b480      	push	{r7}
 80069c2:	b083      	sub	sp, #12
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d101      	bne.n	80069d8 <LL_ADC_IsEnabled+0x18>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <LL_ADC_IsEnabled+0x1a>
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr

080069e6 <LL_ADC_REG_IsConversionOngoing>:
{
 80069e6:	b480      	push	{r7}
 80069e8:	b083      	sub	sp, #12
 80069ea:	af00      	add	r7, sp, #0
 80069ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b04      	cmp	r3, #4
 80069f8:	d101      	bne.n	80069fe <LL_ADC_REG_IsConversionOngoing+0x18>
 80069fa:	2301      	movs	r3, #1
 80069fc:	e000      	b.n	8006a00 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80069fe:	2300      	movs	r3, #0
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	370c      	adds	r7, #12
 8006a04:	46bd      	mov	sp, r7
 8006a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0a:	4770      	bx	lr

08006a0c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006a0c:	b590      	push	{r4, r7, lr}
 8006a0e:	b0a1      	sub	sp, #132	; 0x84
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006a16:	2300      	movs	r3, #0
 8006a18:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006a22:	2b01      	cmp	r3, #1
 8006a24:	d101      	bne.n	8006a2a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006a26:	2302      	movs	r3, #2
 8006a28:	e08b      	b.n	8006b42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2201      	movs	r2, #1
 8006a2e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006a32:	2300      	movs	r3, #0
 8006a34:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006a36:	2300      	movs	r3, #0
 8006a38:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a42:	d102      	bne.n	8006a4a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006a44:	4b41      	ldr	r3, [pc, #260]	; (8006b4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006a46:	60bb      	str	r3, [r7, #8]
 8006a48:	e001      	b.n	8006a4e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d10b      	bne.n	8006a6c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a58:	f043 0220 	orr.w	r2, r3, #32
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e06a      	b.n	8006b42 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f7ff ffb9 	bl	80069e6 <LL_ADC_REG_IsConversionOngoing>
 8006a74:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	f7ff ffb3 	bl	80069e6 <LL_ADC_REG_IsConversionOngoing>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d14c      	bne.n	8006b20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006a86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d149      	bne.n	8006b20 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006a8c:	4b30      	ldr	r3, [pc, #192]	; (8006b50 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006a8e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d028      	beq.n	8006aea <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006a98:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	6859      	ldr	r1, [r3, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006aaa:	035b      	lsls	r3, r3, #13
 8006aac:	430b      	orrs	r3, r1
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ab2:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006ab4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006ab8:	f7ff ff82 	bl	80069c0 <LL_ADC_IsEnabled>
 8006abc:	4604      	mov	r4, r0
 8006abe:	4823      	ldr	r0, [pc, #140]	; (8006b4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006ac0:	f7ff ff7e 	bl	80069c0 <LL_ADC_IsEnabled>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	4323      	orrs	r3, r4
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d133      	bne.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006acc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ace:	689b      	ldr	r3, [r3, #8]
 8006ad0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006ad4:	f023 030f 	bic.w	r3, r3, #15
 8006ad8:	683a      	ldr	r2, [r7, #0]
 8006ada:	6811      	ldr	r1, [r2, #0]
 8006adc:	683a      	ldr	r2, [r7, #0]
 8006ade:	6892      	ldr	r2, [r2, #8]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	431a      	orrs	r2, r3
 8006ae4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ae6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006ae8:	e024      	b.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aec:	689b      	ldr	r3, [r3, #8]
 8006aee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006af2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006af4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006af6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006afa:	f7ff ff61 	bl	80069c0 <LL_ADC_IsEnabled>
 8006afe:	4604      	mov	r4, r0
 8006b00:	4812      	ldr	r0, [pc, #72]	; (8006b4c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006b02:	f7ff ff5d 	bl	80069c0 <LL_ADC_IsEnabled>
 8006b06:	4603      	mov	r3, r0
 8006b08:	4323      	orrs	r3, r4
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d112      	bne.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006b0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006b16:	f023 030f 	bic.w	r3, r3, #15
 8006b1a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006b1c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b1e:	e009      	b.n	8006b34 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b24:	f043 0220 	orr.w	r2, r3, #32
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8006b32:	e000      	b.n	8006b36 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006b3e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3784      	adds	r7, #132	; 0x84
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd90      	pop	{r4, r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	50000100 	.word	0x50000100
 8006b50:	50000300 	.word	0x50000300

08006b54 <__NVIC_SetPriorityGrouping>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	f003 0307 	and.w	r3, r3, #7
 8006b62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b64:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <__NVIC_SetPriorityGrouping+0x44>)
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b6a:	68ba      	ldr	r2, [r7, #8]
 8006b6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b70:	4013      	ands	r3, r2
 8006b72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b86:	4a04      	ldr	r2, [pc, #16]	; (8006b98 <__NVIC_SetPriorityGrouping+0x44>)
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	60d3      	str	r3, [r2, #12]
}
 8006b8c:	bf00      	nop
 8006b8e:	3714      	adds	r7, #20
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	e000ed00 	.word	0xe000ed00

08006b9c <__NVIC_GetPriorityGrouping>:
{
 8006b9c:	b480      	push	{r7}
 8006b9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006ba0:	4b04      	ldr	r3, [pc, #16]	; (8006bb4 <__NVIC_GetPriorityGrouping+0x18>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	0a1b      	lsrs	r3, r3, #8
 8006ba6:	f003 0307 	and.w	r3, r3, #7
}
 8006baa:	4618      	mov	r0, r3
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	e000ed00 	.word	0xe000ed00

08006bb8 <__NVIC_EnableIRQ>:
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	db0b      	blt.n	8006be2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bca:	79fb      	ldrb	r3, [r7, #7]
 8006bcc:	f003 021f 	and.w	r2, r3, #31
 8006bd0:	4907      	ldr	r1, [pc, #28]	; (8006bf0 <__NVIC_EnableIRQ+0x38>)
 8006bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	2001      	movs	r0, #1
 8006bda:	fa00 f202 	lsl.w	r2, r0, r2
 8006bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
 8006bee:	bf00      	nop
 8006bf0:	e000e100 	.word	0xe000e100

08006bf4 <__NVIC_SetPriority>:
{
 8006bf4:	b480      	push	{r7}
 8006bf6:	b083      	sub	sp, #12
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	6039      	str	r1, [r7, #0]
 8006bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	db0a      	blt.n	8006c1e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	b2da      	uxtb	r2, r3
 8006c0c:	490c      	ldr	r1, [pc, #48]	; (8006c40 <__NVIC_SetPriority+0x4c>)
 8006c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c12:	0112      	lsls	r2, r2, #4
 8006c14:	b2d2      	uxtb	r2, r2
 8006c16:	440b      	add	r3, r1
 8006c18:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006c1c:	e00a      	b.n	8006c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	4908      	ldr	r1, [pc, #32]	; (8006c44 <__NVIC_SetPriority+0x50>)
 8006c24:	79fb      	ldrb	r3, [r7, #7]
 8006c26:	f003 030f 	and.w	r3, r3, #15
 8006c2a:	3b04      	subs	r3, #4
 8006c2c:	0112      	lsls	r2, r2, #4
 8006c2e:	b2d2      	uxtb	r2, r2
 8006c30:	440b      	add	r3, r1
 8006c32:	761a      	strb	r2, [r3, #24]
}
 8006c34:	bf00      	nop
 8006c36:	370c      	adds	r7, #12
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c3e:	4770      	bx	lr
 8006c40:	e000e100 	.word	0xe000e100
 8006c44:	e000ed00 	.word	0xe000ed00

08006c48 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b089      	sub	sp, #36	; 0x24
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	f003 0307 	and.w	r3, r3, #7
 8006c5a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	f1c3 0307 	rsb	r3, r3, #7
 8006c62:	2b04      	cmp	r3, #4
 8006c64:	bf28      	it	cs
 8006c66:	2304      	movcs	r3, #4
 8006c68:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	3304      	adds	r3, #4
 8006c6e:	2b06      	cmp	r3, #6
 8006c70:	d902      	bls.n	8006c78 <NVIC_EncodePriority+0x30>
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	3b03      	subs	r3, #3
 8006c76:	e000      	b.n	8006c7a <NVIC_EncodePriority+0x32>
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	fa02 f303 	lsl.w	r3, r2, r3
 8006c86:	43da      	mvns	r2, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	401a      	ands	r2, r3
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c90:	f04f 31ff 	mov.w	r1, #4294967295
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	fa01 f303 	lsl.w	r3, r1, r3
 8006c9a:	43d9      	mvns	r1, r3
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006ca0:	4313      	orrs	r3, r2
         );
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3724      	adds	r7, #36	; 0x24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr
	...

08006cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b082      	sub	sp, #8
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	3b01      	subs	r3, #1
 8006cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cc0:	d301      	bcc.n	8006cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e00f      	b.n	8006ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cc6:	4a0a      	ldr	r2, [pc, #40]	; (8006cf0 <SysTick_Config+0x40>)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cce:	210f      	movs	r1, #15
 8006cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cd4:	f7ff ff8e 	bl	8006bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cd8:	4b05      	ldr	r3, [pc, #20]	; (8006cf0 <SysTick_Config+0x40>)
 8006cda:	2200      	movs	r2, #0
 8006cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <SysTick_Config+0x40>)
 8006ce0:	2207      	movs	r2, #7
 8006ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006ce4:	2300      	movs	r3, #0
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3708      	adds	r7, #8
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	e000e010 	.word	0xe000e010

08006cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b082      	sub	sp, #8
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f7ff ff29 	bl	8006b54 <__NVIC_SetPriorityGrouping>
}
 8006d02:	bf00      	nop
 8006d04:	3708      	adds	r7, #8
 8006d06:	46bd      	mov	sp, r7
 8006d08:	bd80      	pop	{r7, pc}

08006d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006d0a:	b580      	push	{r7, lr}
 8006d0c:	b086      	sub	sp, #24
 8006d0e:	af00      	add	r7, sp, #0
 8006d10:	4603      	mov	r3, r0
 8006d12:	60b9      	str	r1, [r7, #8]
 8006d14:	607a      	str	r2, [r7, #4]
 8006d16:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006d18:	f7ff ff40 	bl	8006b9c <__NVIC_GetPriorityGrouping>
 8006d1c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	6978      	ldr	r0, [r7, #20]
 8006d24:	f7ff ff90 	bl	8006c48 <NVIC_EncodePriority>
 8006d28:	4602      	mov	r2, r0
 8006d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2e:	4611      	mov	r1, r2
 8006d30:	4618      	mov	r0, r3
 8006d32:	f7ff ff5f 	bl	8006bf4 <__NVIC_SetPriority>
}
 8006d36:	bf00      	nop
 8006d38:	3718      	adds	r7, #24
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}

08006d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b082      	sub	sp, #8
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	4603      	mov	r3, r0
 8006d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7ff ff33 	bl	8006bb8 <__NVIC_EnableIRQ>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff ffa4 	bl	8006cb0 <SysTick_Config>
 8006d68:	4603      	mov	r3, r0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3708      	adds	r7, #8
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
	...

08006d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b084      	sub	sp, #16
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d101      	bne.n	8006d86 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006d82:	2301      	movs	r3, #1
 8006d84:	e08d      	b.n	8006ea2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	4b47      	ldr	r3, [pc, #284]	; (8006eac <HAL_DMA_Init+0x138>)
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d80f      	bhi.n	8006db2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	4b45      	ldr	r3, [pc, #276]	; (8006eb0 <HAL_DMA_Init+0x13c>)
 8006d9a:	4413      	add	r3, r2
 8006d9c:	4a45      	ldr	r2, [pc, #276]	; (8006eb4 <HAL_DMA_Init+0x140>)
 8006d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8006da2:	091b      	lsrs	r3, r3, #4
 8006da4:	009a      	lsls	r2, r3, #2
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a42      	ldr	r2, [pc, #264]	; (8006eb8 <HAL_DMA_Init+0x144>)
 8006dae:	641a      	str	r2, [r3, #64]	; 0x40
 8006db0:	e00e      	b.n	8006dd0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	461a      	mov	r2, r3
 8006db8:	4b40      	ldr	r3, [pc, #256]	; (8006ebc <HAL_DMA_Init+0x148>)
 8006dba:	4413      	add	r3, r2
 8006dbc:	4a3d      	ldr	r2, [pc, #244]	; (8006eb4 <HAL_DMA_Init+0x140>)
 8006dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc2:	091b      	lsrs	r3, r3, #4
 8006dc4:	009a      	lsls	r2, r3, #2
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a3c      	ldr	r2, [pc, #240]	; (8006ec0 <HAL_DMA_Init+0x14c>)
 8006dce:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8006de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006dea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8006df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4313      	orrs	r3, r2
 8006e18:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68fa      	ldr	r2, [r7, #12]
 8006e20:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f000 fa84 	bl	8007330 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e30:	d102      	bne.n	8006e38 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685a      	ldr	r2, [r3, #4]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e40:	b2d2      	uxtb	r2, r2
 8006e42:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006e4c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d010      	beq.n	8006e78 <HAL_DMA_Init+0x104>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b04      	cmp	r3, #4
 8006e5c:	d80c      	bhi.n	8006e78 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	f000 faa4 	bl	80073ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e68:	2200      	movs	r2, #0
 8006e6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e70:	687a      	ldr	r2, [r7, #4]
 8006e72:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8006e74:	605a      	str	r2, [r3, #4]
 8006e76:	e008      	b.n	8006e8a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2200      	movs	r2, #0
 8006e82:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2201      	movs	r2, #1
 8006e94:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3710      	adds	r7, #16
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bd80      	pop	{r7, pc}
 8006eaa:	bf00      	nop
 8006eac:	40020407 	.word	0x40020407
 8006eb0:	bffdfff8 	.word	0xbffdfff8
 8006eb4:	cccccccd 	.word	0xcccccccd
 8006eb8:	40020000 	.word	0x40020000
 8006ebc:	bffdfbf8 	.word	0xbffdfbf8
 8006ec0:	40020400 	.word	0x40020400

08006ec4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
 8006ed0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006edc:	2b01      	cmp	r3, #1
 8006ede:	d101      	bne.n	8006ee4 <HAL_DMA_Start_IT+0x20>
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	e066      	b.n	8006fb2 <HAL_DMA_Start_IT+0xee>
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	2201      	movs	r2, #1
 8006ee8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	2b01      	cmp	r3, #1
 8006ef6:	d155      	bne.n	8006fa4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	681a      	ldr	r2, [r3, #0]
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f022 0201 	bic.w	r2, r2, #1
 8006f14:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	68b9      	ldr	r1, [r7, #8]
 8006f1c:	68f8      	ldr	r0, [r7, #12]
 8006f1e:	f000 f9c9 	bl	80072b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d008      	beq.n	8006f3c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 020e 	orr.w	r2, r2, #14
 8006f38:	601a      	str	r2, [r3, #0]
 8006f3a:	e00f      	b.n	8006f5c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	f022 0204 	bic.w	r2, r2, #4
 8006f4a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f042 020a 	orr.w	r2, r2, #10
 8006f5a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f78:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d007      	beq.n	8006f92 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	681a      	ldr	r2, [r3, #0]
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006f90:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	681a      	ldr	r2, [r3, #0]
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f042 0201 	orr.w	r2, r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e005      	b.n	8006fb0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8006fac:	2302      	movs	r3, #2
 8006fae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8006fb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006fcc:	b2db      	uxtb	r3, r3
 8006fce:	2b02      	cmp	r3, #2
 8006fd0:	d005      	beq.n	8006fde <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006fd8:	2301      	movs	r3, #1
 8006fda:	73fb      	strb	r3, [r7, #15]
 8006fdc:	e037      	b.n	800704e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f022 020e 	bic.w	r2, r2, #14
 8006fec:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ff8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ffc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0201 	bic.w	r2, r2, #1
 800700c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007012:	f003 021f 	and.w	r2, r3, #31
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701a:	2101      	movs	r1, #1
 800701c:	fa01 f202 	lsl.w	r2, r1, r2
 8007020:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007026:	687a      	ldr	r2, [r7, #4]
 8007028:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800702a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007030:	2b00      	cmp	r3, #0
 8007032:	d00c      	beq.n	800704e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800703e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007042:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800704c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007060:	4618      	mov	r0, r3
 8007062:	3714      	adds	r7, #20
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr

0800706c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800707e:	b2db      	uxtb	r3, r3
 8007080:	2b02      	cmp	r3, #2
 8007082:	d00d      	beq.n	80070a0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	2204      	movs	r2, #4
 8007088:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2201      	movs	r2, #1
 800708e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	73fb      	strb	r3, [r7, #15]
 800709e:	e047      	b.n	8007130 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f022 020e 	bic.w	r2, r2, #14
 80070ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f022 0201 	bic.w	r2, r2, #1
 80070be:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070ce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070d4:	f003 021f 	and.w	r2, r3, #31
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070dc:	2101      	movs	r1, #1
 80070de:	fa01 f202 	lsl.w	r2, r1, r2
 80070e2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80070ec:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00c      	beq.n	8007110 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007104:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800710e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007124:	2b00      	cmp	r3, #0
 8007126:	d003      	beq.n	8007130 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	4798      	blx	r3
    }
  }
  return status;
 8007130:	7bfb      	ldrb	r3, [r7, #15]
}
 8007132:	4618      	mov	r0, r3
 8007134:	3710      	adds	r7, #16
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007156:	f003 031f 	and.w	r3, r3, #31
 800715a:	2204      	movs	r2, #4
 800715c:	409a      	lsls	r2, r3
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	4013      	ands	r3, r2
 8007162:	2b00      	cmp	r3, #0
 8007164:	d026      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x7a>
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	f003 0304 	and.w	r3, r3, #4
 800716c:	2b00      	cmp	r3, #0
 800716e:	d021      	beq.n	80071b4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0320 	and.w	r3, r3, #32
 800717a:	2b00      	cmp	r3, #0
 800717c:	d107      	bne.n	800718e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f022 0204 	bic.w	r2, r2, #4
 800718c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007192:	f003 021f 	and.w	r2, r3, #31
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800719a:	2104      	movs	r1, #4
 800719c:	fa01 f202 	lsl.w	r2, r1, r2
 80071a0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d071      	beq.n	800728e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80071b2:	e06c      	b.n	800728e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b8:	f003 031f 	and.w	r3, r3, #31
 80071bc:	2202      	movs	r2, #2
 80071be:	409a      	lsls	r2, r3
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	4013      	ands	r3, r2
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02e      	beq.n	8007226 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	f003 0302 	and.w	r3, r3, #2
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d029      	beq.n	8007226 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0320 	and.w	r3, r3, #32
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d10b      	bne.n	80071f8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f022 020a 	bic.w	r2, r2, #10
 80071ee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2201      	movs	r2, #1
 80071f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071fc:	f003 021f 	and.w	r2, r3, #31
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007204:	2102      	movs	r1, #2
 8007206:	fa01 f202 	lsl.w	r2, r1, r2
 800720a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	2b00      	cmp	r3, #0
 800721a:	d038      	beq.n	800728e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007224:	e033      	b.n	800728e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	2208      	movs	r2, #8
 8007230:	409a      	lsls	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	4013      	ands	r3, r2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d02a      	beq.n	8007290 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f003 0308 	and.w	r3, r3, #8
 8007240:	2b00      	cmp	r3, #0
 8007242:	d025      	beq.n	8007290 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f022 020e 	bic.w	r2, r2, #14
 8007252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007258:	f003 021f 	and.w	r2, r3, #31
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	2101      	movs	r1, #1
 8007262:	fa01 f202 	lsl.w	r2, r1, r2
 8007266:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2201      	movs	r2, #1
 800726c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007282:	2b00      	cmp	r3, #0
 8007284:	d004      	beq.n	8007290 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800728e:	bf00      	nop
 8007290:	bf00      	nop
}
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80072a6:	b2db      	uxtb	r3, r3
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	370c      	adds	r7, #12
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
 80072c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072c6:	68fa      	ldr	r2, [r7, #12]
 80072c8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80072ca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d8:	68fa      	ldr	r2, [r7, #12]
 80072da:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80072dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e2:	f003 021f 	and.w	r2, r3, #31
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072ea:	2101      	movs	r1, #1
 80072ec:	fa01 f202 	lsl.w	r2, r1, r2
 80072f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	683a      	ldr	r2, [r7, #0]
 80072f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	689b      	ldr	r3, [r3, #8]
 80072fe:	2b10      	cmp	r3, #16
 8007300:	d108      	bne.n	8007314 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007312:	e007      	b.n	8007324 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	60da      	str	r2, [r3, #12]
}
 8007324:	bf00      	nop
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007330:	b480      	push	{r7}
 8007332:	b087      	sub	sp, #28
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	461a      	mov	r2, r3
 800733e:	4b16      	ldr	r3, [pc, #88]	; (8007398 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007340:	429a      	cmp	r2, r3
 8007342:	d802      	bhi.n	800734a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007344:	4b15      	ldr	r3, [pc, #84]	; (800739c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	e001      	b.n	800734e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800734a:	4b15      	ldr	r3, [pc, #84]	; (80073a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800734c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	3b08      	subs	r3, #8
 800735a:	4a12      	ldr	r2, [pc, #72]	; (80073a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800735c:	fba2 2303 	umull	r2, r3, r2, r3
 8007360:	091b      	lsrs	r3, r3, #4
 8007362:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007368:	089b      	lsrs	r3, r3, #2
 800736a:	009a      	lsls	r2, r3, #2
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	4413      	add	r3, r2
 8007370:	461a      	mov	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a0b      	ldr	r2, [pc, #44]	; (80073a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800737a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	f003 031f 	and.w	r3, r3, #31
 8007382:	2201      	movs	r2, #1
 8007384:	409a      	lsls	r2, r3
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	651a      	str	r2, [r3, #80]	; 0x50
}
 800738a:	bf00      	nop
 800738c:	371c      	adds	r7, #28
 800738e:	46bd      	mov	sp, r7
 8007390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007394:	4770      	bx	lr
 8007396:	bf00      	nop
 8007398:	40020407 	.word	0x40020407
 800739c:	40020800 	.word	0x40020800
 80073a0:	40020820 	.word	0x40020820
 80073a4:	cccccccd 	.word	0xcccccccd
 80073a8:	40020880 	.word	0x40020880

080073ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80073ac:	b480      	push	{r7}
 80073ae:	b085      	sub	sp, #20
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	4b0b      	ldr	r3, [pc, #44]	; (80073ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80073c0:	4413      	add	r3, r2
 80073c2:	009b      	lsls	r3, r3, #2
 80073c4:	461a      	mov	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	4a08      	ldr	r2, [pc, #32]	; (80073f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80073ce:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3b01      	subs	r3, #1
 80073d4:	f003 031f 	and.w	r3, r3, #31
 80073d8:	2201      	movs	r2, #1
 80073da:	409a      	lsls	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80073e0:	bf00      	nop
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr
 80073ec:	1000823f 	.word	0x1000823f
 80073f0:	40020940 	.word	0x40020940

080073f4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d101      	bne.n	8007406 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e147      	b.n	8007696 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b00      	cmp	r3, #0
 8007410:	d106      	bne.n	8007420 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800741a:	6878      	ldr	r0, [r7, #4]
 800741c:	f7fa fda0 	bl	8001f60 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	699a      	ldr	r2, [r3, #24]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f022 0210 	bic.w	r2, r2, #16
 800742e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007430:	f7fe f938 	bl	80056a4 <HAL_GetTick>
 8007434:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007436:	e012      	b.n	800745e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007438:	f7fe f934 	bl	80056a4 <HAL_GetTick>
 800743c:	4602      	mov	r2, r0
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	1ad3      	subs	r3, r2, r3
 8007442:	2b0a      	cmp	r3, #10
 8007444:	d90b      	bls.n	800745e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2203      	movs	r2, #3
 8007456:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800745a:	2301      	movs	r3, #1
 800745c:	e11b      	b.n	8007696 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b08      	cmp	r3, #8
 800746a:	d0e5      	beq.n	8007438 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	699a      	ldr	r2, [r3, #24]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	f042 0201 	orr.w	r2, r2, #1
 800747a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800747c:	f7fe f912 	bl	80056a4 <HAL_GetTick>
 8007480:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007482:	e012      	b.n	80074aa <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007484:	f7fe f90e 	bl	80056a4 <HAL_GetTick>
 8007488:	4602      	mov	r2, r0
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	1ad3      	subs	r3, r2, r3
 800748e:	2b0a      	cmp	r3, #10
 8007490:	d90b      	bls.n	80074aa <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007496:	f043 0201 	orr.w	r2, r3, #1
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2203      	movs	r2, #3
 80074a2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e0f5      	b.n	8007696 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
 80074b0:	f003 0301 	and.w	r3, r3, #1
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d0e5      	beq.n	8007484 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	699a      	ldr	r2, [r3, #24]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0202 	orr.w	r2, r2, #2
 80074c6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	4a74      	ldr	r2, [pc, #464]	; (80076a0 <HAL_FDCAN_Init+0x2ac>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d103      	bne.n	80074da <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80074d2:	4a74      	ldr	r2, [pc, #464]	; (80076a4 <HAL_FDCAN_Init+0x2b0>)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	7c1b      	ldrb	r3, [r3, #16]
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d108      	bne.n	80074f4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	699a      	ldr	r2, [r3, #24]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074f0:	619a      	str	r2, [r3, #24]
 80074f2:	e007      	b.n	8007504 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	699a      	ldr	r2, [r3, #24]
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007502:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	7c5b      	ldrb	r3, [r3, #17]
 8007508:	2b01      	cmp	r3, #1
 800750a:	d108      	bne.n	800751e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	699a      	ldr	r2, [r3, #24]
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800751a:	619a      	str	r2, [r3, #24]
 800751c:	e007      	b.n	800752e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	699a      	ldr	r2, [r3, #24]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800752c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	7c9b      	ldrb	r3, [r3, #18]
 8007532:	2b01      	cmp	r3, #1
 8007534:	d108      	bne.n	8007548 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	699a      	ldr	r2, [r3, #24]
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007544:	619a      	str	r2, [r3, #24]
 8007546:	e007      	b.n	8007558 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007556:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	699b      	ldr	r3, [r3, #24]
 800755e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	689a      	ldr	r2, [r3, #8]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	430a      	orrs	r2, r1
 800756c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	699a      	ldr	r2, [r3, #24]
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800757c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	691a      	ldr	r2, [r3, #16]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f022 0210 	bic.w	r2, r2, #16
 800758c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d108      	bne.n	80075a8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	699a      	ldr	r2, [r3, #24]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	f042 0204 	orr.w	r2, r2, #4
 80075a4:	619a      	str	r2, [r3, #24]
 80075a6:	e02c      	b.n	8007602 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	68db      	ldr	r3, [r3, #12]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d028      	beq.n	8007602 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b02      	cmp	r3, #2
 80075b6:	d01c      	beq.n	80075f2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	699a      	ldr	r2, [r3, #24]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80075c6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	691a      	ldr	r2, [r3, #16]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f042 0210 	orr.w	r2, r2, #16
 80075d6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	68db      	ldr	r3, [r3, #12]
 80075dc:	2b03      	cmp	r3, #3
 80075de:	d110      	bne.n	8007602 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	f042 0220 	orr.w	r2, r2, #32
 80075ee:	619a      	str	r2, [r3, #24]
 80075f0:	e007      	b.n	8007602 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	699a      	ldr	r2, [r3, #24]
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f042 0220 	orr.w	r2, r2, #32
 8007600:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	3b01      	subs	r3, #1
 8007608:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	3b01      	subs	r3, #1
 8007610:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007612:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6a1b      	ldr	r3, [r3, #32]
 8007618:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800761a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	695b      	ldr	r3, [r3, #20]
 8007622:	3b01      	subs	r3, #1
 8007624:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800762a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800762c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007636:	d115      	bne.n	8007664 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007642:	3b01      	subs	r3, #1
 8007644:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007646:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800764c:	3b01      	subs	r3, #1
 800764e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007650:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007658:	3b01      	subs	r3, #1
 800765a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007660:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007662:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	430a      	orrs	r2, r1
 8007676:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f9c2 	bl	8007a04 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2200      	movs	r2, #0
 8007684:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2200      	movs	r2, #0
 800768a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	2201      	movs	r2, #1
 8007690:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007694:	2300      	movs	r3, #0
}
 8007696:	4618      	mov	r0, r3
 8007698:	3710      	adds	r7, #16
 800769a:	46bd      	mov	sp, r7
 800769c:	bd80      	pop	{r7, pc}
 800769e:	bf00      	nop
 80076a0:	40006400 	.word	0x40006400
 80076a4:	40006500 	.word	0x40006500

080076a8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80076a8:	b580      	push	{r7, lr}
 80076aa:	b08a      	sub	sp, #40	; 0x28
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076b6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80076ba:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c4:	4013      	ands	r3, r2
 80076c6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076ce:	f003 0307 	and.w	r3, r3, #7
 80076d2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076da:	6a3a      	ldr	r2, [r7, #32]
 80076dc:	4013      	ands	r3, r2
 80076de:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80076ea:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	4013      	ands	r3, r2
 80076f6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076fe:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8007702:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	69ba      	ldr	r2, [r7, #24]
 800770c:	4013      	ands	r3, r2
 800770e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007716:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800771a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007722:	697a      	ldr	r2, [r7, #20]
 8007724:	4013      	ands	r3, r2
 8007726:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800772e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00d      	beq.n	8007752 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800773c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d006      	beq.n	8007752 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f939 	bl	80079c4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800775c:	2b00      	cmp	r3, #0
 800775e:	d01b      	beq.n	8007798 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800776a:	2b00      	cmp	r3, #0
 800776c:	d014      	beq.n	8007798 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007776:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007780:	693a      	ldr	r2, [r7, #16]
 8007782:	4013      	ands	r3, r2
 8007784:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800778e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007790:	6939      	ldr	r1, [r7, #16]
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f000 f8f7 	bl	8007986 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077a4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80077a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f8b6 	bl	800791a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80077ae:	6a3b      	ldr	r3, [r7, #32]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d007      	beq.n	80077c4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	6a3a      	ldr	r2, [r7, #32]
 80077ba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80077bc:	6a39      	ldr	r1, [r7, #32]
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 f8b6 	bl	8007930 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80077c4:	69fb      	ldr	r3, [r7, #28]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d007      	beq.n	80077da <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	69fa      	ldr	r2, [r7, #28]
 80077d0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80077d2:	69f9      	ldr	r1, [r7, #28]
 80077d4:	6878      	ldr	r0, [r7, #4]
 80077d6:	f000 f8b6 	bl	8007946 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d00e      	beq.n	8007806 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d007      	beq.n	8007806 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077fe:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 f8ab 	bl	800795c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007810:	2b00      	cmp	r3, #0
 8007812:	d01a      	beq.n	800784a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800781a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800781e:	2b00      	cmp	r3, #0
 8007820:	d013      	beq.n	800784a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 800782a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007834:	68fa      	ldr	r2, [r7, #12]
 8007836:	4013      	ands	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	2280      	movs	r2, #128	; 0x80
 8007840:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007842:	68f9      	ldr	r1, [r7, #12]
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f000 f893 	bl	8007970 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00e      	beq.n	8007876 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800785e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d007      	beq.n	8007876 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800786e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f893 	bl	800799c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800787c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00e      	beq.n	80078a2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800788a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d007      	beq.n	80078a2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800789a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 f887 	bl	80079b0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d011      	beq.n	80078d4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d00a      	beq.n	80078d4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80078c6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d007      	beq.n	80078ea <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	697a      	ldr	r2, [r7, #20]
 80078e0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f000 f881 	bl	80079ec <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80078ea:	69bb      	ldr	r3, [r7, #24]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d009      	beq.n	8007904 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	69ba      	ldr	r2, [r7, #24]
 80078f6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	431a      	orrs	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007908:	2b00      	cmp	r3, #0
 800790a:	d002      	beq.n	8007912 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 f863 	bl	80079d8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8007912:	bf00      	nop
 8007914:	3728      	adds	r7, #40	; 0x28
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}

0800791a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800791a:	b480      	push	{r7}
 800791c:	b083      	sub	sp, #12
 800791e:	af00      	add	r7, sp, #0
 8007920:	6078      	str	r0, [r7, #4]
 8007922:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
 8007938:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 800793a:	bf00      	nop
 800793c:	370c      	adds	r7, #12
 800793e:	46bd      	mov	sp, r7
 8007940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007944:	4770      	bx	lr

08007946 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
 800794e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8007950:	bf00      	nop
 8007952:	370c      	adds	r7, #12
 8007954:	46bd      	mov	sp, r7
 8007956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795a:	4770      	bx	lr

0800795c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007964:	bf00      	nop
 8007966:	370c      	adds	r7, #12
 8007968:	46bd      	mov	sp, r7
 800796a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796e:	4770      	bx	lr

08007970 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007970:	b480      	push	{r7}
 8007972:	b083      	sub	sp, #12
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
 8007978:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007986:	b480      	push	{r7}
 8007988:	b083      	sub	sp, #12
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007990:	bf00      	nop
 8007992:	370c      	adds	r7, #12
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr

0800799c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80079d8:	b480      	push	{r7}
 80079da:	b083      	sub	sp, #12
 80079dc:	af00      	add	r7, sp, #0
 80079de:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80079e0:	bf00      	nop
 80079e2:	370c      	adds	r7, #12
 80079e4:	46bd      	mov	sp, r7
 80079e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ea:	4770      	bx	lr

080079ec <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80079ec:	b480      	push	{r7}
 80079ee:	b083      	sub	sp, #12
 80079f0:	af00      	add	r7, sp, #0
 80079f2:	6078      	str	r0, [r7, #4]
 80079f4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80079f6:	bf00      	nop
 80079f8:	370c      	adds	r7, #12
 80079fa:	46bd      	mov	sp, r7
 80079fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a00:	4770      	bx	lr
	...

08007a04 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b085      	sub	sp, #20
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007a0c:	4b27      	ldr	r3, [pc, #156]	; (8007aac <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007a0e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a1e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	041a      	lsls	r2, r3, #16
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	430a      	orrs	r2, r1
 8007a2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007a44:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a4c:	061a      	lsls	r2, r3, #24
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	430a      	orrs	r2, r1
 8007a54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e005      	b.n	8007a92 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3304      	adds	r3, #4
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007a98:	68fa      	ldr	r2, [r7, #12]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d3f3      	bcc.n	8007a86 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007a9e:	bf00      	nop
 8007aa0:	bf00      	nop
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	4000a400 	.word	0x4000a400

08007ab0 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b086      	sub	sp, #24
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	60f8      	str	r0, [r7, #12]
 8007ab8:	60b9      	str	r1, [r7, #8]
 8007aba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007ac2:	4b24      	ldr	r3, [pc, #144]	; (8007b54 <HAL_FLASH_Program+0xa4>)
 8007ac4:	781b      	ldrb	r3, [r3, #0]
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_FLASH_Program+0x1e>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e03e      	b.n	8007b4c <HAL_FLASH_Program+0x9c>
 8007ace:	4b21      	ldr	r3, [pc, #132]	; (8007b54 <HAL_FLASH_Program+0xa4>)
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007ad8:	f000 f888 	bl	8007bec <FLASH_WaitForLastOperation>
 8007adc:	4603      	mov	r3, r0
 8007ade:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8007ae0:	7dfb      	ldrb	r3, [r7, #23]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d12e      	bne.n	8007b44 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007ae6:	4b1b      	ldr	r3, [pc, #108]	; (8007b54 <HAL_FLASH_Program+0xa4>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d107      	bne.n	8007b02 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8007af2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007af6:	68b8      	ldr	r0, [r7, #8]
 8007af8:	f000 f8cc 	bl	8007c94 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8007afc:	2301      	movs	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	e010      	b.n	8007b24 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d002      	beq.n	8007b0e <HAL_FLASH_Program+0x5e>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2b02      	cmp	r3, #2
 8007b0c:	d10a      	bne.n	8007b24 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	4619      	mov	r1, r3
 8007b12:	68b8      	ldr	r0, [r7, #8]
 8007b14:	f000 f8e4 	bl	8007ce0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b02      	cmp	r3, #2
 8007b1c:	d102      	bne.n	8007b24 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8007b1e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007b22:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007b24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007b28:	f000 f860 	bl	8007bec <FLASH_WaitForLastOperation>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d006      	beq.n	8007b44 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8007b36:	4b08      	ldr	r3, [pc, #32]	; (8007b58 <HAL_FLASH_Program+0xa8>)
 8007b38:	695a      	ldr	r2, [r3, #20]
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	43db      	mvns	r3, r3
 8007b3e:	4906      	ldr	r1, [pc, #24]	; (8007b58 <HAL_FLASH_Program+0xa8>)
 8007b40:	4013      	ands	r3, r2
 8007b42:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007b44:	4b03      	ldr	r3, [pc, #12]	; (8007b54 <HAL_FLASH_Program+0xa4>)
 8007b46:	2200      	movs	r2, #0
 8007b48:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8007b4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3718      	adds	r7, #24
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	2000000c 	.word	0x2000000c
 8007b58:	40022000 	.word	0x40022000

08007b5c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b083      	sub	sp, #12
 8007b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <HAL_FLASH_Unlock+0x38>)
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	da0b      	bge.n	8007b86 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007b6e:	4b09      	ldr	r3, [pc, #36]	; (8007b94 <HAL_FLASH_Unlock+0x38>)
 8007b70:	4a09      	ldr	r2, [pc, #36]	; (8007b98 <HAL_FLASH_Unlock+0x3c>)
 8007b72:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007b74:	4b07      	ldr	r3, [pc, #28]	; (8007b94 <HAL_FLASH_Unlock+0x38>)
 8007b76:	4a09      	ldr	r2, [pc, #36]	; (8007b9c <HAL_FLASH_Unlock+0x40>)
 8007b78:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007b7a:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <HAL_FLASH_Unlock+0x38>)
 8007b7c:	695b      	ldr	r3, [r3, #20]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	da01      	bge.n	8007b86 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007b86:	79fb      	ldrb	r3, [r7, #7]
}
 8007b88:	4618      	mov	r0, r3
 8007b8a:	370c      	adds	r7, #12
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	40022000 	.word	0x40022000
 8007b98:	45670123 	.word	0x45670123
 8007b9c:	cdef89ab 	.word	0xcdef89ab

08007ba0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b083      	sub	sp, #12
 8007ba4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8007baa:	4b09      	ldr	r3, [pc, #36]	; (8007bd0 <HAL_FLASH_Lock+0x30>)
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	4a08      	ldr	r2, [pc, #32]	; (8007bd0 <HAL_FLASH_Lock+0x30>)
 8007bb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007bb4:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8007bb6:	4b06      	ldr	r3, [pc, #24]	; (8007bd0 <HAL_FLASH_Lock+0x30>)
 8007bb8:	695b      	ldr	r3, [r3, #20]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	da01      	bge.n	8007bc2 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8007bc2:	79fb      	ldrb	r3, [r7, #7]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	40022000 	.word	0x40022000

08007bd4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 8007bd8:	4b03      	ldr	r3, [pc, #12]	; (8007be8 <HAL_FLASH_GetError+0x14>)
 8007bda:	685b      	ldr	r3, [r3, #4]
}
 8007bdc:	4618      	mov	r0, r3
 8007bde:	46bd      	mov	sp, r7
 8007be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be4:	4770      	bx	lr
 8007be6:	bf00      	nop
 8007be8:	2000000c 	.word	0x2000000c

08007bec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8007bf4:	f7fd fd56 	bl	80056a4 <HAL_GetTick>
 8007bf8:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007bfa:	e009      	b.n	8007c10 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8007bfc:	f7fd fd52 	bl	80056a4 <HAL_GetTick>
 8007c00:	4602      	mov	r2, r0
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	1ad3      	subs	r3, r2, r3
 8007c06:	687a      	ldr	r2, [r7, #4]
 8007c08:	429a      	cmp	r2, r3
 8007c0a:	d201      	bcs.n	8007c10 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e038      	b.n	8007c82 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8007c10:	4b1e      	ldr	r3, [pc, #120]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c12:	691b      	ldr	r3, [r3, #16]
 8007c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c1c:	d0ee      	beq.n	8007bfc <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8007c1e:	4b1b      	ldr	r3, [pc, #108]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c20:	691a      	ldr	r2, [r3, #16]
 8007c22:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 8007c26:	4013      	ands	r3, r2
 8007c28:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d01e      	beq.n	8007c6e <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8007c30:	4b17      	ldr	r3, [pc, #92]	; (8007c90 <FLASH_WaitForLastOperation+0xa4>)
 8007c32:	685a      	ldr	r2, [r3, #4]
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	4313      	orrs	r3, r2
 8007c38:	4a15      	ldr	r2, [pc, #84]	; (8007c90 <FLASH_WaitForLastOperation+0xa4>)
 8007c3a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d007      	beq.n	8007c56 <FLASH_WaitForLastOperation+0x6a>
 8007c46:	4b11      	ldr	r3, [pc, #68]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c48:	699a      	ldr	r2, [r3, #24]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8007c50:	490e      	ldr	r1, [pc, #56]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c52:	4313      	orrs	r3, r2
 8007c54:	618b      	str	r3, [r1, #24]
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d004      	beq.n	8007c6a <FLASH_WaitForLastOperation+0x7e>
 8007c60:	4a0a      	ldr	r2, [pc, #40]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8007c68:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e009      	b.n	8007c82 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8007c6e:	4b07      	ldr	r3, [pc, #28]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d102      	bne.n	8007c80 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007c7a:	4b04      	ldr	r3, [pc, #16]	; (8007c8c <FLASH_WaitForLastOperation+0xa0>)
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40022000 	.word	0x40022000
 8007c90:	2000000c 	.word	0x2000000c

08007c94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8007ca0:	4b0e      	ldr	r3, [pc, #56]	; (8007cdc <FLASH_Program_DoubleWord+0x48>)
 8007ca2:	695b      	ldr	r3, [r3, #20]
 8007ca4:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <FLASH_Program_DoubleWord+0x48>)
 8007ca6:	f043 0301 	orr.w	r3, r3, #1
 8007caa:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	683a      	ldr	r2, [r7, #0]
 8007cb0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007cb2:	f3bf 8f6f 	isb	sy
}
 8007cb6:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8007cb8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007cbc:	f04f 0200 	mov.w	r2, #0
 8007cc0:	f04f 0300 	mov.w	r3, #0
 8007cc4:	000a      	movs	r2, r1
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	68f9      	ldr	r1, [r7, #12]
 8007cca:	3104      	adds	r1, #4
 8007ccc:	4613      	mov	r3, r2
 8007cce:	600b      	str	r3, [r1, #0]
}
 8007cd0:	bf00      	nop
 8007cd2:	3714      	adds	r7, #20
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr
 8007cdc:	40022000 	.word	0x40022000

08007ce0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b089      	sub	sp, #36	; 0x24
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
 8007ce8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8007cea:	2340      	movs	r3, #64	; 0x40
 8007cec:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8007cf6:	4b14      	ldr	r3, [pc, #80]	; (8007d48 <FLASH_Program_Fast+0x68>)
 8007cf8:	695b      	ldr	r3, [r3, #20]
 8007cfa:	4a13      	ldr	r2, [pc, #76]	; (8007d48 <FLASH_Program_Fast+0x68>)
 8007cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007d00:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d02:	f3ef 8310 	mrs	r3, PRIMASK
 8007d06:	60fb      	str	r3, [r7, #12]
  return(result);
 8007d08:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8007d0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007d0c:	b672      	cpsid	i
}
 8007d0e:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	69bb      	ldr	r3, [r7, #24]
 8007d16:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	3304      	adds	r3, #4
 8007d1c:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	3304      	adds	r3, #4
 8007d22:	617b      	str	r3, [r7, #20]
    row_index--;
 8007d24:	7ffb      	ldrb	r3, [r7, #31]
 8007d26:	3b01      	subs	r3, #1
 8007d28:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8007d2a:	7ffb      	ldrb	r3, [r7, #31]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d1ef      	bne.n	8007d10 <FLASH_Program_Fast+0x30>
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d34:	68bb      	ldr	r3, [r7, #8]
 8007d36:	f383 8810 	msr	PRIMASK, r3
}
 8007d3a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8007d3c:	bf00      	nop
 8007d3e:	3724      	adds	r7, #36	; 0x24
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	40022000 	.word	0x40022000

08007d4c <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007d56:	4b4a      	ldr	r3, [pc, #296]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d101      	bne.n	8007d62 <HAL_FLASHEx_Erase+0x16>
 8007d5e:	2302      	movs	r3, #2
 8007d60:	e089      	b.n	8007e76 <HAL_FLASHEx_Erase+0x12a>
 8007d62:	4b47      	ldr	r3, [pc, #284]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007d64:	2201      	movs	r2, #1
 8007d66:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007d68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007d6c:	f7ff ff3e 	bl	8007bec <FLASH_WaitForLastOperation>
 8007d70:	4603      	mov	r3, r0
 8007d72:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007d74:	7bfb      	ldrb	r3, [r7, #15]
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d179      	bne.n	8007e6e <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007d7a:	4b41      	ldr	r3, [pc, #260]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8007d80:	4b40      	ldr	r3, [pc, #256]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d019      	beq.n	8007dc0 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d8c:	4b3d      	ldr	r3, [pc, #244]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a3c      	ldr	r2, [pc, #240]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007d92:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d96:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007d98:	4b3a      	ldr	r3, [pc, #232]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d009      	beq.n	8007db8 <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8007da4:	4b37      	ldr	r3, [pc, #220]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a36      	ldr	r2, [pc, #216]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007daa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dae:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8007db0:	4b33      	ldr	r3, [pc, #204]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007db2:	2203      	movs	r2, #3
 8007db4:	771a      	strb	r2, [r3, #28]
 8007db6:	e016      	b.n	8007de6 <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8007db8:	4b31      	ldr	r3, [pc, #196]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007dba:	2201      	movs	r2, #1
 8007dbc:	771a      	strb	r2, [r3, #28]
 8007dbe:	e012      	b.n	8007de6 <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8007dc0:	4b30      	ldr	r3, [pc, #192]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d009      	beq.n	8007de0 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8007dcc:	4b2d      	ldr	r3, [pc, #180]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a2c      	ldr	r2, [pc, #176]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007dd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007dd6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8007dd8:	4b29      	ldr	r3, [pc, #164]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007dda:	2202      	movs	r2, #2
 8007ddc:	771a      	strb	r2, [r3, #28]
 8007dde:	e002      	b.n	8007de6 <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007de0:	4b27      	ldr	r3, [pc, #156]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007de2:	2200      	movs	r2, #0
 8007de4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d111      	bne.n	8007e12 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	4618      	mov	r0, r3
 8007df4:	f000 f848 	bl	8007e88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007df8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007dfc:	f7ff fef6 	bl	8007bec <FLASH_WaitForLastOperation>
 8007e00:	4603      	mov	r3, r0
 8007e02:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8007e04:	4b1f      	ldr	r3, [pc, #124]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007e06:	695b      	ldr	r3, [r3, #20]
 8007e08:	4a1e      	ldr	r2, [pc, #120]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007e0a:	f023 0304 	bic.w	r3, r3, #4
 8007e0e:	6153      	str	r3, [r2, #20]
 8007e10:	e02b      	b.n	8007e6a <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	f04f 32ff 	mov.w	r2, #4294967295
 8007e18:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	689b      	ldr	r3, [r3, #8]
 8007e1e:	60bb      	str	r3, [r7, #8]
 8007e20:	e01b      	b.n	8007e5a <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	4619      	mov	r1, r3
 8007e28:	68b8      	ldr	r0, [r7, #8]
 8007e2a:	f000 f84b 	bl	8007ec4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007e2e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007e32:	f7ff fedb 	bl	8007bec <FLASH_WaitForLastOperation>
 8007e36:	4603      	mov	r3, r0
 8007e38:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8007e3a:	4b12      	ldr	r3, [pc, #72]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	4a11      	ldr	r2, [pc, #68]	; (8007e84 <HAL_FLASHEx_Erase+0x138>)
 8007e40:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8007e44:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	68ba      	ldr	r2, [r7, #8]
 8007e50:	601a      	str	r2, [r3, #0]
          break;
 8007e52:	e00a      	b.n	8007e6a <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	3301      	adds	r3, #1
 8007e58:	60bb      	str	r3, [r7, #8]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	689a      	ldr	r2, [r3, #8]
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	68db      	ldr	r3, [r3, #12]
 8007e62:	4413      	add	r3, r2
 8007e64:	68ba      	ldr	r2, [r7, #8]
 8007e66:	429a      	cmp	r2, r3
 8007e68:	d3db      	bcc.n	8007e22 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007e6a:	f000 f84f 	bl	8007f0c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007e6e:	4b04      	ldr	r3, [pc, #16]	; (8007e80 <HAL_FLASHEx_Erase+0x134>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]

  return status;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
 8007e7e:	bf00      	nop
 8007e80:	2000000c 	.word	0x2000000c
 8007e84:	40022000 	.word	0x40022000

08007e88 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8007e88:	b480      	push	{r7}
 8007e8a:	b083      	sub	sp, #12
 8007e8c:	af00      	add	r7, sp, #0
 8007e8e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d005      	beq.n	8007ea6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8007e9a:	4b09      	ldr	r3, [pc, #36]	; (8007ec0 <FLASH_MassErase+0x38>)
 8007e9c:	695b      	ldr	r3, [r3, #20]
 8007e9e:	4a08      	ldr	r2, [pc, #32]	; (8007ec0 <FLASH_MassErase+0x38>)
 8007ea0:	f043 0304 	orr.w	r3, r3, #4
 8007ea4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ea6:	4b06      	ldr	r3, [pc, #24]	; (8007ec0 <FLASH_MassErase+0x38>)
 8007ea8:	695b      	ldr	r3, [r3, #20]
 8007eaa:	4a05      	ldr	r2, [pc, #20]	; (8007ec0 <FLASH_MassErase+0x38>)
 8007eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007eb0:	6153      	str	r3, [r2, #20]
}
 8007eb2:	bf00      	nop
 8007eb4:	370c      	adds	r7, #12
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	40022000 	.word	0x40022000

08007ec4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b083      	sub	sp, #12
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8007ece:	4b0e      	ldr	r3, [pc, #56]	; (8007f08 <FLASH_PageErase+0x44>)
 8007ed0:	695b      	ldr	r3, [r3, #20]
 8007ed2:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	00db      	lsls	r3, r3, #3
 8007eda:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 8007ede:	490a      	ldr	r1, [pc, #40]	; (8007f08 <FLASH_PageErase+0x44>)
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8007ee4:	4b08      	ldr	r3, [pc, #32]	; (8007f08 <FLASH_PageErase+0x44>)
 8007ee6:	695b      	ldr	r3, [r3, #20]
 8007ee8:	4a07      	ldr	r2, [pc, #28]	; (8007f08 <FLASH_PageErase+0x44>)
 8007eea:	f043 0302 	orr.w	r3, r3, #2
 8007eee:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8007ef0:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <FLASH_PageErase+0x44>)
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	4a04      	ldr	r2, [pc, #16]	; (8007f08 <FLASH_PageErase+0x44>)
 8007ef6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007efa:	6153      	str	r3, [r2, #20]
}
 8007efc:	bf00      	nop
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr
 8007f08:	40022000 	.word	0x40022000

08007f0c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8007f12:	4b1e      	ldr	r3, [pc, #120]	; (8007f8c <FLASH_FlushCaches+0x80>)
 8007f14:	7f1b      	ldrb	r3, [r3, #28]
 8007f16:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8007f18:	79fb      	ldrb	r3, [r7, #7]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d002      	beq.n	8007f24 <FLASH_FlushCaches+0x18>
 8007f1e:	79fb      	ldrb	r3, [r7, #7]
 8007f20:	2b03      	cmp	r3, #3
 8007f22:	d111      	bne.n	8007f48 <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007f24:	4b1a      	ldr	r3, [pc, #104]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a19      	ldr	r2, [pc, #100]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f2a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	4b17      	ldr	r3, [pc, #92]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a16      	ldr	r2, [pc, #88]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f3a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007f3c:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f42:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007f46:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8007f48:	79fb      	ldrb	r3, [r7, #7]
 8007f4a:	2b02      	cmp	r3, #2
 8007f4c:	d002      	beq.n	8007f54 <FLASH_FlushCaches+0x48>
 8007f4e:	79fb      	ldrb	r3, [r7, #7]
 8007f50:	2b03      	cmp	r3, #3
 8007f52:	d111      	bne.n	8007f78 <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007f54:	4b0e      	ldr	r3, [pc, #56]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	4a0d      	ldr	r2, [pc, #52]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f5a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007f5e:	6013      	str	r3, [r2, #0]
 8007f60:	4b0b      	ldr	r3, [pc, #44]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f66:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f6a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007f6c:	4b08      	ldr	r3, [pc, #32]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a07      	ldr	r2, [pc, #28]	; (8007f90 <FLASH_FlushCaches+0x84>)
 8007f72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007f76:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8007f78:	4b04      	ldr	r3, [pc, #16]	; (8007f8c <FLASH_FlushCaches+0x80>)
 8007f7a:	2200      	movs	r2, #0
 8007f7c:	771a      	strb	r2, [r3, #28]
}
 8007f7e:	bf00      	nop
 8007f80:	370c      	adds	r7, #12
 8007f82:	46bd      	mov	sp, r7
 8007f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f88:	4770      	bx	lr
 8007f8a:	bf00      	nop
 8007f8c:	2000000c 	.word	0x2000000c
 8007f90:	40022000 	.word	0x40022000

08007f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007f94:	b480      	push	{r7}
 8007f96:	b087      	sub	sp, #28
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007fa2:	e15a      	b.n	800825a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	2101      	movs	r1, #1
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	fa01 f303 	lsl.w	r3, r1, r3
 8007fb0:	4013      	ands	r3, r2
 8007fb2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f000 814c 	beq.w	8008254 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d00b      	beq.n	8007fdc <HAL_GPIO_Init+0x48>
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	685b      	ldr	r3, [r3, #4]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d007      	beq.n	8007fdc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007fd0:	2b11      	cmp	r3, #17
 8007fd2:	d003      	beq.n	8007fdc <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	2b12      	cmp	r3, #18
 8007fda:	d130      	bne.n	800803e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	689b      	ldr	r3, [r3, #8]
 8007fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	005b      	lsls	r3, r3, #1
 8007fe6:	2203      	movs	r2, #3
 8007fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8007fec:	43db      	mvns	r3, r3
 8007fee:	693a      	ldr	r2, [r7, #16]
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	68da      	ldr	r2, [r3, #12]
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	005b      	lsls	r3, r3, #1
 8007ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8008000:	693a      	ldr	r2, [r7, #16]
 8008002:	4313      	orrs	r3, r2
 8008004:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	685b      	ldr	r3, [r3, #4]
 8008010:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008012:	2201      	movs	r2, #1
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	fa02 f303 	lsl.w	r3, r2, r3
 800801a:	43db      	mvns	r3, r3
 800801c:	693a      	ldr	r2, [r7, #16]
 800801e:	4013      	ands	r3, r2
 8008020:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	091b      	lsrs	r3, r3, #4
 8008028:	f003 0201 	and.w	r2, r3, #1
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	fa02 f303 	lsl.w	r3, r2, r3
 8008032:	693a      	ldr	r2, [r7, #16]
 8008034:	4313      	orrs	r3, r2
 8008036:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	693a      	ldr	r2, [r7, #16]
 800803c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	68db      	ldr	r3, [r3, #12]
 8008042:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	005b      	lsls	r3, r3, #1
 8008048:	2203      	movs	r2, #3
 800804a:	fa02 f303 	lsl.w	r3, r2, r3
 800804e:	43db      	mvns	r3, r3
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4013      	ands	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	689a      	ldr	r2, [r3, #8]
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	005b      	lsls	r3, r3, #1
 800805e:	fa02 f303 	lsl.w	r3, r2, r3
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	4313      	orrs	r3, r2
 8008066:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	693a      	ldr	r2, [r7, #16]
 800806c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	685b      	ldr	r3, [r3, #4]
 8008072:	2b02      	cmp	r3, #2
 8008074:	d003      	beq.n	800807e <HAL_GPIO_Init+0xea>
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	685b      	ldr	r3, [r3, #4]
 800807a:	2b12      	cmp	r3, #18
 800807c:	d123      	bne.n	80080c6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	08da      	lsrs	r2, r3, #3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	3208      	adds	r2, #8
 8008086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	f003 0307 	and.w	r3, r3, #7
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	220f      	movs	r2, #15
 8008096:	fa02 f303 	lsl.w	r3, r2, r3
 800809a:	43db      	mvns	r3, r3
 800809c:	693a      	ldr	r2, [r7, #16]
 800809e:	4013      	ands	r3, r2
 80080a0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	691a      	ldr	r2, [r3, #16]
 80080a6:	697b      	ldr	r3, [r7, #20]
 80080a8:	f003 0307 	and.w	r3, r3, #7
 80080ac:	009b      	lsls	r3, r3, #2
 80080ae:	fa02 f303 	lsl.w	r3, r2, r3
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	4313      	orrs	r3, r2
 80080b6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	08da      	lsrs	r2, r3, #3
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	3208      	adds	r2, #8
 80080c0:	6939      	ldr	r1, [r7, #16]
 80080c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80080cc:	697b      	ldr	r3, [r7, #20]
 80080ce:	005b      	lsls	r3, r3, #1
 80080d0:	2203      	movs	r2, #3
 80080d2:	fa02 f303 	lsl.w	r3, r2, r3
 80080d6:	43db      	mvns	r3, r3
 80080d8:	693a      	ldr	r2, [r7, #16]
 80080da:	4013      	ands	r3, r2
 80080dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f003 0203 	and.w	r2, r3, #3
 80080e6:	697b      	ldr	r3, [r7, #20]
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	fa02 f303 	lsl.w	r3, r2, r3
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4313      	orrs	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	693a      	ldr	r2, [r7, #16]
 80080f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008102:	2b00      	cmp	r3, #0
 8008104:	f000 80a6 	beq.w	8008254 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008108:	4b5b      	ldr	r3, [pc, #364]	; (8008278 <HAL_GPIO_Init+0x2e4>)
 800810a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800810c:	4a5a      	ldr	r2, [pc, #360]	; (8008278 <HAL_GPIO_Init+0x2e4>)
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	6613      	str	r3, [r2, #96]	; 0x60
 8008114:	4b58      	ldr	r3, [pc, #352]	; (8008278 <HAL_GPIO_Init+0x2e4>)
 8008116:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008118:	f003 0301 	and.w	r3, r3, #1
 800811c:	60bb      	str	r3, [r7, #8]
 800811e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008120:	4a56      	ldr	r2, [pc, #344]	; (800827c <HAL_GPIO_Init+0x2e8>)
 8008122:	697b      	ldr	r3, [r7, #20]
 8008124:	089b      	lsrs	r3, r3, #2
 8008126:	3302      	adds	r3, #2
 8008128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800812c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800812e:	697b      	ldr	r3, [r7, #20]
 8008130:	f003 0303 	and.w	r3, r3, #3
 8008134:	009b      	lsls	r3, r3, #2
 8008136:	220f      	movs	r2, #15
 8008138:	fa02 f303 	lsl.w	r3, r2, r3
 800813c:	43db      	mvns	r3, r3
 800813e:	693a      	ldr	r2, [r7, #16]
 8008140:	4013      	ands	r3, r2
 8008142:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800814a:	d01f      	beq.n	800818c <HAL_GPIO_Init+0x1f8>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	4a4c      	ldr	r2, [pc, #304]	; (8008280 <HAL_GPIO_Init+0x2ec>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d019      	beq.n	8008188 <HAL_GPIO_Init+0x1f4>
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a4b      	ldr	r2, [pc, #300]	; (8008284 <HAL_GPIO_Init+0x2f0>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d013      	beq.n	8008184 <HAL_GPIO_Init+0x1f0>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a4a      	ldr	r2, [pc, #296]	; (8008288 <HAL_GPIO_Init+0x2f4>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d00d      	beq.n	8008180 <HAL_GPIO_Init+0x1ec>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	4a49      	ldr	r2, [pc, #292]	; (800828c <HAL_GPIO_Init+0x2f8>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d007      	beq.n	800817c <HAL_GPIO_Init+0x1e8>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	4a48      	ldr	r2, [pc, #288]	; (8008290 <HAL_GPIO_Init+0x2fc>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d101      	bne.n	8008178 <HAL_GPIO_Init+0x1e4>
 8008174:	2305      	movs	r3, #5
 8008176:	e00a      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008178:	2306      	movs	r3, #6
 800817a:	e008      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 800817c:	2304      	movs	r3, #4
 800817e:	e006      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008180:	2303      	movs	r3, #3
 8008182:	e004      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008184:	2302      	movs	r3, #2
 8008186:	e002      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 8008188:	2301      	movs	r3, #1
 800818a:	e000      	b.n	800818e <HAL_GPIO_Init+0x1fa>
 800818c:	2300      	movs	r3, #0
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	f002 0203 	and.w	r2, r2, #3
 8008194:	0092      	lsls	r2, r2, #2
 8008196:	4093      	lsls	r3, r2
 8008198:	693a      	ldr	r2, [r7, #16]
 800819a:	4313      	orrs	r3, r2
 800819c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800819e:	4937      	ldr	r1, [pc, #220]	; (800827c <HAL_GPIO_Init+0x2e8>)
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	089b      	lsrs	r3, r3, #2
 80081a4:	3302      	adds	r3, #2
 80081a6:	693a      	ldr	r2, [r7, #16]
 80081a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80081ac:	4b39      	ldr	r3, [pc, #228]	; (8008294 <HAL_GPIO_Init+0x300>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	43db      	mvns	r3, r3
 80081b6:	693a      	ldr	r2, [r7, #16]
 80081b8:	4013      	ands	r3, r2
 80081ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	685b      	ldr	r3, [r3, #4]
 80081c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d003      	beq.n	80081d0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80081c8:	693a      	ldr	r2, [r7, #16]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80081d0:	4a30      	ldr	r2, [pc, #192]	; (8008294 <HAL_GPIO_Init+0x300>)
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80081d6:	4b2f      	ldr	r3, [pc, #188]	; (8008294 <HAL_GPIO_Init+0x300>)
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	43db      	mvns	r3, r3
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	4013      	ands	r3, r2
 80081e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	4313      	orrs	r3, r2
 80081f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80081fa:	4a26      	ldr	r2, [pc, #152]	; (8008294 <HAL_GPIO_Init+0x300>)
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008200:	4b24      	ldr	r3, [pc, #144]	; (8008294 <HAL_GPIO_Init+0x300>)
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	43db      	mvns	r3, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	4013      	ands	r3, r2
 800820e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008218:	2b00      	cmp	r3, #0
 800821a:	d003      	beq.n	8008224 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800821c:	693a      	ldr	r2, [r7, #16]
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008224:	4a1b      	ldr	r2, [pc, #108]	; (8008294 <HAL_GPIO_Init+0x300>)
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800822a:	4b1a      	ldr	r3, [pc, #104]	; (8008294 <HAL_GPIO_Init+0x300>)
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	43db      	mvns	r3, r3
 8008234:	693a      	ldr	r2, [r7, #16]
 8008236:	4013      	ands	r3, r2
 8008238:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008246:	693a      	ldr	r2, [r7, #16]
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800824e:	4a11      	ldr	r2, [pc, #68]	; (8008294 <HAL_GPIO_Init+0x300>)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	3301      	adds	r3, #1
 8008258:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	681a      	ldr	r2, [r3, #0]
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	fa22 f303 	lsr.w	r3, r2, r3
 8008264:	2b00      	cmp	r3, #0
 8008266:	f47f ae9d 	bne.w	8007fa4 <HAL_GPIO_Init+0x10>
  }
}
 800826a:	bf00      	nop
 800826c:	bf00      	nop
 800826e:	371c      	adds	r7, #28
 8008270:	46bd      	mov	sp, r7
 8008272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008276:	4770      	bx	lr
 8008278:	40021000 	.word	0x40021000
 800827c:	40010000 	.word	0x40010000
 8008280:	48000400 	.word	0x48000400
 8008284:	48000800 	.word	0x48000800
 8008288:	48000c00 	.word	0x48000c00
 800828c:	48001000 	.word	0x48001000
 8008290:	48001400 	.word	0x48001400
 8008294:	40010400 	.word	0x40010400

08008298 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008298:	b480      	push	{r7}
 800829a:	b083      	sub	sp, #12
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
 80082a0:	460b      	mov	r3, r1
 80082a2:	807b      	strh	r3, [r7, #2]
 80082a4:	4613      	mov	r3, r2
 80082a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80082a8:	787b      	ldrb	r3, [r7, #1]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d003      	beq.n	80082b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80082ae:	887a      	ldrh	r2, [r7, #2]
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80082b4:	e002      	b.n	80082bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80082b6:	887a      	ldrh	r2, [r7, #2]
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d101      	bne.n	80082da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e081      	b.n	80083de <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d106      	bne.n	80082f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fb fd6a 	bl	8003dc8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2224      	movs	r2, #36	; 0x24
 80082f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	681a      	ldr	r2, [r3, #0]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f022 0201 	bic.w	r2, r2, #1
 800830a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685a      	ldr	r2, [r3, #4]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008318:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	689a      	ldr	r2, [r3, #8]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008328:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	68db      	ldr	r3, [r3, #12]
 800832e:	2b01      	cmp	r3, #1
 8008330:	d107      	bne.n	8008342 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	689a      	ldr	r2, [r3, #8]
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800833e:	609a      	str	r2, [r3, #8]
 8008340:	e006      	b.n	8008350 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	689a      	ldr	r2, [r3, #8]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800834e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	68db      	ldr	r3, [r3, #12]
 8008354:	2b02      	cmp	r3, #2
 8008356:	d104      	bne.n	8008362 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008360:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	685b      	ldr	r3, [r3, #4]
 8008368:	687a      	ldr	r2, [r7, #4]
 800836a:	6812      	ldr	r2, [r2, #0]
 800836c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008374:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	68da      	ldr	r2, [r3, #12]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008384:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	691a      	ldr	r2, [r3, #16]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	ea42 0103 	orr.w	r1, r2, r3
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	021a      	lsls	r2, r3, #8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	430a      	orrs	r2, r1
 800839e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	69d9      	ldr	r1, [r3, #28]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6a1a      	ldr	r2, [r3, #32]
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	430a      	orrs	r2, r1
 80083ae:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0201 	orr.w	r2, r2, #1
 80083be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2220      	movs	r2, #32
 80083ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2200      	movs	r2, #0
 80083d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80083dc:	2300      	movs	r3, #0
}
 80083de:	4618      	mov	r0, r3
 80083e0:	3708      	adds	r7, #8
 80083e2:	46bd      	mov	sp, r7
 80083e4:	bd80      	pop	{r7, pc}
	...

080083e8 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	b088      	sub	sp, #32
 80083ec:	af02      	add	r7, sp, #8
 80083ee:	60f8      	str	r0, [r7, #12]
 80083f0:	4608      	mov	r0, r1
 80083f2:	4611      	mov	r1, r2
 80083f4:	461a      	mov	r2, r3
 80083f6:	4603      	mov	r3, r0
 80083f8:	817b      	strh	r3, [r7, #10]
 80083fa:	460b      	mov	r3, r1
 80083fc:	813b      	strh	r3, [r7, #8]
 80083fe:	4613      	mov	r3, r2
 8008400:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b20      	cmp	r3, #32
 800840c:	f040 80fd 	bne.w	800860a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d002      	beq.n	800841c <HAL_I2C_Mem_Read+0x34>
 8008416:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008418:	2b00      	cmp	r3, #0
 800841a:	d105      	bne.n	8008428 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008422:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008424:	2301      	movs	r3, #1
 8008426:	e0f1      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800842e:	2b01      	cmp	r3, #1
 8008430:	d101      	bne.n	8008436 <HAL_I2C_Mem_Read+0x4e>
 8008432:	2302      	movs	r3, #2
 8008434:	e0ea      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	2201      	movs	r2, #1
 800843a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800843e:	f7fd f931 	bl	80056a4 <HAL_GetTick>
 8008442:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008444:	697b      	ldr	r3, [r7, #20]
 8008446:	9300      	str	r3, [sp, #0]
 8008448:	2319      	movs	r3, #25
 800844a:	2201      	movs	r2, #1
 800844c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008450:	68f8      	ldr	r0, [r7, #12]
 8008452:	f001 fa52 	bl	80098fa <I2C_WaitOnFlagUntilTimeout>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d001      	beq.n	8008460 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e0d5      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	2222      	movs	r2, #34	; 0x22
 8008464:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2240      	movs	r2, #64	; 0x40
 800846c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2200      	movs	r2, #0
 8008474:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6a3a      	ldr	r2, [r7, #32]
 800847a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	2200      	movs	r2, #0
 8008486:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8008488:	88f8      	ldrh	r0, [r7, #6]
 800848a:	893a      	ldrh	r2, [r7, #8]
 800848c:	8979      	ldrh	r1, [r7, #10]
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	9301      	str	r3, [sp, #4]
 8008492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	4603      	mov	r3, r0
 8008498:	68f8      	ldr	r0, [r7, #12]
 800849a:	f000 fcf5 	bl	8008e88 <I2C_RequestMemoryRead>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d005      	beq.n	80084b0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e0ad      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084b4:	b29b      	uxth	r3, r3
 80084b6:	2bff      	cmp	r3, #255	; 0xff
 80084b8:	d90e      	bls.n	80084d8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	22ff      	movs	r2, #255	; 0xff
 80084be:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084c4:	b2da      	uxtb	r2, r3
 80084c6:	8979      	ldrh	r1, [r7, #10]
 80084c8:	4b52      	ldr	r3, [pc, #328]	; (8008614 <HAL_I2C_Mem_Read+0x22c>)
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f001 fb35 	bl	8009b40 <I2C_TransferConfig>
 80084d6:	e00f      	b.n	80084f8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084dc:	b29a      	uxth	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e6:	b2da      	uxtb	r2, r3
 80084e8:	8979      	ldrh	r1, [r7, #10]
 80084ea:	4b4a      	ldr	r3, [pc, #296]	; (8008614 <HAL_I2C_Mem_Read+0x22c>)
 80084ec:	9300      	str	r3, [sp, #0]
 80084ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f001 fb24 	bl	8009b40 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80084f8:	697b      	ldr	r3, [r7, #20]
 80084fa:	9300      	str	r3, [sp, #0]
 80084fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084fe:	2200      	movs	r2, #0
 8008500:	2104      	movs	r1, #4
 8008502:	68f8      	ldr	r0, [r7, #12]
 8008504:	f001 f9f9 	bl	80098fa <I2C_WaitOnFlagUntilTimeout>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d001      	beq.n	8008512 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800850e:	2301      	movs	r3, #1
 8008510:	e07c      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800851c:	b2d2      	uxtb	r2, r2
 800851e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008524:	1c5a      	adds	r2, r3, #1
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800852e:	3b01      	subs	r3, #1
 8008530:	b29a      	uxth	r2, r3
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800853a:	b29b      	uxth	r3, r3
 800853c:	3b01      	subs	r3, #1
 800853e:	b29a      	uxth	r2, r3
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008548:	b29b      	uxth	r3, r3
 800854a:	2b00      	cmp	r3, #0
 800854c:	d034      	beq.n	80085b8 <HAL_I2C_Mem_Read+0x1d0>
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008552:	2b00      	cmp	r3, #0
 8008554:	d130      	bne.n	80085b8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855c:	2200      	movs	r2, #0
 800855e:	2180      	movs	r1, #128	; 0x80
 8008560:	68f8      	ldr	r0, [r7, #12]
 8008562:	f001 f9ca 	bl	80098fa <I2C_WaitOnFlagUntilTimeout>
 8008566:	4603      	mov	r3, r0
 8008568:	2b00      	cmp	r3, #0
 800856a:	d001      	beq.n	8008570 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800856c:	2301      	movs	r3, #1
 800856e:	e04d      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008574:	b29b      	uxth	r3, r3
 8008576:	2bff      	cmp	r3, #255	; 0xff
 8008578:	d90e      	bls.n	8008598 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	22ff      	movs	r2, #255	; 0xff
 800857e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008584:	b2da      	uxtb	r2, r3
 8008586:	8979      	ldrh	r1, [r7, #10]
 8008588:	2300      	movs	r3, #0
 800858a:	9300      	str	r3, [sp, #0]
 800858c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008590:	68f8      	ldr	r0, [r7, #12]
 8008592:	f001 fad5 	bl	8009b40 <I2C_TransferConfig>
 8008596:	e00f      	b.n	80085b8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800859c:	b29a      	uxth	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80085a6:	b2da      	uxtb	r2, r3
 80085a8:	8979      	ldrh	r1, [r7, #10]
 80085aa:	2300      	movs	r3, #0
 80085ac:	9300      	str	r3, [sp, #0]
 80085ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f001 fac4 	bl	8009b40 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085bc:	b29b      	uxth	r3, r3
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d19a      	bne.n	80084f8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80085c6:	68f8      	ldr	r0, [r7, #12]
 80085c8:	f001 fa17 	bl	80099fa <I2C_WaitOnSTOPFlagUntilTimeout>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e01a      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	2220      	movs	r2, #32
 80085dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	6859      	ldr	r1, [r3, #4]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <HAL_I2C_Mem_Read+0x230>)
 80085ea:	400b      	ands	r3, r1
 80085ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	2220      	movs	r2, #32
 80085f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2200      	movs	r2, #0
 80085fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	e000      	b.n	800860c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800860a:	2302      	movs	r3, #2
  }
}
 800860c:	4618      	mov	r0, r3
 800860e:	3718      	adds	r7, #24
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	80002400 	.word	0x80002400
 8008618:	fe00e800 	.word	0xfe00e800

0800861c <HAL_I2C_Mem_Read_DMA>:
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                       uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b08a      	sub	sp, #40	; 0x28
 8008620:	af02      	add	r7, sp, #8
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	4608      	mov	r0, r1
 8008626:	4611      	mov	r1, r2
 8008628:	461a      	mov	r2, r3
 800862a:	4603      	mov	r3, r0
 800862c:	817b      	strh	r3, [r7, #10]
 800862e:	460b      	mov	r3, r1
 8008630:	813b      	strh	r3, [r7, #8]
 8008632:	4613      	mov	r3, r2
 8008634:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863c:	b2db      	uxtb	r3, r3
 800863e:	2b20      	cmp	r3, #32
 8008640:	f040 80d5 	bne.w	80087ee <HAL_I2C_Mem_Read_DMA+0x1d2>
  {
    if ((pData == NULL) || (Size == 0U))
 8008644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008646:	2b00      	cmp	r3, #0
 8008648:	d002      	beq.n	8008650 <HAL_I2C_Mem_Read_DMA+0x34>
 800864a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800864c:	2b00      	cmp	r3, #0
 800864e:	d105      	bne.n	800865c <HAL_I2C_Mem_Read_DMA+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008656:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8008658:	2301      	movs	r3, #1
 800865a:	e0c9      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008666:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800866a:	d101      	bne.n	8008670 <HAL_I2C_Mem_Read_DMA+0x54>
    {
      return HAL_BUSY;
 800866c:	2302      	movs	r3, #2
 800866e:	e0bf      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008676:	2b01      	cmp	r3, #1
 8008678:	d101      	bne.n	800867e <HAL_I2C_Mem_Read_DMA+0x62>
 800867a:	2302      	movs	r3, #2
 800867c:	e0b8      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	2201      	movs	r2, #1
 8008682:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008686:	f7fd f80d 	bl	80056a4 <HAL_GetTick>
 800868a:	61b8      	str	r0, [r7, #24]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2222      	movs	r2, #34	; 0x22
 8008690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MEM;
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2240      	movs	r2, #64	; 0x40
 8008698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80086a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80086ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	4a51      	ldr	r2, [pc, #324]	; (80087f8 <HAL_I2C_Mem_Read_DMA+0x1dc>)
 80086b2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	4a51      	ldr	r2, [pc, #324]	; (80087fc <HAL_I2C_Mem_Read_DMA+0x1e0>)
 80086b8:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086be:	b29b      	uxth	r3, r3
 80086c0:	2bff      	cmp	r3, #255	; 0xff
 80086c2:	d906      	bls.n	80086d2 <HAL_I2C_Mem_Read_DMA+0xb6>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	22ff      	movs	r2, #255	; 0xff
 80086c8:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80086ca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80086ce:	61fb      	str	r3, [r7, #28]
 80086d0:	e007      	b.n	80086e2 <HAL_I2C_Mem_Read_DMA+0xc6>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80086d6:	b29a      	uxth	r2, r3
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80086dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80086e0:	61fb      	str	r3, [r7, #28]
    }

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80086e2:	88f8      	ldrh	r0, [r7, #6]
 80086e4:	893a      	ldrh	r2, [r7, #8]
 80086e6:	8979      	ldrh	r1, [r7, #10]
 80086e8:	69bb      	ldr	r3, [r7, #24]
 80086ea:	9301      	str	r3, [sp, #4]
 80086ec:	2319      	movs	r3, #25
 80086ee:	9300      	str	r3, [sp, #0]
 80086f0:	4603      	mov	r3, r0
 80086f2:	68f8      	ldr	r0, [r7, #12]
 80086f4:	f000 fbc8 	bl	8008e88 <I2C_RequestMemoryRead>
 80086f8:	4603      	mov	r3, r0
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_I2C_Mem_Read_DMA+0xee>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2200      	movs	r2, #0
 8008702:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e072      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    }

    if (hi2c->hdmarx != NULL)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800870e:	2b00      	cmp	r3, #0
 8008710:	d020      	beq.n	8008754 <HAL_I2C_Mem_Read_DMA+0x138>
    {
      /* Set the I2C DMA transfer complete callback */
      hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008716:	4a3a      	ldr	r2, [pc, #232]	; (8008800 <HAL_I2C_Mem_Read_DMA+0x1e4>)
 8008718:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800871e:	4a39      	ldr	r2, [pc, #228]	; (8008804 <HAL_I2C_Mem_Read_DMA+0x1e8>)
 8008720:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the unused DMA callbacks to NULL */
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008726:	2200      	movs	r2, #0
 8008728:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->hdmarx->XferAbortCallback = NULL;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800872e:	2200      	movs	r2, #0
 8008730:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the DMA channel */
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData, hi2c->XferSize);
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	3324      	adds	r3, #36	; 0x24
 800873c:	4619      	mov	r1, r3
 800873e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008744:	f7fe fbbe 	bl	8006ec4 <HAL_DMA_Start_IT>
 8008748:	4603      	mov	r3, r0
 800874a:	75fb      	strb	r3, [r7, #23]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    if (dmaxferstatus == HAL_OK)
 800874c:	7dfb      	ldrb	r3, [r7, #23]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d139      	bne.n	80087c6 <HAL_I2C_Mem_Read_DMA+0x1aa>
 8008752:	e013      	b.n	800877c <HAL_I2C_Mem_Read_DMA+0x160>
      hi2c->State     = HAL_I2C_STATE_READY;
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	2220      	movs	r2, #32
 8008758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008768:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2200      	movs	r2, #0
 8008774:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8008778:	2301      	movs	r3, #1
 800877a:	e039      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
    {
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008780:	b2da      	uxtb	r2, r3
 8008782:	8979      	ldrh	r1, [r7, #10]
 8008784:	4b20      	ldr	r3, [pc, #128]	; (8008808 <HAL_I2C_Mem_Read_DMA+0x1ec>)
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	68f8      	ldr	r0, [r7, #12]
 800878c:	f001 f9d8 	bl	8009b40 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008794:	b29a      	uxth	r2, r3
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800879a:	1ad3      	subs	r3, r2, r3
 800879c:	b29a      	uxth	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Note : The I2C interrupts must be enabled after unlocking current process
                to avoid the risk of I2C interrupt handle execution before current
                process unlock */
      /* Enable ERR and NACK interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80087aa:	2110      	movs	r1, #16
 80087ac:	68f8      	ldr	r0, [r7, #12]
 80087ae:	f001 f9f5 	bl	8009b9c <I2C_Enable_IRQ>

      /* Enable DMA Request */
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80087c0:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);

      return HAL_ERROR;
    }

    return HAL_OK;
 80087c2:	2300      	movs	r3, #0
 80087c4:	e014      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
      hi2c->State     = HAL_I2C_STATE_READY;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	2220      	movs	r2, #32
 80087ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode      = HAL_I2C_MODE_NONE;
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	2200      	movs	r2, #0
 80087d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087da:	f043 0210 	orr.w	r2, r3, #16
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	645a      	str	r2, [r3, #68]	; 0x44
      __HAL_UNLOCK(hi2c);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <HAL_I2C_Mem_Read_DMA+0x1d4>
  }
  else
  {
    return HAL_BUSY;
 80087ee:	2302      	movs	r3, #2
  }
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}
 80087f8:	ffff0000 	.word	0xffff0000
 80087fc:	08008ae3 	.word	0x08008ae3
 8008800:	080097fb 	.word	0x080097fb
 8008804:	08009891 	.word	0x08009891
 8008808:	80002400 	.word	0x80002400

0800880c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
 8008864:	460b      	mov	r3, r1
 8008866:	70fb      	strb	r3, [r7, #3]
 8008868:	4613      	mov	r3, r2
 800886a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800886c:	bf00      	nop
 800886e:	370c      	adds	r7, #12
 8008870:	46bd      	mov	sp, r7
 8008872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008876:	4770      	bx	lr

08008878 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8008878:	b480      	push	{r7}
 800887a:	b083      	sub	sp, #12
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088a0:	b480      	push	{r7}
 80088a2:	b083      	sub	sp, #12
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80088a8:	bf00      	nop
 80088aa:	370c      	adds	r7, #12
 80088ac:	46bd      	mov	sp, r7
 80088ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b2:	4770      	bx	lr

080088b4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80088b4:	b480      	push	{r7}
 80088b6:	b083      	sub	sp, #12
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80088bc:	bf00      	nop
 80088be:	370c      	adds	r7, #12
 80088c0:	46bd      	mov	sp, r7
 80088c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c6:	4770      	bx	lr

080088c8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80088c8:	b480      	push	{r7}
 80088ca:	b083      	sub	sp, #12
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr

080088dc <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b086      	sub	sp, #24
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	60f8      	str	r0, [r7, #12]
 80088e4:	60b9      	str	r1, [r7, #8]
 80088e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	d101      	bne.n	8008900 <I2C_Slave_ISR_IT+0x24>
 80088fc:	2302      	movs	r3, #2
 80088fe:	e0ec      	b.n	8008ada <I2C_Slave_ISR_IT+0x1fe>
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2201      	movs	r2, #1
 8008904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008908:	693b      	ldr	r3, [r7, #16]
 800890a:	095b      	lsrs	r3, r3, #5
 800890c:	f003 0301 	and.w	r3, r3, #1
 8008910:	2b00      	cmp	r3, #0
 8008912:	d009      	beq.n	8008928 <I2C_Slave_ISR_IT+0x4c>
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	095b      	lsrs	r3, r3, #5
 8008918:	f003 0301 	and.w	r3, r3, #1
 800891c:	2b00      	cmp	r3, #0
 800891e:	d003      	beq.n	8008928 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8008920:	6939      	ldr	r1, [r7, #16]
 8008922:	68f8      	ldr	r0, [r7, #12]
 8008924:	f000 fcee 	bl	8009304 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	091b      	lsrs	r3, r3, #4
 800892c:	f003 0301 	and.w	r3, r3, #1
 8008930:	2b00      	cmp	r3, #0
 8008932:	d04d      	beq.n	80089d0 <I2C_Slave_ISR_IT+0xf4>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	091b      	lsrs	r3, r3, #4
 8008938:	f003 0301 	and.w	r3, r3, #1
 800893c:	2b00      	cmp	r3, #0
 800893e:	d047      	beq.n	80089d0 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008944:	b29b      	uxth	r3, r3
 8008946:	2b00      	cmp	r3, #0
 8008948:	d128      	bne.n	800899c <I2C_Slave_ISR_IT+0xc0>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008950:	b2db      	uxtb	r3, r3
 8008952:	2b28      	cmp	r3, #40	; 0x28
 8008954:	d108      	bne.n	8008968 <I2C_Slave_ISR_IT+0x8c>
 8008956:	697b      	ldr	r3, [r7, #20]
 8008958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800895c:	d104      	bne.n	8008968 <I2C_Slave_ISR_IT+0x8c>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800895e:	6939      	ldr	r1, [r7, #16]
 8008960:	68f8      	ldr	r0, [r7, #12]
 8008962:	f000 fdd9 	bl	8009518 <I2C_ITListenCplt>
 8008966:	e032      	b.n	80089ce <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800896e:	b2db      	uxtb	r3, r3
 8008970:	2b29      	cmp	r3, #41	; 0x29
 8008972:	d10e      	bne.n	8008992 <I2C_Slave_ISR_IT+0xb6>
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800897a:	d00a      	beq.n	8008992 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	2210      	movs	r2, #16
 8008982:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008984:	68f8      	ldr	r0, [r7, #12]
 8008986:	f000 ff14 	bl	80097b2 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800898a:	68f8      	ldr	r0, [r7, #12]
 800898c:	f000 fb91 	bl	80090b2 <I2C_ITSlaveSeqCplt>
 8008990:	e01d      	b.n	80089ce <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2210      	movs	r2, #16
 8008998:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800899a:	e096      	b.n	8008aca <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	2210      	movs	r2, #16
 80089a2:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089a8:	f043 0204 	orr.w	r2, r3, #4
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d004      	beq.n	80089c0 <I2C_Slave_ISR_IT+0xe4>
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089bc:	f040 8085 	bne.w	8008aca <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089c4:	4619      	mov	r1, r3
 80089c6:	68f8      	ldr	r0, [r7, #12]
 80089c8:	f000 fdfc 	bl	80095c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80089cc:	e07d      	b.n	8008aca <I2C_Slave_ISR_IT+0x1ee>
 80089ce:	e07c      	b.n	8008aca <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	089b      	lsrs	r3, r3, #2
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d030      	beq.n	8008a3e <I2C_Slave_ISR_IT+0x162>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	089b      	lsrs	r3, r3, #2
 80089e0:	f003 0301 	and.w	r3, r3, #1
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d02a      	beq.n	8008a3e <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80089ec:	b29b      	uxth	r3, r3
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d018      	beq.n	8008a24 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089fc:	b2d2      	uxtb	r2, r2
 80089fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a04:	1c5a      	adds	r2, r3, #1
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b29a      	uxth	r2, r3
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a1a:	b29b      	uxth	r3, r3
 8008a1c:	3b01      	subs	r3, #1
 8008a1e:	b29a      	uxth	r2, r3
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a28:	b29b      	uxth	r3, r3
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d14f      	bne.n	8008ace <I2C_Slave_ISR_IT+0x1f2>
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008a34:	d04b      	beq.n	8008ace <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8008a36:	68f8      	ldr	r0, [r7, #12]
 8008a38:	f000 fb3b 	bl	80090b2 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8008a3c:	e047      	b.n	8008ace <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a3e:	693b      	ldr	r3, [r7, #16]
 8008a40:	08db      	lsrs	r3, r3, #3
 8008a42:	f003 0301 	and.w	r3, r3, #1
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00a      	beq.n	8008a60 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	08db      	lsrs	r3, r3, #3
 8008a4e:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d004      	beq.n	8008a60 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8008a56:	6939      	ldr	r1, [r7, #16]
 8008a58:	68f8      	ldr	r0, [r7, #12]
 8008a5a:	f000 fa69 	bl	8008f30 <I2C_ITAddrCplt>
 8008a5e:	e037      	b.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8008a60:	693b      	ldr	r3, [r7, #16]
 8008a62:	085b      	lsrs	r3, r3, #1
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d031      	beq.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	085b      	lsrs	r3, r3, #1
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d02b      	beq.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a7c:	b29b      	uxth	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d018      	beq.n	8008ab4 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	781a      	ldrb	r2, [r3, #0]
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a92:	1c5a      	adds	r2, r3, #1
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	b29a      	uxth	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	851a      	strh	r2, [r3, #40]	; 0x28
 8008ab2:	e00d      	b.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008aba:	d002      	beq.n	8008ac2 <I2C_Slave_ISR_IT+0x1e6>
 8008abc:	697b      	ldr	r3, [r7, #20]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d106      	bne.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8008ac2:	68f8      	ldr	r0, [r7, #12]
 8008ac4:	f000 faf5 	bl	80090b2 <I2C_ITSlaveSeqCplt>
 8008ac8:	e002      	b.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8008aca:	bf00      	nop
 8008acc:	e000      	b.n	8008ad0 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8008ace:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008ad8:	2300      	movs	r3, #0
}
 8008ada:	4618      	mov	r0, r3
 8008adc:	3718      	adds	r7, #24
 8008ade:	46bd      	mov	sp, r7
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b088      	sub	sp, #32
 8008ae6:	af02      	add	r7, sp, #8
 8008ae8:	60f8      	str	r0, [r7, #12]
 8008aea:	60b9      	str	r1, [r7, #8]
 8008aec:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008af4:	2b01      	cmp	r3, #1
 8008af6:	d101      	bne.n	8008afc <I2C_Master_ISR_DMA+0x1a>
 8008af8:	2302      	movs	r3, #2
 8008afa:	e0e1      	b.n	8008cc0 <I2C_Master_ISR_DMA+0x1de>
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	2201      	movs	r2, #1
 8008b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	091b      	lsrs	r3, r3, #4
 8008b08:	f003 0301 	and.w	r3, r3, #1
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d017      	beq.n	8008b40 <I2C_Master_ISR_DMA+0x5e>
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	091b      	lsrs	r3, r3, #4
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d011      	beq.n	8008b40 <I2C_Master_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2210      	movs	r2, #16
 8008b22:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008b28:	f043 0204 	orr.w	r2, r3, #4
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b30:	2120      	movs	r1, #32
 8008b32:	68f8      	ldr	r0, [r7, #12]
 8008b34:	f001 f832 	bl	8009b9c <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008b38:	68f8      	ldr	r0, [r7, #12]
 8008b3a:	f000 fe3a 	bl	80097b2 <I2C_Flush_TXDR>
 8008b3e:	e0ba      	b.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008b40:	68bb      	ldr	r3, [r7, #8]
 8008b42:	09db      	lsrs	r3, r3, #7
 8008b44:	f003 0301 	and.w	r3, r3, #1
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d072      	beq.n	8008c32 <I2C_Master_ISR_DMA+0x150>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	099b      	lsrs	r3, r3, #6
 8008b50:	f003 0301 	and.w	r3, r3, #1
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d06c      	beq.n	8008c32 <I2C_Master_ISR_DMA+0x150>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	681a      	ldr	r2, [r3, #0]
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008b66:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d04e      	beq.n	8008c10 <I2C_Master_ISR_DMA+0x12e>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b7e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	2bff      	cmp	r3, #255	; 0xff
 8008b88:	d906      	bls.n	8008b98 <I2C_Master_ISR_DMA+0xb6>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	22ff      	movs	r2, #255	; 0xff
 8008b8e:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 8008b90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008b94:	617b      	str	r3, [r7, #20]
 8008b96:	e010      	b.n	8008bba <I2C_Master_ISR_DMA+0xd8>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008baa:	d003      	beq.n	8008bb4 <I2C_Master_ISR_DMA+0xd2>
        {
          xfermode = hi2c->XferOptions;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bb0:	617b      	str	r3, [r7, #20]
 8008bb2:	e002      	b.n	8008bba <I2C_Master_ISR_DMA+0xd8>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8008bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008bb8:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bbe:	b2da      	uxtb	r2, r3
 8008bc0:	8a79      	ldrh	r1, [r7, #18]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	697b      	ldr	r3, [r7, #20]
 8008bc8:	68f8      	ldr	r0, [r7, #12]
 8008bca:	f000 ffb9 	bl	8009b40 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008bd2:	b29a      	uxth	r2, r3
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008bd8:	1ad3      	subs	r3, r2, r3
 8008bda:	b29a      	uxth	r2, r3
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008be6:	b2db      	uxtb	r3, r3
 8008be8:	2b22      	cmp	r3, #34	; 0x22
 8008bea:	d108      	bne.n	8008bfe <I2C_Master_ISR_DMA+0x11c>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	681a      	ldr	r2, [r3, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008bfa:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008bfc:	e05b      	b.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	681a      	ldr	r2, [r3, #0]
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c0c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8008c0e:	e052      	b.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c1e:	d003      	beq.n	8008c28 <I2C_Master_ISR_DMA+0x146>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8008c20:	68f8      	ldr	r0, [r7, #12]
 8008c22:	f000 fa09 	bl	8009038 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8008c26:	e046      	b.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008c28:	2140      	movs	r1, #64	; 0x40
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f000 fcca 	bl	80095c4 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8008c30:	e041      	b.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	099b      	lsrs	r3, r3, #6
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d029      	beq.n	8008c92 <I2C_Master_ISR_DMA+0x1b0>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	099b      	lsrs	r3, r3, #6
 8008c42:	f003 0301 	and.w	r3, r3, #1
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d023      	beq.n	8008c92 <I2C_Master_ISR_DMA+0x1b0>
  {
    if (hi2c->XferCount == 0U)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008c4e:	b29b      	uxth	r3, r3
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d119      	bne.n	8008c88 <I2C_Master_ISR_DMA+0x1a6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008c62:	d027      	beq.n	8008cb4 <I2C_Master_ISR_DMA+0x1d2>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008c6c:	d108      	bne.n	8008c80 <I2C_Master_ISR_DMA+0x19e>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685a      	ldr	r2, [r3, #4]
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008c7c:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8008c7e:	e019      	b.n	8008cb4 <I2C_Master_ISR_DMA+0x1d2>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f000 f9d9 	bl	8009038 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8008c86:	e015      	b.n	8008cb4 <I2C_Master_ISR_DMA+0x1d2>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8008c88:	2140      	movs	r1, #64	; 0x40
 8008c8a:	68f8      	ldr	r0, [r7, #12]
 8008c8c:	f000 fc9a 	bl	80095c4 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8008c90:	e010      	b.n	8008cb4 <I2C_Master_ISR_DMA+0x1d2>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	095b      	lsrs	r3, r3, #5
 8008c96:	f003 0301 	and.w	r3, r3, #1
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d00b      	beq.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	095b      	lsrs	r3, r3, #5
 8008ca2:	f003 0301 	and.w	r3, r3, #1
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d005      	beq.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8008caa:	68b9      	ldr	r1, [r7, #8]
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	f000 fa5f 	bl	8009170 <I2C_ITMasterCplt>
 8008cb2:	e000      	b.n	8008cb6 <I2C_Master_ISR_DMA+0x1d4>
    if (hi2c->XferCount == 0U)
 8008cb4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2200      	movs	r2, #0
 8008cba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3718      	adds	r7, #24
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b088      	sub	sp, #32
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d101      	bne.n	8008cec <I2C_Slave_ISR_DMA+0x24>
 8008ce8:	2302      	movs	r3, #2
 8008cea:	e0c9      	b.n	8008e80 <I2C_Slave_ISR_DMA+0x1b8>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	095b      	lsrs	r3, r3, #5
 8008cf8:	f003 0301 	and.w	r3, r3, #1
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d009      	beq.n	8008d14 <I2C_Slave_ISR_DMA+0x4c>
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	095b      	lsrs	r3, r3, #5
 8008d04:	f003 0301 	and.w	r3, r3, #1
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d003      	beq.n	8008d14 <I2C_Slave_ISR_DMA+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8008d0c:	68b9      	ldr	r1, [r7, #8]
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	f000 faf8 	bl	8009304 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	091b      	lsrs	r3, r3, #4
 8008d18:	f003 0301 	and.w	r3, r3, #1
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	f000 809a 	beq.w	8008e56 <I2C_Slave_ISR_DMA+0x18e>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	091b      	lsrs	r3, r3, #4
 8008d26:	f003 0301 	and.w	r3, r3, #1
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 8093 	beq.w	8008e56 <I2C_Slave_ISR_DMA+0x18e>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	0b9b      	lsrs	r3, r3, #14
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d105      	bne.n	8008d48 <I2C_Slave_ISR_DMA+0x80>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	0bdb      	lsrs	r3, r3, #15
 8008d40:	f003 0301 	and.w	r3, r3, #1
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d07f      	beq.n	8008e48 <I2C_Slave_ISR_DMA+0x180>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d00d      	beq.n	8008d6c <I2C_Slave_ISR_DMA+0xa4>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	0bdb      	lsrs	r3, r3, #15
 8008d54:	f003 0301 	and.w	r3, r3, #1
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d007      	beq.n	8008d6c <I2C_Slave_ISR_DMA+0xa4>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <I2C_Slave_ISR_DMA+0xa4>
          {
            treatdmanack = 1U;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d00d      	beq.n	8008d90 <I2C_Slave_ISR_DMA+0xc8>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	0b9b      	lsrs	r3, r3, #14
 8008d78:	f003 0301 	and.w	r3, r3, #1
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d007      	beq.n	8008d90 <I2C_Slave_ISR_DMA+0xc8>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	685b      	ldr	r3, [r3, #4]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d101      	bne.n	8008d90 <I2C_Slave_ISR_DMA+0xc8>
          {
            treatdmanack = 1U;
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008d90:	69fb      	ldr	r3, [r7, #28]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d128      	bne.n	8008de8 <I2C_Slave_ISR_DMA+0x120>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b28      	cmp	r3, #40	; 0x28
 8008da0:	d108      	bne.n	8008db4 <I2C_Slave_ISR_DMA+0xec>
 8008da2:	69bb      	ldr	r3, [r7, #24]
 8008da4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008da8:	d104      	bne.n	8008db4 <I2C_Slave_ISR_DMA+0xec>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8008daa:	68b9      	ldr	r1, [r7, #8]
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 fbb3 	bl	8009518 <I2C_ITListenCplt>
 8008db2:	e048      	b.n	8008e46 <I2C_Slave_ISR_DMA+0x17e>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008dba:	b2db      	uxtb	r3, r3
 8008dbc:	2b29      	cmp	r3, #41	; 0x29
 8008dbe:	d10e      	bne.n	8008dde <I2C_Slave_ISR_DMA+0x116>
 8008dc0:	69bb      	ldr	r3, [r7, #24]
 8008dc2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008dc6:	d00a      	beq.n	8008dde <I2C_Slave_ISR_DMA+0x116>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2210      	movs	r2, #16
 8008dce:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fcee 	bl	80097b2 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f000 f96b 	bl	80090b2 <I2C_ITSlaveSeqCplt>
 8008ddc:	e033      	b.n	8008e46 <I2C_Slave_ISR_DMA+0x17e>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2210      	movs	r2, #16
 8008de4:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8008de6:	e034      	b.n	8008e52 <I2C_Slave_ISR_DMA+0x18a>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	2210      	movs	r2, #16
 8008dee:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df4:	f043 0204 	orr.w	r2, r3, #4
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e02:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d003      	beq.n	8008e12 <I2C_Slave_ISR_DMA+0x14a>
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008e10:	d11f      	bne.n	8008e52 <I2C_Slave_ISR_DMA+0x18a>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008e12:	7dfb      	ldrb	r3, [r7, #23]
 8008e14:	2b21      	cmp	r3, #33	; 0x21
 8008e16:	d002      	beq.n	8008e1e <I2C_Slave_ISR_DMA+0x156>
 8008e18:	7dfb      	ldrb	r3, [r7, #23]
 8008e1a:	2b29      	cmp	r3, #41	; 0x29
 8008e1c:	d103      	bne.n	8008e26 <I2C_Slave_ISR_DMA+0x15e>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	2221      	movs	r2, #33	; 0x21
 8008e22:	631a      	str	r2, [r3, #48]	; 0x30
 8008e24:	e008      	b.n	8008e38 <I2C_Slave_ISR_DMA+0x170>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008e26:	7dfb      	ldrb	r3, [r7, #23]
 8008e28:	2b22      	cmp	r3, #34	; 0x22
 8008e2a:	d002      	beq.n	8008e32 <I2C_Slave_ISR_DMA+0x16a>
 8008e2c:	7dfb      	ldrb	r3, [r7, #23]
 8008e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e30:	d102      	bne.n	8008e38 <I2C_Slave_ISR_DMA+0x170>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2222      	movs	r2, #34	; 0x22
 8008e36:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	68f8      	ldr	r0, [r7, #12]
 8008e40:	f000 fbc0 	bl	80095c4 <I2C_ITError>
      if (treatdmanack == 1U)
 8008e44:	e005      	b.n	8008e52 <I2C_Slave_ISR_DMA+0x18a>
 8008e46:	e004      	b.n	8008e52 <I2C_Slave_ISR_DMA+0x18a>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	2210      	movs	r2, #16
 8008e4e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e50:	e011      	b.n	8008e76 <I2C_Slave_ISR_DMA+0x1ae>
      if (treatdmanack == 1U)
 8008e52:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008e54:	e00f      	b.n	8008e76 <I2C_Slave_ISR_DMA+0x1ae>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	08db      	lsrs	r3, r3, #3
 8008e5a:	f003 0301 	and.w	r3, r3, #1
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d009      	beq.n	8008e76 <I2C_Slave_ISR_DMA+0x1ae>
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	08db      	lsrs	r3, r3, #3
 8008e66:	f003 0301 	and.w	r3, r3, #1
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <I2C_Slave_ISR_DMA+0x1ae>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008e6e:	68b9      	ldr	r1, [r7, #8]
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f000 f85d 	bl	8008f30 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3720      	adds	r7, #32
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b086      	sub	sp, #24
 8008e8c:	af02      	add	r7, sp, #8
 8008e8e:	60f8      	str	r0, [r7, #12]
 8008e90:	4608      	mov	r0, r1
 8008e92:	4611      	mov	r1, r2
 8008e94:	461a      	mov	r2, r3
 8008e96:	4603      	mov	r3, r0
 8008e98:	817b      	strh	r3, [r7, #10]
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	813b      	strh	r3, [r7, #8]
 8008e9e:	4613      	mov	r3, r2
 8008ea0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8008ea2:	88fb      	ldrh	r3, [r7, #6]
 8008ea4:	b2da      	uxtb	r2, r3
 8008ea6:	8979      	ldrh	r1, [r7, #10]
 8008ea8:	4b20      	ldr	r3, [pc, #128]	; (8008f2c <I2C_RequestMemoryRead+0xa4>)
 8008eaa:	9300      	str	r3, [sp, #0]
 8008eac:	2300      	movs	r3, #0
 8008eae:	68f8      	ldr	r0, [r7, #12]
 8008eb0:	f000 fe46 	bl	8009b40 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008eb4:	69fa      	ldr	r2, [r7, #28]
 8008eb6:	69b9      	ldr	r1, [r7, #24]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 fd5e 	bl	800997a <I2C_WaitOnTXISFlagUntilTimeout>
 8008ebe:	4603      	mov	r3, r0
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d001      	beq.n	8008ec8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e02c      	b.n	8008f22 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008ec8:	88fb      	ldrh	r3, [r7, #6]
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d105      	bne.n	8008eda <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008ece:	893b      	ldrh	r3, [r7, #8]
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	629a      	str	r2, [r3, #40]	; 0x28
 8008ed8:	e015      	b.n	8008f06 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008eda:	893b      	ldrh	r3, [r7, #8]
 8008edc:	0a1b      	lsrs	r3, r3, #8
 8008ede:	b29b      	uxth	r3, r3
 8008ee0:	b2da      	uxtb	r2, r3
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008ee8:	69fa      	ldr	r2, [r7, #28]
 8008eea:	69b9      	ldr	r1, [r7, #24]
 8008eec:	68f8      	ldr	r0, [r7, #12]
 8008eee:	f000 fd44 	bl	800997a <I2C_WaitOnTXISFlagUntilTimeout>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d001      	beq.n	8008efc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e012      	b.n	8008f22 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008efc:	893b      	ldrh	r3, [r7, #8]
 8008efe:	b2da      	uxtb	r2, r3
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8008f06:	69fb      	ldr	r3, [r7, #28]
 8008f08:	9300      	str	r3, [sp, #0]
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2140      	movs	r1, #64	; 0x40
 8008f10:	68f8      	ldr	r0, [r7, #12]
 8008f12:	f000 fcf2 	bl	80098fa <I2C_WaitOnFlagUntilTimeout>
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	e000      	b.n	8008f22 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3710      	adds	r7, #16
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	80002000 	.word	0x80002000

08008f30 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008f40:	b2db      	uxtb	r3, r3
 8008f42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008f46:	2b28      	cmp	r3, #40	; 0x28
 8008f48:	d16a      	bne.n	8009020 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 0301 	and.w	r3, r3, #1
 8008f58:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	699b      	ldr	r3, [r3, #24]
 8008f60:	0c1b      	lsrs	r3, r3, #16
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008f68:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	b29b      	uxth	r3, r3
 8008f72:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008f76:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8008f84:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d138      	bne.n	8009000 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8008f8e:	897b      	ldrh	r3, [r7, #10]
 8008f90:	09db      	lsrs	r3, r3, #7
 8008f92:	b29a      	uxth	r2, r3
 8008f94:	89bb      	ldrh	r3, [r7, #12]
 8008f96:	4053      	eors	r3, r2
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	f003 0306 	and.w	r3, r3, #6
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d11c      	bne.n	8008fdc <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8008fa2:	897b      	ldrh	r3, [r7, #10]
 8008fa4:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008faa:	1c5a      	adds	r2, r3, #1
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008fb4:	2b02      	cmp	r3, #2
 8008fb6:	d13b      	bne.n	8009030 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	2208      	movs	r2, #8
 8008fc4:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008fce:	89ba      	ldrh	r2, [r7, #12]
 8008fd0:	7bfb      	ldrb	r3, [r7, #15]
 8008fd2:	4619      	mov	r1, r3
 8008fd4:	6878      	ldr	r0, [r7, #4]
 8008fd6:	f7ff fc41 	bl	800885c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008fda:	e029      	b.n	8009030 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8008fdc:	893b      	ldrh	r3, [r7, #8]
 8008fde:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008fe0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008fe4:	6878      	ldr	r0, [r7, #4]
 8008fe6:	f000 fe3d 	bl	8009c64 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2200      	movs	r2, #0
 8008fee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008ff2:	89ba      	ldrh	r2, [r7, #12]
 8008ff4:	7bfb      	ldrb	r3, [r7, #15]
 8008ff6:	4619      	mov	r1, r3
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	f7ff fc2f 	bl	800885c <HAL_I2C_AddrCallback>
}
 8008ffe:	e017      	b.n	8009030 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8009000:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fe2d 	bl	8009c64 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8009012:	89ba      	ldrh	r2, [r7, #12]
 8009014:	7bfb      	ldrb	r3, [r7, #15]
 8009016:	4619      	mov	r1, r3
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f7ff fc1f 	bl	800885c <HAL_I2C_AddrCallback>
}
 800901e:	e007      	b.n	8009030 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	2208      	movs	r2, #8
 8009026:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8009030:	bf00      	nop
 8009032:	3710      	adds	r7, #16
 8009034:	46bd      	mov	sp, r7
 8009036:	bd80      	pop	{r7, pc}

08009038 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b082      	sub	sp, #8
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800904e:	b2db      	uxtb	r3, r3
 8009050:	2b21      	cmp	r3, #33	; 0x21
 8009052:	d115      	bne.n	8009080 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2220      	movs	r2, #32
 8009058:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2211      	movs	r2, #17
 8009060:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2200      	movs	r2, #0
 8009066:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009068:	2101      	movs	r1, #1
 800906a:	6878      	ldr	r0, [r7, #4]
 800906c:	f000 fdfa 	bl	8009c64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f7ff fbc7 	bl	800880c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800907e:	e014      	b.n	80090aa <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2220      	movs	r2, #32
 8009084:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	2212      	movs	r2, #18
 800908c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2200      	movs	r2, #0
 8009092:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009094:	2102      	movs	r1, #2
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f000 fde4 	bl	8009c64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	2200      	movs	r2, #0
 80090a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f7ff fbbb 	bl	8008820 <HAL_I2C_MasterRxCpltCallback>
}
 80090aa:	bf00      	nop
 80090ac:	3708      	adds	r7, #8
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80090b2:	b580      	push	{r7, lr}
 80090b4:	b084      	sub	sp, #16
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2200      	movs	r2, #0
 80090c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	0b9b      	lsrs	r3, r3, #14
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d008      	beq.n	80090e8 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	e00d      	b.n	8009104 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	0bdb      	lsrs	r3, r3, #15
 80090ec:	f003 0301 	and.w	r3, r3, #1
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d007      	beq.n	8009104 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009102:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800910a:	b2db      	uxtb	r3, r3
 800910c:	2b29      	cmp	r3, #41	; 0x29
 800910e:	d112      	bne.n	8009136 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2228      	movs	r2, #40	; 0x28
 8009114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2221      	movs	r2, #33	; 0x21
 800911c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800911e:	2101      	movs	r1, #1
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fd9f 	bl	8009c64 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fb80 	bl	8008834 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009134:	e017      	b.n	8009166 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800913c:	b2db      	uxtb	r3, r3
 800913e:	2b2a      	cmp	r3, #42	; 0x2a
 8009140:	d111      	bne.n	8009166 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2228      	movs	r2, #40	; 0x28
 8009146:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2222      	movs	r2, #34	; 0x22
 800914e:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8009150:	2102      	movs	r1, #2
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fd86 	bl	8009c64 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f7ff fb71 	bl	8008848 <HAL_I2C_SlaveRxCpltCallback>
}
 8009166:	bf00      	nop
 8009168:	3710      	adds	r7, #16
 800916a:	46bd      	mov	sp, r7
 800916c:	bd80      	pop	{r7, pc}
	...

08009170 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
 8009178:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800917a:	683b      	ldr	r3, [r7, #0]
 800917c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2220      	movs	r2, #32
 8009184:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b21      	cmp	r3, #33	; 0x21
 8009190:	d107      	bne.n	80091a2 <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009192:	2101      	movs	r1, #1
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 fd65 	bl	8009c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	2211      	movs	r2, #17
 800919e:	631a      	str	r2, [r3, #48]	; 0x30
 80091a0:	e00c      	b.n	80091bc <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	2b22      	cmp	r3, #34	; 0x22
 80091ac:	d106      	bne.n	80091bc <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80091ae:	2102      	movs	r1, #2
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fd57 	bl	8009c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	2212      	movs	r2, #18
 80091ba:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	6859      	ldr	r1, [r3, #4]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	4b4d      	ldr	r3, [pc, #308]	; (80092fc <I2C_ITMasterCplt+0x18c>)
 80091c8:	400b      	ands	r3, r1
 80091ca:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2200      	movs	r2, #0
 80091d0:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	4a4a      	ldr	r2, [pc, #296]	; (8009300 <I2C_ITMasterCplt+0x190>)
 80091d6:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80091d8:	697b      	ldr	r3, [r7, #20]
 80091da:	091b      	lsrs	r3, r3, #4
 80091dc:	f003 0301 	and.w	r3, r3, #1
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d009      	beq.n	80091f8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	2210      	movs	r2, #16
 80091ea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091f0:	f043 0204 	orr.w	r2, r3, #4
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80091fe:	b2db      	uxtb	r3, r3
 8009200:	2b60      	cmp	r3, #96	; 0x60
 8009202:	d10b      	bne.n	800921c <I2C_ITMasterCplt+0xac>
 8009204:	697b      	ldr	r3, [r7, #20]
 8009206:	089b      	lsrs	r3, r3, #2
 8009208:	f003 0301 	and.w	r3, r3, #1
 800920c:	2b00      	cmp	r3, #0
 800920e:	d005      	beq.n	800921c <I2C_ITMasterCplt+0xac>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009216:	b2db      	uxtb	r3, r3
 8009218:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800921a:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 fac8 	bl	80097b2 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009226:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800922e:	b2db      	uxtb	r3, r3
 8009230:	2b60      	cmp	r3, #96	; 0x60
 8009232:	d002      	beq.n	800923a <I2C_ITMasterCplt+0xca>
 8009234:	693b      	ldr	r3, [r7, #16]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d006      	beq.n	8009248 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800923e:	4619      	mov	r1, r3
 8009240:	6878      	ldr	r0, [r7, #4]
 8009242:	f000 f9bf 	bl	80095c4 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8009246:	e054      	b.n	80092f2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800924e:	b2db      	uxtb	r3, r3
 8009250:	2b21      	cmp	r3, #33	; 0x21
 8009252:	d124      	bne.n	800929e <I2C_ITMasterCplt+0x12e>
    hi2c->State = HAL_I2C_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2200      	movs	r2, #0
 8009260:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009268:	b2db      	uxtb	r3, r3
 800926a:	2b40      	cmp	r3, #64	; 0x40
 800926c:	d10b      	bne.n	8009286 <I2C_ITMasterCplt+0x116>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fb04 	bl	800888c <HAL_I2C_MemTxCpltCallback>
}
 8009284:	e035      	b.n	80092f2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2200      	movs	r2, #0
 800928a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8009296:	6878      	ldr	r0, [r7, #4]
 8009298:	f7ff fab8 	bl	800880c <HAL_I2C_MasterTxCpltCallback>
}
 800929c:	e029      	b.n	80092f2 <I2C_ITMasterCplt+0x182>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80092a4:	b2db      	uxtb	r3, r3
 80092a6:	2b22      	cmp	r3, #34	; 0x22
 80092a8:	d123      	bne.n	80092f2 <I2C_ITMasterCplt+0x182>
    hi2c->State = HAL_I2C_STATE_READY;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2220      	movs	r2, #32
 80092ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80092be:	b2db      	uxtb	r3, r3
 80092c0:	2b40      	cmp	r3, #64	; 0x40
 80092c2:	d10b      	bne.n	80092dc <I2C_ITMasterCplt+0x16c>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2200      	movs	r2, #0
 80092d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f7ff fae3 	bl	80088a0 <HAL_I2C_MemRxCpltCallback>
}
 80092da:	e00a      	b.n	80092f2 <I2C_ITMasterCplt+0x182>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2200      	movs	r2, #0
 80092e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80092ec:	6878      	ldr	r0, [r7, #4]
 80092ee:	f7ff fa97 	bl	8008820 <HAL_I2C_MasterRxCpltCallback>
}
 80092f2:	bf00      	nop
 80092f4:	3718      	adds	r7, #24
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}
 80092fa:	bf00      	nop
 80092fc:	fe00e800 	.word	0xfe00e800
 8009300:	ffff0000 	.word	0xffff0000

08009304 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b086      	sub	sp, #24
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009320:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	2220      	movs	r2, #32
 8009328:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800932a:	7bfb      	ldrb	r3, [r7, #15]
 800932c:	2b21      	cmp	r3, #33	; 0x21
 800932e:	d002      	beq.n	8009336 <I2C_ITSlaveCplt+0x32>
 8009330:	7bfb      	ldrb	r3, [r7, #15]
 8009332:	2b29      	cmp	r3, #41	; 0x29
 8009334:	d108      	bne.n	8009348 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8009336:	f248 0101 	movw	r1, #32769	; 0x8001
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f000 fc92 	bl	8009c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2221      	movs	r2, #33	; 0x21
 8009344:	631a      	str	r2, [r3, #48]	; 0x30
 8009346:	e00d      	b.n	8009364 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8009348:	7bfb      	ldrb	r3, [r7, #15]
 800934a:	2b22      	cmp	r3, #34	; 0x22
 800934c:	d002      	beq.n	8009354 <I2C_ITSlaveCplt+0x50>
 800934e:	7bfb      	ldrb	r3, [r7, #15]
 8009350:	2b2a      	cmp	r3, #42	; 0x2a
 8009352:	d107      	bne.n	8009364 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8009354:	f248 0102 	movw	r1, #32770	; 0x8002
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc83 	bl	8009c64 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2222      	movs	r2, #34	; 0x22
 8009362:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009372:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6859      	ldr	r1, [r3, #4]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681a      	ldr	r2, [r3, #0]
 800937e:	4b64      	ldr	r3, [pc, #400]	; (8009510 <I2C_ITSlaveCplt+0x20c>)
 8009380:	400b      	ands	r3, r1
 8009382:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f000 fa14 	bl	80097b2 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	0b9b      	lsrs	r3, r3, #14
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d013      	beq.n	80093be <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	681a      	ldr	r2, [r3, #0]
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80093a4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d020      	beq.n	80093f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	b29a      	uxth	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	855a      	strh	r2, [r3, #42]	; 0x2a
 80093bc:	e018      	b.n	80093f0 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	0bdb      	lsrs	r3, r3, #15
 80093c2:	f003 0301 	and.w	r3, r3, #1
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d012      	beq.n	80093f0 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	681a      	ldr	r2, [r3, #0]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80093d8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d006      	beq.n	80093f0 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	685b      	ldr	r3, [r3, #4]
 80093ea:	b29a      	uxth	r2, r3
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80093f0:	697b      	ldr	r3, [r7, #20]
 80093f2:	089b      	lsrs	r3, r3, #2
 80093f4:	f003 0301 	and.w	r3, r3, #1
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d020      	beq.n	800943e <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80093fc:	697b      	ldr	r3, [r7, #20]
 80093fe:	f023 0304 	bic.w	r3, r3, #4
 8009402:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800940e:	b2d2      	uxtb	r2, r2
 8009410:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009416:	1c5a      	adds	r2, r3, #1
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00c      	beq.n	800943e <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009428:	3b01      	subs	r3, #1
 800942a:	b29a      	uxth	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009434:	b29b      	uxth	r3, r3
 8009436:	3b01      	subs	r3, #1
 8009438:	b29a      	uxth	r2, r3
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800944c:	f043 0204 	orr.w	r2, r3, #4
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2200      	movs	r2, #0
 8009458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009466:	2b00      	cmp	r3, #0
 8009468:	d010      	beq.n	800948c <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800946e:	4619      	mov	r1, r3
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 f8a7 	bl	80095c4 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b28      	cmp	r3, #40	; 0x28
 8009480:	d141      	bne.n	8009506 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8009482:	6979      	ldr	r1, [r7, #20]
 8009484:	6878      	ldr	r0, [r7, #4]
 8009486:	f000 f847 	bl	8009518 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800948a:	e03c      	b.n	8009506 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009490:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009494:	d014      	beq.n	80094c0 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8009496:	6878      	ldr	r0, [r7, #4]
 8009498:	f7ff fe0b 	bl	80090b2 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	4a1d      	ldr	r2, [pc, #116]	; (8009514 <I2C_ITSlaveCplt+0x210>)
 80094a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2220      	movs	r2, #32
 80094a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f7ff f9dd 	bl	8008878 <HAL_I2C_ListenCpltCallback>
}
 80094be:	e022      	b.n	8009506 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094c6:	b2db      	uxtb	r3, r3
 80094c8:	2b22      	cmp	r3, #34	; 0x22
 80094ca:	d10e      	bne.n	80094ea <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2220      	movs	r2, #32
 80094d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff f9b0 	bl	8008848 <HAL_I2C_SlaveRxCpltCallback>
}
 80094e8:	e00d      	b.n	8009506 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	2220      	movs	r2, #32
 80094ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2200      	movs	r2, #0
 80094f6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7ff f997 	bl	8008834 <HAL_I2C_SlaveTxCpltCallback>
}
 8009506:	bf00      	nop
 8009508:	3718      	adds	r7, #24
 800950a:	46bd      	mov	sp, r7
 800950c:	bd80      	pop	{r7, pc}
 800950e:	bf00      	nop
 8009510:	fe00e800 	.word	0xfe00e800
 8009514:	ffff0000 	.word	0xffff0000

08009518 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	4a26      	ldr	r2, [pc, #152]	; (80095c0 <I2C_ITListenCplt+0xa8>)
 8009526:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	2200      	movs	r2, #0
 800952c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2200      	movs	r2, #0
 8009542:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	089b      	lsrs	r3, r3, #2
 8009548:	f003 0301 	and.w	r3, r3, #1
 800954c:	2b00      	cmp	r3, #0
 800954e:	d022      	beq.n	8009596 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955a:	b2d2      	uxtb	r2, r2
 800955c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800956c:	2b00      	cmp	r3, #0
 800956e:	d012      	beq.n	8009596 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009574:	3b01      	subs	r3, #1
 8009576:	b29a      	uxth	r2, r3
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009580:	b29b      	uxth	r3, r3
 8009582:	3b01      	subs	r3, #1
 8009584:	b29a      	uxth	r2, r3
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958e:	f043 0204 	orr.w	r2, r3, #4
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009596:	f248 0103 	movw	r1, #32771	; 0x8003
 800959a:	6878      	ldr	r0, [r7, #4]
 800959c:	f000 fb62 	bl	8009c64 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	2210      	movs	r2, #16
 80095a6:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80095b0:	6878      	ldr	r0, [r7, #4]
 80095b2:	f7ff f961 	bl	8008878 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80095b6:	bf00      	nop
 80095b8:	3708      	adds	r7, #8
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	ffff0000 	.word	0xffff0000

080095c4 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80095d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	2200      	movs	r2, #0
 80095da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	4a5d      	ldr	r2, [pc, #372]	; (8009758 <I2C_ITError+0x194>)
 80095e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80095ee:	683b      	ldr	r3, [r7, #0]
 80095f0:	431a      	orrs	r2, r3
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80095f6:	7bfb      	ldrb	r3, [r7, #15]
 80095f8:	2b28      	cmp	r3, #40	; 0x28
 80095fa:	d005      	beq.n	8009608 <I2C_ITError+0x44>
 80095fc:	7bfb      	ldrb	r3, [r7, #15]
 80095fe:	2b29      	cmp	r3, #41	; 0x29
 8009600:	d002      	beq.n	8009608 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8009602:	7bfb      	ldrb	r3, [r7, #15]
 8009604:	2b2a      	cmp	r3, #42	; 0x2a
 8009606:	d10b      	bne.n	8009620 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009608:	2103      	movs	r1, #3
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 fb2a 	bl	8009c64 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	2228      	movs	r2, #40	; 0x28
 8009614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	4a50      	ldr	r2, [pc, #320]	; (800975c <I2C_ITError+0x198>)
 800961c:	635a      	str	r2, [r3, #52]	; 0x34
 800961e:	e011      	b.n	8009644 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8009620:	f248 0103 	movw	r1, #32771	; 0x8003
 8009624:	6878      	ldr	r0, [r7, #4]
 8009626:	f000 fb1d 	bl	8009c64 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009630:	b2db      	uxtb	r3, r3
 8009632:	2b60      	cmp	r3, #96	; 0x60
 8009634:	d003      	beq.n	800963e <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	2220      	movs	r2, #32
 800963a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009648:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800964e:	2b00      	cmp	r3, #0
 8009650:	d039      	beq.n	80096c6 <I2C_ITError+0x102>
 8009652:	68bb      	ldr	r3, [r7, #8]
 8009654:	2b11      	cmp	r3, #17
 8009656:	d002      	beq.n	800965e <I2C_ITError+0x9a>
 8009658:	68bb      	ldr	r3, [r7, #8]
 800965a:	2b21      	cmp	r3, #33	; 0x21
 800965c:	d133      	bne.n	80096c6 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009668:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800966c:	d107      	bne.n	800967e <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800967c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009682:	4618      	mov	r0, r3
 8009684:	f7fd fe08 	bl	8007298 <HAL_DMA_GetState>
 8009688:	4603      	mov	r3, r0
 800968a:	2b01      	cmp	r3, #1
 800968c:	d017      	beq.n	80096be <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	4a33      	ldr	r2, [pc, #204]	; (8009760 <I2C_ITError+0x19c>)
 8009694:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a2:	4618      	mov	r0, r3
 80096a4:	f7fd fce2 	bl	800706c <HAL_DMA_Abort_IT>
 80096a8:	4603      	mov	r3, r0
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d04d      	beq.n	800974a <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80096b8:	4610      	mov	r0, r2
 80096ba:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096bc:	e045      	b.n	800974a <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80096be:	6878      	ldr	r0, [r7, #4]
 80096c0:	f000 f850 	bl	8009764 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80096c4:	e041      	b.n	800974a <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d039      	beq.n	8009742 <I2C_ITError+0x17e>
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	2b12      	cmp	r3, #18
 80096d2:	d002      	beq.n	80096da <I2C_ITError+0x116>
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	2b22      	cmp	r3, #34	; 0x22
 80096d8:	d133      	bne.n	8009742 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80096e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80096e8:	d107      	bne.n	80096fa <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	681a      	ldr	r2, [r3, #0]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80096f8:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096fe:	4618      	mov	r0, r3
 8009700:	f7fd fdca 	bl	8007298 <HAL_DMA_GetState>
 8009704:	4603      	mov	r3, r0
 8009706:	2b01      	cmp	r3, #1
 8009708:	d017      	beq.n	800973a <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970e:	4a14      	ldr	r2, [pc, #80]	; (8009760 <I2C_ITError+0x19c>)
 8009710:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2200      	movs	r2, #0
 8009716:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800971e:	4618      	mov	r0, r3
 8009720:	f7fd fca4 	bl	800706c <HAL_DMA_Abort_IT>
 8009724:	4603      	mov	r3, r0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d011      	beq.n	800974e <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800972e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009734:	4610      	mov	r0, r2
 8009736:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009738:	e009      	b.n	800974e <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f000 f812 	bl	8009764 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8009740:	e005      	b.n	800974e <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8009742:	6878      	ldr	r0, [r7, #4]
 8009744:	f000 f80e 	bl	8009764 <I2C_TreatErrorCallback>
  }
}
 8009748:	e002      	b.n	8009750 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800974a:	bf00      	nop
 800974c:	e000      	b.n	8009750 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800974e:	bf00      	nop
}
 8009750:	bf00      	nop
 8009752:	3710      	adds	r7, #16
 8009754:	46bd      	mov	sp, r7
 8009756:	bd80      	pop	{r7, pc}
 8009758:	ffff0000 	.word	0xffff0000
 800975c:	080088dd 	.word	0x080088dd
 8009760:	080098bf 	.word	0x080098bf

08009764 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b082      	sub	sp, #8
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009772:	b2db      	uxtb	r3, r3
 8009774:	2b60      	cmp	r3, #96	; 0x60
 8009776:	d10e      	bne.n	8009796 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	2200      	movs	r2, #0
 800978a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f7ff f89a 	bl	80088c8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8009794:	e009      	b.n	80097aa <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2200      	movs	r2, #0
 800979a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80097a4:	6878      	ldr	r0, [r7, #4]
 80097a6:	f7ff f885 	bl	80088b4 <HAL_I2C_ErrorCallback>
}
 80097aa:	bf00      	nop
 80097ac:	3708      	adds	r7, #8
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}

080097b2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80097b2:	b480      	push	{r7}
 80097b4:	b083      	sub	sp, #12
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	699b      	ldr	r3, [r3, #24]
 80097c0:	f003 0302 	and.w	r3, r3, #2
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d103      	bne.n	80097d0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2200      	movs	r2, #0
 80097ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	699b      	ldr	r3, [r3, #24]
 80097d6:	f003 0301 	and.w	r3, r3, #1
 80097da:	2b01      	cmp	r3, #1
 80097dc:	d007      	beq.n	80097ee <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	699a      	ldr	r2, [r3, #24]
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	f042 0201 	orr.w	r2, r2, #1
 80097ec:	619a      	str	r2, [r3, #24]
  }
}
 80097ee:	bf00      	nop
 80097f0:	370c      	adds	r7, #12
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr

080097fa <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
 8009800:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009806:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	681a      	ldr	r2, [r3, #0]
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009816:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800981c:	b29b      	uxth	r3, r3
 800981e:	2b00      	cmp	r3, #0
 8009820:	d104      	bne.n	800982c <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009822:	2120      	movs	r1, #32
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f000 f9b9 	bl	8009b9c <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800982a:	e02d      	b.n	8009888 <I2C_DMAMasterReceiveCplt+0x8e>
    hi2c->pBuffPtr += hi2c->XferSize;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009830:	68fa      	ldr	r2, [r7, #12]
 8009832:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8009834:	441a      	add	r2, r3
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800983e:	b29b      	uxth	r3, r3
 8009840:	2bff      	cmp	r3, #255	; 0xff
 8009842:	d903      	bls.n	800984c <I2C_DMAMasterReceiveCplt+0x52>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	22ff      	movs	r2, #255	; 0xff
 8009848:	851a      	strh	r2, [r3, #40]	; 0x28
 800984a:	e004      	b.n	8009856 <I2C_DMAMasterReceiveCplt+0x5c>
      hi2c->XferSize = hi2c->XferCount;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009850:	b29a      	uxth	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize) != HAL_OK)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	3324      	adds	r3, #36	; 0x24
 8009860:	4619      	mov	r1, r3
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009866:	461a      	mov	r2, r3
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800986c:	f7fd fb2a 	bl	8006ec4 <HAL_DMA_Start_IT>
 8009870:	4603      	mov	r3, r0
 8009872:	2b00      	cmp	r3, #0
 8009874:	d004      	beq.n	8009880 <I2C_DMAMasterReceiveCplt+0x86>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8009876:	2110      	movs	r1, #16
 8009878:	68f8      	ldr	r0, [r7, #12]
 800987a:	f7ff fea3 	bl	80095c4 <I2C_ITError>
}
 800987e:	e003      	b.n	8009888 <I2C_DMAMasterReceiveCplt+0x8e>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8009880:	2140      	movs	r1, #64	; 0x40
 8009882:	68f8      	ldr	r0, [r7, #12]
 8009884:	f000 f98a 	bl	8009b9c <I2C_Enable_IRQ>
}
 8009888:	bf00      	nop
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}

08009890 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8009890:	b580      	push	{r7, lr}
 8009892:	b084      	sub	sp, #16
 8009894:	af00      	add	r7, sp, #0
 8009896:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800989c:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	685a      	ldr	r2, [r3, #4]
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80098ac:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80098ae:	2110      	movs	r1, #16
 80098b0:	68f8      	ldr	r0, [r7, #12]
 80098b2:	f7ff fe87 	bl	80095c4 <I2C_ITError>
}
 80098b6:	bf00      	nop
 80098b8:	3710      	adds	r7, #16
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80098be:	b580      	push	{r7, lr}
 80098c0:	b084      	sub	sp, #16
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ca:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d003      	beq.n	80098dc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098d8:	2200      	movs	r2, #0
 80098da:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d003      	beq.n	80098ec <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098e8:	2200      	movs	r2, #0
 80098ea:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f7ff ff39 	bl	8009764 <I2C_TreatErrorCallback>
}
 80098f2:	bf00      	nop
 80098f4:	3710      	adds	r7, #16
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}

080098fa <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80098fa:	b580      	push	{r7, lr}
 80098fc:	b084      	sub	sp, #16
 80098fe:	af00      	add	r7, sp, #0
 8009900:	60f8      	str	r0, [r7, #12]
 8009902:	60b9      	str	r1, [r7, #8]
 8009904:	603b      	str	r3, [r7, #0]
 8009906:	4613      	mov	r3, r2
 8009908:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800990a:	e022      	b.n	8009952 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009912:	d01e      	beq.n	8009952 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009914:	f7fb fec6 	bl	80056a4 <HAL_GetTick>
 8009918:	4602      	mov	r2, r0
 800991a:	69bb      	ldr	r3, [r7, #24]
 800991c:	1ad3      	subs	r3, r2, r3
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	429a      	cmp	r2, r3
 8009922:	d302      	bcc.n	800992a <I2C_WaitOnFlagUntilTimeout+0x30>
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d113      	bne.n	8009952 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800992e:	f043 0220 	orr.w	r2, r3, #32
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	2220      	movs	r2, #32
 800993a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2200      	movs	r2, #0
 8009942:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	2200      	movs	r2, #0
 800994a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800994e:	2301      	movs	r3, #1
 8009950:	e00f      	b.n	8009972 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	699a      	ldr	r2, [r3, #24]
 8009958:	68bb      	ldr	r3, [r7, #8]
 800995a:	4013      	ands	r3, r2
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	429a      	cmp	r2, r3
 8009960:	bf0c      	ite	eq
 8009962:	2301      	moveq	r3, #1
 8009964:	2300      	movne	r3, #0
 8009966:	b2db      	uxtb	r3, r3
 8009968:	461a      	mov	r2, r3
 800996a:	79fb      	ldrb	r3, [r7, #7]
 800996c:	429a      	cmp	r2, r3
 800996e:	d0cd      	beq.n	800990c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009970:	2300      	movs	r3, #0
}
 8009972:	4618      	mov	r0, r3
 8009974:	3710      	adds	r7, #16
 8009976:	46bd      	mov	sp, r7
 8009978:	bd80      	pop	{r7, pc}

0800997a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800997a:	b580      	push	{r7, lr}
 800997c:	b084      	sub	sp, #16
 800997e:	af00      	add	r7, sp, #0
 8009980:	60f8      	str	r0, [r7, #12]
 8009982:	60b9      	str	r1, [r7, #8]
 8009984:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009986:	e02c      	b.n	80099e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	68b9      	ldr	r1, [r7, #8]
 800998c:	68f8      	ldr	r0, [r7, #12]
 800998e:	f000 f871 	bl	8009a74 <I2C_IsAcknowledgeFailed>
 8009992:	4603      	mov	r3, r0
 8009994:	2b00      	cmp	r3, #0
 8009996:	d001      	beq.n	800999c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009998:	2301      	movs	r3, #1
 800999a:	e02a      	b.n	80099f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099a2:	d01e      	beq.n	80099e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80099a4:	f7fb fe7e 	bl	80056a4 <HAL_GetTick>
 80099a8:	4602      	mov	r2, r0
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	1ad3      	subs	r3, r2, r3
 80099ae:	68ba      	ldr	r2, [r7, #8]
 80099b0:	429a      	cmp	r2, r3
 80099b2:	d302      	bcc.n	80099ba <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d113      	bne.n	80099e2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099be:	f043 0220 	orr.w	r2, r3, #32
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2220      	movs	r2, #32
 80099ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	2200      	movs	r2, #0
 80099d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80099de:	2301      	movs	r3, #1
 80099e0:	e007      	b.n	80099f2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	699b      	ldr	r3, [r3, #24]
 80099e8:	f003 0302 	and.w	r3, r3, #2
 80099ec:	2b02      	cmp	r3, #2
 80099ee:	d1cb      	bne.n	8009988 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80099f0:	2300      	movs	r3, #0
}
 80099f2:	4618      	mov	r0, r3
 80099f4:	3710      	adds	r7, #16
 80099f6:	46bd      	mov	sp, r7
 80099f8:	bd80      	pop	{r7, pc}

080099fa <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80099fa:	b580      	push	{r7, lr}
 80099fc:	b084      	sub	sp, #16
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	60f8      	str	r0, [r7, #12]
 8009a02:	60b9      	str	r1, [r7, #8]
 8009a04:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a06:	e028      	b.n	8009a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8009a08:	687a      	ldr	r2, [r7, #4]
 8009a0a:	68b9      	ldr	r1, [r7, #8]
 8009a0c:	68f8      	ldr	r0, [r7, #12]
 8009a0e:	f000 f831 	bl	8009a74 <I2C_IsAcknowledgeFailed>
 8009a12:	4603      	mov	r3, r0
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d001      	beq.n	8009a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	e026      	b.n	8009a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a1c:	f7fb fe42 	bl	80056a4 <HAL_GetTick>
 8009a20:	4602      	mov	r2, r0
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	1ad3      	subs	r3, r2, r3
 8009a26:	68ba      	ldr	r2, [r7, #8]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d302      	bcc.n	8009a32 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d113      	bne.n	8009a5a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a36:	f043 0220 	orr.w	r2, r3, #32
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	2220      	movs	r2, #32
 8009a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	2200      	movs	r2, #0
 8009a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	2200      	movs	r2, #0
 8009a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e007      	b.n	8009a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	699b      	ldr	r3, [r3, #24]
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b20      	cmp	r3, #32
 8009a66:	d1cf      	bne.n	8009a08 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8009a68:	2300      	movs	r3, #0
}
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3710      	adds	r7, #16
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	60f8      	str	r0, [r7, #12]
 8009a7c:	60b9      	str	r1, [r7, #8]
 8009a7e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b10      	cmp	r3, #16
 8009a8c:	d151      	bne.n	8009b32 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009a8e:	e022      	b.n	8009ad6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8009a90:	68bb      	ldr	r3, [r7, #8]
 8009a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a96:	d01e      	beq.n	8009ad6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a98:	f7fb fe04 	bl	80056a4 <HAL_GetTick>
 8009a9c:	4602      	mov	r2, r0
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	68ba      	ldr	r2, [r7, #8]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d302      	bcc.n	8009aae <I2C_IsAcknowledgeFailed+0x3a>
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d113      	bne.n	8009ad6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab2:	f043 0220 	orr.w	r2, r3, #32
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	2220      	movs	r2, #32
 8009abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2200      	movs	r2, #0
 8009ace:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	e02e      	b.n	8009b34 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	699b      	ldr	r3, [r3, #24]
 8009adc:	f003 0320 	and.w	r3, r3, #32
 8009ae0:	2b20      	cmp	r3, #32
 8009ae2:	d1d5      	bne.n	8009a90 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2210      	movs	r2, #16
 8009aea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2220      	movs	r2, #32
 8009af2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009af4:	68f8      	ldr	r0, [r7, #12]
 8009af6:	f7ff fe5c 	bl	80097b2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	6859      	ldr	r1, [r3, #4]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	4b0d      	ldr	r3, [pc, #52]	; (8009b3c <I2C_IsAcknowledgeFailed+0xc8>)
 8009b06:	400b      	ands	r3, r1
 8009b08:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b0e:	f043 0204 	orr.w	r2, r3, #4
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2220      	movs	r2, #32
 8009b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	2200      	movs	r2, #0
 8009b22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	2200      	movs	r2, #0
 8009b2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	e000      	b.n	8009b34 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8009b32:	2300      	movs	r3, #0
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3710      	adds	r7, #16
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	bd80      	pop	{r7, pc}
 8009b3c:	fe00e800 	.word	0xfe00e800

08009b40 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	60f8      	str	r0, [r7, #12]
 8009b48:	607b      	str	r3, [r7, #4]
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	817b      	strh	r3, [r7, #10]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	685a      	ldr	r2, [r3, #4]
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	0d5b      	lsrs	r3, r3, #21
 8009b5c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8009b60:	4b0d      	ldr	r3, [pc, #52]	; (8009b98 <I2C_TransferConfig+0x58>)
 8009b62:	430b      	orrs	r3, r1
 8009b64:	43db      	mvns	r3, r3
 8009b66:	ea02 0103 	and.w	r1, r2, r3
 8009b6a:	897b      	ldrh	r3, [r7, #10]
 8009b6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8009b70:	7a7b      	ldrb	r3, [r7, #9]
 8009b72:	041b      	lsls	r3, r3, #16
 8009b74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009b78:	431a      	orrs	r2, r3
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	431a      	orrs	r2, r3
 8009b7e:	69bb      	ldr	r3, [r7, #24]
 8009b80:	431a      	orrs	r2, r3
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	430a      	orrs	r2, r1
 8009b88:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8009b8a:	bf00      	nop
 8009b8c:	3714      	adds	r7, #20
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b94:	4770      	bx	lr
 8009b96:	bf00      	nop
 8009b98:	03ff63ff 	.word	0x03ff63ff

08009b9c <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	460b      	mov	r3, r1
 8009ba6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009ba8:	2300      	movs	r3, #0
 8009baa:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bb0:	4a2a      	ldr	r2, [pc, #168]	; (8009c5c <I2C_Enable_IRQ+0xc0>)
 8009bb2:	4293      	cmp	r3, r2
 8009bb4:	d004      	beq.n	8009bc0 <I2C_Enable_IRQ+0x24>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8009bba:	4a29      	ldr	r2, [pc, #164]	; (8009c60 <I2C_Enable_IRQ+0xc4>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d11d      	bne.n	8009bfc <I2C_Enable_IRQ+0x60>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009bc0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	da03      	bge.n	8009bd0 <I2C_Enable_IRQ+0x34>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009bce:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009bd0:	887b      	ldrh	r3, [r7, #2]
 8009bd2:	2b10      	cmp	r3, #16
 8009bd4:	d103      	bne.n	8009bde <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009bdc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009bde:	887b      	ldrh	r3, [r7, #2]
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d103      	bne.n	8009bec <I2C_Enable_IRQ+0x50>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009bea:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009bec:	887b      	ldrh	r3, [r7, #2]
 8009bee:	2b40      	cmp	r3, #64	; 0x40
 8009bf0:	d125      	bne.n	8009c3e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009bf8:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009bfa:	e020      	b.n	8009c3e <I2C_Enable_IRQ+0xa2>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009bfc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	da03      	bge.n	8009c0c <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009c0a:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c0c:	887b      	ldrh	r3, [r7, #2]
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d003      	beq.n	8009c1e <I2C_Enable_IRQ+0x82>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8009c1c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c1e:	887b      	ldrh	r3, [r7, #2]
 8009c20:	f003 0302 	and.w	r3, r3, #2
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d003      	beq.n	8009c30 <I2C_Enable_IRQ+0x94>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8009c2e:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009c30:	887b      	ldrh	r3, [r7, #2]
 8009c32:	2b20      	cmp	r3, #32
 8009c34:	d103      	bne.n	8009c3e <I2C_Enable_IRQ+0xa2>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	f043 0320 	orr.w	r3, r3, #32
 8009c3c:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	6819      	ldr	r1, [r3, #0]
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	430a      	orrs	r2, r1
 8009c4c:	601a      	str	r2, [r3, #0]
}
 8009c4e:	bf00      	nop
 8009c50:	3714      	adds	r7, #20
 8009c52:	46bd      	mov	sp, r7
 8009c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c58:	4770      	bx	lr
 8009c5a:	bf00      	nop
 8009c5c:	08008ae3 	.word	0x08008ae3
 8009c60:	08008cc9 	.word	0x08008cc9

08009c64 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8009c64:	b480      	push	{r7}
 8009c66:	b085      	sub	sp, #20
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8009c70:	2300      	movs	r3, #0
 8009c72:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8009c74:	887b      	ldrh	r3, [r7, #2]
 8009c76:	f003 0301 	and.w	r3, r3, #1
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d00f      	beq.n	8009c9e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8009c84:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009c8c:	b2db      	uxtb	r3, r3
 8009c8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009c92:	2b28      	cmp	r3, #40	; 0x28
 8009c94:	d003      	beq.n	8009c9e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009c9c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8009c9e:	887b      	ldrh	r3, [r7, #2]
 8009ca0:	f003 0302 	and.w	r3, r3, #2
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d00f      	beq.n	8009cc8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8009cae:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009cbc:	2b28      	cmp	r3, #40	; 0x28
 8009cbe:	d003      	beq.n	8009cc8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8009cc6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8009cc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8009ccc:	2b00      	cmp	r3, #0
 8009cce:	da03      	bge.n	8009cd8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8009cd6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8009cd8:	887b      	ldrh	r3, [r7, #2]
 8009cda:	2b10      	cmp	r3, #16
 8009cdc:	d103      	bne.n	8009ce6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8009ce4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8009ce6:	887b      	ldrh	r3, [r7, #2]
 8009ce8:	2b20      	cmp	r3, #32
 8009cea:	d103      	bne.n	8009cf4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f043 0320 	orr.w	r3, r3, #32
 8009cf2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8009cf4:	887b      	ldrh	r3, [r7, #2]
 8009cf6:	2b40      	cmp	r3, #64	; 0x40
 8009cf8:	d103      	bne.n	8009d02 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009d00:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	6819      	ldr	r1, [r3, #0]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	43da      	mvns	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	400a      	ands	r2, r1
 8009d12:	601a      	str	r2, [r3, #0]
}
 8009d14:	bf00      	nop
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d30:	b2db      	uxtb	r3, r3
 8009d32:	2b20      	cmp	r3, #32
 8009d34:	d138      	bne.n	8009da8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d3c:	2b01      	cmp	r3, #1
 8009d3e:	d101      	bne.n	8009d44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8009d40:	2302      	movs	r3, #2
 8009d42:	e032      	b.n	8009daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2201      	movs	r2, #1
 8009d48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2224      	movs	r2, #36	; 0x24
 8009d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	681a      	ldr	r2, [r3, #0]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0201 	bic.w	r2, r2, #1
 8009d62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	681a      	ldr	r2, [r3, #0]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009d72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	6819      	ldr	r1, [r3, #0]
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	683a      	ldr	r2, [r7, #0]
 8009d80:	430a      	orrs	r2, r1
 8009d82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	681a      	ldr	r2, [r3, #0]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0201 	orr.w	r2, r2, #1
 8009d92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2220      	movs	r2, #32
 8009d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009da4:	2300      	movs	r3, #0
 8009da6:	e000      	b.n	8009daa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009da8:	2302      	movs	r3, #2
  }
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	370c      	adds	r7, #12
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009dc6:	b2db      	uxtb	r3, r3
 8009dc8:	2b20      	cmp	r3, #32
 8009dca:	d139      	bne.n	8009e40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e033      	b.n	8009e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2201      	movs	r2, #1
 8009dde:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2224      	movs	r2, #36	; 0x24
 8009de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	681a      	ldr	r2, [r3, #0]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f022 0201 	bic.w	r2, r2, #1
 8009df8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009e08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009e0a:	683b      	ldr	r3, [r7, #0]
 8009e0c:	021b      	lsls	r3, r3, #8
 8009e0e:	68fa      	ldr	r2, [r7, #12]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	68fa      	ldr	r2, [r7, #12]
 8009e1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	f042 0201 	orr.w	r2, r2, #1
 8009e2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2220      	movs	r2, #32
 8009e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	2200      	movs	r2, #0
 8009e38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e000      	b.n	8009e42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8009e40:	2302      	movs	r3, #2
  }
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	3714      	adds	r7, #20
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
	...

08009e50 <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b084      	sub	sp, #16
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 8009e62:	2301      	movs	r3, #1
 8009e64:	e0bb      	b.n	8009fde <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	2b05      	cmp	r3, #5
 8009e70:	d101      	bne.n	8009e76 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 8009e72:	2301      	movs	r3, #1
 8009e74:	e0b3      	b.n	8009fde <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	2b02      	cmp	r3, #2
 8009e80:	d101      	bne.n	8009e86 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 8009e82:	2301      	movs	r3, #1
 8009e84:	e0ab      	b.n	8009fde <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009e86:	4b58      	ldr	r3, [pc, #352]	; (8009fe8 <HAL_OPAMP_Init+0x198>)
 8009e88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e8a:	4a57      	ldr	r2, [pc, #348]	; (8009fe8 <HAL_OPAMP_Init+0x198>)
 8009e8c:	f043 0301 	orr.w	r3, r3, #1
 8009e90:	6613      	str	r3, [r2, #96]	; 0x60
 8009e92:	4b55      	ldr	r3, [pc, #340]	; (8009fe8 <HAL_OPAMP_Init+0x198>)
 8009e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e96:	f003 0301 	and.w	r3, r3, #1
 8009e9a:	60bb      	str	r3, [r7, #8]
 8009e9c:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009ea4:	b2db      	uxtb	r3, r3
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d103      	bne.n	8009eb2 <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	2200      	movs	r2, #0
 8009eae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 8009eb2:	6878      	ldr	r0, [r7, #4]
 8009eb4:	f7fa fd2c 	bl	8004910 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	2b40      	cmp	r3, #64	; 0x40
 8009ebe:	d003      	beq.n	8009ec8 <HAL_OPAMP_Init+0x78>
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	689b      	ldr	r3, [r3, #8]
 8009ec4:	2b60      	cmp	r3, #96	; 0x60
 8009ec6:	d133      	bne.n	8009f30 <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	f023 0110 	bic.w	r1, r3, #16
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	430a      	orrs	r2, r1
 8009edc:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	681a      	ldr	r2, [r3, #0]
 8009ee4:	4b41      	ldr	r3, [pc, #260]	; (8009fec <HAL_OPAMP_Init+0x19c>)
 8009ee6:	4013      	ands	r3, r2
 8009ee8:	687a      	ldr	r2, [r7, #4]
 8009eea:	6851      	ldr	r1, [r2, #4]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	6892      	ldr	r2, [r2, #8]
 8009ef0:	4311      	orrs	r1, r2
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	6912      	ldr	r2, [r2, #16]
 8009ef6:	430a      	orrs	r2, r1
 8009ef8:	6879      	ldr	r1, [r7, #4]
 8009efa:	7d09      	ldrb	r1, [r1, #20]
 8009efc:	2901      	cmp	r1, #1
 8009efe:	d102      	bne.n	8009f06 <HAL_OPAMP_Init+0xb6>
 8009f00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f04:	e000      	b.n	8009f08 <HAL_OPAMP_Init+0xb8>
 8009f06:	2100      	movs	r1, #0
 8009f08:	4311      	orrs	r1, r2
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f0e:	4311      	orrs	r1, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f14:	4311      	orrs	r1, r2
 8009f16:	687a      	ldr	r2, [r7, #4]
 8009f18:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f1a:	04d2      	lsls	r2, r2, #19
 8009f1c:	4311      	orrs	r1, r2
 8009f1e:	687a      	ldr	r2, [r7, #4]
 8009f20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f22:	0612      	lsls	r2, r2, #24
 8009f24:	4311      	orrs	r1, r2
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	6812      	ldr	r2, [r2, #0]
 8009f2a:	430b      	orrs	r3, r1
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	e035      	b.n	8009f9c <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f023 0110 	bic.w	r1, r3, #16
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	430a      	orrs	r2, r1
 8009f44:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	4b27      	ldr	r3, [pc, #156]	; (8009fec <HAL_OPAMP_Init+0x19c>)
 8009f4e:	4013      	ands	r3, r2
 8009f50:	687a      	ldr	r2, [r7, #4]
 8009f52:	6851      	ldr	r1, [r2, #4]
 8009f54:	687a      	ldr	r2, [r7, #4]
 8009f56:	6892      	ldr	r2, [r2, #8]
 8009f58:	4311      	orrs	r1, r2
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	68d2      	ldr	r2, [r2, #12]
 8009f5e:	4311      	orrs	r1, r2
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	6912      	ldr	r2, [r2, #16]
 8009f64:	430a      	orrs	r2, r1
 8009f66:	6879      	ldr	r1, [r7, #4]
 8009f68:	7d09      	ldrb	r1, [r1, #20]
 8009f6a:	2901      	cmp	r1, #1
 8009f6c:	d102      	bne.n	8009f74 <HAL_OPAMP_Init+0x124>
 8009f6e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009f72:	e000      	b.n	8009f76 <HAL_OPAMP_Init+0x126>
 8009f74:	2100      	movs	r1, #0
 8009f76:	4311      	orrs	r1, r2
 8009f78:	687a      	ldr	r2, [r7, #4]
 8009f7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009f7c:	4311      	orrs	r1, r2
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8009f82:	4311      	orrs	r1, r2
 8009f84:	687a      	ldr	r2, [r7, #4]
 8009f86:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009f88:	04d2      	lsls	r2, r2, #19
 8009f8a:	4311      	orrs	r1, r2
 8009f8c:	687a      	ldr	r2, [r7, #4]
 8009f8e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009f90:	0612      	lsls	r2, r2, #24
 8009f92:	4311      	orrs	r1, r2
 8009f94:	687a      	ldr	r2, [r7, #4]
 8009f96:	6812      	ldr	r2, [r2, #0]
 8009f98:	430b      	orrs	r3, r1
 8009f9a:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	699b      	ldr	r3, [r3, #24]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	db10      	blt.n	8009fc8 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	699b      	ldr	r3, [r3, #24]
 8009fac:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	699a      	ldr	r2, [r3, #24]
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	69db      	ldr	r3, [r3, #28]
 8009fb8:	431a      	orrs	r2, r3
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	431a      	orrs	r2, r3
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	430a      	orrs	r2, r1
 8009fc6:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8009fce:	b2db      	uxtb	r3, r3
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d103      	bne.n	8009fdc <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2201      	movs	r2, #1
 8009fd8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}
 8009fe6:	bf00      	nop
 8009fe8:	40021000 	.word	0x40021000
 8009fec:	e0003e11 	.word	0xe0003e11

08009ff0 <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8009ff0:	b480      	push	{r7}
 8009ff2:	b085      	sub	sp, #20
 8009ff4:	af00      	add	r7, sp, #0
 8009ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d102      	bne.n	800a008 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	73fb      	strb	r3, [r7, #15]
 800a006:	e01d      	b.n	800a044 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a00e:	b2db      	uxtb	r3, r3
 800a010:	2b05      	cmp	r3, #5
 800a012:	d102      	bne.n	800a01a <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 800a014:	2301      	movs	r3, #1
 800a016:	73fb      	strb	r3, [r7, #15]
 800a018:	e014      	b.n	800a044 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a020:	b2db      	uxtb	r3, r3
 800a022:	2b01      	cmp	r3, #1
 800a024:	d10c      	bne.n	800a040 <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	681a      	ldr	r2, [r3, #0]
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	f042 0201 	orr.w	r2, r2, #1
 800a034:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	2204      	movs	r2, #4
 800a03a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 800a03e:	e001      	b.n	800a044 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800a040:	2301      	movs	r3, #1
 800a042:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 800a044:	7bfb      	ldrb	r3, [r7, #15]
}
 800a046:	4618      	mov	r0, r3
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
	...

0800a054 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d141      	bne.n	800a0e6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a062:	4b4b      	ldr	r3, [pc, #300]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a06a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a06e:	d131      	bne.n	800a0d4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a070:	4b47      	ldr	r3, [pc, #284]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a076:	4a46      	ldr	r2, [pc, #280]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a078:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a07c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a080:	4b43      	ldr	r3, [pc, #268]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a088:	4a41      	ldr	r2, [pc, #260]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a08a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a08e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a090:	4b40      	ldr	r3, [pc, #256]	; (800a194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	2232      	movs	r2, #50	; 0x32
 800a096:	fb02 f303 	mul.w	r3, r2, r3
 800a09a:	4a3f      	ldr	r2, [pc, #252]	; (800a198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a09c:	fba2 2303 	umull	r2, r3, r2, r3
 800a0a0:	0c9b      	lsrs	r3, r3, #18
 800a0a2:	3301      	adds	r3, #1
 800a0a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0a6:	e002      	b.n	800a0ae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	3b01      	subs	r3, #1
 800a0ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a0ae:	4b38      	ldr	r3, [pc, #224]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0b0:	695b      	ldr	r3, [r3, #20]
 800a0b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ba:	d102      	bne.n	800a0c2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1f2      	bne.n	800a0a8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a0c2:	4b33      	ldr	r3, [pc, #204]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0c4:	695b      	ldr	r3, [r3, #20]
 800a0c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0ce:	d158      	bne.n	800a182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a0d0:	2303      	movs	r3, #3
 800a0d2:	e057      	b.n	800a184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a0d4:	4b2e      	ldr	r3, [pc, #184]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0da:	4a2d      	ldr	r2, [pc, #180]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a0e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a0e4:	e04d      	b.n	800a182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a0ec:	d141      	bne.n	800a172 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a0ee:	4b28      	ldr	r3, [pc, #160]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a0f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0fa:	d131      	bne.n	800a160 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a0fc:	4b24      	ldr	r3, [pc, #144]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a102:	4a23      	ldr	r2, [pc, #140]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a104:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a108:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a10c:	4b20      	ldr	r3, [pc, #128]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a114:	4a1e      	ldr	r2, [pc, #120]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a116:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a11a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a11c:	4b1d      	ldr	r3, [pc, #116]	; (800a194 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	2232      	movs	r2, #50	; 0x32
 800a122:	fb02 f303 	mul.w	r3, r2, r3
 800a126:	4a1c      	ldr	r2, [pc, #112]	; (800a198 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a128:	fba2 2303 	umull	r2, r3, r2, r3
 800a12c:	0c9b      	lsrs	r3, r3, #18
 800a12e:	3301      	adds	r3, #1
 800a130:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a132:	e002      	b.n	800a13a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	3b01      	subs	r3, #1
 800a138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a13a:	4b15      	ldr	r3, [pc, #84]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a13c:	695b      	ldr	r3, [r3, #20]
 800a13e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a146:	d102      	bne.n	800a14e <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d1f2      	bne.n	800a134 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a14e:	4b10      	ldr	r3, [pc, #64]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a150:	695b      	ldr	r3, [r3, #20]
 800a152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a15a:	d112      	bne.n	800a182 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a15c:	2303      	movs	r3, #3
 800a15e:	e011      	b.n	800a184 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a160:	4b0b      	ldr	r3, [pc, #44]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a162:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a166:	4a0a      	ldr	r2, [pc, #40]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a168:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a16c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a170:	e007      	b.n	800a182 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a172:	4b07      	ldr	r3, [pc, #28]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a17a:	4a05      	ldr	r2, [pc, #20]	; (800a190 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a17c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a180:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a182:	2300      	movs	r3, #0
}
 800a184:	4618      	mov	r0, r3
 800a186:	3714      	adds	r7, #20
 800a188:	46bd      	mov	sp, r7
 800a18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18e:	4770      	bx	lr
 800a190:	40007000 	.word	0x40007000
 800a194:	20000000 	.word	0x20000000
 800a198:	431bde83 	.word	0x431bde83

0800a19c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800a19c:	b480      	push	{r7}
 800a19e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800a1a0:	4b05      	ldr	r3, [pc, #20]	; (800a1b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a1a2:	689b      	ldr	r3, [r3, #8]
 800a1a4:	4a04      	ldr	r2, [pc, #16]	; (800a1b8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800a1a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a1aa:	6093      	str	r3, [r2, #8]
}
 800a1ac:	bf00      	nop
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b4:	4770      	bx	lr
 800a1b6:	bf00      	nop
 800a1b8:	40007000 	.word	0x40007000

0800a1bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a1bc:	b580      	push	{r7, lr}
 800a1be:	b088      	sub	sp, #32
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d101      	bne.n	800a1ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	e306      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f003 0301 	and.w	r3, r3, #1
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d075      	beq.n	800a2c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a1da:	4b97      	ldr	r3, [pc, #604]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a1dc:	689b      	ldr	r3, [r3, #8]
 800a1de:	f003 030c 	and.w	r3, r3, #12
 800a1e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a1e4:	4b94      	ldr	r3, [pc, #592]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a1e6:	68db      	ldr	r3, [r3, #12]
 800a1e8:	f003 0303 	and.w	r3, r3, #3
 800a1ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a1ee:	69bb      	ldr	r3, [r7, #24]
 800a1f0:	2b0c      	cmp	r3, #12
 800a1f2:	d102      	bne.n	800a1fa <HAL_RCC_OscConfig+0x3e>
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d002      	beq.n	800a200 <HAL_RCC_OscConfig+0x44>
 800a1fa:	69bb      	ldr	r3, [r7, #24]
 800a1fc:	2b08      	cmp	r3, #8
 800a1fe:	d10b      	bne.n	800a218 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a200:	4b8d      	ldr	r3, [pc, #564]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d05b      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x108>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	2b00      	cmp	r3, #0
 800a212:	d157      	bne.n	800a2c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a214:	2301      	movs	r3, #1
 800a216:	e2e1      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	685b      	ldr	r3, [r3, #4]
 800a21c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a220:	d106      	bne.n	800a230 <HAL_RCC_OscConfig+0x74>
 800a222:	4b85      	ldr	r3, [pc, #532]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4a84      	ldr	r2, [pc, #528]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a22c:	6013      	str	r3, [r2, #0]
 800a22e:	e01d      	b.n	800a26c <HAL_RCC_OscConfig+0xb0>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	685b      	ldr	r3, [r3, #4]
 800a234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a238:	d10c      	bne.n	800a254 <HAL_RCC_OscConfig+0x98>
 800a23a:	4b7f      	ldr	r3, [pc, #508]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	4a7e      	ldr	r2, [pc, #504]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a244:	6013      	str	r3, [r2, #0]
 800a246:	4b7c      	ldr	r3, [pc, #496]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a7b      	ldr	r2, [pc, #492]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a250:	6013      	str	r3, [r2, #0]
 800a252:	e00b      	b.n	800a26c <HAL_RCC_OscConfig+0xb0>
 800a254:	4b78      	ldr	r3, [pc, #480]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a77      	ldr	r2, [pc, #476]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a25a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a25e:	6013      	str	r3, [r2, #0]
 800a260:	4b75      	ldr	r3, [pc, #468]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	4a74      	ldr	r2, [pc, #464]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a26a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d013      	beq.n	800a29c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a274:	f7fb fa16 	bl	80056a4 <HAL_GetTick>
 800a278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a27a:	e008      	b.n	800a28e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a27c:	f7fb fa12 	bl	80056a4 <HAL_GetTick>
 800a280:	4602      	mov	r2, r0
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	1ad3      	subs	r3, r2, r3
 800a286:	2b64      	cmp	r3, #100	; 0x64
 800a288:	d901      	bls.n	800a28e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a28a:	2303      	movs	r3, #3
 800a28c:	e2a6      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a28e:	4b6a      	ldr	r3, [pc, #424]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a296:	2b00      	cmp	r3, #0
 800a298:	d0f0      	beq.n	800a27c <HAL_RCC_OscConfig+0xc0>
 800a29a:	e014      	b.n	800a2c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a29c:	f7fb fa02 	bl	80056a4 <HAL_GetTick>
 800a2a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2a2:	e008      	b.n	800a2b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a2a4:	f7fb f9fe 	bl	80056a4 <HAL_GetTick>
 800a2a8:	4602      	mov	r2, r0
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	1ad3      	subs	r3, r2, r3
 800a2ae:	2b64      	cmp	r3, #100	; 0x64
 800a2b0:	d901      	bls.n	800a2b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a2b2:	2303      	movs	r3, #3
 800a2b4:	e292      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a2b6:	4b60      	ldr	r3, [pc, #384]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d1f0      	bne.n	800a2a4 <HAL_RCC_OscConfig+0xe8>
 800a2c2:	e000      	b.n	800a2c6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a2c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	f003 0302 	and.w	r3, r3, #2
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d075      	beq.n	800a3be <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a2d2:	4b59      	ldr	r3, [pc, #356]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a2d4:	689b      	ldr	r3, [r3, #8]
 800a2d6:	f003 030c 	and.w	r3, r3, #12
 800a2da:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a2dc:	4b56      	ldr	r3, [pc, #344]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a2de:	68db      	ldr	r3, [r3, #12]
 800a2e0:	f003 0303 	and.w	r3, r3, #3
 800a2e4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a2e6:	69bb      	ldr	r3, [r7, #24]
 800a2e8:	2b0c      	cmp	r3, #12
 800a2ea:	d102      	bne.n	800a2f2 <HAL_RCC_OscConfig+0x136>
 800a2ec:	697b      	ldr	r3, [r7, #20]
 800a2ee:	2b02      	cmp	r3, #2
 800a2f0:	d002      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x13c>
 800a2f2:	69bb      	ldr	r3, [r7, #24]
 800a2f4:	2b04      	cmp	r3, #4
 800a2f6:	d11f      	bne.n	800a338 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a2f8:	4b4f      	ldr	r3, [pc, #316]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a300:	2b00      	cmp	r3, #0
 800a302:	d005      	beq.n	800a310 <HAL_RCC_OscConfig+0x154>
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d101      	bne.n	800a310 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a30c:	2301      	movs	r3, #1
 800a30e:	e265      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a310:	4b49      	ldr	r3, [pc, #292]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	691b      	ldr	r3, [r3, #16]
 800a31c:	061b      	lsls	r3, r3, #24
 800a31e:	4946      	ldr	r1, [pc, #280]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a320:	4313      	orrs	r3, r2
 800a322:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a324:	4b45      	ldr	r3, [pc, #276]	; (800a43c <HAL_RCC_OscConfig+0x280>)
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4618      	mov	r0, r3
 800a32a:	f7fb f96f 	bl	800560c <HAL_InitTick>
 800a32e:	4603      	mov	r3, r0
 800a330:	2b00      	cmp	r3, #0
 800a332:	d043      	beq.n	800a3bc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a334:	2301      	movs	r3, #1
 800a336:	e251      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d023      	beq.n	800a388 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a340:	4b3d      	ldr	r3, [pc, #244]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	4a3c      	ldr	r2, [pc, #240]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a346:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a34a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a34c:	f7fb f9aa 	bl	80056a4 <HAL_GetTick>
 800a350:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a352:	e008      	b.n	800a366 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a354:	f7fb f9a6 	bl	80056a4 <HAL_GetTick>
 800a358:	4602      	mov	r2, r0
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	1ad3      	subs	r3, r2, r3
 800a35e:	2b02      	cmp	r3, #2
 800a360:	d901      	bls.n	800a366 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a362:	2303      	movs	r3, #3
 800a364:	e23a      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a366:	4b34      	ldr	r3, [pc, #208]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d0f0      	beq.n	800a354 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a372:	4b31      	ldr	r3, [pc, #196]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	691b      	ldr	r3, [r3, #16]
 800a37e:	061b      	lsls	r3, r3, #24
 800a380:	492d      	ldr	r1, [pc, #180]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a382:	4313      	orrs	r3, r2
 800a384:	604b      	str	r3, [r1, #4]
 800a386:	e01a      	b.n	800a3be <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a388:	4b2b      	ldr	r3, [pc, #172]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4a2a      	ldr	r2, [pc, #168]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a38e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a394:	f7fb f986 	bl	80056a4 <HAL_GetTick>
 800a398:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a39a:	e008      	b.n	800a3ae <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a39c:	f7fb f982 	bl	80056a4 <HAL_GetTick>
 800a3a0:	4602      	mov	r2, r0
 800a3a2:	693b      	ldr	r3, [r7, #16]
 800a3a4:	1ad3      	subs	r3, r2, r3
 800a3a6:	2b02      	cmp	r3, #2
 800a3a8:	d901      	bls.n	800a3ae <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a3aa:	2303      	movs	r3, #3
 800a3ac:	e216      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a3ae:	4b22      	ldr	r3, [pc, #136]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d1f0      	bne.n	800a39c <HAL_RCC_OscConfig+0x1e0>
 800a3ba:	e000      	b.n	800a3be <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a3bc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	f003 0308 	and.w	r3, r3, #8
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d041      	beq.n	800a44e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	695b      	ldr	r3, [r3, #20]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d01c      	beq.n	800a40c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3d2:	4b19      	ldr	r3, [pc, #100]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a3d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3d8:	4a17      	ldr	r2, [pc, #92]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a3da:	f043 0301 	orr.w	r3, r3, #1
 800a3de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3e2:	f7fb f95f 	bl	80056a4 <HAL_GetTick>
 800a3e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3e8:	e008      	b.n	800a3fc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3ea:	f7fb f95b 	bl	80056a4 <HAL_GetTick>
 800a3ee:	4602      	mov	r2, r0
 800a3f0:	693b      	ldr	r3, [r7, #16]
 800a3f2:	1ad3      	subs	r3, r2, r3
 800a3f4:	2b02      	cmp	r3, #2
 800a3f6:	d901      	bls.n	800a3fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a3f8:	2303      	movs	r3, #3
 800a3fa:	e1ef      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a3fc:	4b0e      	ldr	r3, [pc, #56]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a3fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a402:	f003 0302 	and.w	r3, r3, #2
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0ef      	beq.n	800a3ea <HAL_RCC_OscConfig+0x22e>
 800a40a:	e020      	b.n	800a44e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a40e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a412:	4a09      	ldr	r2, [pc, #36]	; (800a438 <HAL_RCC_OscConfig+0x27c>)
 800a414:	f023 0301 	bic.w	r3, r3, #1
 800a418:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a41c:	f7fb f942 	bl	80056a4 <HAL_GetTick>
 800a420:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a422:	e00d      	b.n	800a440 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a424:	f7fb f93e 	bl	80056a4 <HAL_GetTick>
 800a428:	4602      	mov	r2, r0
 800a42a:	693b      	ldr	r3, [r7, #16]
 800a42c:	1ad3      	subs	r3, r2, r3
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d906      	bls.n	800a440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e1d2      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
 800a436:	bf00      	nop
 800a438:	40021000 	.word	0x40021000
 800a43c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a440:	4b8c      	ldr	r3, [pc, #560]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a442:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a446:	f003 0302 	and.w	r3, r3, #2
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d1ea      	bne.n	800a424 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f003 0304 	and.w	r3, r3, #4
 800a456:	2b00      	cmp	r3, #0
 800a458:	f000 80a6 	beq.w	800a5a8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a45c:	2300      	movs	r3, #0
 800a45e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a460:	4b84      	ldr	r3, [pc, #528]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d101      	bne.n	800a470 <HAL_RCC_OscConfig+0x2b4>
 800a46c:	2301      	movs	r3, #1
 800a46e:	e000      	b.n	800a472 <HAL_RCC_OscConfig+0x2b6>
 800a470:	2300      	movs	r3, #0
 800a472:	2b00      	cmp	r3, #0
 800a474:	d00d      	beq.n	800a492 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a476:	4b7f      	ldr	r3, [pc, #508]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a478:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a47a:	4a7e      	ldr	r2, [pc, #504]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a47c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a480:	6593      	str	r3, [r2, #88]	; 0x58
 800a482:	4b7c      	ldr	r3, [pc, #496]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a48a:	60fb      	str	r3, [r7, #12]
 800a48c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a48e:	2301      	movs	r3, #1
 800a490:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a492:	4b79      	ldr	r3, [pc, #484]	; (800a678 <HAL_RCC_OscConfig+0x4bc>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d118      	bne.n	800a4d0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a49e:	4b76      	ldr	r3, [pc, #472]	; (800a678 <HAL_RCC_OscConfig+0x4bc>)
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	4a75      	ldr	r2, [pc, #468]	; (800a678 <HAL_RCC_OscConfig+0x4bc>)
 800a4a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a4aa:	f7fb f8fb 	bl	80056a4 <HAL_GetTick>
 800a4ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4b0:	e008      	b.n	800a4c4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4b2:	f7fb f8f7 	bl	80056a4 <HAL_GetTick>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	1ad3      	subs	r3, r2, r3
 800a4bc:	2b02      	cmp	r3, #2
 800a4be:	d901      	bls.n	800a4c4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a4c0:	2303      	movs	r3, #3
 800a4c2:	e18b      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a4c4:	4b6c      	ldr	r3, [pc, #432]	; (800a678 <HAL_RCC_OscConfig+0x4bc>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d0f0      	beq.n	800a4b2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	689b      	ldr	r3, [r3, #8]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d108      	bne.n	800a4ea <HAL_RCC_OscConfig+0x32e>
 800a4d8:	4b66      	ldr	r3, [pc, #408]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4de:	4a65      	ldr	r2, [pc, #404]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a4e0:	f043 0301 	orr.w	r3, r3, #1
 800a4e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a4e8:	e024      	b.n	800a534 <HAL_RCC_OscConfig+0x378>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	689b      	ldr	r3, [r3, #8]
 800a4ee:	2b05      	cmp	r3, #5
 800a4f0:	d110      	bne.n	800a514 <HAL_RCC_OscConfig+0x358>
 800a4f2:	4b60      	ldr	r3, [pc, #384]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a4f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4f8:	4a5e      	ldr	r2, [pc, #376]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a4fa:	f043 0304 	orr.w	r3, r3, #4
 800a4fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a502:	4b5c      	ldr	r3, [pc, #368]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a508:	4a5a      	ldr	r2, [pc, #360]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a50a:	f043 0301 	orr.w	r3, r3, #1
 800a50e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a512:	e00f      	b.n	800a534 <HAL_RCC_OscConfig+0x378>
 800a514:	4b57      	ldr	r3, [pc, #348]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a51a:	4a56      	ldr	r2, [pc, #344]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a524:	4b53      	ldr	r3, [pc, #332]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a52a:	4a52      	ldr	r2, [pc, #328]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a52c:	f023 0304 	bic.w	r3, r3, #4
 800a530:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d016      	beq.n	800a56a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a53c:	f7fb f8b2 	bl	80056a4 <HAL_GetTick>
 800a540:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a542:	e00a      	b.n	800a55a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a544:	f7fb f8ae 	bl	80056a4 <HAL_GetTick>
 800a548:	4602      	mov	r2, r0
 800a54a:	693b      	ldr	r3, [r7, #16]
 800a54c:	1ad3      	subs	r3, r2, r3
 800a54e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a552:	4293      	cmp	r3, r2
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e140      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a55a:	4b46      	ldr	r3, [pc, #280]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a55c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a560:	f003 0302 	and.w	r3, r3, #2
 800a564:	2b00      	cmp	r3, #0
 800a566:	d0ed      	beq.n	800a544 <HAL_RCC_OscConfig+0x388>
 800a568:	e015      	b.n	800a596 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a56a:	f7fb f89b 	bl	80056a4 <HAL_GetTick>
 800a56e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a570:	e00a      	b.n	800a588 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a572:	f7fb f897 	bl	80056a4 <HAL_GetTick>
 800a576:	4602      	mov	r2, r0
 800a578:	693b      	ldr	r3, [r7, #16]
 800a57a:	1ad3      	subs	r3, r2, r3
 800a57c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a580:	4293      	cmp	r3, r2
 800a582:	d901      	bls.n	800a588 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a584:	2303      	movs	r3, #3
 800a586:	e129      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a588:	4b3a      	ldr	r3, [pc, #232]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a58a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a58e:	f003 0302 	and.w	r3, r3, #2
 800a592:	2b00      	cmp	r3, #0
 800a594:	d1ed      	bne.n	800a572 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a596:	7ffb      	ldrb	r3, [r7, #31]
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d105      	bne.n	800a5a8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a59c:	4b35      	ldr	r3, [pc, #212]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a59e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a5a0:	4a34      	ldr	r2, [pc, #208]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a5a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a5a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	f003 0320 	and.w	r3, r3, #32
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	d03c      	beq.n	800a62e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	699b      	ldr	r3, [r3, #24]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d01c      	beq.n	800a5f6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a5bc:	4b2d      	ldr	r3, [pc, #180]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a5be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5c2:	4a2c      	ldr	r2, [pc, #176]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a5c4:	f043 0301 	orr.w	r3, r3, #1
 800a5c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a5cc:	f7fb f86a 	bl	80056a4 <HAL_GetTick>
 800a5d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5d2:	e008      	b.n	800a5e6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a5d4:	f7fb f866 	bl	80056a4 <HAL_GetTick>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	693b      	ldr	r3, [r7, #16]
 800a5dc:	1ad3      	subs	r3, r2, r3
 800a5de:	2b02      	cmp	r3, #2
 800a5e0:	d901      	bls.n	800a5e6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a5e2:	2303      	movs	r3, #3
 800a5e4:	e0fa      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a5e6:	4b23      	ldr	r3, [pc, #140]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a5e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5ec:	f003 0302 	and.w	r3, r3, #2
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d0ef      	beq.n	800a5d4 <HAL_RCC_OscConfig+0x418>
 800a5f4:	e01b      	b.n	800a62e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a5f6:	4b1f      	ldr	r3, [pc, #124]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a5f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a5fc:	4a1d      	ldr	r2, [pc, #116]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a5fe:	f023 0301 	bic.w	r3, r3, #1
 800a602:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a606:	f7fb f84d 	bl	80056a4 <HAL_GetTick>
 800a60a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a60c:	e008      	b.n	800a620 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a60e:	f7fb f849 	bl	80056a4 <HAL_GetTick>
 800a612:	4602      	mov	r2, r0
 800a614:	693b      	ldr	r3, [r7, #16]
 800a616:	1ad3      	subs	r3, r2, r3
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d901      	bls.n	800a620 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a61c:	2303      	movs	r3, #3
 800a61e:	e0dd      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a620:	4b14      	ldr	r3, [pc, #80]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a622:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a626:	f003 0302 	and.w	r3, r3, #2
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d1ef      	bne.n	800a60e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	69db      	ldr	r3, [r3, #28]
 800a632:	2b00      	cmp	r3, #0
 800a634:	f000 80d1 	beq.w	800a7da <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a638:	4b0e      	ldr	r3, [pc, #56]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f003 030c 	and.w	r3, r3, #12
 800a640:	2b0c      	cmp	r3, #12
 800a642:	f000 808b 	beq.w	800a75c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	2b02      	cmp	r3, #2
 800a64c:	d15e      	bne.n	800a70c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a64e:	4b09      	ldr	r3, [pc, #36]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	4a08      	ldr	r2, [pc, #32]	; (800a674 <HAL_RCC_OscConfig+0x4b8>)
 800a654:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a658:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a65a:	f7fb f823 	bl	80056a4 <HAL_GetTick>
 800a65e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a660:	e00c      	b.n	800a67c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a662:	f7fb f81f 	bl	80056a4 <HAL_GetTick>
 800a666:	4602      	mov	r2, r0
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	1ad3      	subs	r3, r2, r3
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d905      	bls.n	800a67c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800a670:	2303      	movs	r3, #3
 800a672:	e0b3      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
 800a674:	40021000 	.word	0x40021000
 800a678:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a67c:	4b59      	ldr	r3, [pc, #356]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a684:	2b00      	cmp	r3, #0
 800a686:	d1ec      	bne.n	800a662 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a688:	4b56      	ldr	r3, [pc, #344]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a68a:	68da      	ldr	r2, [r3, #12]
 800a68c:	4b56      	ldr	r3, [pc, #344]	; (800a7e8 <HAL_RCC_OscConfig+0x62c>)
 800a68e:	4013      	ands	r3, r2
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	6a11      	ldr	r1, [r2, #32]
 800a694:	687a      	ldr	r2, [r7, #4]
 800a696:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a698:	3a01      	subs	r2, #1
 800a69a:	0112      	lsls	r2, r2, #4
 800a69c:	4311      	orrs	r1, r2
 800a69e:	687a      	ldr	r2, [r7, #4]
 800a6a0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a6a2:	0212      	lsls	r2, r2, #8
 800a6a4:	4311      	orrs	r1, r2
 800a6a6:	687a      	ldr	r2, [r7, #4]
 800a6a8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a6aa:	0852      	lsrs	r2, r2, #1
 800a6ac:	3a01      	subs	r2, #1
 800a6ae:	0552      	lsls	r2, r2, #21
 800a6b0:	4311      	orrs	r1, r2
 800a6b2:	687a      	ldr	r2, [r7, #4]
 800a6b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a6b6:	0852      	lsrs	r2, r2, #1
 800a6b8:	3a01      	subs	r2, #1
 800a6ba:	0652      	lsls	r2, r2, #25
 800a6bc:	4311      	orrs	r1, r2
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a6c2:	06d2      	lsls	r2, r2, #27
 800a6c4:	430a      	orrs	r2, r1
 800a6c6:	4947      	ldr	r1, [pc, #284]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a6c8:	4313      	orrs	r3, r2
 800a6ca:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6cc:	4b45      	ldr	r3, [pc, #276]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	4a44      	ldr	r2, [pc, #272]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a6d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6d6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a6d8:	4b42      	ldr	r3, [pc, #264]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a6da:	68db      	ldr	r3, [r3, #12]
 800a6dc:	4a41      	ldr	r2, [pc, #260]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a6de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6e2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e4:	f7fa ffde 	bl	80056a4 <HAL_GetTick>
 800a6e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6ea:	e008      	b.n	800a6fe <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6ec:	f7fa ffda 	bl	80056a4 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	693b      	ldr	r3, [r7, #16]
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e06e      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a6fe:	4b39      	ldr	r3, [pc, #228]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0f0      	beq.n	800a6ec <HAL_RCC_OscConfig+0x530>
 800a70a:	e066      	b.n	800a7da <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a70c:	4b35      	ldr	r3, [pc, #212]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a34      	ldr	r2, [pc, #208]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a716:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a718:	4b32      	ldr	r3, [pc, #200]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a71a:	68db      	ldr	r3, [r3, #12]
 800a71c:	4a31      	ldr	r2, [pc, #196]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a71e:	f023 0303 	bic.w	r3, r3, #3
 800a722:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a724:	4b2f      	ldr	r3, [pc, #188]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a726:	68db      	ldr	r3, [r3, #12]
 800a728:	4a2e      	ldr	r2, [pc, #184]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a72a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a72e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a732:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a734:	f7fa ffb6 	bl	80056a4 <HAL_GetTick>
 800a738:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a73a:	e008      	b.n	800a74e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a73c:	f7fa ffb2 	bl	80056a4 <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	693b      	ldr	r3, [r7, #16]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	2b02      	cmp	r3, #2
 800a748:	d901      	bls.n	800a74e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800a74a:	2303      	movs	r3, #3
 800a74c:	e046      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a74e:	4b25      	ldr	r3, [pc, #148]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a756:	2b00      	cmp	r3, #0
 800a758:	d1f0      	bne.n	800a73c <HAL_RCC_OscConfig+0x580>
 800a75a:	e03e      	b.n	800a7da <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	69db      	ldr	r3, [r3, #28]
 800a760:	2b01      	cmp	r3, #1
 800a762:	d101      	bne.n	800a768 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800a764:	2301      	movs	r3, #1
 800a766:	e039      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a768:	4b1e      	ldr	r3, [pc, #120]	; (800a7e4 <HAL_RCC_OscConfig+0x628>)
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a76e:	697b      	ldr	r3, [r7, #20]
 800a770:	f003 0203 	and.w	r2, r3, #3
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	6a1b      	ldr	r3, [r3, #32]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d12c      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a77c:	697b      	ldr	r3, [r7, #20]
 800a77e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	3b01      	subs	r3, #1
 800a788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a78a:	429a      	cmp	r2, r3
 800a78c:	d123      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a798:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d11b      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a79e:	697b      	ldr	r3, [r7, #20]
 800a7a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a7aa:	429a      	cmp	r2, r3
 800a7ac:	d113      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b8:	085b      	lsrs	r3, r3, #1
 800a7ba:	3b01      	subs	r3, #1
 800a7bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d109      	bne.n	800a7d6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7cc:	085b      	lsrs	r3, r3, #1
 800a7ce:	3b01      	subs	r3, #1
 800a7d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800a7d2:	429a      	cmp	r2, r3
 800a7d4:	d001      	beq.n	800a7da <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800a7d6:	2301      	movs	r3, #1
 800a7d8:	e000      	b.n	800a7dc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800a7da:	2300      	movs	r3, #0
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	3720      	adds	r7, #32
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	bd80      	pop	{r7, pc}
 800a7e4:	40021000 	.word	0x40021000
 800a7e8:	019f800c 	.word	0x019f800c

0800a7ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b086      	sub	sp, #24
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d101      	bne.n	800a804 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800a800:	2301      	movs	r3, #1
 800a802:	e11e      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a804:	4b91      	ldr	r3, [pc, #580]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	f003 030f 	and.w	r3, r3, #15
 800a80c:	683a      	ldr	r2, [r7, #0]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d910      	bls.n	800a834 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a812:	4b8e      	ldr	r3, [pc, #568]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	f023 020f 	bic.w	r2, r3, #15
 800a81a:	498c      	ldr	r1, [pc, #560]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	4313      	orrs	r3, r2
 800a820:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a822:	4b8a      	ldr	r3, [pc, #552]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f003 030f 	and.w	r3, r3, #15
 800a82a:	683a      	ldr	r2, [r7, #0]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d001      	beq.n	800a834 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	e106      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f003 0301 	and.w	r3, r3, #1
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d073      	beq.n	800a928 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	685b      	ldr	r3, [r3, #4]
 800a844:	2b03      	cmp	r3, #3
 800a846:	d129      	bne.n	800a89c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a848:	4b81      	ldr	r3, [pc, #516]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a850:	2b00      	cmp	r3, #0
 800a852:	d101      	bne.n	800a858 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e0f4      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800a858:	f000 f99e 	bl	800ab98 <RCC_GetSysClockFreqFromPLLSource>
 800a85c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800a85e:	693b      	ldr	r3, [r7, #16]
 800a860:	4a7c      	ldr	r2, [pc, #496]	; (800aa54 <HAL_RCC_ClockConfig+0x268>)
 800a862:	4293      	cmp	r3, r2
 800a864:	d93f      	bls.n	800a8e6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a866:	4b7a      	ldr	r3, [pc, #488]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a868:	689b      	ldr	r3, [r3, #8]
 800a86a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d009      	beq.n	800a886 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d033      	beq.n	800a8e6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800a882:	2b00      	cmp	r3, #0
 800a884:	d12f      	bne.n	800a8e6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a886:	4b72      	ldr	r3, [pc, #456]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a888:	689b      	ldr	r3, [r3, #8]
 800a88a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a88e:	4a70      	ldr	r2, [pc, #448]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a890:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a894:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800a896:	2380      	movs	r3, #128	; 0x80
 800a898:	617b      	str	r3, [r7, #20]
 800a89a:	e024      	b.n	800a8e6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	685b      	ldr	r3, [r3, #4]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d107      	bne.n	800a8b4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a8a4:	4b6a      	ldr	r3, [pc, #424]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d109      	bne.n	800a8c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	e0c6      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a8b4:	4b66      	ldr	r3, [pc, #408]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d101      	bne.n	800a8c4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	e0be      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800a8c4:	f000 f8ce 	bl	800aa64 <HAL_RCC_GetSysClockFreq>
 800a8c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	4a61      	ldr	r2, [pc, #388]	; (800aa54 <HAL_RCC_ClockConfig+0x268>)
 800a8ce:	4293      	cmp	r3, r2
 800a8d0:	d909      	bls.n	800a8e6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800a8d2:	4b5f      	ldr	r3, [pc, #380]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a8d4:	689b      	ldr	r3, [r3, #8]
 800a8d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a8da:	4a5d      	ldr	r2, [pc, #372]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a8dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8e0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800a8e2:	2380      	movs	r3, #128	; 0x80
 800a8e4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a8e6:	4b5a      	ldr	r3, [pc, #360]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	f023 0203 	bic.w	r2, r3, #3
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	685b      	ldr	r3, [r3, #4]
 800a8f2:	4957      	ldr	r1, [pc, #348]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a8f8:	f7fa fed4 	bl	80056a4 <HAL_GetTick>
 800a8fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a8fe:	e00a      	b.n	800a916 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a900:	f7fa fed0 	bl	80056a4 <HAL_GetTick>
 800a904:	4602      	mov	r2, r0
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	1ad3      	subs	r3, r2, r3
 800a90a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a90e:	4293      	cmp	r3, r2
 800a910:	d901      	bls.n	800a916 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800a912:	2303      	movs	r3, #3
 800a914:	e095      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a916:	4b4e      	ldr	r3, [pc, #312]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a918:	689b      	ldr	r3, [r3, #8]
 800a91a:	f003 020c 	and.w	r2, r3, #12
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	685b      	ldr	r3, [r3, #4]
 800a922:	009b      	lsls	r3, r3, #2
 800a924:	429a      	cmp	r2, r3
 800a926:	d1eb      	bne.n	800a900 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f003 0302 	and.w	r3, r3, #2
 800a930:	2b00      	cmp	r3, #0
 800a932:	d023      	beq.n	800a97c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f003 0304 	and.w	r3, r3, #4
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d005      	beq.n	800a94c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a940:	4b43      	ldr	r3, [pc, #268]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a942:	689b      	ldr	r3, [r3, #8]
 800a944:	4a42      	ldr	r2, [pc, #264]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a946:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a94a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f003 0308 	and.w	r3, r3, #8
 800a954:	2b00      	cmp	r3, #0
 800a956:	d007      	beq.n	800a968 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800a958:	4b3d      	ldr	r3, [pc, #244]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a95a:	689b      	ldr	r3, [r3, #8]
 800a95c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a960:	4a3b      	ldr	r2, [pc, #236]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a962:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a966:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a968:	4b39      	ldr	r3, [pc, #228]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	689b      	ldr	r3, [r3, #8]
 800a974:	4936      	ldr	r1, [pc, #216]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a976:	4313      	orrs	r3, r2
 800a978:	608b      	str	r3, [r1, #8]
 800a97a:	e008      	b.n	800a98e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800a97c:	697b      	ldr	r3, [r7, #20]
 800a97e:	2b80      	cmp	r3, #128	; 0x80
 800a980:	d105      	bne.n	800a98e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800a982:	4b33      	ldr	r3, [pc, #204]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	4a32      	ldr	r2, [pc, #200]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a988:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a98c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a98e:	4b2f      	ldr	r3, [pc, #188]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 030f 	and.w	r3, r3, #15
 800a996:	683a      	ldr	r2, [r7, #0]
 800a998:	429a      	cmp	r2, r3
 800a99a:	d21d      	bcs.n	800a9d8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a99c:	4b2b      	ldr	r3, [pc, #172]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f023 020f 	bic.w	r2, r3, #15
 800a9a4:	4929      	ldr	r1, [pc, #164]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	4313      	orrs	r3, r2
 800a9aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a9ac:	f7fa fe7a 	bl	80056a4 <HAL_GetTick>
 800a9b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9b2:	e00a      	b.n	800a9ca <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9b4:	f7fa fe76 	bl	80056a4 <HAL_GetTick>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	1ad3      	subs	r3, r2, r3
 800a9be:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d901      	bls.n	800a9ca <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800a9c6:	2303      	movs	r3, #3
 800a9c8:	e03b      	b.n	800aa42 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9ca:	4b20      	ldr	r3, [pc, #128]	; (800aa4c <HAL_RCC_ClockConfig+0x260>)
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 030f 	and.w	r3, r3, #15
 800a9d2:	683a      	ldr	r2, [r7, #0]
 800a9d4:	429a      	cmp	r2, r3
 800a9d6:	d1ed      	bne.n	800a9b4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	f003 0304 	and.w	r3, r3, #4
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d008      	beq.n	800a9f6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a9e4:	4b1a      	ldr	r3, [pc, #104]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a9e6:	689b      	ldr	r3, [r3, #8]
 800a9e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68db      	ldr	r3, [r3, #12]
 800a9f0:	4917      	ldr	r1, [pc, #92]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800a9f2:	4313      	orrs	r3, r2
 800a9f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f003 0308 	and.w	r3, r3, #8
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d009      	beq.n	800aa16 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aa02:	4b13      	ldr	r3, [pc, #76]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	691b      	ldr	r3, [r3, #16]
 800aa0e:	00db      	lsls	r3, r3, #3
 800aa10:	490f      	ldr	r1, [pc, #60]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800aa12:	4313      	orrs	r3, r2
 800aa14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800aa16:	f000 f825 	bl	800aa64 <HAL_RCC_GetSysClockFreq>
 800aa1a:	4602      	mov	r2, r0
 800aa1c:	4b0c      	ldr	r3, [pc, #48]	; (800aa50 <HAL_RCC_ClockConfig+0x264>)
 800aa1e:	689b      	ldr	r3, [r3, #8]
 800aa20:	091b      	lsrs	r3, r3, #4
 800aa22:	f003 030f 	and.w	r3, r3, #15
 800aa26:	490c      	ldr	r1, [pc, #48]	; (800aa58 <HAL_RCC_ClockConfig+0x26c>)
 800aa28:	5ccb      	ldrb	r3, [r1, r3]
 800aa2a:	f003 031f 	and.w	r3, r3, #31
 800aa2e:	fa22 f303 	lsr.w	r3, r2, r3
 800aa32:	4a0a      	ldr	r2, [pc, #40]	; (800aa5c <HAL_RCC_ClockConfig+0x270>)
 800aa34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aa36:	4b0a      	ldr	r3, [pc, #40]	; (800aa60 <HAL_RCC_ClockConfig+0x274>)
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	4618      	mov	r0, r3
 800aa3c:	f7fa fde6 	bl	800560c <HAL_InitTick>
 800aa40:	4603      	mov	r3, r0
}
 800aa42:	4618      	mov	r0, r3
 800aa44:	3718      	adds	r7, #24
 800aa46:	46bd      	mov	sp, r7
 800aa48:	bd80      	pop	{r7, pc}
 800aa4a:	bf00      	nop
 800aa4c:	40022000 	.word	0x40022000
 800aa50:	40021000 	.word	0x40021000
 800aa54:	04c4b400 	.word	0x04c4b400
 800aa58:	08013bdc 	.word	0x08013bdc
 800aa5c:	20000000 	.word	0x20000000
 800aa60:	20000004 	.word	0x20000004

0800aa64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b087      	sub	sp, #28
 800aa68:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800aa6a:	4b2c      	ldr	r3, [pc, #176]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa6c:	689b      	ldr	r3, [r3, #8]
 800aa6e:	f003 030c 	and.w	r3, r3, #12
 800aa72:	2b04      	cmp	r3, #4
 800aa74:	d102      	bne.n	800aa7c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800aa76:	4b2a      	ldr	r3, [pc, #168]	; (800ab20 <HAL_RCC_GetSysClockFreq+0xbc>)
 800aa78:	613b      	str	r3, [r7, #16]
 800aa7a:	e047      	b.n	800ab0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800aa7c:	4b27      	ldr	r3, [pc, #156]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 030c 	and.w	r3, r3, #12
 800aa84:	2b08      	cmp	r3, #8
 800aa86:	d102      	bne.n	800aa8e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800aa88:	4b26      	ldr	r3, [pc, #152]	; (800ab24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800aa8a:	613b      	str	r3, [r7, #16]
 800aa8c:	e03e      	b.n	800ab0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800aa8e:	4b23      	ldr	r3, [pc, #140]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa90:	689b      	ldr	r3, [r3, #8]
 800aa92:	f003 030c 	and.w	r3, r3, #12
 800aa96:	2b0c      	cmp	r3, #12
 800aa98:	d136      	bne.n	800ab08 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800aa9a:	4b20      	ldr	r3, [pc, #128]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	f003 0303 	and.w	r3, r3, #3
 800aaa2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aaa4:	4b1d      	ldr	r3, [pc, #116]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aaa6:	68db      	ldr	r3, [r3, #12]
 800aaa8:	091b      	lsrs	r3, r3, #4
 800aaaa:	f003 030f 	and.w	r3, r3, #15
 800aaae:	3301      	adds	r3, #1
 800aab0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2b03      	cmp	r3, #3
 800aab6:	d10c      	bne.n	800aad2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aab8:	4a1a      	ldr	r2, [pc, #104]	; (800ab24 <HAL_RCC_GetSysClockFreq+0xc0>)
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	fbb2 f3f3 	udiv	r3, r2, r3
 800aac0:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aac2:	68d2      	ldr	r2, [r2, #12]
 800aac4:	0a12      	lsrs	r2, r2, #8
 800aac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aaca:	fb02 f303 	mul.w	r3, r2, r3
 800aace:	617b      	str	r3, [r7, #20]
      break;
 800aad0:	e00c      	b.n	800aaec <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800aad2:	4a13      	ldr	r2, [pc, #76]	; (800ab20 <HAL_RCC_GetSysClockFreq+0xbc>)
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	fbb2 f3f3 	udiv	r3, r2, r3
 800aada:	4a10      	ldr	r2, [pc, #64]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aadc:	68d2      	ldr	r2, [r2, #12]
 800aade:	0a12      	lsrs	r2, r2, #8
 800aae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800aae4:	fb02 f303 	mul.w	r3, r2, r3
 800aae8:	617b      	str	r3, [r7, #20]
      break;
 800aaea:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800aaec:	4b0b      	ldr	r3, [pc, #44]	; (800ab1c <HAL_RCC_GetSysClockFreq+0xb8>)
 800aaee:	68db      	ldr	r3, [r3, #12]
 800aaf0:	0e5b      	lsrs	r3, r3, #25
 800aaf2:	f003 0303 	and.w	r3, r3, #3
 800aaf6:	3301      	adds	r3, #1
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab04:	613b      	str	r3, [r7, #16]
 800ab06:	e001      	b.n	800ab0c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ab08:	2300      	movs	r3, #0
 800ab0a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ab0c:	693b      	ldr	r3, [r7, #16]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	371c      	adds	r7, #28
 800ab12:	46bd      	mov	sp, r7
 800ab14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab18:	4770      	bx	lr
 800ab1a:	bf00      	nop
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	00f42400 	.word	0x00f42400
 800ab24:	007a1200 	.word	0x007a1200

0800ab28 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ab2c:	4b03      	ldr	r3, [pc, #12]	; (800ab3c <HAL_RCC_GetHCLKFreq+0x14>)
 800ab2e:	681b      	ldr	r3, [r3, #0]
}
 800ab30:	4618      	mov	r0, r3
 800ab32:	46bd      	mov	sp, r7
 800ab34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab38:	4770      	bx	lr
 800ab3a:	bf00      	nop
 800ab3c:	20000000 	.word	0x20000000

0800ab40 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800ab44:	f7ff fff0 	bl	800ab28 <HAL_RCC_GetHCLKFreq>
 800ab48:	4602      	mov	r2, r0
 800ab4a:	4b06      	ldr	r3, [pc, #24]	; (800ab64 <HAL_RCC_GetPCLK1Freq+0x24>)
 800ab4c:	689b      	ldr	r3, [r3, #8]
 800ab4e:	0a1b      	lsrs	r3, r3, #8
 800ab50:	f003 0307 	and.w	r3, r3, #7
 800ab54:	4904      	ldr	r1, [pc, #16]	; (800ab68 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ab56:	5ccb      	ldrb	r3, [r1, r3]
 800ab58:	f003 031f 	and.w	r3, r3, #31
 800ab5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab60:	4618      	mov	r0, r3
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	40021000 	.word	0x40021000
 800ab68:	08013bec 	.word	0x08013bec

0800ab6c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800ab70:	f7ff ffda 	bl	800ab28 <HAL_RCC_GetHCLKFreq>
 800ab74:	4602      	mov	r2, r0
 800ab76:	4b06      	ldr	r3, [pc, #24]	; (800ab90 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ab78:	689b      	ldr	r3, [r3, #8]
 800ab7a:	0adb      	lsrs	r3, r3, #11
 800ab7c:	f003 0307 	and.w	r3, r3, #7
 800ab80:	4904      	ldr	r1, [pc, #16]	; (800ab94 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ab82:	5ccb      	ldrb	r3, [r1, r3]
 800ab84:	f003 031f 	and.w	r3, r3, #31
 800ab88:	fa22 f303 	lsr.w	r3, r2, r3
}
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	40021000 	.word	0x40021000
 800ab94:	08013bec 	.word	0x08013bec

0800ab98 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800ab98:	b480      	push	{r7}
 800ab9a:	b087      	sub	sp, #28
 800ab9c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ab9e:	4b1e      	ldr	r3, [pc, #120]	; (800ac18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800aba0:	68db      	ldr	r3, [r3, #12]
 800aba2:	f003 0303 	and.w	r3, r3, #3
 800aba6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800aba8:	4b1b      	ldr	r3, [pc, #108]	; (800ac18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abaa:	68db      	ldr	r3, [r3, #12]
 800abac:	091b      	lsrs	r3, r3, #4
 800abae:	f003 030f 	and.w	r3, r3, #15
 800abb2:	3301      	adds	r3, #1
 800abb4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	2b03      	cmp	r3, #3
 800abba:	d10c      	bne.n	800abd6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abbc:	4a17      	ldr	r2, [pc, #92]	; (800ac1c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800abc4:	4a14      	ldr	r2, [pc, #80]	; (800ac18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abc6:	68d2      	ldr	r2, [r2, #12]
 800abc8:	0a12      	lsrs	r2, r2, #8
 800abca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abce:	fb02 f303 	mul.w	r3, r2, r3
 800abd2:	617b      	str	r3, [r7, #20]
    break;
 800abd4:	e00c      	b.n	800abf0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800abd6:	4a12      	ldr	r2, [pc, #72]	; (800ac20 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	fbb2 f3f3 	udiv	r3, r2, r3
 800abde:	4a0e      	ldr	r2, [pc, #56]	; (800ac18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abe0:	68d2      	ldr	r2, [r2, #12]
 800abe2:	0a12      	lsrs	r2, r2, #8
 800abe4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800abe8:	fb02 f303 	mul.w	r3, r2, r3
 800abec:	617b      	str	r3, [r7, #20]
    break;
 800abee:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800abf0:	4b09      	ldr	r3, [pc, #36]	; (800ac18 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800abf2:	68db      	ldr	r3, [r3, #12]
 800abf4:	0e5b      	lsrs	r3, r3, #25
 800abf6:	f003 0303 	and.w	r3, r3, #3
 800abfa:	3301      	adds	r3, #1
 800abfc:	005b      	lsls	r3, r3, #1
 800abfe:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ac00:	697a      	ldr	r2, [r7, #20]
 800ac02:	68bb      	ldr	r3, [r7, #8]
 800ac04:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac08:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ac0a:	687b      	ldr	r3, [r7, #4]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	371c      	adds	r7, #28
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	40021000 	.word	0x40021000
 800ac1c:	007a1200 	.word	0x007a1200
 800ac20:	00f42400 	.word	0x00f42400

0800ac24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ac30:	2300      	movs	r3, #0
 800ac32:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	f000 8098 	beq.w	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ac42:	2300      	movs	r3, #0
 800ac44:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ac46:	4b43      	ldr	r3, [pc, #268]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d10d      	bne.n	800ac6e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ac52:	4b40      	ldr	r3, [pc, #256]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac56:	4a3f      	ldr	r2, [pc, #252]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac5c:	6593      	str	r3, [r2, #88]	; 0x58
 800ac5e:	4b3d      	ldr	r3, [pc, #244]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ac60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ac66:	60bb      	str	r3, [r7, #8]
 800ac68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ac6a:	2301      	movs	r3, #1
 800ac6c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac6e:	4b3a      	ldr	r3, [pc, #232]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a39      	ldr	r2, [pc, #228]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ac74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac78:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac7a:	f7fa fd13 	bl	80056a4 <HAL_GetTick>
 800ac7e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac80:	e009      	b.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac82:	f7fa fd0f 	bl	80056a4 <HAL_GetTick>
 800ac86:	4602      	mov	r2, r0
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	1ad3      	subs	r3, r2, r3
 800ac8c:	2b02      	cmp	r3, #2
 800ac8e:	d902      	bls.n	800ac96 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ac90:	2303      	movs	r3, #3
 800ac92:	74fb      	strb	r3, [r7, #19]
        break;
 800ac94:	e005      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac96:	4b30      	ldr	r3, [pc, #192]	; (800ad58 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d0ef      	beq.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800aca2:	7cfb      	ldrb	r3, [r7, #19]
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d159      	bne.n	800ad5c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aca8:	4b2a      	ldr	r3, [pc, #168]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acb2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d01e      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	429a      	cmp	r2, r3
 800acc2:	d019      	beq.n	800acf8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800acc4:	4b23      	ldr	r3, [pc, #140]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acce:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800acd0:	4b20      	ldr	r3, [pc, #128]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acd6:	4a1f      	ldr	r2, [pc, #124]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800acdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800ace0:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ace2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ace6:	4a1b      	ldr	r2, [pc, #108]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ace8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800acf0:	4a18      	ldr	r2, [pc, #96]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f003 0301 	and.w	r3, r3, #1
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d016      	beq.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ad02:	f7fa fccf 	bl	80056a4 <HAL_GetTick>
 800ad06:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad08:	e00b      	b.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ad0a:	f7fa fccb 	bl	80056a4 <HAL_GetTick>
 800ad0e:	4602      	mov	r2, r0
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	1ad3      	subs	r3, r2, r3
 800ad14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d902      	bls.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800ad1c:	2303      	movs	r3, #3
 800ad1e:	74fb      	strb	r3, [r7, #19]
            break;
 800ad20:	e006      	b.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800ad22:	4b0c      	ldr	r3, [pc, #48]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad28:	f003 0302 	and.w	r3, r3, #2
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d0ec      	beq.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800ad30:	7cfb      	ldrb	r3, [r7, #19]
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	d10b      	bne.n	800ad4e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad36:	4b07      	ldr	r3, [pc, #28]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad3c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad44:	4903      	ldr	r1, [pc, #12]	; (800ad54 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ad46:	4313      	orrs	r3, r2
 800ad48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800ad4c:	e008      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad4e:	7cfb      	ldrb	r3, [r7, #19]
 800ad50:	74bb      	strb	r3, [r7, #18]
 800ad52:	e005      	b.n	800ad60 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800ad54:	40021000 	.word	0x40021000
 800ad58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad5c:	7cfb      	ldrb	r3, [r7, #19]
 800ad5e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800ad60:	7c7b      	ldrb	r3, [r7, #17]
 800ad62:	2b01      	cmp	r3, #1
 800ad64:	d105      	bne.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800ad66:	4ba6      	ldr	r3, [pc, #664]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ad6a:	4aa5      	ldr	r2, [pc, #660]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ad70:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	f003 0301 	and.w	r3, r3, #1
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00a      	beq.n	800ad94 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800ad7e:	4ba0      	ldr	r3, [pc, #640]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ad84:	f023 0203 	bic.w	r2, r3, #3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	685b      	ldr	r3, [r3, #4]
 800ad8c:	499c      	ldr	r1, [pc, #624]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f003 0302 	and.w	r3, r3, #2
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00a      	beq.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800ada0:	4b97      	ldr	r3, [pc, #604]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ada2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ada6:	f023 020c 	bic.w	r2, r3, #12
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	689b      	ldr	r3, [r3, #8]
 800adae:	4994      	ldr	r1, [pc, #592]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800adb0:	4313      	orrs	r3, r2
 800adb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	f003 0304 	and.w	r3, r3, #4
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d00a      	beq.n	800add8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800adc2:	4b8f      	ldr	r3, [pc, #572]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800adc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	498b      	ldr	r1, [pc, #556]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800add2:	4313      	orrs	r3, r2
 800add4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f003 0308 	and.w	r3, r3, #8
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d00a      	beq.n	800adfa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800ade4:	4b86      	ldr	r3, [pc, #536]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ade6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adea:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	691b      	ldr	r3, [r3, #16]
 800adf2:	4983      	ldr	r1, [pc, #524]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800adf4:	4313      	orrs	r3, r2
 800adf6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	f003 0320 	and.w	r3, r3, #32
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d00a      	beq.n	800ae1c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ae06:	4b7e      	ldr	r3, [pc, #504]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae0c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	695b      	ldr	r3, [r3, #20]
 800ae14:	497a      	ldr	r1, [pc, #488]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae16:	4313      	orrs	r3, r2
 800ae18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00a      	beq.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800ae28:	4b75      	ldr	r3, [pc, #468]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae2e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	699b      	ldr	r3, [r3, #24]
 800ae36:	4972      	ldr	r1, [pc, #456]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae38:	4313      	orrs	r3, r2
 800ae3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d00a      	beq.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800ae4a:	4b6d      	ldr	r3, [pc, #436]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae50:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	69db      	ldr	r3, [r3, #28]
 800ae58:	4969      	ldr	r1, [pc, #420]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae5a:	4313      	orrs	r3, r2
 800ae5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d00a      	beq.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800ae6c:	4b64      	ldr	r3, [pc, #400]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	6a1b      	ldr	r3, [r3, #32]
 800ae7a:	4961      	ldr	r1, [pc, #388]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d00a      	beq.n	800aea4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800ae8e:	4b5c      	ldr	r3, [pc, #368]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9c:	4958      	ldr	r1, [pc, #352]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800ae9e:	4313      	orrs	r3, r2
 800aea0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d015      	beq.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aeb0:	4b53      	ldr	r3, [pc, #332]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aeb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeb6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebe:	4950      	ldr	r1, [pc, #320]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aec0:	4313      	orrs	r3, r2
 800aec2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aece:	d105      	bne.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800aed0:	4b4b      	ldr	r3, [pc, #300]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aed2:	68db      	ldr	r3, [r3, #12]
 800aed4:	4a4a      	ldr	r2, [pc, #296]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aed6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d015      	beq.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800aee8:	4b45      	ldr	r3, [pc, #276]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aeea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aeee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aef6:	4942      	ldr	r1, [pc, #264]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800aef8:	4313      	orrs	r3, r2
 800aefa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af06:	d105      	bne.n	800af14 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af08:	4b3d      	ldr	r3, [pc, #244]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af0a:	68db      	ldr	r3, [r3, #12]
 800af0c:	4a3c      	ldr	r2, [pc, #240]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af12:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	d015      	beq.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800af20:	4b37      	ldr	r3, [pc, #220]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af26:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af2e:	4934      	ldr	r1, [pc, #208]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af30:	4313      	orrs	r3, r2
 800af32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800af3e:	d105      	bne.n	800af4c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af40:	4b2f      	ldr	r3, [pc, #188]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	4a2e      	ldr	r2, [pc, #184]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af4a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800af54:	2b00      	cmp	r3, #0
 800af56:	d015      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800af58:	4b29      	ldr	r3, [pc, #164]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af66:	4926      	ldr	r1, [pc, #152]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af68:	4313      	orrs	r3, r2
 800af6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af76:	d105      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800af78:	4b21      	ldr	r3, [pc, #132]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	4a20      	ldr	r2, [pc, #128]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af82:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d015      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800af90:	4b1b      	ldr	r3, [pc, #108]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800af92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9e:	4918      	ldr	r1, [pc, #96]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afa0:	4313      	orrs	r3, r2
 800afa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800afae:	d105      	bne.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800afb0:	4b13      	ldr	r3, [pc, #76]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afb2:	68db      	ldr	r3, [r3, #12]
 800afb4:	4a12      	ldr	r2, [pc, #72]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800afba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d015      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800afc8:	4b0d      	ldr	r3, [pc, #52]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afce:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afd6:	490a      	ldr	r1, [pc, #40]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afd8:	4313      	orrs	r3, r2
 800afda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800afe2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afe6:	d105      	bne.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800afe8:	4b05      	ldr	r3, [pc, #20]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afea:	68db      	ldr	r3, [r3, #12]
 800afec:	4a04      	ldr	r2, [pc, #16]	; (800b000 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800afee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aff2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800aff4:	7cbb      	ldrb	r3, [r7, #18]
}
 800aff6:	4618      	mov	r0, r3
 800aff8:	3718      	adds	r7, #24
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	40021000 	.word	0x40021000

0800b004 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d101      	bne.n	800b016 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e049      	b.n	800b0aa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b01c:	b2db      	uxtb	r3, r3
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	2200      	movs	r2, #0
 800b026:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f7fa f938 	bl	80052a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2202      	movs	r2, #2
 800b034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681a      	ldr	r2, [r3, #0]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3304      	adds	r3, #4
 800b040:	4619      	mov	r1, r3
 800b042:	4610      	mov	r0, r2
 800b044:	f000 fdba 	bl	800bbbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	2201      	movs	r2, #1
 800b04c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	2201      	movs	r2, #1
 800b054:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	2201      	movs	r2, #1
 800b05c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	2201      	movs	r2, #1
 800b064:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2201      	movs	r2, #1
 800b074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	2201      	movs	r2, #1
 800b07c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2201      	movs	r2, #1
 800b084:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	2201      	movs	r2, #1
 800b08c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2201      	movs	r2, #1
 800b094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	2201      	movs	r2, #1
 800b09c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2201      	movs	r2, #1
 800b0a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b0a8:	2300      	movs	r3, #0
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	3708      	adds	r7, #8
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0c2:	b2db      	uxtb	r3, r3
 800b0c4:	2b01      	cmp	r3, #1
 800b0c6:	d001      	beq.n	800b0cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	e04a      	b.n	800b162 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2202      	movs	r2, #2
 800b0d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	68da      	ldr	r2, [r3, #12]
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f042 0201 	orr.w	r2, r2, #1
 800b0e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a21      	ldr	r2, [pc, #132]	; (800b170 <HAL_TIM_Base_Start_IT+0xbc>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d018      	beq.n	800b120 <HAL_TIM_Base_Start_IT+0x6c>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0f6:	d013      	beq.n	800b120 <HAL_TIM_Base_Start_IT+0x6c>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a1d      	ldr	r2, [pc, #116]	; (800b174 <HAL_TIM_Base_Start_IT+0xc0>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d00e      	beq.n	800b120 <HAL_TIM_Base_Start_IT+0x6c>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a1c      	ldr	r2, [pc, #112]	; (800b178 <HAL_TIM_Base_Start_IT+0xc4>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d009      	beq.n	800b120 <HAL_TIM_Base_Start_IT+0x6c>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a1a      	ldr	r2, [pc, #104]	; (800b17c <HAL_TIM_Base_Start_IT+0xc8>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d004      	beq.n	800b120 <HAL_TIM_Base_Start_IT+0x6c>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a19      	ldr	r2, [pc, #100]	; (800b180 <HAL_TIM_Base_Start_IT+0xcc>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d115      	bne.n	800b14c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	689a      	ldr	r2, [r3, #8]
 800b126:	4b17      	ldr	r3, [pc, #92]	; (800b184 <HAL_TIM_Base_Start_IT+0xd0>)
 800b128:	4013      	ands	r3, r2
 800b12a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	2b06      	cmp	r3, #6
 800b130:	d015      	beq.n	800b15e <HAL_TIM_Base_Start_IT+0xaa>
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b138:	d011      	beq.n	800b15e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	681a      	ldr	r2, [r3, #0]
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	f042 0201 	orr.w	r2, r2, #1
 800b148:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b14a:	e008      	b.n	800b15e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0201 	orr.w	r2, r2, #1
 800b15a:	601a      	str	r2, [r3, #0]
 800b15c:	e000      	b.n	800b160 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b15e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b160:	2300      	movs	r3, #0
}
 800b162:	4618      	mov	r0, r3
 800b164:	3714      	adds	r7, #20
 800b166:	46bd      	mov	sp, r7
 800b168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16c:	4770      	bx	lr
 800b16e:	bf00      	nop
 800b170:	40012c00 	.word	0x40012c00
 800b174:	40000400 	.word	0x40000400
 800b178:	40000800 	.word	0x40000800
 800b17c:	40013400 	.word	0x40013400
 800b180:	40014000 	.word	0x40014000
 800b184:	00010007 	.word	0x00010007

0800b188 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b082      	sub	sp, #8
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d101      	bne.n	800b19a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e049      	b.n	800b22e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1a0:	b2db      	uxtb	r3, r3
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	d106      	bne.n	800b1b4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	2200      	movs	r2, #0
 800b1aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f000 f841 	bl	800b236 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681a      	ldr	r2, [r3, #0]
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	3304      	adds	r3, #4
 800b1c4:	4619      	mov	r1, r3
 800b1c6:	4610      	mov	r0, r2
 800b1c8:	f000 fcf8 	bl	800bbbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2201      	movs	r2, #1
 800b1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2201      	movs	r2, #1
 800b1e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2201      	movs	r2, #1
 800b1e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	2201      	movs	r2, #1
 800b1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	2201      	movs	r2, #1
 800b1f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2201      	movs	r2, #1
 800b200:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	2201      	movs	r2, #1
 800b208:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2201      	movs	r2, #1
 800b210:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	2201      	movs	r2, #1
 800b218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2201      	movs	r2, #1
 800b220:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2201      	movs	r2, #1
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3708      	adds	r7, #8
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}

0800b236 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800b236:	b480      	push	{r7}
 800b238:	b083      	sub	sp, #12
 800b23a:	af00      	add	r7, sp, #0
 800b23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800b23e:	bf00      	nop
 800b240:	370c      	adds	r7, #12
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
	...

0800b24c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800b24c:	b580      	push	{r7, lr}
 800b24e:	b084      	sub	sp, #16
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
 800b254:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800b256:	683b      	ldr	r3, [r7, #0]
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d109      	bne.n	800b270 <HAL_TIM_PWM_Start+0x24>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b262:	b2db      	uxtb	r3, r3
 800b264:	2b01      	cmp	r3, #1
 800b266:	bf14      	ite	ne
 800b268:	2301      	movne	r3, #1
 800b26a:	2300      	moveq	r3, #0
 800b26c:	b2db      	uxtb	r3, r3
 800b26e:	e03c      	b.n	800b2ea <HAL_TIM_PWM_Start+0x9e>
 800b270:	683b      	ldr	r3, [r7, #0]
 800b272:	2b04      	cmp	r3, #4
 800b274:	d109      	bne.n	800b28a <HAL_TIM_PWM_Start+0x3e>
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800b27c:	b2db      	uxtb	r3, r3
 800b27e:	2b01      	cmp	r3, #1
 800b280:	bf14      	ite	ne
 800b282:	2301      	movne	r3, #1
 800b284:	2300      	moveq	r3, #0
 800b286:	b2db      	uxtb	r3, r3
 800b288:	e02f      	b.n	800b2ea <HAL_TIM_PWM_Start+0x9e>
 800b28a:	683b      	ldr	r3, [r7, #0]
 800b28c:	2b08      	cmp	r3, #8
 800b28e:	d109      	bne.n	800b2a4 <HAL_TIM_PWM_Start+0x58>
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b296:	b2db      	uxtb	r3, r3
 800b298:	2b01      	cmp	r3, #1
 800b29a:	bf14      	ite	ne
 800b29c:	2301      	movne	r3, #1
 800b29e:	2300      	moveq	r3, #0
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	e022      	b.n	800b2ea <HAL_TIM_PWM_Start+0x9e>
 800b2a4:	683b      	ldr	r3, [r7, #0]
 800b2a6:	2b0c      	cmp	r3, #12
 800b2a8:	d109      	bne.n	800b2be <HAL_TIM_PWM_Start+0x72>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b2b0:	b2db      	uxtb	r3, r3
 800b2b2:	2b01      	cmp	r3, #1
 800b2b4:	bf14      	ite	ne
 800b2b6:	2301      	movne	r3, #1
 800b2b8:	2300      	moveq	r3, #0
 800b2ba:	b2db      	uxtb	r3, r3
 800b2bc:	e015      	b.n	800b2ea <HAL_TIM_PWM_Start+0x9e>
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	2b10      	cmp	r3, #16
 800b2c2:	d109      	bne.n	800b2d8 <HAL_TIM_PWM_Start+0x8c>
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	2b01      	cmp	r3, #1
 800b2ce:	bf14      	ite	ne
 800b2d0:	2301      	movne	r3, #1
 800b2d2:	2300      	moveq	r3, #0
 800b2d4:	b2db      	uxtb	r3, r3
 800b2d6:	e008      	b.n	800b2ea <HAL_TIM_PWM_Start+0x9e>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b01      	cmp	r3, #1
 800b2e2:	bf14      	ite	ne
 800b2e4:	2301      	movne	r3, #1
 800b2e6:	2300      	moveq	r3, #0
 800b2e8:	b2db      	uxtb	r3, r3
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d001      	beq.n	800b2f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e097      	b.n	800b422 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d104      	bne.n	800b302 <HAL_TIM_PWM_Start+0xb6>
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	2202      	movs	r2, #2
 800b2fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b300:	e023      	b.n	800b34a <HAL_TIM_PWM_Start+0xfe>
 800b302:	683b      	ldr	r3, [r7, #0]
 800b304:	2b04      	cmp	r3, #4
 800b306:	d104      	bne.n	800b312 <HAL_TIM_PWM_Start+0xc6>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2202      	movs	r2, #2
 800b30c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b310:	e01b      	b.n	800b34a <HAL_TIM_PWM_Start+0xfe>
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	2b08      	cmp	r3, #8
 800b316:	d104      	bne.n	800b322 <HAL_TIM_PWM_Start+0xd6>
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2202      	movs	r2, #2
 800b31c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b320:	e013      	b.n	800b34a <HAL_TIM_PWM_Start+0xfe>
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	2b0c      	cmp	r3, #12
 800b326:	d104      	bne.n	800b332 <HAL_TIM_PWM_Start+0xe6>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	2202      	movs	r2, #2
 800b32c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b330:	e00b      	b.n	800b34a <HAL_TIM_PWM_Start+0xfe>
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	2b10      	cmp	r3, #16
 800b336:	d104      	bne.n	800b342 <HAL_TIM_PWM_Start+0xf6>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2202      	movs	r2, #2
 800b33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b340:	e003      	b.n	800b34a <HAL_TIM_PWM_Start+0xfe>
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	2202      	movs	r2, #2
 800b346:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	2201      	movs	r2, #1
 800b350:	6839      	ldr	r1, [r7, #0]
 800b352:	4618      	mov	r0, r3
 800b354:	f001 f854 	bl	800c400 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	4a33      	ldr	r2, [pc, #204]	; (800b42c <HAL_TIM_PWM_Start+0x1e0>)
 800b35e:	4293      	cmp	r3, r2
 800b360:	d013      	beq.n	800b38a <HAL_TIM_PWM_Start+0x13e>
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	4a32      	ldr	r2, [pc, #200]	; (800b430 <HAL_TIM_PWM_Start+0x1e4>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d00e      	beq.n	800b38a <HAL_TIM_PWM_Start+0x13e>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	4a30      	ldr	r2, [pc, #192]	; (800b434 <HAL_TIM_PWM_Start+0x1e8>)
 800b372:	4293      	cmp	r3, r2
 800b374:	d009      	beq.n	800b38a <HAL_TIM_PWM_Start+0x13e>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	4a2f      	ldr	r2, [pc, #188]	; (800b438 <HAL_TIM_PWM_Start+0x1ec>)
 800b37c:	4293      	cmp	r3, r2
 800b37e:	d004      	beq.n	800b38a <HAL_TIM_PWM_Start+0x13e>
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	4a2d      	ldr	r2, [pc, #180]	; (800b43c <HAL_TIM_PWM_Start+0x1f0>)
 800b386:	4293      	cmp	r3, r2
 800b388:	d101      	bne.n	800b38e <HAL_TIM_PWM_Start+0x142>
 800b38a:	2301      	movs	r3, #1
 800b38c:	e000      	b.n	800b390 <HAL_TIM_PWM_Start+0x144>
 800b38e:	2300      	movs	r3, #0
 800b390:	2b00      	cmp	r3, #0
 800b392:	d007      	beq.n	800b3a4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800b3a2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	4a20      	ldr	r2, [pc, #128]	; (800b42c <HAL_TIM_PWM_Start+0x1e0>)
 800b3aa:	4293      	cmp	r3, r2
 800b3ac:	d018      	beq.n	800b3e0 <HAL_TIM_PWM_Start+0x194>
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3b6:	d013      	beq.n	800b3e0 <HAL_TIM_PWM_Start+0x194>
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	4a20      	ldr	r2, [pc, #128]	; (800b440 <HAL_TIM_PWM_Start+0x1f4>)
 800b3be:	4293      	cmp	r3, r2
 800b3c0:	d00e      	beq.n	800b3e0 <HAL_TIM_PWM_Start+0x194>
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a1f      	ldr	r2, [pc, #124]	; (800b444 <HAL_TIM_PWM_Start+0x1f8>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d009      	beq.n	800b3e0 <HAL_TIM_PWM_Start+0x194>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a17      	ldr	r2, [pc, #92]	; (800b430 <HAL_TIM_PWM_Start+0x1e4>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d004      	beq.n	800b3e0 <HAL_TIM_PWM_Start+0x194>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a16      	ldr	r2, [pc, #88]	; (800b434 <HAL_TIM_PWM_Start+0x1e8>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d115      	bne.n	800b40c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	689a      	ldr	r2, [r3, #8]
 800b3e6:	4b18      	ldr	r3, [pc, #96]	; (800b448 <HAL_TIM_PWM_Start+0x1fc>)
 800b3e8:	4013      	ands	r3, r2
 800b3ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2b06      	cmp	r3, #6
 800b3f0:	d015      	beq.n	800b41e <HAL_TIM_PWM_Start+0x1d2>
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3f8:	d011      	beq.n	800b41e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	681a      	ldr	r2, [r3, #0]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f042 0201 	orr.w	r2, r2, #1
 800b408:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b40a:	e008      	b.n	800b41e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	681a      	ldr	r2, [r3, #0]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	f042 0201 	orr.w	r2, r2, #1
 800b41a:	601a      	str	r2, [r3, #0]
 800b41c:	e000      	b.n	800b420 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b41e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b420:	2300      	movs	r3, #0
}
 800b422:	4618      	mov	r0, r3
 800b424:	3710      	adds	r7, #16
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	40012c00 	.word	0x40012c00
 800b430:	40013400 	.word	0x40013400
 800b434:	40014000 	.word	0x40014000
 800b438:	40014400 	.word	0x40014400
 800b43c:	40014800 	.word	0x40014800
 800b440:	40000400 	.word	0x40000400
 800b444:	40000800 	.word	0x40000800
 800b448:	00010007 	.word	0x00010007

0800b44c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b082      	sub	sp, #8
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	f003 0302 	and.w	r3, r3, #2
 800b45e:	2b02      	cmp	r3, #2
 800b460:	d122      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	68db      	ldr	r3, [r3, #12]
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b02      	cmp	r3, #2
 800b46e:	d11b      	bne.n	800b4a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	f06f 0202 	mvn.w	r2, #2
 800b478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	2201      	movs	r2, #1
 800b47e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	699b      	ldr	r3, [r3, #24]
 800b486:	f003 0303 	and.w	r3, r3, #3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d003      	beq.n	800b496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fb76 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800b494:	e005      	b.n	800b4a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fb68 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 fb79 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	681b      	ldr	r3, [r3, #0]
 800b4ac:	691b      	ldr	r3, [r3, #16]
 800b4ae:	f003 0304 	and.w	r3, r3, #4
 800b4b2:	2b04      	cmp	r3, #4
 800b4b4:	d122      	bne.n	800b4fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	68db      	ldr	r3, [r3, #12]
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b04      	cmp	r3, #4
 800b4c2:	d11b      	bne.n	800b4fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f06f 0204 	mvn.w	r2, #4
 800b4cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2202      	movs	r2, #2
 800b4d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	699b      	ldr	r3, [r3, #24]
 800b4da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d003      	beq.n	800b4ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fb4c 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800b4e8:	e005      	b.n	800b4f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b4ea:	6878      	ldr	r0, [r7, #4]
 800b4ec:	f000 fb3e 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 fb4f 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2200      	movs	r2, #0
 800b4fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	691b      	ldr	r3, [r3, #16]
 800b502:	f003 0308 	and.w	r3, r3, #8
 800b506:	2b08      	cmp	r3, #8
 800b508:	d122      	bne.n	800b550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	68db      	ldr	r3, [r3, #12]
 800b510:	f003 0308 	and.w	r3, r3, #8
 800b514:	2b08      	cmp	r3, #8
 800b516:	d11b      	bne.n	800b550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	f06f 0208 	mvn.w	r2, #8
 800b520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2204      	movs	r2, #4
 800b526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	69db      	ldr	r3, [r3, #28]
 800b52e:	f003 0303 	and.w	r3, r3, #3
 800b532:	2b00      	cmp	r3, #0
 800b534:	d003      	beq.n	800b53e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b536:	6878      	ldr	r0, [r7, #4]
 800b538:	f000 fb22 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800b53c:	e005      	b.n	800b54a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f000 fb14 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f000 fb25 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	2200      	movs	r2, #0
 800b54e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	691b      	ldr	r3, [r3, #16]
 800b556:	f003 0310 	and.w	r3, r3, #16
 800b55a:	2b10      	cmp	r3, #16
 800b55c:	d122      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	68db      	ldr	r3, [r3, #12]
 800b564:	f003 0310 	and.w	r3, r3, #16
 800b568:	2b10      	cmp	r3, #16
 800b56a:	d11b      	bne.n	800b5a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	f06f 0210 	mvn.w	r2, #16
 800b574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	2208      	movs	r2, #8
 800b57a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	69db      	ldr	r3, [r3, #28]
 800b582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b586:	2b00      	cmp	r3, #0
 800b588:	d003      	beq.n	800b592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 faf8 	bl	800bb80 <HAL_TIM_IC_CaptureCallback>
 800b590:	e005      	b.n	800b59e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	f000 faea 	bl	800bb6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b598:	6878      	ldr	r0, [r7, #4]
 800b59a:	f000 fafb 	bl	800bb94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	691b      	ldr	r3, [r3, #16]
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d10e      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68db      	ldr	r3, [r3, #12]
 800b5b8:	f003 0301 	and.w	r3, r3, #1
 800b5bc:	2b01      	cmp	r3, #1
 800b5be:	d107      	bne.n	800b5d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	f06f 0201 	mvn.w	r2, #1
 800b5c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f000 fac4 	bl	800bb58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5da:	2b80      	cmp	r3, #128	; 0x80
 800b5dc:	d10e      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5e8:	2b80      	cmp	r3, #128	; 0x80
 800b5ea:	d107      	bne.n	800b5fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b5f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b5f6:	6878      	ldr	r0, [r7, #4]
 800b5f8:	f001 f91b 	bl	800c832 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	691b      	ldr	r3, [r3, #16]
 800b602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b60a:	d10e      	bne.n	800b62a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	68db      	ldr	r3, [r3, #12]
 800b612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b616:	2b80      	cmp	r3, #128	; 0x80
 800b618:	d107      	bne.n	800b62a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f001 f90e 	bl	800c846 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	691b      	ldr	r3, [r3, #16]
 800b630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b634:	2b40      	cmp	r3, #64	; 0x40
 800b636:	d10e      	bne.n	800b656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	68db      	ldr	r3, [r3, #12]
 800b63e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b642:	2b40      	cmp	r3, #64	; 0x40
 800b644:	d107      	bne.n	800b656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b64e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	f000 faa9 	bl	800bba8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	691b      	ldr	r3, [r3, #16]
 800b65c:	f003 0320 	and.w	r3, r3, #32
 800b660:	2b20      	cmp	r3, #32
 800b662:	d10e      	bne.n	800b682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	68db      	ldr	r3, [r3, #12]
 800b66a:	f003 0320 	and.w	r3, r3, #32
 800b66e:	2b20      	cmp	r3, #32
 800b670:	d107      	bne.n	800b682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f06f 0220 	mvn.w	r2, #32
 800b67a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b67c:	6878      	ldr	r0, [r7, #4]
 800b67e:	f001 f8ce 	bl	800c81e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	691b      	ldr	r3, [r3, #16]
 800b688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b68c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b690:	d10f      	bne.n	800b6b2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68db      	ldr	r3, [r3, #12]
 800b698:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b69c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b6a0:	d107      	bne.n	800b6b2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b6aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f001 f8d4 	bl	800c85a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6c0:	d10f      	bne.n	800b6e2 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	68db      	ldr	r3, [r3, #12]
 800b6c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b6cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b6d0:	d107      	bne.n	800b6e2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b6da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b6dc:	6878      	ldr	r0, [r7, #4]
 800b6de:	f001 f8c6 	bl	800c86e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	691b      	ldr	r3, [r3, #16]
 800b6e8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6ec:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b6f0:	d10f      	bne.n	800b712 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	68db      	ldr	r3, [r3, #12]
 800b6f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b6fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b700:	d107      	bne.n	800b712 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b70a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f001 f8b8 	bl	800c882 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	691b      	ldr	r3, [r3, #16]
 800b718:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b71c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b720:	d10f      	bne.n	800b742 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	68db      	ldr	r3, [r3, #12]
 800b728:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b72c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b730:	d107      	bne.n	800b742 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800b73a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f001 f8aa 	bl	800c896 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800b742:	bf00      	nop
 800b744:	3708      	adds	r7, #8
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}
	...

0800b74c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b084      	sub	sp, #16
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b75e:	2b01      	cmp	r3, #1
 800b760:	d101      	bne.n	800b766 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800b762:	2302      	movs	r3, #2
 800b764:	e0fd      	b.n	800b962 <HAL_TIM_PWM_ConfigChannel+0x216>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	2201      	movs	r2, #1
 800b76a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	2b14      	cmp	r3, #20
 800b772:	f200 80f0 	bhi.w	800b956 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800b776:	a201      	add	r2, pc, #4	; (adr r2, 800b77c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800b778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b77c:	0800b7d1 	.word	0x0800b7d1
 800b780:	0800b957 	.word	0x0800b957
 800b784:	0800b957 	.word	0x0800b957
 800b788:	0800b957 	.word	0x0800b957
 800b78c:	0800b811 	.word	0x0800b811
 800b790:	0800b957 	.word	0x0800b957
 800b794:	0800b957 	.word	0x0800b957
 800b798:	0800b957 	.word	0x0800b957
 800b79c:	0800b853 	.word	0x0800b853
 800b7a0:	0800b957 	.word	0x0800b957
 800b7a4:	0800b957 	.word	0x0800b957
 800b7a8:	0800b957 	.word	0x0800b957
 800b7ac:	0800b893 	.word	0x0800b893
 800b7b0:	0800b957 	.word	0x0800b957
 800b7b4:	0800b957 	.word	0x0800b957
 800b7b8:	0800b957 	.word	0x0800b957
 800b7bc:	0800b8d5 	.word	0x0800b8d5
 800b7c0:	0800b957 	.word	0x0800b957
 800b7c4:	0800b957 	.word	0x0800b957
 800b7c8:	0800b957 	.word	0x0800b957
 800b7cc:	0800b915 	.word	0x0800b915
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	68b9      	ldr	r1, [r7, #8]
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f000 fa80 	bl	800bcdc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	699a      	ldr	r2, [r3, #24]
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f042 0208 	orr.w	r2, r2, #8
 800b7ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	699a      	ldr	r2, [r3, #24]
 800b7f2:	68fb      	ldr	r3, [r7, #12]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	f022 0204 	bic.w	r2, r2, #4
 800b7fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	6999      	ldr	r1, [r3, #24]
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	691a      	ldr	r2, [r3, #16]
 800b806:	68fb      	ldr	r3, [r7, #12]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	430a      	orrs	r2, r1
 800b80c:	619a      	str	r2, [r3, #24]
      break;
 800b80e:	e0a3      	b.n	800b958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800b810:	68fb      	ldr	r3, [r7, #12]
 800b812:	681b      	ldr	r3, [r3, #0]
 800b814:	68b9      	ldr	r1, [r7, #8]
 800b816:	4618      	mov	r0, r3
 800b818:	f000 faf0 	bl	800bdfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	699a      	ldr	r2, [r3, #24]
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b82a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	699a      	ldr	r2, [r3, #24]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b83a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	6999      	ldr	r1, [r3, #24]
 800b842:	68bb      	ldr	r3, [r7, #8]
 800b844:	691b      	ldr	r3, [r3, #16]
 800b846:	021a      	lsls	r2, r3, #8
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	430a      	orrs	r2, r1
 800b84e:	619a      	str	r2, [r3, #24]
      break;
 800b850:	e082      	b.n	800b958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	68b9      	ldr	r1, [r7, #8]
 800b858:	4618      	mov	r0, r3
 800b85a:	f000 fb59 	bl	800bf10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	69da      	ldr	r2, [r3, #28]
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	f042 0208 	orr.w	r2, r2, #8
 800b86c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69da      	ldr	r2, [r3, #28]
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f022 0204 	bic.w	r2, r2, #4
 800b87c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	69d9      	ldr	r1, [r3, #28]
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	691a      	ldr	r2, [r3, #16]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	430a      	orrs	r2, r1
 800b88e:	61da      	str	r2, [r3, #28]
      break;
 800b890:	e062      	b.n	800b958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68b9      	ldr	r1, [r7, #8]
 800b898:	4618      	mov	r0, r3
 800b89a:	f000 fbc1 	bl	800c020 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	681b      	ldr	r3, [r3, #0]
 800b8a2:	69da      	ldr	r2, [r3, #28]
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b8ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	69da      	ldr	r2, [r3, #28]
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	681b      	ldr	r3, [r3, #0]
 800b8b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b8bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	69d9      	ldr	r1, [r3, #28]
 800b8c4:	68bb      	ldr	r3, [r7, #8]
 800b8c6:	691b      	ldr	r3, [r3, #16]
 800b8c8:	021a      	lsls	r2, r3, #8
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	430a      	orrs	r2, r1
 800b8d0:	61da      	str	r2, [r3, #28]
      break;
 800b8d2:	e041      	b.n	800b958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68b9      	ldr	r1, [r7, #8]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 fc2a 	bl	800c134 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f042 0208 	orr.w	r2, r2, #8
 800b8ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	f022 0204 	bic.w	r2, r2, #4
 800b8fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b906:	68bb      	ldr	r3, [r7, #8]
 800b908:	691a      	ldr	r2, [r3, #16]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	430a      	orrs	r2, r1
 800b910:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b912:	e021      	b.n	800b958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	68b9      	ldr	r1, [r7, #8]
 800b91a:	4618      	mov	r0, r3
 800b91c:	f000 fc6e 	bl	800c1fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800b92e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b93e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800b946:	68bb      	ldr	r3, [r7, #8]
 800b948:	691b      	ldr	r3, [r3, #16]
 800b94a:	021a      	lsls	r2, r3, #8
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	430a      	orrs	r2, r1
 800b952:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800b954:	e000      	b.n	800b958 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800b956:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800b958:	68fb      	ldr	r3, [r7, #12]
 800b95a:	2200      	movs	r2, #0
 800b95c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b960:	2300      	movs	r3, #0
}
 800b962:	4618      	mov	r0, r3
 800b964:	3710      	adds	r7, #16
 800b966:	46bd      	mov	sp, r7
 800b968:	bd80      	pop	{r7, pc}
 800b96a:	bf00      	nop

0800b96c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b97c:	2b01      	cmp	r3, #1
 800b97e:	d101      	bne.n	800b984 <HAL_TIM_ConfigClockSource+0x18>
 800b980:	2302      	movs	r3, #2
 800b982:	e0dd      	b.n	800bb40 <HAL_TIM_ConfigClockSource+0x1d4>
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	2201      	movs	r2, #1
 800b988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	2202      	movs	r2, #2
 800b990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800b99c:	68fb      	ldr	r3, [r7, #12]
 800b99e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b9a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b9a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b9ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	68fa      	ldr	r2, [r7, #12]
 800b9b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	4a62      	ldr	r2, [pc, #392]	; (800bb48 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b9be:	4293      	cmp	r3, r2
 800b9c0:	f000 80a9 	beq.w	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9c4:	4a60      	ldr	r2, [pc, #384]	; (800bb48 <HAL_TIM_ConfigClockSource+0x1dc>)
 800b9c6:	4293      	cmp	r3, r2
 800b9c8:	f200 80ae 	bhi.w	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9cc:	4a5f      	ldr	r2, [pc, #380]	; (800bb4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	f000 80a1 	beq.w	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9d4:	4a5d      	ldr	r2, [pc, #372]	; (800bb4c <HAL_TIM_ConfigClockSource+0x1e0>)
 800b9d6:	4293      	cmp	r3, r2
 800b9d8:	f200 80a6 	bhi.w	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9dc:	4a5c      	ldr	r2, [pc, #368]	; (800bb50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9de:	4293      	cmp	r3, r2
 800b9e0:	f000 8099 	beq.w	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9e4:	4a5a      	ldr	r2, [pc, #360]	; (800bb50 <HAL_TIM_ConfigClockSource+0x1e4>)
 800b9e6:	4293      	cmp	r3, r2
 800b9e8:	f200 809e 	bhi.w	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9ec:	4a59      	ldr	r2, [pc, #356]	; (800bb54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9ee:	4293      	cmp	r3, r2
 800b9f0:	f000 8091 	beq.w	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800b9f4:	4a57      	ldr	r2, [pc, #348]	; (800bb54 <HAL_TIM_ConfigClockSource+0x1e8>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	f200 8096 	bhi.w	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800b9fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba00:	f000 8089 	beq.w	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800ba08:	f200 808e 	bhi.w	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba10:	d03e      	beq.n	800ba90 <HAL_TIM_ConfigClockSource+0x124>
 800ba12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba16:	f200 8087 	bhi.w	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba1e:	f000 8085 	beq.w	800bb2c <HAL_TIM_ConfigClockSource+0x1c0>
 800ba22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba26:	d87f      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba28:	2b70      	cmp	r3, #112	; 0x70
 800ba2a:	d01a      	beq.n	800ba62 <HAL_TIM_ConfigClockSource+0xf6>
 800ba2c:	2b70      	cmp	r3, #112	; 0x70
 800ba2e:	d87b      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba30:	2b60      	cmp	r3, #96	; 0x60
 800ba32:	d050      	beq.n	800bad6 <HAL_TIM_ConfigClockSource+0x16a>
 800ba34:	2b60      	cmp	r3, #96	; 0x60
 800ba36:	d877      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba38:	2b50      	cmp	r3, #80	; 0x50
 800ba3a:	d03c      	beq.n	800bab6 <HAL_TIM_ConfigClockSource+0x14a>
 800ba3c:	2b50      	cmp	r3, #80	; 0x50
 800ba3e:	d873      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba40:	2b40      	cmp	r3, #64	; 0x40
 800ba42:	d058      	beq.n	800baf6 <HAL_TIM_ConfigClockSource+0x18a>
 800ba44:	2b40      	cmp	r3, #64	; 0x40
 800ba46:	d86f      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba48:	2b30      	cmp	r3, #48	; 0x30
 800ba4a:	d064      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba4c:	2b30      	cmp	r3, #48	; 0x30
 800ba4e:	d86b      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba50:	2b20      	cmp	r3, #32
 800ba52:	d060      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba54:	2b20      	cmp	r3, #32
 800ba56:	d867      	bhi.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	d05c      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
 800ba5c:	2b10      	cmp	r3, #16
 800ba5e:	d05a      	beq.n	800bb16 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800ba60:	e062      	b.n	800bb28 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	6818      	ldr	r0, [r3, #0]
 800ba66:	683b      	ldr	r3, [r7, #0]
 800ba68:	6899      	ldr	r1, [r3, #8]
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	685a      	ldr	r2, [r3, #4]
 800ba6e:	683b      	ldr	r3, [r7, #0]
 800ba70:	68db      	ldr	r3, [r3, #12]
 800ba72:	f000 fca5 	bl	800c3c0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	689b      	ldr	r3, [r3, #8]
 800ba7c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ba84:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	68fa      	ldr	r2, [r7, #12]
 800ba8c:	609a      	str	r2, [r3, #8]
      break;
 800ba8e:	e04e      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	6818      	ldr	r0, [r3, #0]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	6899      	ldr	r1, [r3, #8]
 800ba98:	683b      	ldr	r3, [r7, #0]
 800ba9a:	685a      	ldr	r2, [r3, #4]
 800ba9c:	683b      	ldr	r3, [r7, #0]
 800ba9e:	68db      	ldr	r3, [r3, #12]
 800baa0:	f000 fc8e 	bl	800c3c0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	689a      	ldr	r2, [r3, #8]
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bab2:	609a      	str	r2, [r3, #8]
      break;
 800bab4:	e03b      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	6818      	ldr	r0, [r3, #0]
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	6859      	ldr	r1, [r3, #4]
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	68db      	ldr	r3, [r3, #12]
 800bac2:	461a      	mov	r2, r3
 800bac4:	f000 fc00 	bl	800c2c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	681b      	ldr	r3, [r3, #0]
 800bacc:	2150      	movs	r1, #80	; 0x50
 800bace:	4618      	mov	r0, r3
 800bad0:	f000 fc59 	bl	800c386 <TIM_ITRx_SetConfig>
      break;
 800bad4:	e02b      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	6818      	ldr	r0, [r3, #0]
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	6859      	ldr	r1, [r3, #4]
 800bade:	683b      	ldr	r3, [r7, #0]
 800bae0:	68db      	ldr	r3, [r3, #12]
 800bae2:	461a      	mov	r2, r3
 800bae4:	f000 fc1f 	bl	800c326 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	2160      	movs	r1, #96	; 0x60
 800baee:	4618      	mov	r0, r3
 800baf0:	f000 fc49 	bl	800c386 <TIM_ITRx_SetConfig>
      break;
 800baf4:	e01b      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	6818      	ldr	r0, [r3, #0]
 800bafa:	683b      	ldr	r3, [r7, #0]
 800bafc:	6859      	ldr	r1, [r3, #4]
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	68db      	ldr	r3, [r3, #12]
 800bb02:	461a      	mov	r2, r3
 800bb04:	f000 fbe0 	bl	800c2c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	2140      	movs	r1, #64	; 0x40
 800bb0e:	4618      	mov	r0, r3
 800bb10:	f000 fc39 	bl	800c386 <TIM_ITRx_SetConfig>
      break;
 800bb14:	e00b      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4610      	mov	r0, r2
 800bb22:	f000 fc30 	bl	800c386 <TIM_ITRx_SetConfig>
        break;
 800bb26:	e002      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800bb28:	bf00      	nop
 800bb2a:	e000      	b.n	800bb2e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800bb2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	2201      	movs	r2, #1
 800bb32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bb36:	687b      	ldr	r3, [r7, #4]
 800bb38:	2200      	movs	r2, #0
 800bb3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bb3e:	2300      	movs	r3, #0
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	3710      	adds	r7, #16
 800bb44:	46bd      	mov	sp, r7
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	00100070 	.word	0x00100070
 800bb4c:	00100040 	.word	0x00100040
 800bb50:	00100030 	.word	0x00100030
 800bb54:	00100020 	.word	0x00100020

0800bb58 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb58:	b480      	push	{r7}
 800bb5a:	b083      	sub	sp, #12
 800bb5c:	af00      	add	r7, sp, #0
 800bb5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bb60:	bf00      	nop
 800bb62:	370c      	adds	r7, #12
 800bb64:	46bd      	mov	sp, r7
 800bb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb6a:	4770      	bx	lr

0800bb6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	4a3c      	ldr	r2, [pc, #240]	; (800bcc0 <TIM_Base_SetConfig+0x104>)
 800bbd0:	4293      	cmp	r3, r2
 800bbd2:	d00f      	beq.n	800bbf4 <TIM_Base_SetConfig+0x38>
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bbda:	d00b      	beq.n	800bbf4 <TIM_Base_SetConfig+0x38>
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	4a39      	ldr	r2, [pc, #228]	; (800bcc4 <TIM_Base_SetConfig+0x108>)
 800bbe0:	4293      	cmp	r3, r2
 800bbe2:	d007      	beq.n	800bbf4 <TIM_Base_SetConfig+0x38>
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	4a38      	ldr	r2, [pc, #224]	; (800bcc8 <TIM_Base_SetConfig+0x10c>)
 800bbe8:	4293      	cmp	r3, r2
 800bbea:	d003      	beq.n	800bbf4 <TIM_Base_SetConfig+0x38>
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	4a37      	ldr	r2, [pc, #220]	; (800bccc <TIM_Base_SetConfig+0x110>)
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d108      	bne.n	800bc06 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bbfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bbfc:	683b      	ldr	r3, [r7, #0]
 800bbfe:	685b      	ldr	r3, [r3, #4]
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4313      	orrs	r3, r2
 800bc04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	4a2d      	ldr	r2, [pc, #180]	; (800bcc0 <TIM_Base_SetConfig+0x104>)
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d01b      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc14:	d017      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	4a2a      	ldr	r2, [pc, #168]	; (800bcc4 <TIM_Base_SetConfig+0x108>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d013      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	4a29      	ldr	r2, [pc, #164]	; (800bcc8 <TIM_Base_SetConfig+0x10c>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d00f      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	4a28      	ldr	r2, [pc, #160]	; (800bccc <TIM_Base_SetConfig+0x110>)
 800bc2a:	4293      	cmp	r3, r2
 800bc2c:	d00b      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	4a27      	ldr	r2, [pc, #156]	; (800bcd0 <TIM_Base_SetConfig+0x114>)
 800bc32:	4293      	cmp	r3, r2
 800bc34:	d007      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	4a26      	ldr	r2, [pc, #152]	; (800bcd4 <TIM_Base_SetConfig+0x118>)
 800bc3a:	4293      	cmp	r3, r2
 800bc3c:	d003      	beq.n	800bc46 <TIM_Base_SetConfig+0x8a>
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	4a25      	ldr	r2, [pc, #148]	; (800bcd8 <TIM_Base_SetConfig+0x11c>)
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d108      	bne.n	800bc58 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc4c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	68db      	ldr	r3, [r3, #12]
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	4313      	orrs	r3, r2
 800bc56:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bc5e:	683b      	ldr	r3, [r7, #0]
 800bc60:	695b      	ldr	r3, [r3, #20]
 800bc62:	4313      	orrs	r3, r2
 800bc64:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	689a      	ldr	r2, [r3, #8]
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bc74:	683b      	ldr	r3, [r7, #0]
 800bc76:	681a      	ldr	r2, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a10      	ldr	r2, [pc, #64]	; (800bcc0 <TIM_Base_SetConfig+0x104>)
 800bc80:	4293      	cmp	r3, r2
 800bc82:	d00f      	beq.n	800bca4 <TIM_Base_SetConfig+0xe8>
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	4a11      	ldr	r2, [pc, #68]	; (800bccc <TIM_Base_SetConfig+0x110>)
 800bc88:	4293      	cmp	r3, r2
 800bc8a:	d00b      	beq.n	800bca4 <TIM_Base_SetConfig+0xe8>
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	4a10      	ldr	r2, [pc, #64]	; (800bcd0 <TIM_Base_SetConfig+0x114>)
 800bc90:	4293      	cmp	r3, r2
 800bc92:	d007      	beq.n	800bca4 <TIM_Base_SetConfig+0xe8>
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	4a0f      	ldr	r2, [pc, #60]	; (800bcd4 <TIM_Base_SetConfig+0x118>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d003      	beq.n	800bca4 <TIM_Base_SetConfig+0xe8>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	4a0e      	ldr	r2, [pc, #56]	; (800bcd8 <TIM_Base_SetConfig+0x11c>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d103      	bne.n	800bcac <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	691a      	ldr	r2, [r3, #16]
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	2201      	movs	r2, #1
 800bcb0:	615a      	str	r2, [r3, #20]
}
 800bcb2:	bf00      	nop
 800bcb4:	3714      	adds	r7, #20
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbc:	4770      	bx	lr
 800bcbe:	bf00      	nop
 800bcc0:	40012c00 	.word	0x40012c00
 800bcc4:	40000400 	.word	0x40000400
 800bcc8:	40000800 	.word	0x40000800
 800bccc:	40013400 	.word	0x40013400
 800bcd0:	40014000 	.word	0x40014000
 800bcd4:	40014400 	.word	0x40014400
 800bcd8:	40014800 	.word	0x40014800

0800bcdc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b087      	sub	sp, #28
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6a1b      	ldr	r3, [r3, #32]
 800bcea:	f023 0201 	bic.w	r2, r3, #1
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6a1b      	ldr	r3, [r3, #32]
 800bcf6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bd0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	f023 0303 	bic.w	r3, r3, #3
 800bd16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	68fa      	ldr	r2, [r7, #12]
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800bd22:	697b      	ldr	r3, [r7, #20]
 800bd24:	f023 0302 	bic.w	r3, r3, #2
 800bd28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	689b      	ldr	r3, [r3, #8]
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	4313      	orrs	r3, r2
 800bd32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	4a2c      	ldr	r2, [pc, #176]	; (800bde8 <TIM_OC1_SetConfig+0x10c>)
 800bd38:	4293      	cmp	r3, r2
 800bd3a:	d00f      	beq.n	800bd5c <TIM_OC1_SetConfig+0x80>
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	4a2b      	ldr	r2, [pc, #172]	; (800bdec <TIM_OC1_SetConfig+0x110>)
 800bd40:	4293      	cmp	r3, r2
 800bd42:	d00b      	beq.n	800bd5c <TIM_OC1_SetConfig+0x80>
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	4a2a      	ldr	r2, [pc, #168]	; (800bdf0 <TIM_OC1_SetConfig+0x114>)
 800bd48:	4293      	cmp	r3, r2
 800bd4a:	d007      	beq.n	800bd5c <TIM_OC1_SetConfig+0x80>
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	4a29      	ldr	r2, [pc, #164]	; (800bdf4 <TIM_OC1_SetConfig+0x118>)
 800bd50:	4293      	cmp	r3, r2
 800bd52:	d003      	beq.n	800bd5c <TIM_OC1_SetConfig+0x80>
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	4a28      	ldr	r2, [pc, #160]	; (800bdf8 <TIM_OC1_SetConfig+0x11c>)
 800bd58:	4293      	cmp	r3, r2
 800bd5a:	d10c      	bne.n	800bd76 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800bd5c:	697b      	ldr	r3, [r7, #20]
 800bd5e:	f023 0308 	bic.w	r3, r3, #8
 800bd62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	68db      	ldr	r3, [r3, #12]
 800bd68:	697a      	ldr	r2, [r7, #20]
 800bd6a:	4313      	orrs	r3, r2
 800bd6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800bd6e:	697b      	ldr	r3, [r7, #20]
 800bd70:	f023 0304 	bic.w	r3, r3, #4
 800bd74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a1b      	ldr	r2, [pc, #108]	; (800bde8 <TIM_OC1_SetConfig+0x10c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d00f      	beq.n	800bd9e <TIM_OC1_SetConfig+0xc2>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a1a      	ldr	r2, [pc, #104]	; (800bdec <TIM_OC1_SetConfig+0x110>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d00b      	beq.n	800bd9e <TIM_OC1_SetConfig+0xc2>
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	4a19      	ldr	r2, [pc, #100]	; (800bdf0 <TIM_OC1_SetConfig+0x114>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d007      	beq.n	800bd9e <TIM_OC1_SetConfig+0xc2>
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	4a18      	ldr	r2, [pc, #96]	; (800bdf4 <TIM_OC1_SetConfig+0x118>)
 800bd92:	4293      	cmp	r3, r2
 800bd94:	d003      	beq.n	800bd9e <TIM_OC1_SetConfig+0xc2>
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	4a17      	ldr	r2, [pc, #92]	; (800bdf8 <TIM_OC1_SetConfig+0x11c>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d111      	bne.n	800bdc2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800bd9e:	693b      	ldr	r3, [r7, #16]
 800bda0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bda4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800bda6:	693b      	ldr	r3, [r7, #16]
 800bda8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bdac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	695b      	ldr	r3, [r3, #20]
 800bdb2:	693a      	ldr	r2, [r7, #16]
 800bdb4:	4313      	orrs	r3, r2
 800bdb6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	699b      	ldr	r3, [r3, #24]
 800bdbc:	693a      	ldr	r2, [r7, #16]
 800bdbe:	4313      	orrs	r3, r2
 800bdc0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	693a      	ldr	r2, [r7, #16]
 800bdc6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	68fa      	ldr	r2, [r7, #12]
 800bdcc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	685a      	ldr	r2, [r3, #4]
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	697a      	ldr	r2, [r7, #20]
 800bdda:	621a      	str	r2, [r3, #32]
}
 800bddc:	bf00      	nop
 800bdde:	371c      	adds	r7, #28
 800bde0:	46bd      	mov	sp, r7
 800bde2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde6:	4770      	bx	lr
 800bde8:	40012c00 	.word	0x40012c00
 800bdec:	40013400 	.word	0x40013400
 800bdf0:	40014000 	.word	0x40014000
 800bdf4:	40014400 	.word	0x40014400
 800bdf8:	40014800 	.word	0x40014800

0800bdfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bdfc:	b480      	push	{r7}
 800bdfe:	b087      	sub	sp, #28
 800be00:	af00      	add	r7, sp, #0
 800be02:	6078      	str	r0, [r7, #4]
 800be04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6a1b      	ldr	r3, [r3, #32]
 800be0a:	f023 0210 	bic.w	r2, r3, #16
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	6a1b      	ldr	r3, [r3, #32]
 800be16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	685b      	ldr	r3, [r3, #4]
 800be1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	699b      	ldr	r3, [r3, #24]
 800be22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800be2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800be38:	683b      	ldr	r3, [r7, #0]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	021b      	lsls	r3, r3, #8
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	4313      	orrs	r3, r2
 800be42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	f023 0320 	bic.w	r3, r3, #32
 800be4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800be4c:	683b      	ldr	r3, [r7, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	011b      	lsls	r3, r3, #4
 800be52:	697a      	ldr	r2, [r7, #20]
 800be54:	4313      	orrs	r3, r2
 800be56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	4a28      	ldr	r2, [pc, #160]	; (800befc <TIM_OC2_SetConfig+0x100>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d003      	beq.n	800be68 <TIM_OC2_SetConfig+0x6c>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	4a27      	ldr	r2, [pc, #156]	; (800bf00 <TIM_OC2_SetConfig+0x104>)
 800be64:	4293      	cmp	r3, r2
 800be66:	d10d      	bne.n	800be84 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800be68:	697b      	ldr	r3, [r7, #20]
 800be6a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	68db      	ldr	r3, [r3, #12]
 800be74:	011b      	lsls	r3, r3, #4
 800be76:	697a      	ldr	r2, [r7, #20]
 800be78:	4313      	orrs	r3, r2
 800be7a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800be7c:	697b      	ldr	r3, [r7, #20]
 800be7e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be82:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	4a1d      	ldr	r2, [pc, #116]	; (800befc <TIM_OC2_SetConfig+0x100>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d00f      	beq.n	800beac <TIM_OC2_SetConfig+0xb0>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	4a1c      	ldr	r2, [pc, #112]	; (800bf00 <TIM_OC2_SetConfig+0x104>)
 800be90:	4293      	cmp	r3, r2
 800be92:	d00b      	beq.n	800beac <TIM_OC2_SetConfig+0xb0>
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	4a1b      	ldr	r2, [pc, #108]	; (800bf04 <TIM_OC2_SetConfig+0x108>)
 800be98:	4293      	cmp	r3, r2
 800be9a:	d007      	beq.n	800beac <TIM_OC2_SetConfig+0xb0>
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	4a1a      	ldr	r2, [pc, #104]	; (800bf08 <TIM_OC2_SetConfig+0x10c>)
 800bea0:	4293      	cmp	r3, r2
 800bea2:	d003      	beq.n	800beac <TIM_OC2_SetConfig+0xb0>
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a19      	ldr	r2, [pc, #100]	; (800bf0c <TIM_OC2_SetConfig+0x110>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d113      	bne.n	800bed4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800beb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800beb4:	693b      	ldr	r3, [r7, #16]
 800beb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800beba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	695b      	ldr	r3, [r3, #20]
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	693a      	ldr	r2, [r7, #16]
 800bec4:	4313      	orrs	r3, r2
 800bec6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800bec8:	683b      	ldr	r3, [r7, #0]
 800beca:	699b      	ldr	r3, [r3, #24]
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	4313      	orrs	r3, r2
 800bed2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	693a      	ldr	r2, [r7, #16]
 800bed8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	68fa      	ldr	r2, [r7, #12]
 800bede:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	685a      	ldr	r2, [r3, #4]
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	697a      	ldr	r2, [r7, #20]
 800beec:	621a      	str	r2, [r3, #32]
}
 800beee:	bf00      	nop
 800bef0:	371c      	adds	r7, #28
 800bef2:	46bd      	mov	sp, r7
 800bef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef8:	4770      	bx	lr
 800befa:	bf00      	nop
 800befc:	40012c00 	.word	0x40012c00
 800bf00:	40013400 	.word	0x40013400
 800bf04:	40014000 	.word	0x40014000
 800bf08:	40014400 	.word	0x40014400
 800bf0c:	40014800 	.word	0x40014800

0800bf10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b087      	sub	sp, #28
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	6a1b      	ldr	r3, [r3, #32]
 800bf1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	6a1b      	ldr	r3, [r3, #32]
 800bf2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	685b      	ldr	r3, [r3, #4]
 800bf30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	69db      	ldr	r3, [r3, #28]
 800bf36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bf3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800bf56:	697b      	ldr	r3, [r7, #20]
 800bf58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bf5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	021b      	lsls	r3, r3, #8
 800bf64:	697a      	ldr	r2, [r7, #20]
 800bf66:	4313      	orrs	r3, r2
 800bf68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	4a27      	ldr	r2, [pc, #156]	; (800c00c <TIM_OC3_SetConfig+0xfc>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d003      	beq.n	800bf7a <TIM_OC3_SetConfig+0x6a>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	4a26      	ldr	r2, [pc, #152]	; (800c010 <TIM_OC3_SetConfig+0x100>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d10d      	bne.n	800bf96 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800bf80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800bf82:	683b      	ldr	r3, [r7, #0]
 800bf84:	68db      	ldr	r3, [r3, #12]
 800bf86:	021b      	lsls	r3, r3, #8
 800bf88:	697a      	ldr	r2, [r7, #20]
 800bf8a:	4313      	orrs	r3, r2
 800bf8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800bf8e:	697b      	ldr	r3, [r7, #20]
 800bf90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800bf94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	4a1c      	ldr	r2, [pc, #112]	; (800c00c <TIM_OC3_SetConfig+0xfc>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d00f      	beq.n	800bfbe <TIM_OC3_SetConfig+0xae>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	4a1b      	ldr	r2, [pc, #108]	; (800c010 <TIM_OC3_SetConfig+0x100>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d00b      	beq.n	800bfbe <TIM_OC3_SetConfig+0xae>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	4a1a      	ldr	r2, [pc, #104]	; (800c014 <TIM_OC3_SetConfig+0x104>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d007      	beq.n	800bfbe <TIM_OC3_SetConfig+0xae>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	4a19      	ldr	r2, [pc, #100]	; (800c018 <TIM_OC3_SetConfig+0x108>)
 800bfb2:	4293      	cmp	r3, r2
 800bfb4:	d003      	beq.n	800bfbe <TIM_OC3_SetConfig+0xae>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	4a18      	ldr	r2, [pc, #96]	; (800c01c <TIM_OC3_SetConfig+0x10c>)
 800bfba:	4293      	cmp	r3, r2
 800bfbc:	d113      	bne.n	800bfe6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800bfbe:	693b      	ldr	r3, [r7, #16]
 800bfc0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800bfcc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	695b      	ldr	r3, [r3, #20]
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800bfda:	683b      	ldr	r3, [r7, #0]
 800bfdc:	699b      	ldr	r3, [r3, #24]
 800bfde:	011b      	lsls	r3, r3, #4
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	693a      	ldr	r2, [r7, #16]
 800bfea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800bfec:	687b      	ldr	r3, [r7, #4]
 800bfee:	68fa      	ldr	r2, [r7, #12]
 800bff0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800bff2:	683b      	ldr	r3, [r7, #0]
 800bff4:	685a      	ldr	r2, [r3, #4]
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	697a      	ldr	r2, [r7, #20]
 800bffe:	621a      	str	r2, [r3, #32]
}
 800c000:	bf00      	nop
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	40012c00 	.word	0x40012c00
 800c010:	40013400 	.word	0x40013400
 800c014:	40014000 	.word	0x40014000
 800c018:	40014400 	.word	0x40014400
 800c01c:	40014800 	.word	0x40014800

0800c020 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800c020:	b480      	push	{r7}
 800c022:	b087      	sub	sp, #28
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6a1b      	ldr	r3, [r3, #32]
 800c02e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6a1b      	ldr	r3, [r3, #32]
 800c03a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	69db      	ldr	r3, [r3, #28]
 800c046:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c04e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800c054:	68fb      	ldr	r3, [r7, #12]
 800c056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c05a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c05c:	683b      	ldr	r3, [r7, #0]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	021b      	lsls	r3, r3, #8
 800c062:	68fa      	ldr	r2, [r7, #12]
 800c064:	4313      	orrs	r3, r2
 800c066:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800c068:	697b      	ldr	r3, [r7, #20]
 800c06a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800c06e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800c070:	683b      	ldr	r3, [r7, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	031b      	lsls	r3, r3, #12
 800c076:	697a      	ldr	r2, [r7, #20]
 800c078:	4313      	orrs	r3, r2
 800c07a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	4a28      	ldr	r2, [pc, #160]	; (800c120 <TIM_OC4_SetConfig+0x100>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d003      	beq.n	800c08c <TIM_OC4_SetConfig+0x6c>
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	4a27      	ldr	r2, [pc, #156]	; (800c124 <TIM_OC4_SetConfig+0x104>)
 800c088:	4293      	cmp	r3, r2
 800c08a:	d10d      	bne.n	800c0a8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c092:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800c094:	683b      	ldr	r3, [r7, #0]
 800c096:	68db      	ldr	r3, [r3, #12]
 800c098:	031b      	lsls	r3, r3, #12
 800c09a:	697a      	ldr	r2, [r7, #20]
 800c09c:	4313      	orrs	r3, r2
 800c09e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	4a1d      	ldr	r2, [pc, #116]	; (800c120 <TIM_OC4_SetConfig+0x100>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d00f      	beq.n	800c0d0 <TIM_OC4_SetConfig+0xb0>
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	4a1c      	ldr	r2, [pc, #112]	; (800c124 <TIM_OC4_SetConfig+0x104>)
 800c0b4:	4293      	cmp	r3, r2
 800c0b6:	d00b      	beq.n	800c0d0 <TIM_OC4_SetConfig+0xb0>
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	4a1b      	ldr	r2, [pc, #108]	; (800c128 <TIM_OC4_SetConfig+0x108>)
 800c0bc:	4293      	cmp	r3, r2
 800c0be:	d007      	beq.n	800c0d0 <TIM_OC4_SetConfig+0xb0>
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	4a1a      	ldr	r2, [pc, #104]	; (800c12c <TIM_OC4_SetConfig+0x10c>)
 800c0c4:	4293      	cmp	r3, r2
 800c0c6:	d003      	beq.n	800c0d0 <TIM_OC4_SetConfig+0xb0>
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	4a19      	ldr	r2, [pc, #100]	; (800c130 <TIM_OC4_SetConfig+0x110>)
 800c0cc:	4293      	cmp	r3, r2
 800c0ce:	d113      	bne.n	800c0f8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800c0d0:	693b      	ldr	r3, [r7, #16]
 800c0d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800c0d6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800c0d8:	693b      	ldr	r3, [r7, #16]
 800c0da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0de:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	695b      	ldr	r3, [r3, #20]
 800c0e4:	019b      	lsls	r3, r3, #6
 800c0e6:	693a      	ldr	r2, [r7, #16]
 800c0e8:	4313      	orrs	r3, r2
 800c0ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	699b      	ldr	r3, [r3, #24]
 800c0f0:	019b      	lsls	r3, r3, #6
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	693a      	ldr	r2, [r7, #16]
 800c0fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	685a      	ldr	r2, [r3, #4]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	697a      	ldr	r2, [r7, #20]
 800c110:	621a      	str	r2, [r3, #32]
}
 800c112:	bf00      	nop
 800c114:	371c      	adds	r7, #28
 800c116:	46bd      	mov	sp, r7
 800c118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11c:	4770      	bx	lr
 800c11e:	bf00      	nop
 800c120:	40012c00 	.word	0x40012c00
 800c124:	40013400 	.word	0x40013400
 800c128:	40014000 	.word	0x40014000
 800c12c:	40014400 	.word	0x40014400
 800c130:	40014800 	.word	0x40014800

0800c134 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c134:	b480      	push	{r7}
 800c136:	b087      	sub	sp, #28
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a1b      	ldr	r3, [r3, #32]
 800c142:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c15a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800c15c:	68fb      	ldr	r3, [r7, #12]
 800c15e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	4313      	orrs	r3, r2
 800c170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800c178:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800c17a:	683b      	ldr	r3, [r7, #0]
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	041b      	lsls	r3, r3, #16
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	4313      	orrs	r3, r2
 800c184:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	4a17      	ldr	r2, [pc, #92]	; (800c1e8 <TIM_OC5_SetConfig+0xb4>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d00f      	beq.n	800c1ae <TIM_OC5_SetConfig+0x7a>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	4a16      	ldr	r2, [pc, #88]	; (800c1ec <TIM_OC5_SetConfig+0xb8>)
 800c192:	4293      	cmp	r3, r2
 800c194:	d00b      	beq.n	800c1ae <TIM_OC5_SetConfig+0x7a>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	4a15      	ldr	r2, [pc, #84]	; (800c1f0 <TIM_OC5_SetConfig+0xbc>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d007      	beq.n	800c1ae <TIM_OC5_SetConfig+0x7a>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	4a14      	ldr	r2, [pc, #80]	; (800c1f4 <TIM_OC5_SetConfig+0xc0>)
 800c1a2:	4293      	cmp	r3, r2
 800c1a4:	d003      	beq.n	800c1ae <TIM_OC5_SetConfig+0x7a>
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	4a13      	ldr	r2, [pc, #76]	; (800c1f8 <TIM_OC5_SetConfig+0xc4>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d109      	bne.n	800c1c2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800c1ae:	697b      	ldr	r3, [r7, #20]
 800c1b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800c1b6:	683b      	ldr	r3, [r7, #0]
 800c1b8:	695b      	ldr	r3, [r3, #20]
 800c1ba:	021b      	lsls	r3, r3, #8
 800c1bc:	697a      	ldr	r2, [r7, #20]
 800c1be:	4313      	orrs	r3, r2
 800c1c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	697a      	ldr	r2, [r7, #20]
 800c1c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	68fa      	ldr	r2, [r7, #12]
 800c1cc:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800c1ce:	683b      	ldr	r3, [r7, #0]
 800c1d0:	685a      	ldr	r2, [r3, #4]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	693a      	ldr	r2, [r7, #16]
 800c1da:	621a      	str	r2, [r3, #32]
}
 800c1dc:	bf00      	nop
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr
 800c1e8:	40012c00 	.word	0x40012c00
 800c1ec:	40013400 	.word	0x40013400
 800c1f0:	40014000 	.word	0x40014000
 800c1f4:	40014400 	.word	0x40014400
 800c1f8:	40014800 	.word	0x40014800

0800c1fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800c1fc:	b480      	push	{r7}
 800c1fe:	b087      	sub	sp, #28
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	6a1b      	ldr	r3, [r3, #32]
 800c20a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	6a1b      	ldr	r3, [r3, #32]
 800c216:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c22a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800c22e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800c230:	683b      	ldr	r3, [r7, #0]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	021b      	lsls	r3, r3, #8
 800c236:	68fa      	ldr	r2, [r7, #12]
 800c238:	4313      	orrs	r3, r2
 800c23a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c242:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	689b      	ldr	r3, [r3, #8]
 800c248:	051b      	lsls	r3, r3, #20
 800c24a:	693a      	ldr	r2, [r7, #16]
 800c24c:	4313      	orrs	r3, r2
 800c24e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	4a18      	ldr	r2, [pc, #96]	; (800c2b4 <TIM_OC6_SetConfig+0xb8>)
 800c254:	4293      	cmp	r3, r2
 800c256:	d00f      	beq.n	800c278 <TIM_OC6_SetConfig+0x7c>
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	4a17      	ldr	r2, [pc, #92]	; (800c2b8 <TIM_OC6_SetConfig+0xbc>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d00b      	beq.n	800c278 <TIM_OC6_SetConfig+0x7c>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	4a16      	ldr	r2, [pc, #88]	; (800c2bc <TIM_OC6_SetConfig+0xc0>)
 800c264:	4293      	cmp	r3, r2
 800c266:	d007      	beq.n	800c278 <TIM_OC6_SetConfig+0x7c>
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	4a15      	ldr	r2, [pc, #84]	; (800c2c0 <TIM_OC6_SetConfig+0xc4>)
 800c26c:	4293      	cmp	r3, r2
 800c26e:	d003      	beq.n	800c278 <TIM_OC6_SetConfig+0x7c>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	4a14      	ldr	r2, [pc, #80]	; (800c2c4 <TIM_OC6_SetConfig+0xc8>)
 800c274:	4293      	cmp	r3, r2
 800c276:	d109      	bne.n	800c28c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800c278:	697b      	ldr	r3, [r7, #20]
 800c27a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c27e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	695b      	ldr	r3, [r3, #20]
 800c284:	029b      	lsls	r3, r3, #10
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	4313      	orrs	r3, r2
 800c28a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	697a      	ldr	r2, [r7, #20]
 800c290:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	68fa      	ldr	r2, [r7, #12]
 800c296:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	685a      	ldr	r2, [r3, #4]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	693a      	ldr	r2, [r7, #16]
 800c2a4:	621a      	str	r2, [r3, #32]
}
 800c2a6:	bf00      	nop
 800c2a8:	371c      	adds	r7, #28
 800c2aa:	46bd      	mov	sp, r7
 800c2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2b0:	4770      	bx	lr
 800c2b2:	bf00      	nop
 800c2b4:	40012c00 	.word	0x40012c00
 800c2b8:	40013400 	.word	0x40013400
 800c2bc:	40014000 	.word	0x40014000
 800c2c0:	40014400 	.word	0x40014400
 800c2c4:	40014800 	.word	0x40014800

0800c2c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c2c8:	b480      	push	{r7}
 800c2ca:	b087      	sub	sp, #28
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	60f8      	str	r0, [r7, #12]
 800c2d0:	60b9      	str	r1, [r7, #8]
 800c2d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	6a1b      	ldr	r3, [r3, #32]
 800c2d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6a1b      	ldr	r3, [r3, #32]
 800c2de:	f023 0201 	bic.w	r2, r3, #1
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	699b      	ldr	r3, [r3, #24]
 800c2ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c2f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	011b      	lsls	r3, r3, #4
 800c2f8:	693a      	ldr	r2, [r7, #16]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	f023 030a 	bic.w	r3, r3, #10
 800c304:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c306:	697a      	ldr	r2, [r7, #20]
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	4313      	orrs	r3, r2
 800c30c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	693a      	ldr	r2, [r7, #16]
 800c312:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	621a      	str	r2, [r3, #32]
}
 800c31a:	bf00      	nop
 800c31c:	371c      	adds	r7, #28
 800c31e:	46bd      	mov	sp, r7
 800c320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c324:	4770      	bx	lr

0800c326 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c326:	b480      	push	{r7}
 800c328:	b087      	sub	sp, #28
 800c32a:	af00      	add	r7, sp, #0
 800c32c:	60f8      	str	r0, [r7, #12]
 800c32e:	60b9      	str	r1, [r7, #8]
 800c330:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6a1b      	ldr	r3, [r3, #32]
 800c336:	f023 0210 	bic.w	r2, r3, #16
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	699b      	ldr	r3, [r3, #24]
 800c342:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	6a1b      	ldr	r3, [r3, #32]
 800c348:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c34a:	697b      	ldr	r3, [r7, #20]
 800c34c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c350:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	031b      	lsls	r3, r3, #12
 800c356:	697a      	ldr	r2, [r7, #20]
 800c358:	4313      	orrs	r3, r2
 800c35a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c35c:	693b      	ldr	r3, [r7, #16]
 800c35e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c362:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c364:	68bb      	ldr	r3, [r7, #8]
 800c366:	011b      	lsls	r3, r3, #4
 800c368:	693a      	ldr	r2, [r7, #16]
 800c36a:	4313      	orrs	r3, r2
 800c36c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	697a      	ldr	r2, [r7, #20]
 800c372:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	693a      	ldr	r2, [r7, #16]
 800c378:	621a      	str	r2, [r3, #32]
}
 800c37a:	bf00      	nop
 800c37c:	371c      	adds	r7, #28
 800c37e:	46bd      	mov	sp, r7
 800c380:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c384:	4770      	bx	lr

0800c386 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c386:	b480      	push	{r7}
 800c388:	b085      	sub	sp, #20
 800c38a:	af00      	add	r7, sp, #0
 800c38c:	6078      	str	r0, [r7, #4]
 800c38e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c39c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c3a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4313      	orrs	r3, r2
 800c3a8:	f043 0307 	orr.w	r3, r3, #7
 800c3ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	609a      	str	r2, [r3, #8]
}
 800c3b4:	bf00      	nop
 800c3b6:	3714      	adds	r7, #20
 800c3b8:	46bd      	mov	sp, r7
 800c3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3be:	4770      	bx	lr

0800c3c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c3c0:	b480      	push	{r7}
 800c3c2:	b087      	sub	sp, #28
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	60f8      	str	r0, [r7, #12]
 800c3c8:	60b9      	str	r1, [r7, #8]
 800c3ca:	607a      	str	r2, [r7, #4]
 800c3cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	689b      	ldr	r3, [r3, #8]
 800c3d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3d4:	697b      	ldr	r3, [r7, #20]
 800c3d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c3dc:	683b      	ldr	r3, [r7, #0]
 800c3de:	021a      	lsls	r2, r3, #8
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	431a      	orrs	r2, r3
 800c3e4:	68bb      	ldr	r3, [r7, #8]
 800c3e6:	4313      	orrs	r3, r2
 800c3e8:	697a      	ldr	r2, [r7, #20]
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	697a      	ldr	r2, [r7, #20]
 800c3f2:	609a      	str	r2, [r3, #8]
}
 800c3f4:	bf00      	nop
 800c3f6:	371c      	adds	r7, #28
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fe:	4770      	bx	lr

0800c400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c400:	b480      	push	{r7}
 800c402:	b087      	sub	sp, #28
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	f003 031f 	and.w	r3, r3, #31
 800c412:	2201      	movs	r2, #1
 800c414:	fa02 f303 	lsl.w	r3, r2, r3
 800c418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	6a1a      	ldr	r2, [r3, #32]
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	43db      	mvns	r3, r3
 800c422:	401a      	ands	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	6a1a      	ldr	r2, [r3, #32]
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	f003 031f 	and.w	r3, r3, #31
 800c432:	6879      	ldr	r1, [r7, #4]
 800c434:	fa01 f303 	lsl.w	r3, r1, r3
 800c438:	431a      	orrs	r2, r3
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	621a      	str	r2, [r3, #32]
}
 800c43e:	bf00      	nop
 800c440:	371c      	adds	r7, #28
 800c442:	46bd      	mov	sp, r7
 800c444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c448:	4770      	bx	lr
	...

0800c44c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b084      	sub	sp, #16
 800c450:	af00      	add	r7, sp, #0
 800c452:	6078      	str	r0, [r7, #4]
 800c454:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c456:	683b      	ldr	r3, [r7, #0]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d109      	bne.n	800c470 <HAL_TIMEx_PWMN_Start+0x24>
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c462:	b2db      	uxtb	r3, r3
 800c464:	2b01      	cmp	r3, #1
 800c466:	bf14      	ite	ne
 800c468:	2301      	movne	r3, #1
 800c46a:	2300      	moveq	r3, #0
 800c46c:	b2db      	uxtb	r3, r3
 800c46e:	e022      	b.n	800c4b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800c470:	683b      	ldr	r3, [r7, #0]
 800c472:	2b04      	cmp	r3, #4
 800c474:	d109      	bne.n	800c48a <HAL_TIMEx_PWMN_Start+0x3e>
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c47c:	b2db      	uxtb	r3, r3
 800c47e:	2b01      	cmp	r3, #1
 800c480:	bf14      	ite	ne
 800c482:	2301      	movne	r3, #1
 800c484:	2300      	moveq	r3, #0
 800c486:	b2db      	uxtb	r3, r3
 800c488:	e015      	b.n	800c4b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800c48a:	683b      	ldr	r3, [r7, #0]
 800c48c:	2b08      	cmp	r3, #8
 800c48e:	d109      	bne.n	800c4a4 <HAL_TIMEx_PWMN_Start+0x58>
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c496:	b2db      	uxtb	r3, r3
 800c498:	2b01      	cmp	r3, #1
 800c49a:	bf14      	ite	ne
 800c49c:	2301      	movne	r3, #1
 800c49e:	2300      	moveq	r3, #0
 800c4a0:	b2db      	uxtb	r3, r3
 800c4a2:	e008      	b.n	800c4b6 <HAL_TIMEx_PWMN_Start+0x6a>
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800c4aa:	b2db      	uxtb	r3, r3
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	bf14      	ite	ne
 800c4b0:	2301      	movne	r3, #1
 800c4b2:	2300      	moveq	r3, #0
 800c4b4:	b2db      	uxtb	r3, r3
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d001      	beq.n	800c4be <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800c4ba:	2301      	movs	r3, #1
 800c4bc:	e069      	b.n	800c592 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d104      	bne.n	800c4ce <HAL_TIMEx_PWMN_Start+0x82>
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c4cc:	e013      	b.n	800c4f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	2b04      	cmp	r3, #4
 800c4d2:	d104      	bne.n	800c4de <HAL_TIMEx_PWMN_Start+0x92>
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c4dc:	e00b      	b.n	800c4f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800c4de:	683b      	ldr	r3, [r7, #0]
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d104      	bne.n	800c4ee <HAL_TIMEx_PWMN_Start+0xa2>
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	2202      	movs	r2, #2
 800c4e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c4ec:	e003      	b.n	800c4f6 <HAL_TIMEx_PWMN_Start+0xaa>
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2202      	movs	r2, #2
 800c4f2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	2204      	movs	r2, #4
 800c4fc:	6839      	ldr	r1, [r7, #0]
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 f9d3 	bl	800c8aa <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800c512:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	4a20      	ldr	r2, [pc, #128]	; (800c59c <HAL_TIMEx_PWMN_Start+0x150>)
 800c51a:	4293      	cmp	r3, r2
 800c51c:	d018      	beq.n	800c550 <HAL_TIMEx_PWMN_Start+0x104>
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c526:	d013      	beq.n	800c550 <HAL_TIMEx_PWMN_Start+0x104>
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	4a1c      	ldr	r2, [pc, #112]	; (800c5a0 <HAL_TIMEx_PWMN_Start+0x154>)
 800c52e:	4293      	cmp	r3, r2
 800c530:	d00e      	beq.n	800c550 <HAL_TIMEx_PWMN_Start+0x104>
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	4a1b      	ldr	r2, [pc, #108]	; (800c5a4 <HAL_TIMEx_PWMN_Start+0x158>)
 800c538:	4293      	cmp	r3, r2
 800c53a:	d009      	beq.n	800c550 <HAL_TIMEx_PWMN_Start+0x104>
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	4a19      	ldr	r2, [pc, #100]	; (800c5a8 <HAL_TIMEx_PWMN_Start+0x15c>)
 800c542:	4293      	cmp	r3, r2
 800c544:	d004      	beq.n	800c550 <HAL_TIMEx_PWMN_Start+0x104>
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	4a18      	ldr	r2, [pc, #96]	; (800c5ac <HAL_TIMEx_PWMN_Start+0x160>)
 800c54c:	4293      	cmp	r3, r2
 800c54e:	d115      	bne.n	800c57c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	689a      	ldr	r2, [r3, #8]
 800c556:	4b16      	ldr	r3, [pc, #88]	; (800c5b0 <HAL_TIMEx_PWMN_Start+0x164>)
 800c558:	4013      	ands	r3, r2
 800c55a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2b06      	cmp	r3, #6
 800c560:	d015      	beq.n	800c58e <HAL_TIMEx_PWMN_Start+0x142>
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c568:	d011      	beq.n	800c58e <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	681a      	ldr	r2, [r3, #0]
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f042 0201 	orr.w	r2, r2, #1
 800c578:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c57a:	e008      	b.n	800c58e <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	681a      	ldr	r2, [r3, #0]
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	f042 0201 	orr.w	r2, r2, #1
 800c58a:	601a      	str	r2, [r3, #0]
 800c58c:	e000      	b.n	800c590 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c58e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
 800c59a:	bf00      	nop
 800c59c:	40012c00 	.word	0x40012c00
 800c5a0:	40000400 	.word	0x40000400
 800c5a4:	40000800 	.word	0x40000800
 800c5a8:	40013400 	.word	0x40013400
 800c5ac:	40014000 	.word	0x40014000
 800c5b0:	00010007 	.word	0x00010007

0800c5b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c5c4:	2b01      	cmp	r3, #1
 800c5c6:	d101      	bne.n	800c5cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	e065      	b.n	800c698 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	2201      	movs	r2, #1
 800c5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	685b      	ldr	r3, [r3, #4]
 800c5e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	689b      	ldr	r3, [r3, #8]
 800c5ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	4a2c      	ldr	r2, [pc, #176]	; (800c6a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d004      	beq.n	800c600 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a2b      	ldr	r2, [pc, #172]	; (800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d108      	bne.n	800c612 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c606:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c608:	683b      	ldr	r3, [r7, #0]
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	68fa      	ldr	r2, [r7, #12]
 800c60e:	4313      	orrs	r3, r2
 800c610:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c61c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	68fa      	ldr	r2, [r7, #12]
 800c624:	4313      	orrs	r3, r2
 800c626:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	68fa      	ldr	r2, [r7, #12]
 800c62e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	4a1b      	ldr	r2, [pc, #108]	; (800c6a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800c636:	4293      	cmp	r3, r2
 800c638:	d018      	beq.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c642:	d013      	beq.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	4a18      	ldr	r2, [pc, #96]	; (800c6ac <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800c64a:	4293      	cmp	r3, r2
 800c64c:	d00e      	beq.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	4a17      	ldr	r2, [pc, #92]	; (800c6b0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800c654:	4293      	cmp	r3, r2
 800c656:	d009      	beq.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a12      	ldr	r2, [pc, #72]	; (800c6a8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800c65e:	4293      	cmp	r3, r2
 800c660:	d004      	beq.n	800c66c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	4a13      	ldr	r2, [pc, #76]	; (800c6b4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c668:	4293      	cmp	r3, r2
 800c66a:	d10c      	bne.n	800c686 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c672:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	689b      	ldr	r3, [r3, #8]
 800c678:	68ba      	ldr	r2, [r7, #8]
 800c67a:	4313      	orrs	r3, r2
 800c67c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	68ba      	ldr	r2, [r7, #8]
 800c684:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	2201      	movs	r2, #1
 800c68a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2200      	movs	r2, #0
 800c692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c696:	2300      	movs	r3, #0
}
 800c698:	4618      	mov	r0, r3
 800c69a:	3714      	adds	r7, #20
 800c69c:	46bd      	mov	sp, r7
 800c69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a2:	4770      	bx	lr
 800c6a4:	40012c00 	.word	0x40012c00
 800c6a8:	40013400 	.word	0x40013400
 800c6ac:	40000400 	.word	0x40000400
 800c6b0:	40000800 	.word	0x40000800
 800c6b4:	40014000 	.word	0x40014000

0800c6b8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b085      	sub	sp, #20
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
 800c6c0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c6cc:	2b01      	cmp	r3, #1
 800c6ce:	d101      	bne.n	800c6d4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	e087      	b.n	800c7e4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2201      	movs	r2, #1
 800c6d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c6e2:	683b      	ldr	r3, [r7, #0]
 800c6e4:	68db      	ldr	r3, [r3, #12]
 800c6e6:	4313      	orrs	r3, r2
 800c6e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c6f0:	683b      	ldr	r3, [r7, #0]
 800c6f2:	689b      	ldr	r3, [r3, #8]
 800c6f4:	4313      	orrs	r3, r2
 800c6f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	685b      	ldr	r3, [r3, #4]
 800c702:	4313      	orrs	r3, r2
 800c704:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c706:	68fb      	ldr	r3, [r7, #12]
 800c708:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	4313      	orrs	r3, r2
 800c712:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c71a:	683b      	ldr	r3, [r7, #0]
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	4313      	orrs	r3, r2
 800c720:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c728:	683b      	ldr	r3, [r7, #0]
 800c72a:	695b      	ldr	r3, [r3, #20]
 800c72c:	4313      	orrs	r3, r2
 800c72e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c73a:	4313      	orrs	r3, r2
 800c73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c744:	683b      	ldr	r3, [r7, #0]
 800c746:	699b      	ldr	r3, [r3, #24]
 800c748:	041b      	lsls	r3, r3, #16
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	4a27      	ldr	r2, [pc, #156]	; (800c7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c754:	4293      	cmp	r3, r2
 800c756:	d004      	beq.n	800c762 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	4a25      	ldr	r2, [pc, #148]	; (800c7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c75e:	4293      	cmp	r3, r2
 800c760:	d106      	bne.n	800c770 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	69db      	ldr	r3, [r3, #28]
 800c76c:	4313      	orrs	r3, r2
 800c76e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	4a1e      	ldr	r2, [pc, #120]	; (800c7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c776:	4293      	cmp	r3, r2
 800c778:	d004      	beq.n	800c784 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	4a1d      	ldr	r2, [pc, #116]	; (800c7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c780:	4293      	cmp	r3, r2
 800c782:	d126      	bne.n	800c7d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c78a:	683b      	ldr	r3, [r7, #0]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	051b      	lsls	r3, r3, #20
 800c790:	4313      	orrs	r3, r2
 800c792:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c79a:	683b      	ldr	r3, [r7, #0]
 800c79c:	6a1b      	ldr	r3, [r3, #32]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c7a8:	683b      	ldr	r3, [r7, #0]
 800c7aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7ac:	4313      	orrs	r3, r2
 800c7ae:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	4a0e      	ldr	r2, [pc, #56]	; (800c7f0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800c7b6:	4293      	cmp	r3, r2
 800c7b8:	d004      	beq.n	800c7c4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	4a0d      	ldr	r2, [pc, #52]	; (800c7f4 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800c7c0:	4293      	cmp	r3, r2
 800c7c2:	d106      	bne.n	800c7d2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c7ca:	683b      	ldr	r3, [r7, #0]
 800c7cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7ce:	4313      	orrs	r3, r2
 800c7d0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	68fa      	ldr	r2, [r7, #12]
 800c7d8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	2200      	movs	r2, #0
 800c7de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7e2:	2300      	movs	r3, #0
}
 800c7e4:	4618      	mov	r0, r3
 800c7e6:	3714      	adds	r7, #20
 800c7e8:	46bd      	mov	sp, r7
 800c7ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ee:	4770      	bx	lr
 800c7f0:	40012c00 	.word	0x40012c00
 800c7f4:	40013400 	.word	0x40013400

0800c7f8 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800c7f8:	b480      	push	{r7}
 800c7fa:	b083      	sub	sp, #12
 800c7fc:	af00      	add	r7, sp, #0
 800c7fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800c80e:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	370c      	adds	r7, #12
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c81e:	b480      	push	{r7}
 800c820:	b083      	sub	sp, #12
 800c822:	af00      	add	r7, sp, #0
 800c824:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c826:	bf00      	nop
 800c828:	370c      	adds	r7, #12
 800c82a:	46bd      	mov	sp, r7
 800c82c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c830:	4770      	bx	lr

0800c832 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c832:	b480      	push	{r7}
 800c834:	b083      	sub	sp, #12
 800c836:	af00      	add	r7, sp, #0
 800c838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c83a:	bf00      	nop
 800c83c:	370c      	adds	r7, #12
 800c83e:	46bd      	mov	sp, r7
 800c840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c844:	4770      	bx	lr

0800c846 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c846:	b480      	push	{r7}
 800c848:	b083      	sub	sp, #12
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c84e:	bf00      	nop
 800c850:	370c      	adds	r7, #12
 800c852:	46bd      	mov	sp, r7
 800c854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c858:	4770      	bx	lr

0800c85a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c85a:	b480      	push	{r7}
 800c85c:	b083      	sub	sp, #12
 800c85e:	af00      	add	r7, sp, #0
 800c860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c862:	bf00      	nop
 800c864:	370c      	adds	r7, #12
 800c866:	46bd      	mov	sp, r7
 800c868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86c:	4770      	bx	lr

0800c86e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c86e:	b480      	push	{r7}
 800c870:	b083      	sub	sp, #12
 800c872:	af00      	add	r7, sp, #0
 800c874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c876:	bf00      	nop
 800c878:	370c      	adds	r7, #12
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c88a:	bf00      	nop
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c896:	b480      	push	{r7}
 800c898:	b083      	sub	sp, #12
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c89e:	bf00      	nop
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b087      	sub	sp, #28
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	60f8      	str	r0, [r7, #12]
 800c8b2:	60b9      	str	r1, [r7, #8]
 800c8b4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	f003 031f 	and.w	r3, r3, #31
 800c8bc:	2204      	movs	r2, #4
 800c8be:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800c8c4:	68fb      	ldr	r3, [r7, #12]
 800c8c6:	6a1a      	ldr	r2, [r3, #32]
 800c8c8:	697b      	ldr	r3, [r7, #20]
 800c8ca:	43db      	mvns	r3, r3
 800c8cc:	401a      	ands	r2, r3
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	6a1a      	ldr	r2, [r3, #32]
 800c8d6:	68bb      	ldr	r3, [r7, #8]
 800c8d8:	f003 031f 	and.w	r3, r3, #31
 800c8dc:	6879      	ldr	r1, [r7, #4]
 800c8de:	fa01 f303 	lsl.w	r3, r1, r3
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	68fb      	ldr	r3, [r7, #12]
 800c8e6:	621a      	str	r2, [r3, #32]
}
 800c8e8:	bf00      	nop
 800c8ea:	371c      	adds	r7, #28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8f4:	b580      	push	{r7, lr}
 800c8f6:	b082      	sub	sp, #8
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d101      	bne.n	800c906 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c902:	2301      	movs	r3, #1
 800c904:	e042      	b.n	800c98c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d106      	bne.n	800c91e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2200      	movs	r2, #0
 800c914:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c918:	6878      	ldr	r0, [r7, #4]
 800c91a:	f7f8 fda9 	bl	8005470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2224      	movs	r2, #36	; 0x24
 800c922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	681a      	ldr	r2, [r3, #0]
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f022 0201 	bic.w	r2, r2, #1
 800c934:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c936:	6878      	ldr	r0, [r7, #4]
 800c938:	f000 fb5c 	bl	800cff4 <UART_SetConfig>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b01      	cmp	r3, #1
 800c940:	d101      	bne.n	800c946 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c942:	2301      	movs	r3, #1
 800c944:	e022      	b.n	800c98c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d002      	beq.n	800c954 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c94e:	6878      	ldr	r0, [r7, #4]
 800c950:	f000 fe1c 	bl	800d58c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	685a      	ldr	r2, [r3, #4]
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	689a      	ldr	r2, [r3, #8]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	681a      	ldr	r2, [r3, #0]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	f042 0201 	orr.w	r2, r2, #1
 800c982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f000 fea3 	bl	800d6d0 <UART_CheckIdleState>
 800c98a:	4603      	mov	r3, r0
}
 800c98c:	4618      	mov	r0, r3
 800c98e:	3708      	adds	r7, #8
 800c990:	46bd      	mov	sp, r7
 800c992:	bd80      	pop	{r7, pc}

0800c994 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c994:	b580      	push	{r7, lr}
 800c996:	b08a      	sub	sp, #40	; 0x28
 800c998:	af02      	add	r7, sp, #8
 800c99a:	60f8      	str	r0, [r7, #12]
 800c99c:	60b9      	str	r1, [r7, #8]
 800c99e:	603b      	str	r3, [r7, #0]
 800c9a0:	4613      	mov	r3, r2
 800c9a2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9aa:	2b20      	cmp	r3, #32
 800c9ac:	f040 8083 	bne.w	800cab6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9b0:	68bb      	ldr	r3, [r7, #8]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d002      	beq.n	800c9bc <HAL_UART_Transmit+0x28>
 800c9b6:	88fb      	ldrh	r3, [r7, #6]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d101      	bne.n	800c9c0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	e07b      	b.n	800cab8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d101      	bne.n	800c9ce <HAL_UART_Transmit+0x3a>
 800c9ca:	2302      	movs	r3, #2
 800c9cc:	e074      	b.n	800cab8 <HAL_UART_Transmit+0x124>
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	2201      	movs	r2, #1
 800c9d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	2221      	movs	r2, #33	; 0x21
 800c9e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c9e6:	f7f8 fe5d 	bl	80056a4 <HAL_GetTick>
 800c9ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	88fa      	ldrh	r2, [r7, #6]
 800c9f0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	88fa      	ldrh	r2, [r7, #6]
 800c9f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	689b      	ldr	r3, [r3, #8]
 800ca00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca04:	d108      	bne.n	800ca18 <HAL_UART_Transmit+0x84>
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	691b      	ldr	r3, [r3, #16]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d104      	bne.n	800ca18 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	61bb      	str	r3, [r7, #24]
 800ca16:	e003      	b.n	800ca20 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ca18:	68bb      	ldr	r3, [r7, #8]
 800ca1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca1c:	2300      	movs	r3, #0
 800ca1e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	2200      	movs	r2, #0
 800ca24:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ca28:	e02c      	b.n	800ca84 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca2a:	683b      	ldr	r3, [r7, #0]
 800ca2c:	9300      	str	r3, [sp, #0]
 800ca2e:	697b      	ldr	r3, [r7, #20]
 800ca30:	2200      	movs	r2, #0
 800ca32:	2180      	movs	r1, #128	; 0x80
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f000 fe96 	bl	800d766 <UART_WaitOnFlagUntilTimeout>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d001      	beq.n	800ca44 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ca40:	2303      	movs	r3, #3
 800ca42:	e039      	b.n	800cab8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d10b      	bne.n	800ca62 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	881b      	ldrh	r3, [r3, #0]
 800ca4e:	461a      	mov	r2, r3
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca58:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ca5a:	69bb      	ldr	r3, [r7, #24]
 800ca5c:	3302      	adds	r3, #2
 800ca5e:	61bb      	str	r3, [r7, #24]
 800ca60:	e007      	b.n	800ca72 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ca62:	69fb      	ldr	r3, [r7, #28]
 800ca64:	781a      	ldrb	r2, [r3, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ca6c:	69fb      	ldr	r3, [r7, #28]
 800ca6e:	3301      	adds	r3, #1
 800ca70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca78:	b29b      	uxth	r3, r3
 800ca7a:	3b01      	subs	r3, #1
 800ca7c:	b29a      	uxth	r2, r3
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca8a:	b29b      	uxth	r3, r3
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d1cc      	bne.n	800ca2a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca90:	683b      	ldr	r3, [r7, #0]
 800ca92:	9300      	str	r3, [sp, #0]
 800ca94:	697b      	ldr	r3, [r7, #20]
 800ca96:	2200      	movs	r2, #0
 800ca98:	2140      	movs	r1, #64	; 0x40
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	f000 fe63 	bl	800d766 <UART_WaitOnFlagUntilTimeout>
 800caa0:	4603      	mov	r3, r0
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d001      	beq.n	800caaa <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800caa6:	2303      	movs	r3, #3
 800caa8:	e006      	b.n	800cab8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	2220      	movs	r2, #32
 800caae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	e000      	b.n	800cab8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800cab6:	2302      	movs	r3, #2
  }
}
 800cab8:	4618      	mov	r0, r3
 800caba:	3720      	adds	r7, #32
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cac0:	b580      	push	{r7, lr}
 800cac2:	b084      	sub	sp, #16
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	60f8      	str	r0, [r7, #12]
 800cac8:	60b9      	str	r1, [r7, #8]
 800caca:	4613      	mov	r3, r2
 800cacc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cad4:	2b20      	cmp	r3, #32
 800cad6:	d131      	bne.n	800cb3c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800cad8:	68bb      	ldr	r3, [r7, #8]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <HAL_UART_Receive_IT+0x24>
 800cade:	88fb      	ldrh	r3, [r7, #6]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d101      	bne.n	800cae8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800cae4:	2301      	movs	r3, #1
 800cae6:	e02a      	b.n	800cb3e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800caee:	2b01      	cmp	r3, #1
 800caf0:	d101      	bne.n	800caf6 <HAL_UART_Receive_IT+0x36>
 800caf2:	2302      	movs	r3, #2
 800caf4:	e023      	b.n	800cb3e <HAL_UART_Receive_IT+0x7e>
 800caf6:	68fb      	ldr	r3, [r7, #12]
 800caf8:	2201      	movs	r2, #1
 800cafa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	2200      	movs	r2, #0
 800cb02:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4a0f      	ldr	r2, [pc, #60]	; (800cb48 <HAL_UART_Receive_IT+0x88>)
 800cb0a:	4293      	cmp	r3, r2
 800cb0c:	d00e      	beq.n	800cb2c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	685b      	ldr	r3, [r3, #4]
 800cb14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cb18:	2b00      	cmp	r3, #0
 800cb1a:	d007      	beq.n	800cb2c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800cb2a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800cb2c:	88fb      	ldrh	r3, [r7, #6]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	68b9      	ldr	r1, [r7, #8]
 800cb32:	68f8      	ldr	r0, [r7, #12]
 800cb34:	f000 fe98 	bl	800d868 <UART_Start_Receive_IT>
 800cb38:	4603      	mov	r3, r0
 800cb3a:	e000      	b.n	800cb3e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800cb3c:	2302      	movs	r3, #2
  }
}
 800cb3e:	4618      	mov	r0, r3
 800cb40:	3710      	adds	r7, #16
 800cb42:	46bd      	mov	sp, r7
 800cb44:	bd80      	pop	{r7, pc}
 800cb46:	bf00      	nop
 800cb48:	40008000 	.word	0x40008000

0800cb4c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b088      	sub	sp, #32
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	69db      	ldr	r3, [r3, #28]
 800cb5a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	689b      	ldr	r3, [r3, #8]
 800cb6a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cb6c:	69fa      	ldr	r2, [r7, #28]
 800cb6e:	f640 030f 	movw	r3, #2063	; 0x80f
 800cb72:	4013      	ands	r3, r2
 800cb74:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800cb76:	693b      	ldr	r3, [r7, #16]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d118      	bne.n	800cbae <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cb7c:	69fb      	ldr	r3, [r7, #28]
 800cb7e:	f003 0320 	and.w	r3, r3, #32
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d013      	beq.n	800cbae <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	f003 0320 	and.w	r3, r3, #32
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d104      	bne.n	800cb9a <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cb90:	697b      	ldr	r3, [r7, #20]
 800cb92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d009      	beq.n	800cbae <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	f000 81fb 	beq.w	800cf9a <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	4798      	blx	r3
      }
      return;
 800cbac:	e1f5      	b.n	800cf9a <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cbae:	693b      	ldr	r3, [r7, #16]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	f000 80ef 	beq.w	800cd94 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	4b73      	ldr	r3, [pc, #460]	; (800cd88 <HAL_UART_IRQHandler+0x23c>)
 800cbba:	4013      	ands	r3, r2
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d105      	bne.n	800cbcc <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cbc0:	69ba      	ldr	r2, [r7, #24]
 800cbc2:	4b72      	ldr	r3, [pc, #456]	; (800cd8c <HAL_UART_IRQHandler+0x240>)
 800cbc4:	4013      	ands	r3, r2
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	f000 80e4 	beq.w	800cd94 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f003 0301 	and.w	r3, r3, #1
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d010      	beq.n	800cbf8 <HAL_UART_IRQHandler+0xac>
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d00b      	beq.n	800cbf8 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	2201      	movs	r2, #1
 800cbe6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cbee:	f043 0201 	orr.w	r2, r3, #1
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	f003 0302 	and.w	r3, r3, #2
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d010      	beq.n	800cc24 <HAL_UART_IRQHandler+0xd8>
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	f003 0301 	and.w	r3, r3, #1
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d00b      	beq.n	800cc24 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2202      	movs	r2, #2
 800cc12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc1a:	f043 0204 	orr.w	r2, r3, #4
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	f003 0304 	and.w	r3, r3, #4
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d010      	beq.n	800cc50 <HAL_UART_IRQHandler+0x104>
 800cc2e:	697b      	ldr	r3, [r7, #20]
 800cc30:	f003 0301 	and.w	r3, r3, #1
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00b      	beq.n	800cc50 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2204      	movs	r2, #4
 800cc3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc46:	f043 0202 	orr.w	r2, r3, #2
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cc50:	69fb      	ldr	r3, [r7, #28]
 800cc52:	f003 0308 	and.w	r3, r3, #8
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d015      	beq.n	800cc86 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc5a:	69bb      	ldr	r3, [r7, #24]
 800cc5c:	f003 0320 	and.w	r3, r3, #32
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d104      	bne.n	800cc6e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800cc64:	697a      	ldr	r2, [r7, #20]
 800cc66:	4b48      	ldr	r3, [pc, #288]	; (800cd88 <HAL_UART_IRQHandler+0x23c>)
 800cc68:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d00b      	beq.n	800cc86 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	2208      	movs	r2, #8
 800cc74:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc7c:	f043 0208 	orr.w	r2, r3, #8
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d011      	beq.n	800ccb4 <HAL_UART_IRQHandler+0x168>
 800cc90:	69bb      	ldr	r3, [r7, #24]
 800cc92:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d00c      	beq.n	800ccb4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccaa:	f043 0220 	orr.w	r2, r3, #32
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	f000 816f 	beq.w	800cf9e <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ccc0:	69fb      	ldr	r3, [r7, #28]
 800ccc2:	f003 0320 	and.w	r3, r3, #32
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d011      	beq.n	800ccee <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ccca:	69bb      	ldr	r3, [r7, #24]
 800cccc:	f003 0320 	and.w	r3, r3, #32
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d104      	bne.n	800ccde <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ccd4:	697b      	ldr	r3, [r7, #20]
 800ccd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d007      	beq.n	800ccee <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d003      	beq.n	800ccee <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ccea:	6878      	ldr	r0, [r7, #4]
 800ccec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ccf4:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	689b      	ldr	r3, [r3, #8]
 800ccfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd00:	2b40      	cmp	r3, #64	; 0x40
 800cd02:	d004      	beq.n	800cd0e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	d031      	beq.n	800cd72 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f000 fe68 	bl	800d9e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	681b      	ldr	r3, [r3, #0]
 800cd18:	689b      	ldr	r3, [r3, #8]
 800cd1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd1e:	2b40      	cmp	r3, #64	; 0x40
 800cd20:	d123      	bne.n	800cd6a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	689a      	ldr	r2, [r3, #8]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	681b      	ldr	r3, [r3, #0]
 800cd2c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd30:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	d013      	beq.n	800cd62 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd3e:	4a14      	ldr	r2, [pc, #80]	; (800cd90 <HAL_UART_IRQHandler+0x244>)
 800cd40:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7fa f990 	bl	800706c <HAL_DMA_Abort_IT>
 800cd4c:	4603      	mov	r3, r0
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d017      	beq.n	800cd82 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cd56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd58:	687a      	ldr	r2, [r7, #4]
 800cd5a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd60:	e00f      	b.n	800cd82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cd62:	6878      	ldr	r0, [r7, #4]
 800cd64:	f000 f930 	bl	800cfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd68:	e00b      	b.n	800cd82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f000 f92c 	bl	800cfc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd70:	e007      	b.n	800cd82 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cd72:	6878      	ldr	r0, [r7, #4]
 800cd74:	f000 f928 	bl	800cfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	2200      	movs	r2, #0
 800cd7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800cd80:	e10d      	b.n	800cf9e <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd82:	bf00      	nop
    return;
 800cd84:	e10b      	b.n	800cf9e <HAL_UART_IRQHandler+0x452>
 800cd86:	bf00      	nop
 800cd88:	10000001 	.word	0x10000001
 800cd8c:	04000120 	.word	0x04000120
 800cd90:	0800da49 	.word	0x0800da49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd98:	2b01      	cmp	r3, #1
 800cd9a:	f040 80ab 	bne.w	800cef4 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cd9e:	69fb      	ldr	r3, [r7, #28]
 800cda0:	f003 0310 	and.w	r3, r3, #16
 800cda4:	2b00      	cmp	r3, #0
 800cda6:	f000 80a5 	beq.w	800cef4 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	f003 0310 	and.w	r3, r3, #16
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	f000 809f 	beq.w	800cef4 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	2210      	movs	r2, #16
 800cdbc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdc8:	2b40      	cmp	r3, #64	; 0x40
 800cdca:	d155      	bne.n	800ce78 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	685b      	ldr	r3, [r3, #4]
 800cdd4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800cdd6:	893b      	ldrh	r3, [r7, #8]
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	f000 80e2 	beq.w	800cfa2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800cde4:	893a      	ldrh	r2, [r7, #8]
 800cde6:	429a      	cmp	r2, r3
 800cde8:	f080 80db 	bcs.w	800cfa2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	893a      	ldrh	r2, [r7, #8]
 800cdf0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800cdf4:	687b      	ldr	r3, [r7, #4]
 800cdf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 0320 	and.w	r3, r3, #32
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d12b      	bne.n	800ce5c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	681a      	ldr	r2, [r3, #0]
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	681b      	ldr	r3, [r3, #0]
 800ce0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce12:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	689a      	ldr	r2, [r3, #8]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	681b      	ldr	r3, [r3, #0]
 800ce1e:	f022 0201 	bic.w	r2, r2, #1
 800ce22:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce24:	687b      	ldr	r3, [r7, #4]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	689a      	ldr	r2, [r3, #8]
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce32:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	2220      	movs	r2, #32
 800ce38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	2200      	movs	r2, #0
 800ce40:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	681a      	ldr	r2, [r3, #0]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	f022 0210 	bic.w	r2, r2, #16
 800ce50:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ce56:	4618      	mov	r0, r3
 800ce58:	f7fa f8af 	bl	8006fba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce68:	b29b      	uxth	r3, r3
 800ce6a:	1ad3      	subs	r3, r2, r3
 800ce6c:	b29b      	uxth	r3, r3
 800ce6e:	4619      	mov	r1, r3
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f000 f8b3 	bl	800cfdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce76:	e094      	b.n	800cfa2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce84:	b29b      	uxth	r3, r3
 800ce86:	1ad3      	subs	r3, r2, r3
 800ce88:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ce90:	b29b      	uxth	r3, r3
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	f000 8087 	beq.w	800cfa6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800ce98:	897b      	ldrh	r3, [r7, #10]
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	f000 8083 	beq.w	800cfa6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	681a      	ldr	r2, [r3, #0]
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800ceae:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	689b      	ldr	r3, [r3, #8]
 800ceb6:	687a      	ldr	r2, [r7, #4]
 800ceb8:	6812      	ldr	r2, [r2, #0]
 800ceba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cebe:	f023 0301 	bic.w	r3, r3, #1
 800cec2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	681a      	ldr	r2, [r3, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	681b      	ldr	r3, [r3, #0]
 800cee2:	f022 0210 	bic.w	r2, r2, #16
 800cee6:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cee8:	897b      	ldrh	r3, [r7, #10]
 800ceea:	4619      	mov	r1, r3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f000 f875 	bl	800cfdc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cef2:	e058      	b.n	800cfa6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cef4:	69fb      	ldr	r3, [r7, #28]
 800cef6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d00d      	beq.n	800cf1a <HAL_UART_IRQHandler+0x3ce>
 800cefe:	697b      	ldr	r3, [r7, #20]
 800cf00:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d008      	beq.n	800cf1a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800cf10:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f001 f8a4 	bl	800e060 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf18:	e048      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cf1a:	69fb      	ldr	r3, [r7, #28]
 800cf1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d012      	beq.n	800cf4a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cf24:	69bb      	ldr	r3, [r7, #24]
 800cf26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d104      	bne.n	800cf38 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cf2e:	697b      	ldr	r3, [r7, #20]
 800cf30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d008      	beq.n	800cf4a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d034      	beq.n	800cfaa <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	4798      	blx	r3
    }
    return;
 800cf48:	e02f      	b.n	800cfaa <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf4a:	69fb      	ldr	r3, [r7, #28]
 800cf4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d008      	beq.n	800cf66 <HAL_UART_IRQHandler+0x41a>
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d003      	beq.n	800cf66 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 fd88 	bl	800da74 <UART_EndTransmit_IT>
    return;
 800cf64:	e022      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf66:	69fb      	ldr	r3, [r7, #28]
 800cf68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf6c:	2b00      	cmp	r3, #0
 800cf6e:	d008      	beq.n	800cf82 <HAL_UART_IRQHandler+0x436>
 800cf70:	69bb      	ldr	r3, [r7, #24]
 800cf72:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d003      	beq.n	800cf82 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf7a:	6878      	ldr	r0, [r7, #4]
 800cf7c:	f001 f884 	bl	800e088 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf80:	e014      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf82:	69fb      	ldr	r3, [r7, #28]
 800cf84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d00f      	beq.n	800cfac <HAL_UART_IRQHandler+0x460>
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	da0c      	bge.n	800cfac <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f001 f86e 	bl	800e074 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800cf98:	e008      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
      return;
 800cf9a:	bf00      	nop
 800cf9c:	e006      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
    return;
 800cf9e:	bf00      	nop
 800cfa0:	e004      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
      return;
 800cfa2:	bf00      	nop
 800cfa4:	e002      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
      return;
 800cfa6:	bf00      	nop
 800cfa8:	e000      	b.n	800cfac <HAL_UART_IRQHandler+0x460>
    return;
 800cfaa:	bf00      	nop
  }
}
 800cfac:	3720      	adds	r7, #32
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	bd80      	pop	{r7, pc}
 800cfb2:	bf00      	nop

0800cfb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cfb4:	b480      	push	{r7}
 800cfb6:	b083      	sub	sp, #12
 800cfb8:	af00      	add	r7, sp, #0
 800cfba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cfbc:	bf00      	nop
 800cfbe:	370c      	adds	r7, #12
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cfc8:	b480      	push	{r7}
 800cfca:	b083      	sub	sp, #12
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800cfd0:	bf00      	nop
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfda:	4770      	bx	lr

0800cfdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cfdc:	b480      	push	{r7}
 800cfde:	b083      	sub	sp, #12
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	460b      	mov	r3, r1
 800cfe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cfe8:	bf00      	nop
 800cfea:	370c      	adds	r7, #12
 800cfec:	46bd      	mov	sp, r7
 800cfee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff2:	4770      	bx	lr

0800cff4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cff4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cff8:	b08c      	sub	sp, #48	; 0x30
 800cffa:	af00      	add	r7, sp, #0
 800cffc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cffe:	2300      	movs	r3, #0
 800d000:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d004:	697b      	ldr	r3, [r7, #20]
 800d006:	689a      	ldr	r2, [r3, #8]
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	691b      	ldr	r3, [r3, #16]
 800d00c:	431a      	orrs	r2, r3
 800d00e:	697b      	ldr	r3, [r7, #20]
 800d010:	695b      	ldr	r3, [r3, #20]
 800d012:	431a      	orrs	r2, r3
 800d014:	697b      	ldr	r3, [r7, #20]
 800d016:	69db      	ldr	r3, [r3, #28]
 800d018:	4313      	orrs	r3, r2
 800d01a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d01c:	697b      	ldr	r3, [r7, #20]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	681a      	ldr	r2, [r3, #0]
 800d022:	4bab      	ldr	r3, [pc, #684]	; (800d2d0 <UART_SetConfig+0x2dc>)
 800d024:	4013      	ands	r3, r2
 800d026:	697a      	ldr	r2, [r7, #20]
 800d028:	6812      	ldr	r2, [r2, #0]
 800d02a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d02c:	430b      	orrs	r3, r1
 800d02e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	685b      	ldr	r3, [r3, #4]
 800d036:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d03a:	697b      	ldr	r3, [r7, #20]
 800d03c:	68da      	ldr	r2, [r3, #12]
 800d03e:	697b      	ldr	r3, [r7, #20]
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	430a      	orrs	r2, r1
 800d044:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	699b      	ldr	r3, [r3, #24]
 800d04a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4aa0      	ldr	r2, [pc, #640]	; (800d2d4 <UART_SetConfig+0x2e0>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d004      	beq.n	800d060 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	6a1b      	ldr	r3, [r3, #32]
 800d05a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d05c:	4313      	orrs	r3, r2
 800d05e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	689b      	ldr	r3, [r3, #8]
 800d066:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800d06a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800d06e:	697a      	ldr	r2, [r7, #20]
 800d070:	6812      	ldr	r2, [r2, #0]
 800d072:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d074:	430b      	orrs	r3, r1
 800d076:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d07e:	f023 010f 	bic.w	r1, r3, #15
 800d082:	697b      	ldr	r3, [r7, #20]
 800d084:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	430a      	orrs	r2, r1
 800d08c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d08e:	697b      	ldr	r3, [r7, #20]
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	4a91      	ldr	r2, [pc, #580]	; (800d2d8 <UART_SetConfig+0x2e4>)
 800d094:	4293      	cmp	r3, r2
 800d096:	d125      	bne.n	800d0e4 <UART_SetConfig+0xf0>
 800d098:	4b90      	ldr	r3, [pc, #576]	; (800d2dc <UART_SetConfig+0x2e8>)
 800d09a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d09e:	f003 0303 	and.w	r3, r3, #3
 800d0a2:	2b03      	cmp	r3, #3
 800d0a4:	d81a      	bhi.n	800d0dc <UART_SetConfig+0xe8>
 800d0a6:	a201      	add	r2, pc, #4	; (adr r2, 800d0ac <UART_SetConfig+0xb8>)
 800d0a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0ac:	0800d0bd 	.word	0x0800d0bd
 800d0b0:	0800d0cd 	.word	0x0800d0cd
 800d0b4:	0800d0c5 	.word	0x0800d0c5
 800d0b8:	0800d0d5 	.word	0x0800d0d5
 800d0bc:	2301      	movs	r3, #1
 800d0be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d0c2:	e0d6      	b.n	800d272 <UART_SetConfig+0x27e>
 800d0c4:	2302      	movs	r3, #2
 800d0c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d0ca:	e0d2      	b.n	800d272 <UART_SetConfig+0x27e>
 800d0cc:	2304      	movs	r3, #4
 800d0ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d0d2:	e0ce      	b.n	800d272 <UART_SetConfig+0x27e>
 800d0d4:	2308      	movs	r3, #8
 800d0d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d0da:	e0ca      	b.n	800d272 <UART_SetConfig+0x27e>
 800d0dc:	2310      	movs	r3, #16
 800d0de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d0e2:	e0c6      	b.n	800d272 <UART_SetConfig+0x27e>
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a7d      	ldr	r2, [pc, #500]	; (800d2e0 <UART_SetConfig+0x2ec>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d138      	bne.n	800d160 <UART_SetConfig+0x16c>
 800d0ee:	4b7b      	ldr	r3, [pc, #492]	; (800d2dc <UART_SetConfig+0x2e8>)
 800d0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d0f4:	f003 030c 	and.w	r3, r3, #12
 800d0f8:	2b0c      	cmp	r3, #12
 800d0fa:	d82d      	bhi.n	800d158 <UART_SetConfig+0x164>
 800d0fc:	a201      	add	r2, pc, #4	; (adr r2, 800d104 <UART_SetConfig+0x110>)
 800d0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d102:	bf00      	nop
 800d104:	0800d139 	.word	0x0800d139
 800d108:	0800d159 	.word	0x0800d159
 800d10c:	0800d159 	.word	0x0800d159
 800d110:	0800d159 	.word	0x0800d159
 800d114:	0800d149 	.word	0x0800d149
 800d118:	0800d159 	.word	0x0800d159
 800d11c:	0800d159 	.word	0x0800d159
 800d120:	0800d159 	.word	0x0800d159
 800d124:	0800d141 	.word	0x0800d141
 800d128:	0800d159 	.word	0x0800d159
 800d12c:	0800d159 	.word	0x0800d159
 800d130:	0800d159 	.word	0x0800d159
 800d134:	0800d151 	.word	0x0800d151
 800d138:	2300      	movs	r3, #0
 800d13a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d13e:	e098      	b.n	800d272 <UART_SetConfig+0x27e>
 800d140:	2302      	movs	r3, #2
 800d142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d146:	e094      	b.n	800d272 <UART_SetConfig+0x27e>
 800d148:	2304      	movs	r3, #4
 800d14a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d14e:	e090      	b.n	800d272 <UART_SetConfig+0x27e>
 800d150:	2308      	movs	r3, #8
 800d152:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d156:	e08c      	b.n	800d272 <UART_SetConfig+0x27e>
 800d158:	2310      	movs	r3, #16
 800d15a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d15e:	e088      	b.n	800d272 <UART_SetConfig+0x27e>
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	4a5f      	ldr	r2, [pc, #380]	; (800d2e4 <UART_SetConfig+0x2f0>)
 800d166:	4293      	cmp	r3, r2
 800d168:	d125      	bne.n	800d1b6 <UART_SetConfig+0x1c2>
 800d16a:	4b5c      	ldr	r3, [pc, #368]	; (800d2dc <UART_SetConfig+0x2e8>)
 800d16c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d170:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d174:	2b30      	cmp	r3, #48	; 0x30
 800d176:	d016      	beq.n	800d1a6 <UART_SetConfig+0x1b2>
 800d178:	2b30      	cmp	r3, #48	; 0x30
 800d17a:	d818      	bhi.n	800d1ae <UART_SetConfig+0x1ba>
 800d17c:	2b20      	cmp	r3, #32
 800d17e:	d00a      	beq.n	800d196 <UART_SetConfig+0x1a2>
 800d180:	2b20      	cmp	r3, #32
 800d182:	d814      	bhi.n	800d1ae <UART_SetConfig+0x1ba>
 800d184:	2b00      	cmp	r3, #0
 800d186:	d002      	beq.n	800d18e <UART_SetConfig+0x19a>
 800d188:	2b10      	cmp	r3, #16
 800d18a:	d008      	beq.n	800d19e <UART_SetConfig+0x1aa>
 800d18c:	e00f      	b.n	800d1ae <UART_SetConfig+0x1ba>
 800d18e:	2300      	movs	r3, #0
 800d190:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d194:	e06d      	b.n	800d272 <UART_SetConfig+0x27e>
 800d196:	2302      	movs	r3, #2
 800d198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d19c:	e069      	b.n	800d272 <UART_SetConfig+0x27e>
 800d19e:	2304      	movs	r3, #4
 800d1a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1a4:	e065      	b.n	800d272 <UART_SetConfig+0x27e>
 800d1a6:	2308      	movs	r3, #8
 800d1a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1ac:	e061      	b.n	800d272 <UART_SetConfig+0x27e>
 800d1ae:	2310      	movs	r3, #16
 800d1b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1b4:	e05d      	b.n	800d272 <UART_SetConfig+0x27e>
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	4a4b      	ldr	r2, [pc, #300]	; (800d2e8 <UART_SetConfig+0x2f4>)
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	d125      	bne.n	800d20c <UART_SetConfig+0x218>
 800d1c0:	4b46      	ldr	r3, [pc, #280]	; (800d2dc <UART_SetConfig+0x2e8>)
 800d1c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d1ca:	2bc0      	cmp	r3, #192	; 0xc0
 800d1cc:	d016      	beq.n	800d1fc <UART_SetConfig+0x208>
 800d1ce:	2bc0      	cmp	r3, #192	; 0xc0
 800d1d0:	d818      	bhi.n	800d204 <UART_SetConfig+0x210>
 800d1d2:	2b80      	cmp	r3, #128	; 0x80
 800d1d4:	d00a      	beq.n	800d1ec <UART_SetConfig+0x1f8>
 800d1d6:	2b80      	cmp	r3, #128	; 0x80
 800d1d8:	d814      	bhi.n	800d204 <UART_SetConfig+0x210>
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d002      	beq.n	800d1e4 <UART_SetConfig+0x1f0>
 800d1de:	2b40      	cmp	r3, #64	; 0x40
 800d1e0:	d008      	beq.n	800d1f4 <UART_SetConfig+0x200>
 800d1e2:	e00f      	b.n	800d204 <UART_SetConfig+0x210>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1ea:	e042      	b.n	800d272 <UART_SetConfig+0x27e>
 800d1ec:	2302      	movs	r3, #2
 800d1ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1f2:	e03e      	b.n	800d272 <UART_SetConfig+0x27e>
 800d1f4:	2304      	movs	r3, #4
 800d1f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d1fa:	e03a      	b.n	800d272 <UART_SetConfig+0x27e>
 800d1fc:	2308      	movs	r3, #8
 800d1fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d202:	e036      	b.n	800d272 <UART_SetConfig+0x27e>
 800d204:	2310      	movs	r3, #16
 800d206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d20a:	e032      	b.n	800d272 <UART_SetConfig+0x27e>
 800d20c:	697b      	ldr	r3, [r7, #20]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	4a30      	ldr	r2, [pc, #192]	; (800d2d4 <UART_SetConfig+0x2e0>)
 800d212:	4293      	cmp	r3, r2
 800d214:	d12a      	bne.n	800d26c <UART_SetConfig+0x278>
 800d216:	4b31      	ldr	r3, [pc, #196]	; (800d2dc <UART_SetConfig+0x2e8>)
 800d218:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d21c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d220:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d224:	d01a      	beq.n	800d25c <UART_SetConfig+0x268>
 800d226:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d22a:	d81b      	bhi.n	800d264 <UART_SetConfig+0x270>
 800d22c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d230:	d00c      	beq.n	800d24c <UART_SetConfig+0x258>
 800d232:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d236:	d815      	bhi.n	800d264 <UART_SetConfig+0x270>
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d003      	beq.n	800d244 <UART_SetConfig+0x250>
 800d23c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d240:	d008      	beq.n	800d254 <UART_SetConfig+0x260>
 800d242:	e00f      	b.n	800d264 <UART_SetConfig+0x270>
 800d244:	2300      	movs	r3, #0
 800d246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d24a:	e012      	b.n	800d272 <UART_SetConfig+0x27e>
 800d24c:	2302      	movs	r3, #2
 800d24e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d252:	e00e      	b.n	800d272 <UART_SetConfig+0x27e>
 800d254:	2304      	movs	r3, #4
 800d256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d25a:	e00a      	b.n	800d272 <UART_SetConfig+0x27e>
 800d25c:	2308      	movs	r3, #8
 800d25e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d262:	e006      	b.n	800d272 <UART_SetConfig+0x27e>
 800d264:	2310      	movs	r3, #16
 800d266:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800d26a:	e002      	b.n	800d272 <UART_SetConfig+0x27e>
 800d26c:	2310      	movs	r3, #16
 800d26e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d272:	697b      	ldr	r3, [r7, #20]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	4a17      	ldr	r2, [pc, #92]	; (800d2d4 <UART_SetConfig+0x2e0>)
 800d278:	4293      	cmp	r3, r2
 800d27a:	f040 80a8 	bne.w	800d3ce <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d27e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d282:	2b08      	cmp	r3, #8
 800d284:	d834      	bhi.n	800d2f0 <UART_SetConfig+0x2fc>
 800d286:	a201      	add	r2, pc, #4	; (adr r2, 800d28c <UART_SetConfig+0x298>)
 800d288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d28c:	0800d2b1 	.word	0x0800d2b1
 800d290:	0800d2f1 	.word	0x0800d2f1
 800d294:	0800d2b9 	.word	0x0800d2b9
 800d298:	0800d2f1 	.word	0x0800d2f1
 800d29c:	0800d2bf 	.word	0x0800d2bf
 800d2a0:	0800d2f1 	.word	0x0800d2f1
 800d2a4:	0800d2f1 	.word	0x0800d2f1
 800d2a8:	0800d2f1 	.word	0x0800d2f1
 800d2ac:	0800d2c7 	.word	0x0800d2c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d2b0:	f7fd fc46 	bl	800ab40 <HAL_RCC_GetPCLK1Freq>
 800d2b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d2b6:	e021      	b.n	800d2fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d2b8:	4b0c      	ldr	r3, [pc, #48]	; (800d2ec <UART_SetConfig+0x2f8>)
 800d2ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d2bc:	e01e      	b.n	800d2fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d2be:	f7fd fbd1 	bl	800aa64 <HAL_RCC_GetSysClockFreq>
 800d2c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d2c4:	e01a      	b.n	800d2fc <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d2c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d2ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d2cc:	e016      	b.n	800d2fc <UART_SetConfig+0x308>
 800d2ce:	bf00      	nop
 800d2d0:	cfff69f3 	.word	0xcfff69f3
 800d2d4:	40008000 	.word	0x40008000
 800d2d8:	40013800 	.word	0x40013800
 800d2dc:	40021000 	.word	0x40021000
 800d2e0:	40004400 	.word	0x40004400
 800d2e4:	40004800 	.word	0x40004800
 800d2e8:	40004c00 	.word	0x40004c00
 800d2ec:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d2fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d2fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2fe:	2b00      	cmp	r3, #0
 800d300:	f000 812a 	beq.w	800d558 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	4a9e      	ldr	r2, [pc, #632]	; (800d584 <UART_SetConfig+0x590>)
 800d30a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d30e:	461a      	mov	r2, r3
 800d310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d312:	fbb3 f3f2 	udiv	r3, r3, r2
 800d316:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	685a      	ldr	r2, [r3, #4]
 800d31c:	4613      	mov	r3, r2
 800d31e:	005b      	lsls	r3, r3, #1
 800d320:	4413      	add	r3, r2
 800d322:	69ba      	ldr	r2, [r7, #24]
 800d324:	429a      	cmp	r2, r3
 800d326:	d305      	bcc.n	800d334 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d328:	697b      	ldr	r3, [r7, #20]
 800d32a:	685b      	ldr	r3, [r3, #4]
 800d32c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d32e:	69ba      	ldr	r2, [r7, #24]
 800d330:	429a      	cmp	r2, r3
 800d332:	d903      	bls.n	800d33c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800d334:	2301      	movs	r3, #1
 800d336:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d33a:	e10d      	b.n	800d558 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d33c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d33e:	2200      	movs	r2, #0
 800d340:	60bb      	str	r3, [r7, #8]
 800d342:	60fa      	str	r2, [r7, #12]
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d348:	4a8e      	ldr	r2, [pc, #568]	; (800d584 <UART_SetConfig+0x590>)
 800d34a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d34e:	b29b      	uxth	r3, r3
 800d350:	2200      	movs	r2, #0
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	607a      	str	r2, [r7, #4]
 800d356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d35a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d35e:	f7f3 fcbb 	bl	8000cd8 <__aeabi_uldivmod>
 800d362:	4602      	mov	r2, r0
 800d364:	460b      	mov	r3, r1
 800d366:	4610      	mov	r0, r2
 800d368:	4619      	mov	r1, r3
 800d36a:	f04f 0200 	mov.w	r2, #0
 800d36e:	f04f 0300 	mov.w	r3, #0
 800d372:	020b      	lsls	r3, r1, #8
 800d374:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d378:	0202      	lsls	r2, r0, #8
 800d37a:	6979      	ldr	r1, [r7, #20]
 800d37c:	6849      	ldr	r1, [r1, #4]
 800d37e:	0849      	lsrs	r1, r1, #1
 800d380:	2000      	movs	r0, #0
 800d382:	460c      	mov	r4, r1
 800d384:	4605      	mov	r5, r0
 800d386:	eb12 0804 	adds.w	r8, r2, r4
 800d38a:	eb43 0905 	adc.w	r9, r3, r5
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	2200      	movs	r2, #0
 800d394:	469a      	mov	sl, r3
 800d396:	4693      	mov	fp, r2
 800d398:	4652      	mov	r2, sl
 800d39a:	465b      	mov	r3, fp
 800d39c:	4640      	mov	r0, r8
 800d39e:	4649      	mov	r1, r9
 800d3a0:	f7f3 fc9a 	bl	8000cd8 <__aeabi_uldivmod>
 800d3a4:	4602      	mov	r2, r0
 800d3a6:	460b      	mov	r3, r1
 800d3a8:	4613      	mov	r3, r2
 800d3aa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d3ac:	6a3b      	ldr	r3, [r7, #32]
 800d3ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d3b2:	d308      	bcc.n	800d3c6 <UART_SetConfig+0x3d2>
 800d3b4:	6a3b      	ldr	r3, [r7, #32]
 800d3b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d3ba:	d204      	bcs.n	800d3c6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	6a3a      	ldr	r2, [r7, #32]
 800d3c2:	60da      	str	r2, [r3, #12]
 800d3c4:	e0c8      	b.n	800d558 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d3cc:	e0c4      	b.n	800d558 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	69db      	ldr	r3, [r3, #28]
 800d3d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d3d6:	d168      	bne.n	800d4aa <UART_SetConfig+0x4b6>
  {
    switch (clocksource)
 800d3d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d3dc:	2b08      	cmp	r3, #8
 800d3de:	d828      	bhi.n	800d432 <UART_SetConfig+0x43e>
 800d3e0:	a201      	add	r2, pc, #4	; (adr r2, 800d3e8 <UART_SetConfig+0x3f4>)
 800d3e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3e6:	bf00      	nop
 800d3e8:	0800d40d 	.word	0x0800d40d
 800d3ec:	0800d415 	.word	0x0800d415
 800d3f0:	0800d41d 	.word	0x0800d41d
 800d3f4:	0800d433 	.word	0x0800d433
 800d3f8:	0800d423 	.word	0x0800d423
 800d3fc:	0800d433 	.word	0x0800d433
 800d400:	0800d433 	.word	0x0800d433
 800d404:	0800d433 	.word	0x0800d433
 800d408:	0800d42b 	.word	0x0800d42b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d40c:	f7fd fb98 	bl	800ab40 <HAL_RCC_GetPCLK1Freq>
 800d410:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d412:	e014      	b.n	800d43e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d414:	f7fd fbaa 	bl	800ab6c <HAL_RCC_GetPCLK2Freq>
 800d418:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d41a:	e010      	b.n	800d43e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d41c:	4b5a      	ldr	r3, [pc, #360]	; (800d588 <UART_SetConfig+0x594>)
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d420:	e00d      	b.n	800d43e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d422:	f7fd fb1f 	bl	800aa64 <HAL_RCC_GetSysClockFreq>
 800d426:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d428:	e009      	b.n	800d43e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d42a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d42e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d430:	e005      	b.n	800d43e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800d432:	2300      	movs	r3, #0
 800d434:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d436:	2301      	movs	r3, #1
 800d438:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d43c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d440:	2b00      	cmp	r3, #0
 800d442:	f000 8089 	beq.w	800d558 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d44a:	4a4e      	ldr	r2, [pc, #312]	; (800d584 <UART_SetConfig+0x590>)
 800d44c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d450:	461a      	mov	r2, r3
 800d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d454:	fbb3 f3f2 	udiv	r3, r3, r2
 800d458:	005a      	lsls	r2, r3, #1
 800d45a:	697b      	ldr	r3, [r7, #20]
 800d45c:	685b      	ldr	r3, [r3, #4]
 800d45e:	085b      	lsrs	r3, r3, #1
 800d460:	441a      	add	r2, r3
 800d462:	697b      	ldr	r3, [r7, #20]
 800d464:	685b      	ldr	r3, [r3, #4]
 800d466:	fbb2 f3f3 	udiv	r3, r2, r3
 800d46a:	b29b      	uxth	r3, r3
 800d46c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d46e:	6a3b      	ldr	r3, [r7, #32]
 800d470:	2b0f      	cmp	r3, #15
 800d472:	d916      	bls.n	800d4a2 <UART_SetConfig+0x4ae>
 800d474:	6a3b      	ldr	r3, [r7, #32]
 800d476:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d47a:	d212      	bcs.n	800d4a2 <UART_SetConfig+0x4ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d47c:	6a3b      	ldr	r3, [r7, #32]
 800d47e:	b29b      	uxth	r3, r3
 800d480:	f023 030f 	bic.w	r3, r3, #15
 800d484:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d486:	6a3b      	ldr	r3, [r7, #32]
 800d488:	085b      	lsrs	r3, r3, #1
 800d48a:	b29b      	uxth	r3, r3
 800d48c:	f003 0307 	and.w	r3, r3, #7
 800d490:	b29a      	uxth	r2, r3
 800d492:	8bfb      	ldrh	r3, [r7, #30]
 800d494:	4313      	orrs	r3, r2
 800d496:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800d498:	697b      	ldr	r3, [r7, #20]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	8bfa      	ldrh	r2, [r7, #30]
 800d49e:	60da      	str	r2, [r3, #12]
 800d4a0:	e05a      	b.n	800d558 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800d4a8:	e056      	b.n	800d558 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d4aa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d4ae:	2b08      	cmp	r3, #8
 800d4b0:	d827      	bhi.n	800d502 <UART_SetConfig+0x50e>
 800d4b2:	a201      	add	r2, pc, #4	; (adr r2, 800d4b8 <UART_SetConfig+0x4c4>)
 800d4b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4b8:	0800d4dd 	.word	0x0800d4dd
 800d4bc:	0800d4e5 	.word	0x0800d4e5
 800d4c0:	0800d4ed 	.word	0x0800d4ed
 800d4c4:	0800d503 	.word	0x0800d503
 800d4c8:	0800d4f3 	.word	0x0800d4f3
 800d4cc:	0800d503 	.word	0x0800d503
 800d4d0:	0800d503 	.word	0x0800d503
 800d4d4:	0800d503 	.word	0x0800d503
 800d4d8:	0800d4fb 	.word	0x0800d4fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d4dc:	f7fd fb30 	bl	800ab40 <HAL_RCC_GetPCLK1Freq>
 800d4e0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d4e2:	e014      	b.n	800d50e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d4e4:	f7fd fb42 	bl	800ab6c <HAL_RCC_GetPCLK2Freq>
 800d4e8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d4ea:	e010      	b.n	800d50e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d4ec:	4b26      	ldr	r3, [pc, #152]	; (800d588 <UART_SetConfig+0x594>)
 800d4ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d4f0:	e00d      	b.n	800d50e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d4f2:	f7fd fab7 	bl	800aa64 <HAL_RCC_GetSysClockFreq>
 800d4f6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800d4f8:	e009      	b.n	800d50e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800d500:	e005      	b.n	800d50e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800d502:	2300      	movs	r3, #0
 800d504:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800d506:	2301      	movs	r3, #1
 800d508:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800d50c:	bf00      	nop
    }

    if (pclk != 0U)
 800d50e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d510:	2b00      	cmp	r3, #0
 800d512:	d021      	beq.n	800d558 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d518:	4a1a      	ldr	r2, [pc, #104]	; (800d584 <UART_SetConfig+0x590>)
 800d51a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d51e:	461a      	mov	r2, r3
 800d520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d522:	fbb3 f2f2 	udiv	r2, r3, r2
 800d526:	697b      	ldr	r3, [r7, #20]
 800d528:	685b      	ldr	r3, [r3, #4]
 800d52a:	085b      	lsrs	r3, r3, #1
 800d52c:	441a      	add	r2, r3
 800d52e:	697b      	ldr	r3, [r7, #20]
 800d530:	685b      	ldr	r3, [r3, #4]
 800d532:	fbb2 f3f3 	udiv	r3, r2, r3
 800d536:	b29b      	uxth	r3, r3
 800d538:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d53a:	6a3b      	ldr	r3, [r7, #32]
 800d53c:	2b0f      	cmp	r3, #15
 800d53e:	d908      	bls.n	800d552 <UART_SetConfig+0x55e>
 800d540:	6a3b      	ldr	r3, [r7, #32]
 800d542:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d546:	d204      	bcs.n	800d552 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = usartdiv;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	6a3a      	ldr	r2, [r7, #32]
 800d54e:	60da      	str	r2, [r3, #12]
 800d550:	e002      	b.n	800d558 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800d552:	2301      	movs	r3, #1
 800d554:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	2201      	movs	r2, #1
 800d55c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	2201      	movs	r2, #1
 800d564:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d568:	697b      	ldr	r3, [r7, #20]
 800d56a:	2200      	movs	r2, #0
 800d56c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800d56e:	697b      	ldr	r3, [r7, #20]
 800d570:	2200      	movs	r2, #0
 800d572:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800d574:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3730      	adds	r7, #48	; 0x30
 800d57c:	46bd      	mov	sp, r7
 800d57e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d582:	bf00      	nop
 800d584:	08013bf4 	.word	0x08013bf4
 800d588:	00f42400 	.word	0x00f42400

0800d58c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d58c:	b480      	push	{r7}
 800d58e:	b083      	sub	sp, #12
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d598:	f003 0301 	and.w	r3, r3, #1
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d00a      	beq.n	800d5b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ba:	f003 0302 	and.w	r3, r3, #2
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00a      	beq.n	800d5d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5dc:	f003 0304 	and.w	r3, r3, #4
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00a      	beq.n	800d5fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	685b      	ldr	r3, [r3, #4]
 800d5ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	430a      	orrs	r2, r1
 800d5f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5fe:	f003 0308 	and.w	r3, r3, #8
 800d602:	2b00      	cmp	r3, #0
 800d604:	d00a      	beq.n	800d61c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	685b      	ldr	r3, [r3, #4]
 800d60c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	430a      	orrs	r2, r1
 800d61a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d620:	f003 0310 	and.w	r3, r3, #16
 800d624:	2b00      	cmp	r3, #0
 800d626:	d00a      	beq.n	800d63e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	681b      	ldr	r3, [r3, #0]
 800d62c:	689b      	ldr	r3, [r3, #8]
 800d62e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	681b      	ldr	r3, [r3, #0]
 800d63a:	430a      	orrs	r2, r1
 800d63c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d642:	f003 0320 	and.w	r3, r3, #32
 800d646:	2b00      	cmp	r3, #0
 800d648:	d00a      	beq.n	800d660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	689b      	ldr	r3, [r3, #8]
 800d650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	681b      	ldr	r3, [r3, #0]
 800d65c:	430a      	orrs	r2, r1
 800d65e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d01a      	beq.n	800d6a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	685b      	ldr	r3, [r3, #4]
 800d672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	681b      	ldr	r3, [r3, #0]
 800d67e:	430a      	orrs	r2, r1
 800d680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d68a:	d10a      	bne.n	800d6a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	681b      	ldr	r3, [r3, #0]
 800d690:	685b      	ldr	r3, [r3, #4]
 800d692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	681b      	ldr	r3, [r3, #0]
 800d69e:	430a      	orrs	r2, r1
 800d6a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d00a      	beq.n	800d6c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	430a      	orrs	r2, r1
 800d6c2:	605a      	str	r2, [r3, #4]
  }
}
 800d6c4:	bf00      	nop
 800d6c6:	370c      	adds	r7, #12
 800d6c8:	46bd      	mov	sp, r7
 800d6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ce:	4770      	bx	lr

0800d6d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af02      	add	r7, sp, #8
 800d6d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6e0:	f7f7 ffe0 	bl	80056a4 <HAL_GetTick>
 800d6e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	f003 0308 	and.w	r3, r3, #8
 800d6f0:	2b08      	cmp	r3, #8
 800d6f2:	d10e      	bne.n	800d712 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6f8:	9300      	str	r3, [sp, #0]
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d702:	6878      	ldr	r0, [r7, #4]
 800d704:	f000 f82f 	bl	800d766 <UART_WaitOnFlagUntilTimeout>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d001      	beq.n	800d712 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d70e:	2303      	movs	r3, #3
 800d710:	e025      	b.n	800d75e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	f003 0304 	and.w	r3, r3, #4
 800d71c:	2b04      	cmp	r3, #4
 800d71e:	d10e      	bne.n	800d73e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d720:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d724:	9300      	str	r3, [sp, #0]
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	2200      	movs	r2, #0
 800d72a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 f819 	bl	800d766 <UART_WaitOnFlagUntilTimeout>
 800d734:	4603      	mov	r3, r0
 800d736:	2b00      	cmp	r3, #0
 800d738:	d001      	beq.n	800d73e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d73a:	2303      	movs	r3, #3
 800d73c:	e00f      	b.n	800d75e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	2220      	movs	r2, #32
 800d742:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2220      	movs	r2, #32
 800d74a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800d75c:	2300      	movs	r3, #0
}
 800d75e:	4618      	mov	r0, r3
 800d760:	3710      	adds	r7, #16
 800d762:	46bd      	mov	sp, r7
 800d764:	bd80      	pop	{r7, pc}

0800d766 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d766:	b580      	push	{r7, lr}
 800d768:	b084      	sub	sp, #16
 800d76a:	af00      	add	r7, sp, #0
 800d76c:	60f8      	str	r0, [r7, #12]
 800d76e:	60b9      	str	r1, [r7, #8]
 800d770:	603b      	str	r3, [r7, #0]
 800d772:	4613      	mov	r3, r2
 800d774:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d776:	e062      	b.n	800d83e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d778:	69bb      	ldr	r3, [r7, #24]
 800d77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d77e:	d05e      	beq.n	800d83e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d780:	f7f7 ff90 	bl	80056a4 <HAL_GetTick>
 800d784:	4602      	mov	r2, r0
 800d786:	683b      	ldr	r3, [r7, #0]
 800d788:	1ad3      	subs	r3, r2, r3
 800d78a:	69ba      	ldr	r2, [r7, #24]
 800d78c:	429a      	cmp	r2, r3
 800d78e:	d302      	bcc.n	800d796 <UART_WaitOnFlagUntilTimeout+0x30>
 800d790:	69bb      	ldr	r3, [r7, #24]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d11d      	bne.n	800d7d2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	681a      	ldr	r2, [r3, #0]
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d7a4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	689a      	ldr	r2, [r3, #8]
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f022 0201 	bic.w	r2, r2, #1
 800d7b4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	2220      	movs	r2, #32
 800d7ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	2220      	movs	r2, #32
 800d7c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	2200      	movs	r2, #0
 800d7ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800d7ce:	2303      	movs	r3, #3
 800d7d0:	e045      	b.n	800d85e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	f003 0304 	and.w	r3, r3, #4
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d02e      	beq.n	800d83e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d7e0:	68fb      	ldr	r3, [r7, #12]
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	69db      	ldr	r3, [r3, #28]
 800d7e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d7ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d7ee:	d126      	bne.n	800d83e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d7f0:	68fb      	ldr	r3, [r7, #12]
 800d7f2:	681b      	ldr	r3, [r3, #0]
 800d7f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	681b      	ldr	r3, [r3, #0]
 800d7fe:	681a      	ldr	r2, [r3, #0]
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800d808:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	689a      	ldr	r2, [r3, #8]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	681b      	ldr	r3, [r3, #0]
 800d814:	f022 0201 	bic.w	r2, r2, #1
 800d818:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	2220      	movs	r2, #32
 800d81e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	2220      	movs	r2, #32
 800d826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d82a:	68fb      	ldr	r3, [r7, #12]
 800d82c:	2220      	movs	r2, #32
 800d82e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d832:	68fb      	ldr	r3, [r7, #12]
 800d834:	2200      	movs	r2, #0
 800d836:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800d83a:	2303      	movs	r3, #3
 800d83c:	e00f      	b.n	800d85e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d83e:	68fb      	ldr	r3, [r7, #12]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	69da      	ldr	r2, [r3, #28]
 800d844:	68bb      	ldr	r3, [r7, #8]
 800d846:	4013      	ands	r3, r2
 800d848:	68ba      	ldr	r2, [r7, #8]
 800d84a:	429a      	cmp	r2, r3
 800d84c:	bf0c      	ite	eq
 800d84e:	2301      	moveq	r3, #1
 800d850:	2300      	movne	r3, #0
 800d852:	b2db      	uxtb	r3, r3
 800d854:	461a      	mov	r2, r3
 800d856:	79fb      	ldrb	r3, [r7, #7]
 800d858:	429a      	cmp	r2, r3
 800d85a:	d08d      	beq.n	800d778 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d85c:	2300      	movs	r3, #0
}
 800d85e:	4618      	mov	r0, r3
 800d860:	3710      	adds	r7, #16
 800d862:	46bd      	mov	sp, r7
 800d864:	bd80      	pop	{r7, pc}
	...

0800d868 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d868:	b480      	push	{r7}
 800d86a:	b085      	sub	sp, #20
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	60f8      	str	r0, [r7, #12]
 800d870:	60b9      	str	r1, [r7, #8]
 800d872:	4613      	mov	r3, r2
 800d874:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	68ba      	ldr	r2, [r7, #8]
 800d87a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	88fa      	ldrh	r2, [r7, #6]
 800d880:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	88fa      	ldrh	r2, [r7, #6]
 800d888:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	2200      	movs	r2, #0
 800d890:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	689b      	ldr	r3, [r3, #8]
 800d896:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d89a:	d10e      	bne.n	800d8ba <UART_Start_Receive_IT+0x52>
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d105      	bne.n	800d8b0 <UART_Start_Receive_IT+0x48>
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d8aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d8ae:	e02d      	b.n	800d90c <UART_Start_Receive_IT+0xa4>
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	22ff      	movs	r2, #255	; 0xff
 800d8b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d8b8:	e028      	b.n	800d90c <UART_Start_Receive_IT+0xa4>
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	689b      	ldr	r3, [r3, #8]
 800d8be:	2b00      	cmp	r3, #0
 800d8c0:	d10d      	bne.n	800d8de <UART_Start_Receive_IT+0x76>
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	691b      	ldr	r3, [r3, #16]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d104      	bne.n	800d8d4 <UART_Start_Receive_IT+0x6c>
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	22ff      	movs	r2, #255	; 0xff
 800d8ce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d8d2:	e01b      	b.n	800d90c <UART_Start_Receive_IT+0xa4>
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	227f      	movs	r2, #127	; 0x7f
 800d8d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d8dc:	e016      	b.n	800d90c <UART_Start_Receive_IT+0xa4>
 800d8de:	68fb      	ldr	r3, [r7, #12]
 800d8e0:	689b      	ldr	r3, [r3, #8]
 800d8e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d8e6:	d10d      	bne.n	800d904 <UART_Start_Receive_IT+0x9c>
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	691b      	ldr	r3, [r3, #16]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d104      	bne.n	800d8fa <UART_Start_Receive_IT+0x92>
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	227f      	movs	r2, #127	; 0x7f
 800d8f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d8f8:	e008      	b.n	800d90c <UART_Start_Receive_IT+0xa4>
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	223f      	movs	r2, #63	; 0x3f
 800d8fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800d902:	e003      	b.n	800d90c <UART_Start_Receive_IT+0xa4>
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	2200      	movs	r2, #0
 800d908:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2222      	movs	r2, #34	; 0x22
 800d918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	689a      	ldr	r2, [r3, #8]
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	f042 0201 	orr.w	r2, r2, #1
 800d92a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d934:	d12a      	bne.n	800d98c <UART_Start_Receive_IT+0x124>
 800d936:	68fb      	ldr	r3, [r7, #12]
 800d938:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800d93c:	88fa      	ldrh	r2, [r7, #6]
 800d93e:	429a      	cmp	r2, r3
 800d940:	d324      	bcc.n	800d98c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d94a:	d107      	bne.n	800d95c <UART_Start_Receive_IT+0xf4>
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	691b      	ldr	r3, [r3, #16]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d103      	bne.n	800d95c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	4a1f      	ldr	r2, [pc, #124]	; (800d9d4 <UART_Start_Receive_IT+0x16c>)
 800d958:	671a      	str	r2, [r3, #112]	; 0x70
 800d95a:	e002      	b.n	800d962 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	4a1e      	ldr	r2, [pc, #120]	; (800d9d8 <UART_Start_Receive_IT+0x170>)
 800d960:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	2200      	movs	r2, #0
 800d966:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	681a      	ldr	r2, [r3, #0]
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d978:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	689a      	ldr	r2, [r3, #8]
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800d988:	609a      	str	r2, [r3, #8]
 800d98a:	e01b      	b.n	800d9c4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	689b      	ldr	r3, [r3, #8]
 800d990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d994:	d107      	bne.n	800d9a6 <UART_Start_Receive_IT+0x13e>
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	691b      	ldr	r3, [r3, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d103      	bne.n	800d9a6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	4a0e      	ldr	r2, [pc, #56]	; (800d9dc <UART_Start_Receive_IT+0x174>)
 800d9a2:	671a      	str	r2, [r3, #112]	; 0x70
 800d9a4:	e002      	b.n	800d9ac <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	4a0d      	ldr	r2, [pc, #52]	; (800d9e0 <UART_Start_Receive_IT+0x178>)
 800d9aa:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	2200      	movs	r2, #0
 800d9b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	681a      	ldr	r2, [r3, #0]
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800d9c2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800d9c4:	2300      	movs	r3, #0
}
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	3714      	adds	r7, #20
 800d9ca:	46bd      	mov	sp, r7
 800d9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d0:	4770      	bx	lr
 800d9d2:	bf00      	nop
 800d9d4:	0800de5d 	.word	0x0800de5d
 800d9d8:	0800dc59 	.word	0x0800dc59
 800d9dc:	0800db81 	.word	0x0800db81
 800d9e0:	0800daa9 	.word	0x0800daa9

0800d9e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d9e4:	b480      	push	{r7}
 800d9e6:	b083      	sub	sp, #12
 800d9e8:	af00      	add	r7, sp, #0
 800d9ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800d9fa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	689b      	ldr	r3, [r3, #8]
 800da02:	687a      	ldr	r2, [r7, #4]
 800da04:	6812      	ldr	r2, [r2, #0]
 800da06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800da0a:	f023 0301 	bic.w	r3, r3, #1
 800da0e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800da14:	2b01      	cmp	r3, #1
 800da16:	d107      	bne.n	800da28 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	681a      	ldr	r2, [r3, #0]
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	f022 0210 	bic.w	r2, r2, #16
 800da26:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2220      	movs	r2, #32
 800da2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	2200      	movs	r2, #0
 800da34:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	2200      	movs	r2, #0
 800da3a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800da3c:	bf00      	nop
 800da3e:	370c      	adds	r7, #12
 800da40:	46bd      	mov	sp, r7
 800da42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da46:	4770      	bx	lr

0800da48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800da48:	b580      	push	{r7, lr}
 800da4a:	b084      	sub	sp, #16
 800da4c:	af00      	add	r7, sp, #0
 800da4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	2200      	movs	r2, #0
 800da5a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	2200      	movs	r2, #0
 800da62:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800da66:	68f8      	ldr	r0, [r7, #12]
 800da68:	f7ff faae 	bl	800cfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800da6c:	bf00      	nop
 800da6e:	3710      	adds	r7, #16
 800da70:	46bd      	mov	sp, r7
 800da72:	bd80      	pop	{r7, pc}

0800da74 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
 800da7a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	681a      	ldr	r2, [r3, #0]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	681b      	ldr	r3, [r3, #0]
 800da86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da8a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2220      	movs	r2, #32
 800da90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff fa8a 	bl	800cfb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800daa0:	bf00      	nop
 800daa2:	3708      	adds	r7, #8
 800daa4:	46bd      	mov	sp, r7
 800daa6:	bd80      	pop	{r7, pc}

0800daa8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b084      	sub	sp, #16
 800daac:	af00      	add	r7, sp, #0
 800daae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dab6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dabe:	2b22      	cmp	r3, #34	; 0x22
 800dac0:	d152      	bne.n	800db68 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	681b      	ldr	r3, [r3, #0]
 800dac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dac8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800daca:	89bb      	ldrh	r3, [r7, #12]
 800dacc:	b2d9      	uxtb	r1, r3
 800dace:	89fb      	ldrh	r3, [r7, #14]
 800dad0:	b2da      	uxtb	r2, r3
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dad6:	400a      	ands	r2, r1
 800dad8:	b2d2      	uxtb	r2, r2
 800dada:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dae0:	1c5a      	adds	r2, r3, #1
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800daec:	b29b      	uxth	r3, r3
 800daee:	3b01      	subs	r3, #1
 800daf0:	b29a      	uxth	r2, r3
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dafe:	b29b      	uxth	r3, r3
 800db00:	2b00      	cmp	r3, #0
 800db02:	d139      	bne.n	800db78 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	681b      	ldr	r3, [r3, #0]
 800db0e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800db12:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	681b      	ldr	r3, [r3, #0]
 800db18:	689a      	ldr	r2, [r3, #8]
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	f022 0201 	bic.w	r2, r2, #1
 800db22:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	2220      	movs	r2, #32
 800db28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2200      	movs	r2, #0
 800db30:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db32:	687b      	ldr	r3, [r7, #4]
 800db34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db36:	2b01      	cmp	r3, #1
 800db38:	d10f      	bne.n	800db5a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	681a      	ldr	r2, [r3, #0]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	f022 0210 	bic.w	r2, r2, #16
 800db48:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f7ff fa42 	bl	800cfdc <HAL_UARTEx_RxEventCallback>
 800db58:	e002      	b.n	800db60 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f7f7 fce6 	bl	800552c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800db66:	e007      	b.n	800db78 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	681b      	ldr	r3, [r3, #0]
 800db6c:	699a      	ldr	r2, [r3, #24]
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	f042 0208 	orr.w	r2, r2, #8
 800db76:	619a      	str	r2, [r3, #24]
}
 800db78:	bf00      	nop
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}

0800db80 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800db80:	b580      	push	{r7, lr}
 800db82:	b084      	sub	sp, #16
 800db84:	af00      	add	r7, sp, #0
 800db86:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800db8e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800db96:	2b22      	cmp	r3, #34	; 0x22
 800db98:	d152      	bne.n	800dc40 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	681b      	ldr	r3, [r3, #0]
 800db9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dba0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dba6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800dba8:	89ba      	ldrh	r2, [r7, #12]
 800dbaa:	89fb      	ldrh	r3, [r7, #14]
 800dbac:	4013      	ands	r3, r2
 800dbae:	b29a      	uxth	r2, r3
 800dbb0:	68bb      	ldr	r3, [r7, #8]
 800dbb2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dbb8:	1c9a      	adds	r2, r3, #2
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	3b01      	subs	r3, #1
 800dbc8:	b29a      	uxth	r2, r3
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dbd6:	b29b      	uxth	r3, r3
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d139      	bne.n	800dc50 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	681a      	ldr	r2, [r3, #0]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800dbea:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	689a      	ldr	r2, [r3, #8]
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	681b      	ldr	r3, [r3, #0]
 800dbf6:	f022 0201 	bic.w	r2, r2, #1
 800dbfa:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2220      	movs	r2, #32
 800dc00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	2200      	movs	r2, #0
 800dc08:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dc0a:	687b      	ldr	r3, [r7, #4]
 800dc0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dc0e:	2b01      	cmp	r3, #1
 800dc10:	d10f      	bne.n	800dc32 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	681a      	ldr	r2, [r3, #0]
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	f022 0210 	bic.w	r2, r2, #16
 800dc20:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dc28:	4619      	mov	r1, r3
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f7ff f9d6 	bl	800cfdc <HAL_UARTEx_RxEventCallback>
 800dc30:	e002      	b.n	800dc38 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800dc32:	6878      	ldr	r0, [r7, #4]
 800dc34:	f7f7 fc7a 	bl	800552c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dc3e:	e007      	b.n	800dc50 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	699a      	ldr	r2, [r3, #24]
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	f042 0208 	orr.w	r2, r2, #8
 800dc4e:	619a      	str	r2, [r3, #24]
}
 800dc50:	bf00      	nop
 800dc52:	3710      	adds	r7, #16
 800dc54:	46bd      	mov	sp, r7
 800dc56:	bd80      	pop	{r7, pc}

0800dc58 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b088      	sub	sp, #32
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800dc66:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	69db      	ldr	r3, [r3, #28]
 800dc6e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	681b      	ldr	r3, [r3, #0]
 800dc74:	681b      	ldr	r3, [r3, #0]
 800dc76:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	689b      	ldr	r3, [r3, #8]
 800dc7e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dc86:	2b22      	cmp	r3, #34	; 0x22
 800dc88:	f040 80da 	bne.w	800de40 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800dc92:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dc94:	e0aa      	b.n	800ddec <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681b      	ldr	r3, [r3, #0]
 800dc9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800dc9e:	89bb      	ldrh	r3, [r7, #12]
 800dca0:	b2d9      	uxtb	r1, r3
 800dca2:	8b7b      	ldrh	r3, [r7, #26]
 800dca4:	b2da      	uxtb	r2, r3
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcaa:	400a      	ands	r2, r1
 800dcac:	b2d2      	uxtb	r2, r2
 800dcae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dcb4:	1c5a      	adds	r2, r3, #1
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dcc0:	b29b      	uxth	r3, r3
 800dcc2:	3b01      	subs	r3, #1
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	681b      	ldr	r3, [r3, #0]
 800dcd0:	69db      	ldr	r3, [r3, #28]
 800dcd2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	f003 0307 	and.w	r3, r3, #7
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d04d      	beq.n	800dd7a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dcde:	69fb      	ldr	r3, [r7, #28]
 800dce0:	f003 0301 	and.w	r3, r3, #1
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d010      	beq.n	800dd0a <UART_RxISR_8BIT_FIFOEN+0xb2>
 800dce8:	697b      	ldr	r3, [r7, #20]
 800dcea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00b      	beq.n	800dd0a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2201      	movs	r2, #1
 800dcf8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd00:	f043 0201 	orr.w	r2, r3, #1
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd0a:	69fb      	ldr	r3, [r7, #28]
 800dd0c:	f003 0302 	and.w	r3, r3, #2
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d010      	beq.n	800dd36 <UART_RxISR_8BIT_FIFOEN+0xde>
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	f003 0301 	and.w	r3, r3, #1
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d00b      	beq.n	800dd36 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	2202      	movs	r2, #2
 800dd24:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd2c:	f043 0204 	orr.w	r2, r3, #4
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	f003 0304 	and.w	r3, r3, #4
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d010      	beq.n	800dd62 <UART_RxISR_8BIT_FIFOEN+0x10a>
 800dd40:	693b      	ldr	r3, [r7, #16]
 800dd42:	f003 0301 	and.w	r3, r3, #1
 800dd46:	2b00      	cmp	r3, #0
 800dd48:	d00b      	beq.n	800dd62 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	2204      	movs	r2, #4
 800dd50:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd58:	f043 0202 	orr.w	r2, r3, #2
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800dd68:	2b00      	cmp	r3, #0
 800dd6a:	d006      	beq.n	800dd7a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f7ff f92b 	bl	800cfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dd72:	687b      	ldr	r3, [r7, #4]
 800dd74:	2200      	movs	r2, #0
 800dd76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dd80:	b29b      	uxth	r3, r3
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d132      	bne.n	800ddec <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	681a      	ldr	r2, [r3, #0]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800dd94:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	681b      	ldr	r3, [r3, #0]
 800dd9a:	689b      	ldr	r3, [r3, #8]
 800dd9c:	687a      	ldr	r2, [r7, #4]
 800dd9e:	6812      	ldr	r2, [r2, #0]
 800dda0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dda4:	f023 0301 	bic.w	r3, r3, #1
 800dda8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2220      	movs	r2, #32
 800ddae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddbc:	2b01      	cmp	r3, #1
 800ddbe:	d10f      	bne.n	800dde0 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	681a      	ldr	r2, [r3, #0]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681b      	ldr	r3, [r3, #0]
 800ddca:	f022 0210 	bic.w	r2, r2, #16
 800ddce:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ddd6:	4619      	mov	r1, r3
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f7ff f8ff 	bl	800cfdc <HAL_UARTEx_RxEventCallback>
 800ddde:	e002      	b.n	800dde6 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f7f7 fba3 	bl	800552c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ddec:	89fb      	ldrh	r3, [r7, #14]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d005      	beq.n	800ddfe <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	f003 0320 	and.w	r3, r3, #32
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	f47f af4c 	bne.w	800dc96 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800de04:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800de06:	897b      	ldrh	r3, [r7, #10]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d021      	beq.n	800de50 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de12:	897a      	ldrh	r2, [r7, #10]
 800de14:	429a      	cmp	r2, r3
 800de16:	d21b      	bcs.n	800de50 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	689a      	ldr	r2, [r3, #8]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800de26:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4a0b      	ldr	r2, [pc, #44]	; (800de58 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800de2c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	681a      	ldr	r2, [r3, #0]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	681b      	ldr	r3, [r3, #0]
 800de38:	f042 0220 	orr.w	r2, r2, #32
 800de3c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800de3e:	e007      	b.n	800de50 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	699a      	ldr	r2, [r3, #24]
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	f042 0208 	orr.w	r2, r2, #8
 800de4e:	619a      	str	r2, [r3, #24]
}
 800de50:	bf00      	nop
 800de52:	3720      	adds	r7, #32
 800de54:	46bd      	mov	sp, r7
 800de56:	bd80      	pop	{r7, pc}
 800de58:	0800daa9 	.word	0x0800daa9

0800de5c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b08a      	sub	sp, #40	; 0x28
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800de6a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	69db      	ldr	r3, [r3, #28]
 800de72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	681b      	ldr	r3, [r3, #0]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	689b      	ldr	r3, [r3, #8]
 800de82:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de8a:	2b22      	cmp	r3, #34	; 0x22
 800de8c:	f040 80da 	bne.w	800e044 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800de96:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800de98:	e0aa      	b.n	800dff0 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dea0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dea6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800dea8:	8aba      	ldrh	r2, [r7, #20]
 800deaa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800deac:	4013      	ands	r3, r2
 800deae:	b29a      	uxth	r2, r3
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800deb8:	1c9a      	adds	r2, r3, #2
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800dec4:	b29b      	uxth	r3, r3
 800dec6:	3b01      	subs	r3, #1
 800dec8:	b29a      	uxth	r2, r3
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800ded0:	687b      	ldr	r3, [r7, #4]
 800ded2:	681b      	ldr	r3, [r3, #0]
 800ded4:	69db      	ldr	r3, [r3, #28]
 800ded6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800ded8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deda:	f003 0307 	and.w	r3, r3, #7
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d04d      	beq.n	800df7e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dee4:	f003 0301 	and.w	r3, r3, #1
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d010      	beq.n	800df0e <UART_RxISR_16BIT_FIFOEN+0xb2>
 800deec:	69fb      	ldr	r3, [r7, #28]
 800deee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800def2:	2b00      	cmp	r3, #0
 800def4:	d00b      	beq.n	800df0e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	2201      	movs	r2, #1
 800defc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df04:	f043 0201 	orr.w	r2, r3, #1
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df10:	f003 0302 	and.w	r3, r3, #2
 800df14:	2b00      	cmp	r3, #0
 800df16:	d010      	beq.n	800df3a <UART_RxISR_16BIT_FIFOEN+0xde>
 800df18:	69bb      	ldr	r3, [r7, #24]
 800df1a:	f003 0301 	and.w	r3, r3, #1
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d00b      	beq.n	800df3a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	2202      	movs	r2, #2
 800df28:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df30:	f043 0204 	orr.w	r2, r3, #4
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800df3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df3c:	f003 0304 	and.w	r3, r3, #4
 800df40:	2b00      	cmp	r3, #0
 800df42:	d010      	beq.n	800df66 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800df44:	69bb      	ldr	r3, [r7, #24]
 800df46:	f003 0301 	and.w	r3, r3, #1
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d00b      	beq.n	800df66 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2204      	movs	r2, #4
 800df54:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df5c:	f043 0202 	orr.w	r2, r3, #2
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d006      	beq.n	800df7e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	f7ff f829 	bl	800cfc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800df84:	b29b      	uxth	r3, r3
 800df86:	2b00      	cmp	r3, #0
 800df88:	d132      	bne.n	800dff0 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	681a      	ldr	r2, [r3, #0]
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	681b      	ldr	r3, [r3, #0]
 800df94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800df98:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	689b      	ldr	r3, [r3, #8]
 800dfa0:	687a      	ldr	r2, [r7, #4]
 800dfa2:	6812      	ldr	r2, [r2, #0]
 800dfa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfa8:	f023 0301 	bic.w	r3, r3, #1
 800dfac:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2220      	movs	r2, #32
 800dfb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	d10f      	bne.n	800dfe4 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f022 0210 	bic.w	r2, r2, #16
 800dfd2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800dfda:	4619      	mov	r1, r3
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f7fe fffd 	bl	800cfdc <HAL_UARTEx_RxEventCallback>
 800dfe2:	e002      	b.n	800dfea <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800dfe4:	6878      	ldr	r0, [r7, #4]
 800dfe6:	f7f7 faa1 	bl	800552c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	2200      	movs	r2, #0
 800dfee:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800dff0:	8afb      	ldrh	r3, [r7, #22]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d005      	beq.n	800e002 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	f003 0320 	and.w	r3, r3, #32
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	f47f af4c 	bne.w	800de9a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e008:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800e00a:	89fb      	ldrh	r3, [r7, #14]
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d021      	beq.n	800e054 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800e016:	89fa      	ldrh	r2, [r7, #14]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d21b      	bcs.n	800e054 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	689a      	ldr	r2, [r3, #8]
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e02a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	4a0b      	ldr	r2, [pc, #44]	; (800e05c <UART_RxISR_16BIT_FIFOEN+0x200>)
 800e030:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	f042 0220 	orr.w	r2, r2, #32
 800e040:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e042:	e007      	b.n	800e054 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	699a      	ldr	r2, [r3, #24]
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	f042 0208 	orr.w	r2, r2, #8
 800e052:	619a      	str	r2, [r3, #24]
}
 800e054:	bf00      	nop
 800e056:	3728      	adds	r7, #40	; 0x28
 800e058:	46bd      	mov	sp, r7
 800e05a:	bd80      	pop	{r7, pc}
 800e05c:	0800db81 	.word	0x0800db81

0800e060 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e060:	b480      	push	{r7}
 800e062:	b083      	sub	sp, #12
 800e064:	af00      	add	r7, sp, #0
 800e066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e068:	bf00      	nop
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e074:	b480      	push	{r7}
 800e076:	b083      	sub	sp, #12
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e07c:	bf00      	nop
 800e07e:	370c      	adds	r7, #12
 800e080:	46bd      	mov	sp, r7
 800e082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e086:	4770      	bx	lr

0800e088 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e088:	b480      	push	{r7}
 800e08a:	b083      	sub	sp, #12
 800e08c:	af00      	add	r7, sp, #0
 800e08e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e090:	bf00      	nop
 800e092:	370c      	adds	r7, #12
 800e094:	46bd      	mov	sp, r7
 800e096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09a:	4770      	bx	lr

0800e09c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e09c:	b480      	push	{r7}
 800e09e:	b085      	sub	sp, #20
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e0aa:	2b01      	cmp	r3, #1
 800e0ac:	d101      	bne.n	800e0b2 <HAL_UARTEx_DisableFifoMode+0x16>
 800e0ae:	2302      	movs	r3, #2
 800e0b0:	e027      	b.n	800e102 <HAL_UARTEx_DisableFifoMode+0x66>
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	2201      	movs	r2, #1
 800e0b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2224      	movs	r2, #36	; 0x24
 800e0be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	681b      	ldr	r3, [r3, #0]
 800e0c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	681b      	ldr	r3, [r3, #0]
 800e0d4:	f022 0201 	bic.w	r2, r2, #1
 800e0d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e0e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2200      	movs	r2, #0
 800e0e6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	68fa      	ldr	r2, [r7, #12]
 800e0ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	2220      	movs	r2, #32
 800e0f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e100:	2300      	movs	r3, #0
}
 800e102:	4618      	mov	r0, r3
 800e104:	3714      	adds	r7, #20
 800e106:	46bd      	mov	sp, r7
 800e108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e10c:	4770      	bx	lr

0800e10e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b084      	sub	sp, #16
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e11e:	2b01      	cmp	r3, #1
 800e120:	d101      	bne.n	800e126 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e122:	2302      	movs	r3, #2
 800e124:	e02d      	b.n	800e182 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2201      	movs	r2, #1
 800e12a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	2224      	movs	r2, #36	; 0x24
 800e132:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	681a      	ldr	r2, [r3, #0]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f022 0201 	bic.w	r2, r2, #1
 800e14c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	689b      	ldr	r3, [r3, #8]
 800e154:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	683a      	ldr	r2, [r7, #0]
 800e15e:	430a      	orrs	r2, r1
 800e160:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e162:	6878      	ldr	r0, [r7, #4]
 800e164:	f000 f850 	bl	800e208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e168:	687b      	ldr	r3, [r7, #4]
 800e16a:	681b      	ldr	r3, [r3, #0]
 800e16c:	68fa      	ldr	r2, [r7, #12]
 800e16e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	2220      	movs	r2, #32
 800e174:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e178:	687b      	ldr	r3, [r7, #4]
 800e17a:	2200      	movs	r2, #0
 800e17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e180:	2300      	movs	r3, #0
}
 800e182:	4618      	mov	r0, r3
 800e184:	3710      	adds	r7, #16
 800e186:	46bd      	mov	sp, r7
 800e188:	bd80      	pop	{r7, pc}

0800e18a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e18a:	b580      	push	{r7, lr}
 800e18c:	b084      	sub	sp, #16
 800e18e:	af00      	add	r7, sp, #0
 800e190:	6078      	str	r0, [r7, #4]
 800e192:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e19a:	2b01      	cmp	r3, #1
 800e19c:	d101      	bne.n	800e1a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e19e:	2302      	movs	r3, #2
 800e1a0:	e02d      	b.n	800e1fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	2224      	movs	r2, #36	; 0x24
 800e1ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	681b      	ldr	r3, [r3, #0]
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f022 0201 	bic.w	r2, r2, #1
 800e1c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e1ca:	687b      	ldr	r3, [r7, #4]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	681b      	ldr	r3, [r3, #0]
 800e1d8:	683a      	ldr	r2, [r7, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f812 	bl	800e208 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	68fa      	ldr	r2, [r7, #12]
 800e1ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	2220      	movs	r2, #32
 800e1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e1fc:	2300      	movs	r3, #0
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
	...

0800e208 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e208:	b480      	push	{r7}
 800e20a:	b085      	sub	sp, #20
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e214:	2b00      	cmp	r3, #0
 800e216:	d108      	bne.n	800e22a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	2201      	movs	r2, #1
 800e21c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2201      	movs	r2, #1
 800e224:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e228:	e031      	b.n	800e28e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e22a:	2308      	movs	r3, #8
 800e22c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e22e:	2308      	movs	r3, #8
 800e230:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	681b      	ldr	r3, [r3, #0]
 800e236:	689b      	ldr	r3, [r3, #8]
 800e238:	0e5b      	lsrs	r3, r3, #25
 800e23a:	b2db      	uxtb	r3, r3
 800e23c:	f003 0307 	and.w	r3, r3, #7
 800e240:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e242:	687b      	ldr	r3, [r7, #4]
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	689b      	ldr	r3, [r3, #8]
 800e248:	0f5b      	lsrs	r3, r3, #29
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	f003 0307 	and.w	r3, r3, #7
 800e250:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e252:	7bbb      	ldrb	r3, [r7, #14]
 800e254:	7b3a      	ldrb	r2, [r7, #12]
 800e256:	4911      	ldr	r1, [pc, #68]	; (800e29c <UARTEx_SetNbDataToProcess+0x94>)
 800e258:	5c8a      	ldrb	r2, [r1, r2]
 800e25a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e25e:	7b3a      	ldrb	r2, [r7, #12]
 800e260:	490f      	ldr	r1, [pc, #60]	; (800e2a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e262:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e264:	fb93 f3f2 	sdiv	r3, r3, r2
 800e268:	b29a      	uxth	r2, r3
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	7b7a      	ldrb	r2, [r7, #13]
 800e274:	4909      	ldr	r1, [pc, #36]	; (800e29c <UARTEx_SetNbDataToProcess+0x94>)
 800e276:	5c8a      	ldrb	r2, [r1, r2]
 800e278:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e27c:	7b7a      	ldrb	r2, [r7, #13]
 800e27e:	4908      	ldr	r1, [pc, #32]	; (800e2a0 <UARTEx_SetNbDataToProcess+0x98>)
 800e280:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e282:	fb93 f3f2 	sdiv	r3, r3, r2
 800e286:	b29a      	uxth	r2, r3
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e28e:	bf00      	nop
 800e290:	3714      	adds	r7, #20
 800e292:	46bd      	mov	sp, r7
 800e294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e298:	4770      	bx	lr
 800e29a:	bf00      	nop
 800e29c:	08013c0c 	.word	0x08013c0c
 800e2a0:	08013c14 	.word	0x08013c14

0800e2a4 <atof>:
 800e2a4:	2100      	movs	r1, #0
 800e2a6:	f001 bb61 	b.w	800f96c <strtod>

0800e2aa <atoi>:
 800e2aa:	220a      	movs	r2, #10
 800e2ac:	2100      	movs	r1, #0
 800e2ae:	f001 bbeb 	b.w	800fa88 <strtol>
	...

0800e2b4 <__errno>:
 800e2b4:	4b01      	ldr	r3, [pc, #4]	; (800e2bc <__errno+0x8>)
 800e2b6:	6818      	ldr	r0, [r3, #0]
 800e2b8:	4770      	bx	lr
 800e2ba:	bf00      	nop
 800e2bc:	2000002c 	.word	0x2000002c

0800e2c0 <__libc_init_array>:
 800e2c0:	b570      	push	{r4, r5, r6, lr}
 800e2c2:	4d0d      	ldr	r5, [pc, #52]	; (800e2f8 <__libc_init_array+0x38>)
 800e2c4:	4c0d      	ldr	r4, [pc, #52]	; (800e2fc <__libc_init_array+0x3c>)
 800e2c6:	1b64      	subs	r4, r4, r5
 800e2c8:	10a4      	asrs	r4, r4, #2
 800e2ca:	2600      	movs	r6, #0
 800e2cc:	42a6      	cmp	r6, r4
 800e2ce:	d109      	bne.n	800e2e4 <__libc_init_array+0x24>
 800e2d0:	4d0b      	ldr	r5, [pc, #44]	; (800e300 <__libc_init_array+0x40>)
 800e2d2:	4c0c      	ldr	r4, [pc, #48]	; (800e304 <__libc_init_array+0x44>)
 800e2d4:	f004 fcaa 	bl	8012c2c <_init>
 800e2d8:	1b64      	subs	r4, r4, r5
 800e2da:	10a4      	asrs	r4, r4, #2
 800e2dc:	2600      	movs	r6, #0
 800e2de:	42a6      	cmp	r6, r4
 800e2e0:	d105      	bne.n	800e2ee <__libc_init_array+0x2e>
 800e2e2:	bd70      	pop	{r4, r5, r6, pc}
 800e2e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2e8:	4798      	blx	r3
 800e2ea:	3601      	adds	r6, #1
 800e2ec:	e7ee      	b.n	800e2cc <__libc_init_array+0xc>
 800e2ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800e2f2:	4798      	blx	r3
 800e2f4:	3601      	adds	r6, #1
 800e2f6:	e7f2      	b.n	800e2de <__libc_init_array+0x1e>
 800e2f8:	08014108 	.word	0x08014108
 800e2fc:	08014108 	.word	0x08014108
 800e300:	08014108 	.word	0x08014108
 800e304:	0801410c 	.word	0x0801410c

0800e308 <memcpy>:
 800e308:	440a      	add	r2, r1
 800e30a:	4291      	cmp	r1, r2
 800e30c:	f100 33ff 	add.w	r3, r0, #4294967295
 800e310:	d100      	bne.n	800e314 <memcpy+0xc>
 800e312:	4770      	bx	lr
 800e314:	b510      	push	{r4, lr}
 800e316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e31a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e31e:	4291      	cmp	r1, r2
 800e320:	d1f9      	bne.n	800e316 <memcpy+0xe>
 800e322:	bd10      	pop	{r4, pc}

0800e324 <memset>:
 800e324:	4402      	add	r2, r0
 800e326:	4603      	mov	r3, r0
 800e328:	4293      	cmp	r3, r2
 800e32a:	d100      	bne.n	800e32e <memset+0xa>
 800e32c:	4770      	bx	lr
 800e32e:	f803 1b01 	strb.w	r1, [r3], #1
 800e332:	e7f9      	b.n	800e328 <memset+0x4>

0800e334 <__cvt>:
 800e334:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e338:	ec55 4b10 	vmov	r4, r5, d0
 800e33c:	2d00      	cmp	r5, #0
 800e33e:	460e      	mov	r6, r1
 800e340:	4619      	mov	r1, r3
 800e342:	462b      	mov	r3, r5
 800e344:	bfbb      	ittet	lt
 800e346:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e34a:	461d      	movlt	r5, r3
 800e34c:	2300      	movge	r3, #0
 800e34e:	232d      	movlt	r3, #45	; 0x2d
 800e350:	700b      	strb	r3, [r1, #0]
 800e352:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e354:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e358:	4691      	mov	r9, r2
 800e35a:	f023 0820 	bic.w	r8, r3, #32
 800e35e:	bfbc      	itt	lt
 800e360:	4622      	movlt	r2, r4
 800e362:	4614      	movlt	r4, r2
 800e364:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e368:	d005      	beq.n	800e376 <__cvt+0x42>
 800e36a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800e36e:	d100      	bne.n	800e372 <__cvt+0x3e>
 800e370:	3601      	adds	r6, #1
 800e372:	2102      	movs	r1, #2
 800e374:	e000      	b.n	800e378 <__cvt+0x44>
 800e376:	2103      	movs	r1, #3
 800e378:	ab03      	add	r3, sp, #12
 800e37a:	9301      	str	r3, [sp, #4]
 800e37c:	ab02      	add	r3, sp, #8
 800e37e:	9300      	str	r3, [sp, #0]
 800e380:	ec45 4b10 	vmov	d0, r4, r5
 800e384:	4653      	mov	r3, sl
 800e386:	4632      	mov	r2, r6
 800e388:	f001 fcd6 	bl	800fd38 <_dtoa_r>
 800e38c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800e390:	4607      	mov	r7, r0
 800e392:	d102      	bne.n	800e39a <__cvt+0x66>
 800e394:	f019 0f01 	tst.w	r9, #1
 800e398:	d022      	beq.n	800e3e0 <__cvt+0xac>
 800e39a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800e39e:	eb07 0906 	add.w	r9, r7, r6
 800e3a2:	d110      	bne.n	800e3c6 <__cvt+0x92>
 800e3a4:	783b      	ldrb	r3, [r7, #0]
 800e3a6:	2b30      	cmp	r3, #48	; 0x30
 800e3a8:	d10a      	bne.n	800e3c0 <__cvt+0x8c>
 800e3aa:	2200      	movs	r2, #0
 800e3ac:	2300      	movs	r3, #0
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	f7f2 fbb1 	bl	8000b18 <__aeabi_dcmpeq>
 800e3b6:	b918      	cbnz	r0, 800e3c0 <__cvt+0x8c>
 800e3b8:	f1c6 0601 	rsb	r6, r6, #1
 800e3bc:	f8ca 6000 	str.w	r6, [sl]
 800e3c0:	f8da 3000 	ldr.w	r3, [sl]
 800e3c4:	4499      	add	r9, r3
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	2300      	movs	r3, #0
 800e3ca:	4620      	mov	r0, r4
 800e3cc:	4629      	mov	r1, r5
 800e3ce:	f7f2 fba3 	bl	8000b18 <__aeabi_dcmpeq>
 800e3d2:	b108      	cbz	r0, 800e3d8 <__cvt+0xa4>
 800e3d4:	f8cd 900c 	str.w	r9, [sp, #12]
 800e3d8:	2230      	movs	r2, #48	; 0x30
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	454b      	cmp	r3, r9
 800e3de:	d307      	bcc.n	800e3f0 <__cvt+0xbc>
 800e3e0:	9b03      	ldr	r3, [sp, #12]
 800e3e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e3e4:	1bdb      	subs	r3, r3, r7
 800e3e6:	4638      	mov	r0, r7
 800e3e8:	6013      	str	r3, [r2, #0]
 800e3ea:	b004      	add	sp, #16
 800e3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3f0:	1c59      	adds	r1, r3, #1
 800e3f2:	9103      	str	r1, [sp, #12]
 800e3f4:	701a      	strb	r2, [r3, #0]
 800e3f6:	e7f0      	b.n	800e3da <__cvt+0xa6>

0800e3f8 <__exponent>:
 800e3f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e3fa:	4603      	mov	r3, r0
 800e3fc:	2900      	cmp	r1, #0
 800e3fe:	bfb8      	it	lt
 800e400:	4249      	neglt	r1, r1
 800e402:	f803 2b02 	strb.w	r2, [r3], #2
 800e406:	bfb4      	ite	lt
 800e408:	222d      	movlt	r2, #45	; 0x2d
 800e40a:	222b      	movge	r2, #43	; 0x2b
 800e40c:	2909      	cmp	r1, #9
 800e40e:	7042      	strb	r2, [r0, #1]
 800e410:	dd2a      	ble.n	800e468 <__exponent+0x70>
 800e412:	f10d 0407 	add.w	r4, sp, #7
 800e416:	46a4      	mov	ip, r4
 800e418:	270a      	movs	r7, #10
 800e41a:	46a6      	mov	lr, r4
 800e41c:	460a      	mov	r2, r1
 800e41e:	fb91 f6f7 	sdiv	r6, r1, r7
 800e422:	fb07 1516 	mls	r5, r7, r6, r1
 800e426:	3530      	adds	r5, #48	; 0x30
 800e428:	2a63      	cmp	r2, #99	; 0x63
 800e42a:	f104 34ff 	add.w	r4, r4, #4294967295
 800e42e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800e432:	4631      	mov	r1, r6
 800e434:	dcf1      	bgt.n	800e41a <__exponent+0x22>
 800e436:	3130      	adds	r1, #48	; 0x30
 800e438:	f1ae 0502 	sub.w	r5, lr, #2
 800e43c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800e440:	1c44      	adds	r4, r0, #1
 800e442:	4629      	mov	r1, r5
 800e444:	4561      	cmp	r1, ip
 800e446:	d30a      	bcc.n	800e45e <__exponent+0x66>
 800e448:	f10d 0209 	add.w	r2, sp, #9
 800e44c:	eba2 020e 	sub.w	r2, r2, lr
 800e450:	4565      	cmp	r5, ip
 800e452:	bf88      	it	hi
 800e454:	2200      	movhi	r2, #0
 800e456:	4413      	add	r3, r2
 800e458:	1a18      	subs	r0, r3, r0
 800e45a:	b003      	add	sp, #12
 800e45c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e45e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e462:	f804 2f01 	strb.w	r2, [r4, #1]!
 800e466:	e7ed      	b.n	800e444 <__exponent+0x4c>
 800e468:	2330      	movs	r3, #48	; 0x30
 800e46a:	3130      	adds	r1, #48	; 0x30
 800e46c:	7083      	strb	r3, [r0, #2]
 800e46e:	70c1      	strb	r1, [r0, #3]
 800e470:	1d03      	adds	r3, r0, #4
 800e472:	e7f1      	b.n	800e458 <__exponent+0x60>

0800e474 <_printf_float>:
 800e474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e478:	ed2d 8b02 	vpush	{d8}
 800e47c:	b08d      	sub	sp, #52	; 0x34
 800e47e:	460c      	mov	r4, r1
 800e480:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800e484:	4616      	mov	r6, r2
 800e486:	461f      	mov	r7, r3
 800e488:	4605      	mov	r5, r0
 800e48a:	f002 ff69 	bl	8011360 <_localeconv_r>
 800e48e:	f8d0 a000 	ldr.w	sl, [r0]
 800e492:	4650      	mov	r0, sl
 800e494:	f7f1 fec4 	bl	8000220 <strlen>
 800e498:	2300      	movs	r3, #0
 800e49a:	930a      	str	r3, [sp, #40]	; 0x28
 800e49c:	6823      	ldr	r3, [r4, #0]
 800e49e:	9305      	str	r3, [sp, #20]
 800e4a0:	f8d8 3000 	ldr.w	r3, [r8]
 800e4a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800e4a8:	3307      	adds	r3, #7
 800e4aa:	f023 0307 	bic.w	r3, r3, #7
 800e4ae:	f103 0208 	add.w	r2, r3, #8
 800e4b2:	f8c8 2000 	str.w	r2, [r8]
 800e4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e4be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e4c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e4c6:	9307      	str	r3, [sp, #28]
 800e4c8:	f8cd 8018 	str.w	r8, [sp, #24]
 800e4cc:	ee08 0a10 	vmov	s16, r0
 800e4d0:	4b9f      	ldr	r3, [pc, #636]	; (800e750 <_printf_float+0x2dc>)
 800e4d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4da:	f7f2 fb4f 	bl	8000b7c <__aeabi_dcmpun>
 800e4de:	bb88      	cbnz	r0, 800e544 <_printf_float+0xd0>
 800e4e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e4e4:	4b9a      	ldr	r3, [pc, #616]	; (800e750 <_printf_float+0x2dc>)
 800e4e6:	f04f 32ff 	mov.w	r2, #4294967295
 800e4ea:	f7f2 fb29 	bl	8000b40 <__aeabi_dcmple>
 800e4ee:	bb48      	cbnz	r0, 800e544 <_printf_float+0xd0>
 800e4f0:	2200      	movs	r2, #0
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	4640      	mov	r0, r8
 800e4f6:	4649      	mov	r1, r9
 800e4f8:	f7f2 fb18 	bl	8000b2c <__aeabi_dcmplt>
 800e4fc:	b110      	cbz	r0, 800e504 <_printf_float+0x90>
 800e4fe:	232d      	movs	r3, #45	; 0x2d
 800e500:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e504:	4b93      	ldr	r3, [pc, #588]	; (800e754 <_printf_float+0x2e0>)
 800e506:	4894      	ldr	r0, [pc, #592]	; (800e758 <_printf_float+0x2e4>)
 800e508:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800e50c:	bf94      	ite	ls
 800e50e:	4698      	movls	r8, r3
 800e510:	4680      	movhi	r8, r0
 800e512:	2303      	movs	r3, #3
 800e514:	6123      	str	r3, [r4, #16]
 800e516:	9b05      	ldr	r3, [sp, #20]
 800e518:	f023 0204 	bic.w	r2, r3, #4
 800e51c:	6022      	str	r2, [r4, #0]
 800e51e:	f04f 0900 	mov.w	r9, #0
 800e522:	9700      	str	r7, [sp, #0]
 800e524:	4633      	mov	r3, r6
 800e526:	aa0b      	add	r2, sp, #44	; 0x2c
 800e528:	4621      	mov	r1, r4
 800e52a:	4628      	mov	r0, r5
 800e52c:	f000 f9d8 	bl	800e8e0 <_printf_common>
 800e530:	3001      	adds	r0, #1
 800e532:	f040 8090 	bne.w	800e656 <_printf_float+0x1e2>
 800e536:	f04f 30ff 	mov.w	r0, #4294967295
 800e53a:	b00d      	add	sp, #52	; 0x34
 800e53c:	ecbd 8b02 	vpop	{d8}
 800e540:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e544:	4642      	mov	r2, r8
 800e546:	464b      	mov	r3, r9
 800e548:	4640      	mov	r0, r8
 800e54a:	4649      	mov	r1, r9
 800e54c:	f7f2 fb16 	bl	8000b7c <__aeabi_dcmpun>
 800e550:	b140      	cbz	r0, 800e564 <_printf_float+0xf0>
 800e552:	464b      	mov	r3, r9
 800e554:	2b00      	cmp	r3, #0
 800e556:	bfbc      	itt	lt
 800e558:	232d      	movlt	r3, #45	; 0x2d
 800e55a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800e55e:	487f      	ldr	r0, [pc, #508]	; (800e75c <_printf_float+0x2e8>)
 800e560:	4b7f      	ldr	r3, [pc, #508]	; (800e760 <_printf_float+0x2ec>)
 800e562:	e7d1      	b.n	800e508 <_printf_float+0x94>
 800e564:	6863      	ldr	r3, [r4, #4]
 800e566:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800e56a:	9206      	str	r2, [sp, #24]
 800e56c:	1c5a      	adds	r2, r3, #1
 800e56e:	d13f      	bne.n	800e5f0 <_printf_float+0x17c>
 800e570:	2306      	movs	r3, #6
 800e572:	6063      	str	r3, [r4, #4]
 800e574:	9b05      	ldr	r3, [sp, #20]
 800e576:	6861      	ldr	r1, [r4, #4]
 800e578:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800e57c:	2300      	movs	r3, #0
 800e57e:	9303      	str	r3, [sp, #12]
 800e580:	ab0a      	add	r3, sp, #40	; 0x28
 800e582:	e9cd b301 	strd	fp, r3, [sp, #4]
 800e586:	ab09      	add	r3, sp, #36	; 0x24
 800e588:	ec49 8b10 	vmov	d0, r8, r9
 800e58c:	9300      	str	r3, [sp, #0]
 800e58e:	6022      	str	r2, [r4, #0]
 800e590:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e594:	4628      	mov	r0, r5
 800e596:	f7ff fecd 	bl	800e334 <__cvt>
 800e59a:	9b06      	ldr	r3, [sp, #24]
 800e59c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e59e:	2b47      	cmp	r3, #71	; 0x47
 800e5a0:	4680      	mov	r8, r0
 800e5a2:	d108      	bne.n	800e5b6 <_printf_float+0x142>
 800e5a4:	1cc8      	adds	r0, r1, #3
 800e5a6:	db02      	blt.n	800e5ae <_printf_float+0x13a>
 800e5a8:	6863      	ldr	r3, [r4, #4]
 800e5aa:	4299      	cmp	r1, r3
 800e5ac:	dd41      	ble.n	800e632 <_printf_float+0x1be>
 800e5ae:	f1ab 0b02 	sub.w	fp, fp, #2
 800e5b2:	fa5f fb8b 	uxtb.w	fp, fp
 800e5b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e5ba:	d820      	bhi.n	800e5fe <_printf_float+0x18a>
 800e5bc:	3901      	subs	r1, #1
 800e5be:	465a      	mov	r2, fp
 800e5c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e5c4:	9109      	str	r1, [sp, #36]	; 0x24
 800e5c6:	f7ff ff17 	bl	800e3f8 <__exponent>
 800e5ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e5cc:	1813      	adds	r3, r2, r0
 800e5ce:	2a01      	cmp	r2, #1
 800e5d0:	4681      	mov	r9, r0
 800e5d2:	6123      	str	r3, [r4, #16]
 800e5d4:	dc02      	bgt.n	800e5dc <_printf_float+0x168>
 800e5d6:	6822      	ldr	r2, [r4, #0]
 800e5d8:	07d2      	lsls	r2, r2, #31
 800e5da:	d501      	bpl.n	800e5e0 <_printf_float+0x16c>
 800e5dc:	3301      	adds	r3, #1
 800e5de:	6123      	str	r3, [r4, #16]
 800e5e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d09c      	beq.n	800e522 <_printf_float+0xae>
 800e5e8:	232d      	movs	r3, #45	; 0x2d
 800e5ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e5ee:	e798      	b.n	800e522 <_printf_float+0xae>
 800e5f0:	9a06      	ldr	r2, [sp, #24]
 800e5f2:	2a47      	cmp	r2, #71	; 0x47
 800e5f4:	d1be      	bne.n	800e574 <_printf_float+0x100>
 800e5f6:	2b00      	cmp	r3, #0
 800e5f8:	d1bc      	bne.n	800e574 <_printf_float+0x100>
 800e5fa:	2301      	movs	r3, #1
 800e5fc:	e7b9      	b.n	800e572 <_printf_float+0xfe>
 800e5fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800e602:	d118      	bne.n	800e636 <_printf_float+0x1c2>
 800e604:	2900      	cmp	r1, #0
 800e606:	6863      	ldr	r3, [r4, #4]
 800e608:	dd0b      	ble.n	800e622 <_printf_float+0x1ae>
 800e60a:	6121      	str	r1, [r4, #16]
 800e60c:	b913      	cbnz	r3, 800e614 <_printf_float+0x1a0>
 800e60e:	6822      	ldr	r2, [r4, #0]
 800e610:	07d0      	lsls	r0, r2, #31
 800e612:	d502      	bpl.n	800e61a <_printf_float+0x1a6>
 800e614:	3301      	adds	r3, #1
 800e616:	440b      	add	r3, r1
 800e618:	6123      	str	r3, [r4, #16]
 800e61a:	65a1      	str	r1, [r4, #88]	; 0x58
 800e61c:	f04f 0900 	mov.w	r9, #0
 800e620:	e7de      	b.n	800e5e0 <_printf_float+0x16c>
 800e622:	b913      	cbnz	r3, 800e62a <_printf_float+0x1b6>
 800e624:	6822      	ldr	r2, [r4, #0]
 800e626:	07d2      	lsls	r2, r2, #31
 800e628:	d501      	bpl.n	800e62e <_printf_float+0x1ba>
 800e62a:	3302      	adds	r3, #2
 800e62c:	e7f4      	b.n	800e618 <_printf_float+0x1a4>
 800e62e:	2301      	movs	r3, #1
 800e630:	e7f2      	b.n	800e618 <_printf_float+0x1a4>
 800e632:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800e636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e638:	4299      	cmp	r1, r3
 800e63a:	db05      	blt.n	800e648 <_printf_float+0x1d4>
 800e63c:	6823      	ldr	r3, [r4, #0]
 800e63e:	6121      	str	r1, [r4, #16]
 800e640:	07d8      	lsls	r0, r3, #31
 800e642:	d5ea      	bpl.n	800e61a <_printf_float+0x1a6>
 800e644:	1c4b      	adds	r3, r1, #1
 800e646:	e7e7      	b.n	800e618 <_printf_float+0x1a4>
 800e648:	2900      	cmp	r1, #0
 800e64a:	bfd4      	ite	le
 800e64c:	f1c1 0202 	rsble	r2, r1, #2
 800e650:	2201      	movgt	r2, #1
 800e652:	4413      	add	r3, r2
 800e654:	e7e0      	b.n	800e618 <_printf_float+0x1a4>
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	055a      	lsls	r2, r3, #21
 800e65a:	d407      	bmi.n	800e66c <_printf_float+0x1f8>
 800e65c:	6923      	ldr	r3, [r4, #16]
 800e65e:	4642      	mov	r2, r8
 800e660:	4631      	mov	r1, r6
 800e662:	4628      	mov	r0, r5
 800e664:	47b8      	blx	r7
 800e666:	3001      	adds	r0, #1
 800e668:	d12c      	bne.n	800e6c4 <_printf_float+0x250>
 800e66a:	e764      	b.n	800e536 <_printf_float+0xc2>
 800e66c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800e670:	f240 80e0 	bls.w	800e834 <_printf_float+0x3c0>
 800e674:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e678:	2200      	movs	r2, #0
 800e67a:	2300      	movs	r3, #0
 800e67c:	f7f2 fa4c 	bl	8000b18 <__aeabi_dcmpeq>
 800e680:	2800      	cmp	r0, #0
 800e682:	d034      	beq.n	800e6ee <_printf_float+0x27a>
 800e684:	4a37      	ldr	r2, [pc, #220]	; (800e764 <_printf_float+0x2f0>)
 800e686:	2301      	movs	r3, #1
 800e688:	4631      	mov	r1, r6
 800e68a:	4628      	mov	r0, r5
 800e68c:	47b8      	blx	r7
 800e68e:	3001      	adds	r0, #1
 800e690:	f43f af51 	beq.w	800e536 <_printf_float+0xc2>
 800e694:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e698:	429a      	cmp	r2, r3
 800e69a:	db02      	blt.n	800e6a2 <_printf_float+0x22e>
 800e69c:	6823      	ldr	r3, [r4, #0]
 800e69e:	07d8      	lsls	r0, r3, #31
 800e6a0:	d510      	bpl.n	800e6c4 <_printf_float+0x250>
 800e6a2:	ee18 3a10 	vmov	r3, s16
 800e6a6:	4652      	mov	r2, sl
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4628      	mov	r0, r5
 800e6ac:	47b8      	blx	r7
 800e6ae:	3001      	adds	r0, #1
 800e6b0:	f43f af41 	beq.w	800e536 <_printf_float+0xc2>
 800e6b4:	f04f 0800 	mov.w	r8, #0
 800e6b8:	f104 091a 	add.w	r9, r4, #26
 800e6bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e6be:	3b01      	subs	r3, #1
 800e6c0:	4543      	cmp	r3, r8
 800e6c2:	dc09      	bgt.n	800e6d8 <_printf_float+0x264>
 800e6c4:	6823      	ldr	r3, [r4, #0]
 800e6c6:	079b      	lsls	r3, r3, #30
 800e6c8:	f100 8105 	bmi.w	800e8d6 <_printf_float+0x462>
 800e6cc:	68e0      	ldr	r0, [r4, #12]
 800e6ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e6d0:	4298      	cmp	r0, r3
 800e6d2:	bfb8      	it	lt
 800e6d4:	4618      	movlt	r0, r3
 800e6d6:	e730      	b.n	800e53a <_printf_float+0xc6>
 800e6d8:	2301      	movs	r3, #1
 800e6da:	464a      	mov	r2, r9
 800e6dc:	4631      	mov	r1, r6
 800e6de:	4628      	mov	r0, r5
 800e6e0:	47b8      	blx	r7
 800e6e2:	3001      	adds	r0, #1
 800e6e4:	f43f af27 	beq.w	800e536 <_printf_float+0xc2>
 800e6e8:	f108 0801 	add.w	r8, r8, #1
 800e6ec:	e7e6      	b.n	800e6bc <_printf_float+0x248>
 800e6ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	dc39      	bgt.n	800e768 <_printf_float+0x2f4>
 800e6f4:	4a1b      	ldr	r2, [pc, #108]	; (800e764 <_printf_float+0x2f0>)
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	4631      	mov	r1, r6
 800e6fa:	4628      	mov	r0, r5
 800e6fc:	47b8      	blx	r7
 800e6fe:	3001      	adds	r0, #1
 800e700:	f43f af19 	beq.w	800e536 <_printf_float+0xc2>
 800e704:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e708:	4313      	orrs	r3, r2
 800e70a:	d102      	bne.n	800e712 <_printf_float+0x29e>
 800e70c:	6823      	ldr	r3, [r4, #0]
 800e70e:	07d9      	lsls	r1, r3, #31
 800e710:	d5d8      	bpl.n	800e6c4 <_printf_float+0x250>
 800e712:	ee18 3a10 	vmov	r3, s16
 800e716:	4652      	mov	r2, sl
 800e718:	4631      	mov	r1, r6
 800e71a:	4628      	mov	r0, r5
 800e71c:	47b8      	blx	r7
 800e71e:	3001      	adds	r0, #1
 800e720:	f43f af09 	beq.w	800e536 <_printf_float+0xc2>
 800e724:	f04f 0900 	mov.w	r9, #0
 800e728:	f104 0a1a 	add.w	sl, r4, #26
 800e72c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e72e:	425b      	negs	r3, r3
 800e730:	454b      	cmp	r3, r9
 800e732:	dc01      	bgt.n	800e738 <_printf_float+0x2c4>
 800e734:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e736:	e792      	b.n	800e65e <_printf_float+0x1ea>
 800e738:	2301      	movs	r3, #1
 800e73a:	4652      	mov	r2, sl
 800e73c:	4631      	mov	r1, r6
 800e73e:	4628      	mov	r0, r5
 800e740:	47b8      	blx	r7
 800e742:	3001      	adds	r0, #1
 800e744:	f43f aef7 	beq.w	800e536 <_printf_float+0xc2>
 800e748:	f109 0901 	add.w	r9, r9, #1
 800e74c:	e7ee      	b.n	800e72c <_printf_float+0x2b8>
 800e74e:	bf00      	nop
 800e750:	7fefffff 	.word	0x7fefffff
 800e754:	08013c20 	.word	0x08013c20
 800e758:	08013c24 	.word	0x08013c24
 800e75c:	08013c2c 	.word	0x08013c2c
 800e760:	08013c28 	.word	0x08013c28
 800e764:	08013c30 	.word	0x08013c30
 800e768:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e76a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e76c:	429a      	cmp	r2, r3
 800e76e:	bfa8      	it	ge
 800e770:	461a      	movge	r2, r3
 800e772:	2a00      	cmp	r2, #0
 800e774:	4691      	mov	r9, r2
 800e776:	dc37      	bgt.n	800e7e8 <_printf_float+0x374>
 800e778:	f04f 0b00 	mov.w	fp, #0
 800e77c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e780:	f104 021a 	add.w	r2, r4, #26
 800e784:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e786:	9305      	str	r3, [sp, #20]
 800e788:	eba3 0309 	sub.w	r3, r3, r9
 800e78c:	455b      	cmp	r3, fp
 800e78e:	dc33      	bgt.n	800e7f8 <_printf_float+0x384>
 800e790:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e794:	429a      	cmp	r2, r3
 800e796:	db3b      	blt.n	800e810 <_printf_float+0x39c>
 800e798:	6823      	ldr	r3, [r4, #0]
 800e79a:	07da      	lsls	r2, r3, #31
 800e79c:	d438      	bmi.n	800e810 <_printf_float+0x39c>
 800e79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e7a0:	9a05      	ldr	r2, [sp, #20]
 800e7a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7a4:	1a9a      	subs	r2, r3, r2
 800e7a6:	eba3 0901 	sub.w	r9, r3, r1
 800e7aa:	4591      	cmp	r9, r2
 800e7ac:	bfa8      	it	ge
 800e7ae:	4691      	movge	r9, r2
 800e7b0:	f1b9 0f00 	cmp.w	r9, #0
 800e7b4:	dc35      	bgt.n	800e822 <_printf_float+0x3ae>
 800e7b6:	f04f 0800 	mov.w	r8, #0
 800e7ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e7be:	f104 0a1a 	add.w	sl, r4, #26
 800e7c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e7c6:	1a9b      	subs	r3, r3, r2
 800e7c8:	eba3 0309 	sub.w	r3, r3, r9
 800e7cc:	4543      	cmp	r3, r8
 800e7ce:	f77f af79 	ble.w	800e6c4 <_printf_float+0x250>
 800e7d2:	2301      	movs	r3, #1
 800e7d4:	4652      	mov	r2, sl
 800e7d6:	4631      	mov	r1, r6
 800e7d8:	4628      	mov	r0, r5
 800e7da:	47b8      	blx	r7
 800e7dc:	3001      	adds	r0, #1
 800e7de:	f43f aeaa 	beq.w	800e536 <_printf_float+0xc2>
 800e7e2:	f108 0801 	add.w	r8, r8, #1
 800e7e6:	e7ec      	b.n	800e7c2 <_printf_float+0x34e>
 800e7e8:	4613      	mov	r3, r2
 800e7ea:	4631      	mov	r1, r6
 800e7ec:	4642      	mov	r2, r8
 800e7ee:	4628      	mov	r0, r5
 800e7f0:	47b8      	blx	r7
 800e7f2:	3001      	adds	r0, #1
 800e7f4:	d1c0      	bne.n	800e778 <_printf_float+0x304>
 800e7f6:	e69e      	b.n	800e536 <_printf_float+0xc2>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	4631      	mov	r1, r6
 800e7fc:	4628      	mov	r0, r5
 800e7fe:	9205      	str	r2, [sp, #20]
 800e800:	47b8      	blx	r7
 800e802:	3001      	adds	r0, #1
 800e804:	f43f ae97 	beq.w	800e536 <_printf_float+0xc2>
 800e808:	9a05      	ldr	r2, [sp, #20]
 800e80a:	f10b 0b01 	add.w	fp, fp, #1
 800e80e:	e7b9      	b.n	800e784 <_printf_float+0x310>
 800e810:	ee18 3a10 	vmov	r3, s16
 800e814:	4652      	mov	r2, sl
 800e816:	4631      	mov	r1, r6
 800e818:	4628      	mov	r0, r5
 800e81a:	47b8      	blx	r7
 800e81c:	3001      	adds	r0, #1
 800e81e:	d1be      	bne.n	800e79e <_printf_float+0x32a>
 800e820:	e689      	b.n	800e536 <_printf_float+0xc2>
 800e822:	9a05      	ldr	r2, [sp, #20]
 800e824:	464b      	mov	r3, r9
 800e826:	4442      	add	r2, r8
 800e828:	4631      	mov	r1, r6
 800e82a:	4628      	mov	r0, r5
 800e82c:	47b8      	blx	r7
 800e82e:	3001      	adds	r0, #1
 800e830:	d1c1      	bne.n	800e7b6 <_printf_float+0x342>
 800e832:	e680      	b.n	800e536 <_printf_float+0xc2>
 800e834:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e836:	2a01      	cmp	r2, #1
 800e838:	dc01      	bgt.n	800e83e <_printf_float+0x3ca>
 800e83a:	07db      	lsls	r3, r3, #31
 800e83c:	d538      	bpl.n	800e8b0 <_printf_float+0x43c>
 800e83e:	2301      	movs	r3, #1
 800e840:	4642      	mov	r2, r8
 800e842:	4631      	mov	r1, r6
 800e844:	4628      	mov	r0, r5
 800e846:	47b8      	blx	r7
 800e848:	3001      	adds	r0, #1
 800e84a:	f43f ae74 	beq.w	800e536 <_printf_float+0xc2>
 800e84e:	ee18 3a10 	vmov	r3, s16
 800e852:	4652      	mov	r2, sl
 800e854:	4631      	mov	r1, r6
 800e856:	4628      	mov	r0, r5
 800e858:	47b8      	blx	r7
 800e85a:	3001      	adds	r0, #1
 800e85c:	f43f ae6b 	beq.w	800e536 <_printf_float+0xc2>
 800e860:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e864:	2200      	movs	r2, #0
 800e866:	2300      	movs	r3, #0
 800e868:	f7f2 f956 	bl	8000b18 <__aeabi_dcmpeq>
 800e86c:	b9d8      	cbnz	r0, 800e8a6 <_printf_float+0x432>
 800e86e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e870:	f108 0201 	add.w	r2, r8, #1
 800e874:	3b01      	subs	r3, #1
 800e876:	4631      	mov	r1, r6
 800e878:	4628      	mov	r0, r5
 800e87a:	47b8      	blx	r7
 800e87c:	3001      	adds	r0, #1
 800e87e:	d10e      	bne.n	800e89e <_printf_float+0x42a>
 800e880:	e659      	b.n	800e536 <_printf_float+0xc2>
 800e882:	2301      	movs	r3, #1
 800e884:	4652      	mov	r2, sl
 800e886:	4631      	mov	r1, r6
 800e888:	4628      	mov	r0, r5
 800e88a:	47b8      	blx	r7
 800e88c:	3001      	adds	r0, #1
 800e88e:	f43f ae52 	beq.w	800e536 <_printf_float+0xc2>
 800e892:	f108 0801 	add.w	r8, r8, #1
 800e896:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e898:	3b01      	subs	r3, #1
 800e89a:	4543      	cmp	r3, r8
 800e89c:	dcf1      	bgt.n	800e882 <_printf_float+0x40e>
 800e89e:	464b      	mov	r3, r9
 800e8a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e8a4:	e6dc      	b.n	800e660 <_printf_float+0x1ec>
 800e8a6:	f04f 0800 	mov.w	r8, #0
 800e8aa:	f104 0a1a 	add.w	sl, r4, #26
 800e8ae:	e7f2      	b.n	800e896 <_printf_float+0x422>
 800e8b0:	2301      	movs	r3, #1
 800e8b2:	4642      	mov	r2, r8
 800e8b4:	e7df      	b.n	800e876 <_printf_float+0x402>
 800e8b6:	2301      	movs	r3, #1
 800e8b8:	464a      	mov	r2, r9
 800e8ba:	4631      	mov	r1, r6
 800e8bc:	4628      	mov	r0, r5
 800e8be:	47b8      	blx	r7
 800e8c0:	3001      	adds	r0, #1
 800e8c2:	f43f ae38 	beq.w	800e536 <_printf_float+0xc2>
 800e8c6:	f108 0801 	add.w	r8, r8, #1
 800e8ca:	68e3      	ldr	r3, [r4, #12]
 800e8cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8ce:	1a5b      	subs	r3, r3, r1
 800e8d0:	4543      	cmp	r3, r8
 800e8d2:	dcf0      	bgt.n	800e8b6 <_printf_float+0x442>
 800e8d4:	e6fa      	b.n	800e6cc <_printf_float+0x258>
 800e8d6:	f04f 0800 	mov.w	r8, #0
 800e8da:	f104 0919 	add.w	r9, r4, #25
 800e8de:	e7f4      	b.n	800e8ca <_printf_float+0x456>

0800e8e0 <_printf_common>:
 800e8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8e4:	4616      	mov	r6, r2
 800e8e6:	4699      	mov	r9, r3
 800e8e8:	688a      	ldr	r2, [r1, #8]
 800e8ea:	690b      	ldr	r3, [r1, #16]
 800e8ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e8f0:	4293      	cmp	r3, r2
 800e8f2:	bfb8      	it	lt
 800e8f4:	4613      	movlt	r3, r2
 800e8f6:	6033      	str	r3, [r6, #0]
 800e8f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e8fc:	4607      	mov	r7, r0
 800e8fe:	460c      	mov	r4, r1
 800e900:	b10a      	cbz	r2, 800e906 <_printf_common+0x26>
 800e902:	3301      	adds	r3, #1
 800e904:	6033      	str	r3, [r6, #0]
 800e906:	6823      	ldr	r3, [r4, #0]
 800e908:	0699      	lsls	r1, r3, #26
 800e90a:	bf42      	ittt	mi
 800e90c:	6833      	ldrmi	r3, [r6, #0]
 800e90e:	3302      	addmi	r3, #2
 800e910:	6033      	strmi	r3, [r6, #0]
 800e912:	6825      	ldr	r5, [r4, #0]
 800e914:	f015 0506 	ands.w	r5, r5, #6
 800e918:	d106      	bne.n	800e928 <_printf_common+0x48>
 800e91a:	f104 0a19 	add.w	sl, r4, #25
 800e91e:	68e3      	ldr	r3, [r4, #12]
 800e920:	6832      	ldr	r2, [r6, #0]
 800e922:	1a9b      	subs	r3, r3, r2
 800e924:	42ab      	cmp	r3, r5
 800e926:	dc26      	bgt.n	800e976 <_printf_common+0x96>
 800e928:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800e92c:	1e13      	subs	r3, r2, #0
 800e92e:	6822      	ldr	r2, [r4, #0]
 800e930:	bf18      	it	ne
 800e932:	2301      	movne	r3, #1
 800e934:	0692      	lsls	r2, r2, #26
 800e936:	d42b      	bmi.n	800e990 <_printf_common+0xb0>
 800e938:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e93c:	4649      	mov	r1, r9
 800e93e:	4638      	mov	r0, r7
 800e940:	47c0      	blx	r8
 800e942:	3001      	adds	r0, #1
 800e944:	d01e      	beq.n	800e984 <_printf_common+0xa4>
 800e946:	6823      	ldr	r3, [r4, #0]
 800e948:	68e5      	ldr	r5, [r4, #12]
 800e94a:	6832      	ldr	r2, [r6, #0]
 800e94c:	f003 0306 	and.w	r3, r3, #6
 800e950:	2b04      	cmp	r3, #4
 800e952:	bf08      	it	eq
 800e954:	1aad      	subeq	r5, r5, r2
 800e956:	68a3      	ldr	r3, [r4, #8]
 800e958:	6922      	ldr	r2, [r4, #16]
 800e95a:	bf0c      	ite	eq
 800e95c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e960:	2500      	movne	r5, #0
 800e962:	4293      	cmp	r3, r2
 800e964:	bfc4      	itt	gt
 800e966:	1a9b      	subgt	r3, r3, r2
 800e968:	18ed      	addgt	r5, r5, r3
 800e96a:	2600      	movs	r6, #0
 800e96c:	341a      	adds	r4, #26
 800e96e:	42b5      	cmp	r5, r6
 800e970:	d11a      	bne.n	800e9a8 <_printf_common+0xc8>
 800e972:	2000      	movs	r0, #0
 800e974:	e008      	b.n	800e988 <_printf_common+0xa8>
 800e976:	2301      	movs	r3, #1
 800e978:	4652      	mov	r2, sl
 800e97a:	4649      	mov	r1, r9
 800e97c:	4638      	mov	r0, r7
 800e97e:	47c0      	blx	r8
 800e980:	3001      	adds	r0, #1
 800e982:	d103      	bne.n	800e98c <_printf_common+0xac>
 800e984:	f04f 30ff 	mov.w	r0, #4294967295
 800e988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e98c:	3501      	adds	r5, #1
 800e98e:	e7c6      	b.n	800e91e <_printf_common+0x3e>
 800e990:	18e1      	adds	r1, r4, r3
 800e992:	1c5a      	adds	r2, r3, #1
 800e994:	2030      	movs	r0, #48	; 0x30
 800e996:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e99a:	4422      	add	r2, r4
 800e99c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e9a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e9a4:	3302      	adds	r3, #2
 800e9a6:	e7c7      	b.n	800e938 <_printf_common+0x58>
 800e9a8:	2301      	movs	r3, #1
 800e9aa:	4622      	mov	r2, r4
 800e9ac:	4649      	mov	r1, r9
 800e9ae:	4638      	mov	r0, r7
 800e9b0:	47c0      	blx	r8
 800e9b2:	3001      	adds	r0, #1
 800e9b4:	d0e6      	beq.n	800e984 <_printf_common+0xa4>
 800e9b6:	3601      	adds	r6, #1
 800e9b8:	e7d9      	b.n	800e96e <_printf_common+0x8e>
	...

0800e9bc <_printf_i>:
 800e9bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c0:	7e0f      	ldrb	r7, [r1, #24]
 800e9c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800e9c4:	2f78      	cmp	r7, #120	; 0x78
 800e9c6:	4691      	mov	r9, r2
 800e9c8:	4680      	mov	r8, r0
 800e9ca:	460c      	mov	r4, r1
 800e9cc:	469a      	mov	sl, r3
 800e9ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800e9d2:	d807      	bhi.n	800e9e4 <_printf_i+0x28>
 800e9d4:	2f62      	cmp	r7, #98	; 0x62
 800e9d6:	d80a      	bhi.n	800e9ee <_printf_i+0x32>
 800e9d8:	2f00      	cmp	r7, #0
 800e9da:	f000 80d8 	beq.w	800eb8e <_printf_i+0x1d2>
 800e9de:	2f58      	cmp	r7, #88	; 0x58
 800e9e0:	f000 80a3 	beq.w	800eb2a <_printf_i+0x16e>
 800e9e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e9e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800e9ec:	e03a      	b.n	800ea64 <_printf_i+0xa8>
 800e9ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800e9f2:	2b15      	cmp	r3, #21
 800e9f4:	d8f6      	bhi.n	800e9e4 <_printf_i+0x28>
 800e9f6:	a101      	add	r1, pc, #4	; (adr r1, 800e9fc <_printf_i+0x40>)
 800e9f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e9fc:	0800ea55 	.word	0x0800ea55
 800ea00:	0800ea69 	.word	0x0800ea69
 800ea04:	0800e9e5 	.word	0x0800e9e5
 800ea08:	0800e9e5 	.word	0x0800e9e5
 800ea0c:	0800e9e5 	.word	0x0800e9e5
 800ea10:	0800e9e5 	.word	0x0800e9e5
 800ea14:	0800ea69 	.word	0x0800ea69
 800ea18:	0800e9e5 	.word	0x0800e9e5
 800ea1c:	0800e9e5 	.word	0x0800e9e5
 800ea20:	0800e9e5 	.word	0x0800e9e5
 800ea24:	0800e9e5 	.word	0x0800e9e5
 800ea28:	0800eb75 	.word	0x0800eb75
 800ea2c:	0800ea99 	.word	0x0800ea99
 800ea30:	0800eb57 	.word	0x0800eb57
 800ea34:	0800e9e5 	.word	0x0800e9e5
 800ea38:	0800e9e5 	.word	0x0800e9e5
 800ea3c:	0800eb97 	.word	0x0800eb97
 800ea40:	0800e9e5 	.word	0x0800e9e5
 800ea44:	0800ea99 	.word	0x0800ea99
 800ea48:	0800e9e5 	.word	0x0800e9e5
 800ea4c:	0800e9e5 	.word	0x0800e9e5
 800ea50:	0800eb5f 	.word	0x0800eb5f
 800ea54:	682b      	ldr	r3, [r5, #0]
 800ea56:	1d1a      	adds	r2, r3, #4
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	602a      	str	r2, [r5, #0]
 800ea5c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ea60:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ea64:	2301      	movs	r3, #1
 800ea66:	e0a3      	b.n	800ebb0 <_printf_i+0x1f4>
 800ea68:	6820      	ldr	r0, [r4, #0]
 800ea6a:	6829      	ldr	r1, [r5, #0]
 800ea6c:	0606      	lsls	r6, r0, #24
 800ea6e:	f101 0304 	add.w	r3, r1, #4
 800ea72:	d50a      	bpl.n	800ea8a <_printf_i+0xce>
 800ea74:	680e      	ldr	r6, [r1, #0]
 800ea76:	602b      	str	r3, [r5, #0]
 800ea78:	2e00      	cmp	r6, #0
 800ea7a:	da03      	bge.n	800ea84 <_printf_i+0xc8>
 800ea7c:	232d      	movs	r3, #45	; 0x2d
 800ea7e:	4276      	negs	r6, r6
 800ea80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ea84:	485e      	ldr	r0, [pc, #376]	; (800ec00 <_printf_i+0x244>)
 800ea86:	230a      	movs	r3, #10
 800ea88:	e019      	b.n	800eabe <_printf_i+0x102>
 800ea8a:	680e      	ldr	r6, [r1, #0]
 800ea8c:	602b      	str	r3, [r5, #0]
 800ea8e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ea92:	bf18      	it	ne
 800ea94:	b236      	sxthne	r6, r6
 800ea96:	e7ef      	b.n	800ea78 <_printf_i+0xbc>
 800ea98:	682b      	ldr	r3, [r5, #0]
 800ea9a:	6820      	ldr	r0, [r4, #0]
 800ea9c:	1d19      	adds	r1, r3, #4
 800ea9e:	6029      	str	r1, [r5, #0]
 800eaa0:	0601      	lsls	r1, r0, #24
 800eaa2:	d501      	bpl.n	800eaa8 <_printf_i+0xec>
 800eaa4:	681e      	ldr	r6, [r3, #0]
 800eaa6:	e002      	b.n	800eaae <_printf_i+0xf2>
 800eaa8:	0646      	lsls	r6, r0, #25
 800eaaa:	d5fb      	bpl.n	800eaa4 <_printf_i+0xe8>
 800eaac:	881e      	ldrh	r6, [r3, #0]
 800eaae:	4854      	ldr	r0, [pc, #336]	; (800ec00 <_printf_i+0x244>)
 800eab0:	2f6f      	cmp	r7, #111	; 0x6f
 800eab2:	bf0c      	ite	eq
 800eab4:	2308      	moveq	r3, #8
 800eab6:	230a      	movne	r3, #10
 800eab8:	2100      	movs	r1, #0
 800eaba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800eabe:	6865      	ldr	r5, [r4, #4]
 800eac0:	60a5      	str	r5, [r4, #8]
 800eac2:	2d00      	cmp	r5, #0
 800eac4:	bfa2      	ittt	ge
 800eac6:	6821      	ldrge	r1, [r4, #0]
 800eac8:	f021 0104 	bicge.w	r1, r1, #4
 800eacc:	6021      	strge	r1, [r4, #0]
 800eace:	b90e      	cbnz	r6, 800ead4 <_printf_i+0x118>
 800ead0:	2d00      	cmp	r5, #0
 800ead2:	d04d      	beq.n	800eb70 <_printf_i+0x1b4>
 800ead4:	4615      	mov	r5, r2
 800ead6:	fbb6 f1f3 	udiv	r1, r6, r3
 800eada:	fb03 6711 	mls	r7, r3, r1, r6
 800eade:	5dc7      	ldrb	r7, [r0, r7]
 800eae0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800eae4:	4637      	mov	r7, r6
 800eae6:	42bb      	cmp	r3, r7
 800eae8:	460e      	mov	r6, r1
 800eaea:	d9f4      	bls.n	800ead6 <_printf_i+0x11a>
 800eaec:	2b08      	cmp	r3, #8
 800eaee:	d10b      	bne.n	800eb08 <_printf_i+0x14c>
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	07de      	lsls	r6, r3, #31
 800eaf4:	d508      	bpl.n	800eb08 <_printf_i+0x14c>
 800eaf6:	6923      	ldr	r3, [r4, #16]
 800eaf8:	6861      	ldr	r1, [r4, #4]
 800eafa:	4299      	cmp	r1, r3
 800eafc:	bfde      	ittt	le
 800eafe:	2330      	movle	r3, #48	; 0x30
 800eb00:	f805 3c01 	strble.w	r3, [r5, #-1]
 800eb04:	f105 35ff 	addle.w	r5, r5, #4294967295
 800eb08:	1b52      	subs	r2, r2, r5
 800eb0a:	6122      	str	r2, [r4, #16]
 800eb0c:	f8cd a000 	str.w	sl, [sp]
 800eb10:	464b      	mov	r3, r9
 800eb12:	aa03      	add	r2, sp, #12
 800eb14:	4621      	mov	r1, r4
 800eb16:	4640      	mov	r0, r8
 800eb18:	f7ff fee2 	bl	800e8e0 <_printf_common>
 800eb1c:	3001      	adds	r0, #1
 800eb1e:	d14c      	bne.n	800ebba <_printf_i+0x1fe>
 800eb20:	f04f 30ff 	mov.w	r0, #4294967295
 800eb24:	b004      	add	sp, #16
 800eb26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb2a:	4835      	ldr	r0, [pc, #212]	; (800ec00 <_printf_i+0x244>)
 800eb2c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eb30:	6829      	ldr	r1, [r5, #0]
 800eb32:	6823      	ldr	r3, [r4, #0]
 800eb34:	f851 6b04 	ldr.w	r6, [r1], #4
 800eb38:	6029      	str	r1, [r5, #0]
 800eb3a:	061d      	lsls	r5, r3, #24
 800eb3c:	d514      	bpl.n	800eb68 <_printf_i+0x1ac>
 800eb3e:	07df      	lsls	r7, r3, #31
 800eb40:	bf44      	itt	mi
 800eb42:	f043 0320 	orrmi.w	r3, r3, #32
 800eb46:	6023      	strmi	r3, [r4, #0]
 800eb48:	b91e      	cbnz	r6, 800eb52 <_printf_i+0x196>
 800eb4a:	6823      	ldr	r3, [r4, #0]
 800eb4c:	f023 0320 	bic.w	r3, r3, #32
 800eb50:	6023      	str	r3, [r4, #0]
 800eb52:	2310      	movs	r3, #16
 800eb54:	e7b0      	b.n	800eab8 <_printf_i+0xfc>
 800eb56:	6823      	ldr	r3, [r4, #0]
 800eb58:	f043 0320 	orr.w	r3, r3, #32
 800eb5c:	6023      	str	r3, [r4, #0]
 800eb5e:	2378      	movs	r3, #120	; 0x78
 800eb60:	4828      	ldr	r0, [pc, #160]	; (800ec04 <_printf_i+0x248>)
 800eb62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800eb66:	e7e3      	b.n	800eb30 <_printf_i+0x174>
 800eb68:	0659      	lsls	r1, r3, #25
 800eb6a:	bf48      	it	mi
 800eb6c:	b2b6      	uxthmi	r6, r6
 800eb6e:	e7e6      	b.n	800eb3e <_printf_i+0x182>
 800eb70:	4615      	mov	r5, r2
 800eb72:	e7bb      	b.n	800eaec <_printf_i+0x130>
 800eb74:	682b      	ldr	r3, [r5, #0]
 800eb76:	6826      	ldr	r6, [r4, #0]
 800eb78:	6961      	ldr	r1, [r4, #20]
 800eb7a:	1d18      	adds	r0, r3, #4
 800eb7c:	6028      	str	r0, [r5, #0]
 800eb7e:	0635      	lsls	r5, r6, #24
 800eb80:	681b      	ldr	r3, [r3, #0]
 800eb82:	d501      	bpl.n	800eb88 <_printf_i+0x1cc>
 800eb84:	6019      	str	r1, [r3, #0]
 800eb86:	e002      	b.n	800eb8e <_printf_i+0x1d2>
 800eb88:	0670      	lsls	r0, r6, #25
 800eb8a:	d5fb      	bpl.n	800eb84 <_printf_i+0x1c8>
 800eb8c:	8019      	strh	r1, [r3, #0]
 800eb8e:	2300      	movs	r3, #0
 800eb90:	6123      	str	r3, [r4, #16]
 800eb92:	4615      	mov	r5, r2
 800eb94:	e7ba      	b.n	800eb0c <_printf_i+0x150>
 800eb96:	682b      	ldr	r3, [r5, #0]
 800eb98:	1d1a      	adds	r2, r3, #4
 800eb9a:	602a      	str	r2, [r5, #0]
 800eb9c:	681d      	ldr	r5, [r3, #0]
 800eb9e:	6862      	ldr	r2, [r4, #4]
 800eba0:	2100      	movs	r1, #0
 800eba2:	4628      	mov	r0, r5
 800eba4:	f7f1 fb44 	bl	8000230 <memchr>
 800eba8:	b108      	cbz	r0, 800ebae <_printf_i+0x1f2>
 800ebaa:	1b40      	subs	r0, r0, r5
 800ebac:	6060      	str	r0, [r4, #4]
 800ebae:	6863      	ldr	r3, [r4, #4]
 800ebb0:	6123      	str	r3, [r4, #16]
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ebb8:	e7a8      	b.n	800eb0c <_printf_i+0x150>
 800ebba:	6923      	ldr	r3, [r4, #16]
 800ebbc:	462a      	mov	r2, r5
 800ebbe:	4649      	mov	r1, r9
 800ebc0:	4640      	mov	r0, r8
 800ebc2:	47d0      	blx	sl
 800ebc4:	3001      	adds	r0, #1
 800ebc6:	d0ab      	beq.n	800eb20 <_printf_i+0x164>
 800ebc8:	6823      	ldr	r3, [r4, #0]
 800ebca:	079b      	lsls	r3, r3, #30
 800ebcc:	d413      	bmi.n	800ebf6 <_printf_i+0x23a>
 800ebce:	68e0      	ldr	r0, [r4, #12]
 800ebd0:	9b03      	ldr	r3, [sp, #12]
 800ebd2:	4298      	cmp	r0, r3
 800ebd4:	bfb8      	it	lt
 800ebd6:	4618      	movlt	r0, r3
 800ebd8:	e7a4      	b.n	800eb24 <_printf_i+0x168>
 800ebda:	2301      	movs	r3, #1
 800ebdc:	4632      	mov	r2, r6
 800ebde:	4649      	mov	r1, r9
 800ebe0:	4640      	mov	r0, r8
 800ebe2:	47d0      	blx	sl
 800ebe4:	3001      	adds	r0, #1
 800ebe6:	d09b      	beq.n	800eb20 <_printf_i+0x164>
 800ebe8:	3501      	adds	r5, #1
 800ebea:	68e3      	ldr	r3, [r4, #12]
 800ebec:	9903      	ldr	r1, [sp, #12]
 800ebee:	1a5b      	subs	r3, r3, r1
 800ebf0:	42ab      	cmp	r3, r5
 800ebf2:	dcf2      	bgt.n	800ebda <_printf_i+0x21e>
 800ebf4:	e7eb      	b.n	800ebce <_printf_i+0x212>
 800ebf6:	2500      	movs	r5, #0
 800ebf8:	f104 0619 	add.w	r6, r4, #25
 800ebfc:	e7f5      	b.n	800ebea <_printf_i+0x22e>
 800ebfe:	bf00      	nop
 800ec00:	08013c32 	.word	0x08013c32
 800ec04:	08013c43 	.word	0x08013c43

0800ec08 <iprintf>:
 800ec08:	b40f      	push	{r0, r1, r2, r3}
 800ec0a:	4b0a      	ldr	r3, [pc, #40]	; (800ec34 <iprintf+0x2c>)
 800ec0c:	b513      	push	{r0, r1, r4, lr}
 800ec0e:	681c      	ldr	r4, [r3, #0]
 800ec10:	b124      	cbz	r4, 800ec1c <iprintf+0x14>
 800ec12:	69a3      	ldr	r3, [r4, #24]
 800ec14:	b913      	cbnz	r3, 800ec1c <iprintf+0x14>
 800ec16:	4620      	mov	r0, r4
 800ec18:	f001 ff96 	bl	8010b48 <__sinit>
 800ec1c:	ab05      	add	r3, sp, #20
 800ec1e:	9a04      	ldr	r2, [sp, #16]
 800ec20:	68a1      	ldr	r1, [r4, #8]
 800ec22:	9301      	str	r3, [sp, #4]
 800ec24:	4620      	mov	r0, r4
 800ec26:	f003 fa03 	bl	8012030 <_vfiprintf_r>
 800ec2a:	b002      	add	sp, #8
 800ec2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ec30:	b004      	add	sp, #16
 800ec32:	4770      	bx	lr
 800ec34:	2000002c 	.word	0x2000002c

0800ec38 <_puts_r>:
 800ec38:	b570      	push	{r4, r5, r6, lr}
 800ec3a:	460e      	mov	r6, r1
 800ec3c:	4605      	mov	r5, r0
 800ec3e:	b118      	cbz	r0, 800ec48 <_puts_r+0x10>
 800ec40:	6983      	ldr	r3, [r0, #24]
 800ec42:	b90b      	cbnz	r3, 800ec48 <_puts_r+0x10>
 800ec44:	f001 ff80 	bl	8010b48 <__sinit>
 800ec48:	69ab      	ldr	r3, [r5, #24]
 800ec4a:	68ac      	ldr	r4, [r5, #8]
 800ec4c:	b913      	cbnz	r3, 800ec54 <_puts_r+0x1c>
 800ec4e:	4628      	mov	r0, r5
 800ec50:	f001 ff7a 	bl	8010b48 <__sinit>
 800ec54:	4b2c      	ldr	r3, [pc, #176]	; (800ed08 <_puts_r+0xd0>)
 800ec56:	429c      	cmp	r4, r3
 800ec58:	d120      	bne.n	800ec9c <_puts_r+0x64>
 800ec5a:	686c      	ldr	r4, [r5, #4]
 800ec5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ec5e:	07db      	lsls	r3, r3, #31
 800ec60:	d405      	bmi.n	800ec6e <_puts_r+0x36>
 800ec62:	89a3      	ldrh	r3, [r4, #12]
 800ec64:	0598      	lsls	r0, r3, #22
 800ec66:	d402      	bmi.n	800ec6e <_puts_r+0x36>
 800ec68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ec6a:	f002 fb7e 	bl	801136a <__retarget_lock_acquire_recursive>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	0719      	lsls	r1, r3, #28
 800ec72:	d51d      	bpl.n	800ecb0 <_puts_r+0x78>
 800ec74:	6923      	ldr	r3, [r4, #16]
 800ec76:	b1db      	cbz	r3, 800ecb0 <_puts_r+0x78>
 800ec78:	3e01      	subs	r6, #1
 800ec7a:	68a3      	ldr	r3, [r4, #8]
 800ec7c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ec80:	3b01      	subs	r3, #1
 800ec82:	60a3      	str	r3, [r4, #8]
 800ec84:	bb39      	cbnz	r1, 800ecd6 <_puts_r+0x9e>
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	da38      	bge.n	800ecfc <_puts_r+0xc4>
 800ec8a:	4622      	mov	r2, r4
 800ec8c:	210a      	movs	r1, #10
 800ec8e:	4628      	mov	r0, r5
 800ec90:	f000 ff04 	bl	800fa9c <__swbuf_r>
 800ec94:	3001      	adds	r0, #1
 800ec96:	d011      	beq.n	800ecbc <_puts_r+0x84>
 800ec98:	250a      	movs	r5, #10
 800ec9a:	e011      	b.n	800ecc0 <_puts_r+0x88>
 800ec9c:	4b1b      	ldr	r3, [pc, #108]	; (800ed0c <_puts_r+0xd4>)
 800ec9e:	429c      	cmp	r4, r3
 800eca0:	d101      	bne.n	800eca6 <_puts_r+0x6e>
 800eca2:	68ac      	ldr	r4, [r5, #8]
 800eca4:	e7da      	b.n	800ec5c <_puts_r+0x24>
 800eca6:	4b1a      	ldr	r3, [pc, #104]	; (800ed10 <_puts_r+0xd8>)
 800eca8:	429c      	cmp	r4, r3
 800ecaa:	bf08      	it	eq
 800ecac:	68ec      	ldreq	r4, [r5, #12]
 800ecae:	e7d5      	b.n	800ec5c <_puts_r+0x24>
 800ecb0:	4621      	mov	r1, r4
 800ecb2:	4628      	mov	r0, r5
 800ecb4:	f000 ff44 	bl	800fb40 <__swsetup_r>
 800ecb8:	2800      	cmp	r0, #0
 800ecba:	d0dd      	beq.n	800ec78 <_puts_r+0x40>
 800ecbc:	f04f 35ff 	mov.w	r5, #4294967295
 800ecc0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ecc2:	07da      	lsls	r2, r3, #31
 800ecc4:	d405      	bmi.n	800ecd2 <_puts_r+0x9a>
 800ecc6:	89a3      	ldrh	r3, [r4, #12]
 800ecc8:	059b      	lsls	r3, r3, #22
 800ecca:	d402      	bmi.n	800ecd2 <_puts_r+0x9a>
 800eccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ecce:	f002 fb4d 	bl	801136c <__retarget_lock_release_recursive>
 800ecd2:	4628      	mov	r0, r5
 800ecd4:	bd70      	pop	{r4, r5, r6, pc}
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	da04      	bge.n	800ece4 <_puts_r+0xac>
 800ecda:	69a2      	ldr	r2, [r4, #24]
 800ecdc:	429a      	cmp	r2, r3
 800ecde:	dc06      	bgt.n	800ecee <_puts_r+0xb6>
 800ece0:	290a      	cmp	r1, #10
 800ece2:	d004      	beq.n	800ecee <_puts_r+0xb6>
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	1c5a      	adds	r2, r3, #1
 800ece8:	6022      	str	r2, [r4, #0]
 800ecea:	7019      	strb	r1, [r3, #0]
 800ecec:	e7c5      	b.n	800ec7a <_puts_r+0x42>
 800ecee:	4622      	mov	r2, r4
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	f000 fed3 	bl	800fa9c <__swbuf_r>
 800ecf6:	3001      	adds	r0, #1
 800ecf8:	d1bf      	bne.n	800ec7a <_puts_r+0x42>
 800ecfa:	e7df      	b.n	800ecbc <_puts_r+0x84>
 800ecfc:	6823      	ldr	r3, [r4, #0]
 800ecfe:	250a      	movs	r5, #10
 800ed00:	1c5a      	adds	r2, r3, #1
 800ed02:	6022      	str	r2, [r4, #0]
 800ed04:	701d      	strb	r5, [r3, #0]
 800ed06:	e7db      	b.n	800ecc0 <_puts_r+0x88>
 800ed08:	08013e5c 	.word	0x08013e5c
 800ed0c:	08013e7c 	.word	0x08013e7c
 800ed10:	08013e3c 	.word	0x08013e3c

0800ed14 <puts>:
 800ed14:	4b02      	ldr	r3, [pc, #8]	; (800ed20 <puts+0xc>)
 800ed16:	4601      	mov	r1, r0
 800ed18:	6818      	ldr	r0, [r3, #0]
 800ed1a:	f7ff bf8d 	b.w	800ec38 <_puts_r>
 800ed1e:	bf00      	nop
 800ed20:	2000002c 	.word	0x2000002c

0800ed24 <sulp>:
 800ed24:	b570      	push	{r4, r5, r6, lr}
 800ed26:	4604      	mov	r4, r0
 800ed28:	460d      	mov	r5, r1
 800ed2a:	ec45 4b10 	vmov	d0, r4, r5
 800ed2e:	4616      	mov	r6, r2
 800ed30:	f002 ff0e 	bl	8011b50 <__ulp>
 800ed34:	ec51 0b10 	vmov	r0, r1, d0
 800ed38:	b17e      	cbz	r6, 800ed5a <sulp+0x36>
 800ed3a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ed3e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	dd09      	ble.n	800ed5a <sulp+0x36>
 800ed46:	051b      	lsls	r3, r3, #20
 800ed48:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ed4c:	2400      	movs	r4, #0
 800ed4e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ed52:	4622      	mov	r2, r4
 800ed54:	462b      	mov	r3, r5
 800ed56:	f7f1 fc77 	bl	8000648 <__aeabi_dmul>
 800ed5a:	bd70      	pop	{r4, r5, r6, pc}
 800ed5c:	0000      	movs	r0, r0
	...

0800ed60 <_strtod_l>:
 800ed60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed64:	ed2d 8b02 	vpush	{d8}
 800ed68:	b09d      	sub	sp, #116	; 0x74
 800ed6a:	461f      	mov	r7, r3
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	9318      	str	r3, [sp, #96]	; 0x60
 800ed70:	4ba2      	ldr	r3, [pc, #648]	; (800effc <_strtod_l+0x29c>)
 800ed72:	9213      	str	r2, [sp, #76]	; 0x4c
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	9305      	str	r3, [sp, #20]
 800ed78:	4604      	mov	r4, r0
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	4688      	mov	r8, r1
 800ed7e:	f7f1 fa4f 	bl	8000220 <strlen>
 800ed82:	f04f 0a00 	mov.w	sl, #0
 800ed86:	4605      	mov	r5, r0
 800ed88:	f04f 0b00 	mov.w	fp, #0
 800ed8c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ed90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ed92:	781a      	ldrb	r2, [r3, #0]
 800ed94:	2a2b      	cmp	r2, #43	; 0x2b
 800ed96:	d04e      	beq.n	800ee36 <_strtod_l+0xd6>
 800ed98:	d83b      	bhi.n	800ee12 <_strtod_l+0xb2>
 800ed9a:	2a0d      	cmp	r2, #13
 800ed9c:	d834      	bhi.n	800ee08 <_strtod_l+0xa8>
 800ed9e:	2a08      	cmp	r2, #8
 800eda0:	d834      	bhi.n	800ee0c <_strtod_l+0xac>
 800eda2:	2a00      	cmp	r2, #0
 800eda4:	d03e      	beq.n	800ee24 <_strtod_l+0xc4>
 800eda6:	2300      	movs	r3, #0
 800eda8:	930a      	str	r3, [sp, #40]	; 0x28
 800edaa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800edac:	7833      	ldrb	r3, [r6, #0]
 800edae:	2b30      	cmp	r3, #48	; 0x30
 800edb0:	f040 80b0 	bne.w	800ef14 <_strtod_l+0x1b4>
 800edb4:	7873      	ldrb	r3, [r6, #1]
 800edb6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800edba:	2b58      	cmp	r3, #88	; 0x58
 800edbc:	d168      	bne.n	800ee90 <_strtod_l+0x130>
 800edbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edc0:	9301      	str	r3, [sp, #4]
 800edc2:	ab18      	add	r3, sp, #96	; 0x60
 800edc4:	9702      	str	r7, [sp, #8]
 800edc6:	9300      	str	r3, [sp, #0]
 800edc8:	4a8d      	ldr	r2, [pc, #564]	; (800f000 <_strtod_l+0x2a0>)
 800edca:	ab19      	add	r3, sp, #100	; 0x64
 800edcc:	a917      	add	r1, sp, #92	; 0x5c
 800edce:	4620      	mov	r0, r4
 800edd0:	f001 ffbe 	bl	8010d50 <__gethex>
 800edd4:	f010 0707 	ands.w	r7, r0, #7
 800edd8:	4605      	mov	r5, r0
 800edda:	d005      	beq.n	800ede8 <_strtod_l+0x88>
 800eddc:	2f06      	cmp	r7, #6
 800edde:	d12c      	bne.n	800ee3a <_strtod_l+0xda>
 800ede0:	3601      	adds	r6, #1
 800ede2:	2300      	movs	r3, #0
 800ede4:	9617      	str	r6, [sp, #92]	; 0x5c
 800ede6:	930a      	str	r3, [sp, #40]	; 0x28
 800ede8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800edea:	2b00      	cmp	r3, #0
 800edec:	f040 8590 	bne.w	800f910 <_strtod_l+0xbb0>
 800edf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800edf2:	b1eb      	cbz	r3, 800ee30 <_strtod_l+0xd0>
 800edf4:	4652      	mov	r2, sl
 800edf6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800edfa:	ec43 2b10 	vmov	d0, r2, r3
 800edfe:	b01d      	add	sp, #116	; 0x74
 800ee00:	ecbd 8b02 	vpop	{d8}
 800ee04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee08:	2a20      	cmp	r2, #32
 800ee0a:	d1cc      	bne.n	800eda6 <_strtod_l+0x46>
 800ee0c:	3301      	adds	r3, #1
 800ee0e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ee10:	e7be      	b.n	800ed90 <_strtod_l+0x30>
 800ee12:	2a2d      	cmp	r2, #45	; 0x2d
 800ee14:	d1c7      	bne.n	800eda6 <_strtod_l+0x46>
 800ee16:	2201      	movs	r2, #1
 800ee18:	920a      	str	r2, [sp, #40]	; 0x28
 800ee1a:	1c5a      	adds	r2, r3, #1
 800ee1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee1e:	785b      	ldrb	r3, [r3, #1]
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	d1c2      	bne.n	800edaa <_strtod_l+0x4a>
 800ee24:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ee26:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ee2a:	2b00      	cmp	r3, #0
 800ee2c:	f040 856e 	bne.w	800f90c <_strtod_l+0xbac>
 800ee30:	4652      	mov	r2, sl
 800ee32:	465b      	mov	r3, fp
 800ee34:	e7e1      	b.n	800edfa <_strtod_l+0x9a>
 800ee36:	2200      	movs	r2, #0
 800ee38:	e7ee      	b.n	800ee18 <_strtod_l+0xb8>
 800ee3a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ee3c:	b13a      	cbz	r2, 800ee4e <_strtod_l+0xee>
 800ee3e:	2135      	movs	r1, #53	; 0x35
 800ee40:	a81a      	add	r0, sp, #104	; 0x68
 800ee42:	f002 ff90 	bl	8011d66 <__copybits>
 800ee46:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ee48:	4620      	mov	r0, r4
 800ee4a:	f002 fb4f 	bl	80114ec <_Bfree>
 800ee4e:	3f01      	subs	r7, #1
 800ee50:	2f04      	cmp	r7, #4
 800ee52:	d806      	bhi.n	800ee62 <_strtod_l+0x102>
 800ee54:	e8df f007 	tbb	[pc, r7]
 800ee58:	1714030a 	.word	0x1714030a
 800ee5c:	0a          	.byte	0x0a
 800ee5d:	00          	.byte	0x00
 800ee5e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ee62:	0728      	lsls	r0, r5, #28
 800ee64:	d5c0      	bpl.n	800ede8 <_strtod_l+0x88>
 800ee66:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ee6a:	e7bd      	b.n	800ede8 <_strtod_l+0x88>
 800ee6c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ee70:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ee72:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ee76:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ee7a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ee7e:	e7f0      	b.n	800ee62 <_strtod_l+0x102>
 800ee80:	f8df b180 	ldr.w	fp, [pc, #384]	; 800f004 <_strtod_l+0x2a4>
 800ee84:	e7ed      	b.n	800ee62 <_strtod_l+0x102>
 800ee86:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ee8a:	f04f 3aff 	mov.w	sl, #4294967295
 800ee8e:	e7e8      	b.n	800ee62 <_strtod_l+0x102>
 800ee90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ee92:	1c5a      	adds	r2, r3, #1
 800ee94:	9217      	str	r2, [sp, #92]	; 0x5c
 800ee96:	785b      	ldrb	r3, [r3, #1]
 800ee98:	2b30      	cmp	r3, #48	; 0x30
 800ee9a:	d0f9      	beq.n	800ee90 <_strtod_l+0x130>
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d0a3      	beq.n	800ede8 <_strtod_l+0x88>
 800eea0:	2301      	movs	r3, #1
 800eea2:	f04f 0900 	mov.w	r9, #0
 800eea6:	9304      	str	r3, [sp, #16]
 800eea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eeaa:	9308      	str	r3, [sp, #32]
 800eeac:	f8cd 901c 	str.w	r9, [sp, #28]
 800eeb0:	464f      	mov	r7, r9
 800eeb2:	220a      	movs	r2, #10
 800eeb4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800eeb6:	7806      	ldrb	r6, [r0, #0]
 800eeb8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800eebc:	b2d9      	uxtb	r1, r3
 800eebe:	2909      	cmp	r1, #9
 800eec0:	d92a      	bls.n	800ef18 <_strtod_l+0x1b8>
 800eec2:	9905      	ldr	r1, [sp, #20]
 800eec4:	462a      	mov	r2, r5
 800eec6:	f003 fa3e 	bl	8012346 <strncmp>
 800eeca:	b398      	cbz	r0, 800ef34 <_strtod_l+0x1d4>
 800eecc:	2000      	movs	r0, #0
 800eece:	4632      	mov	r2, r6
 800eed0:	463d      	mov	r5, r7
 800eed2:	9005      	str	r0, [sp, #20]
 800eed4:	4603      	mov	r3, r0
 800eed6:	2a65      	cmp	r2, #101	; 0x65
 800eed8:	d001      	beq.n	800eede <_strtod_l+0x17e>
 800eeda:	2a45      	cmp	r2, #69	; 0x45
 800eedc:	d118      	bne.n	800ef10 <_strtod_l+0x1b0>
 800eede:	b91d      	cbnz	r5, 800eee8 <_strtod_l+0x188>
 800eee0:	9a04      	ldr	r2, [sp, #16]
 800eee2:	4302      	orrs	r2, r0
 800eee4:	d09e      	beq.n	800ee24 <_strtod_l+0xc4>
 800eee6:	2500      	movs	r5, #0
 800eee8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800eeec:	f108 0201 	add.w	r2, r8, #1
 800eef0:	9217      	str	r2, [sp, #92]	; 0x5c
 800eef2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800eef6:	2a2b      	cmp	r2, #43	; 0x2b
 800eef8:	d075      	beq.n	800efe6 <_strtod_l+0x286>
 800eefa:	2a2d      	cmp	r2, #45	; 0x2d
 800eefc:	d07b      	beq.n	800eff6 <_strtod_l+0x296>
 800eefe:	f04f 0c00 	mov.w	ip, #0
 800ef02:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ef06:	2909      	cmp	r1, #9
 800ef08:	f240 8082 	bls.w	800f010 <_strtod_l+0x2b0>
 800ef0c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ef10:	2600      	movs	r6, #0
 800ef12:	e09d      	b.n	800f050 <_strtod_l+0x2f0>
 800ef14:	2300      	movs	r3, #0
 800ef16:	e7c4      	b.n	800eea2 <_strtod_l+0x142>
 800ef18:	2f08      	cmp	r7, #8
 800ef1a:	bfd8      	it	le
 800ef1c:	9907      	ldrle	r1, [sp, #28]
 800ef1e:	f100 0001 	add.w	r0, r0, #1
 800ef22:	bfda      	itte	le
 800ef24:	fb02 3301 	mlale	r3, r2, r1, r3
 800ef28:	9307      	strle	r3, [sp, #28]
 800ef2a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ef2e:	3701      	adds	r7, #1
 800ef30:	9017      	str	r0, [sp, #92]	; 0x5c
 800ef32:	e7bf      	b.n	800eeb4 <_strtod_l+0x154>
 800ef34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef36:	195a      	adds	r2, r3, r5
 800ef38:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef3a:	5d5a      	ldrb	r2, [r3, r5]
 800ef3c:	2f00      	cmp	r7, #0
 800ef3e:	d037      	beq.n	800efb0 <_strtod_l+0x250>
 800ef40:	9005      	str	r0, [sp, #20]
 800ef42:	463d      	mov	r5, r7
 800ef44:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ef48:	2b09      	cmp	r3, #9
 800ef4a:	d912      	bls.n	800ef72 <_strtod_l+0x212>
 800ef4c:	2301      	movs	r3, #1
 800ef4e:	e7c2      	b.n	800eed6 <_strtod_l+0x176>
 800ef50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef52:	1c5a      	adds	r2, r3, #1
 800ef54:	9217      	str	r2, [sp, #92]	; 0x5c
 800ef56:	785a      	ldrb	r2, [r3, #1]
 800ef58:	3001      	adds	r0, #1
 800ef5a:	2a30      	cmp	r2, #48	; 0x30
 800ef5c:	d0f8      	beq.n	800ef50 <_strtod_l+0x1f0>
 800ef5e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ef62:	2b08      	cmp	r3, #8
 800ef64:	f200 84d9 	bhi.w	800f91a <_strtod_l+0xbba>
 800ef68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ef6a:	9005      	str	r0, [sp, #20]
 800ef6c:	2000      	movs	r0, #0
 800ef6e:	9308      	str	r3, [sp, #32]
 800ef70:	4605      	mov	r5, r0
 800ef72:	3a30      	subs	r2, #48	; 0x30
 800ef74:	f100 0301 	add.w	r3, r0, #1
 800ef78:	d014      	beq.n	800efa4 <_strtod_l+0x244>
 800ef7a:	9905      	ldr	r1, [sp, #20]
 800ef7c:	4419      	add	r1, r3
 800ef7e:	9105      	str	r1, [sp, #20]
 800ef80:	462b      	mov	r3, r5
 800ef82:	eb00 0e05 	add.w	lr, r0, r5
 800ef86:	210a      	movs	r1, #10
 800ef88:	4573      	cmp	r3, lr
 800ef8a:	d113      	bne.n	800efb4 <_strtod_l+0x254>
 800ef8c:	182b      	adds	r3, r5, r0
 800ef8e:	2b08      	cmp	r3, #8
 800ef90:	f105 0501 	add.w	r5, r5, #1
 800ef94:	4405      	add	r5, r0
 800ef96:	dc1c      	bgt.n	800efd2 <_strtod_l+0x272>
 800ef98:	9907      	ldr	r1, [sp, #28]
 800ef9a:	230a      	movs	r3, #10
 800ef9c:	fb03 2301 	mla	r3, r3, r1, r2
 800efa0:	9307      	str	r3, [sp, #28]
 800efa2:	2300      	movs	r3, #0
 800efa4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800efa6:	1c51      	adds	r1, r2, #1
 800efa8:	9117      	str	r1, [sp, #92]	; 0x5c
 800efaa:	7852      	ldrb	r2, [r2, #1]
 800efac:	4618      	mov	r0, r3
 800efae:	e7c9      	b.n	800ef44 <_strtod_l+0x1e4>
 800efb0:	4638      	mov	r0, r7
 800efb2:	e7d2      	b.n	800ef5a <_strtod_l+0x1fa>
 800efb4:	2b08      	cmp	r3, #8
 800efb6:	dc04      	bgt.n	800efc2 <_strtod_l+0x262>
 800efb8:	9e07      	ldr	r6, [sp, #28]
 800efba:	434e      	muls	r6, r1
 800efbc:	9607      	str	r6, [sp, #28]
 800efbe:	3301      	adds	r3, #1
 800efc0:	e7e2      	b.n	800ef88 <_strtod_l+0x228>
 800efc2:	f103 0c01 	add.w	ip, r3, #1
 800efc6:	f1bc 0f10 	cmp.w	ip, #16
 800efca:	bfd8      	it	le
 800efcc:	fb01 f909 	mulle.w	r9, r1, r9
 800efd0:	e7f5      	b.n	800efbe <_strtod_l+0x25e>
 800efd2:	2d10      	cmp	r5, #16
 800efd4:	bfdc      	itt	le
 800efd6:	230a      	movle	r3, #10
 800efd8:	fb03 2909 	mlale	r9, r3, r9, r2
 800efdc:	e7e1      	b.n	800efa2 <_strtod_l+0x242>
 800efde:	2300      	movs	r3, #0
 800efe0:	9305      	str	r3, [sp, #20]
 800efe2:	2301      	movs	r3, #1
 800efe4:	e77c      	b.n	800eee0 <_strtod_l+0x180>
 800efe6:	f04f 0c00 	mov.w	ip, #0
 800efea:	f108 0202 	add.w	r2, r8, #2
 800efee:	9217      	str	r2, [sp, #92]	; 0x5c
 800eff0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800eff4:	e785      	b.n	800ef02 <_strtod_l+0x1a2>
 800eff6:	f04f 0c01 	mov.w	ip, #1
 800effa:	e7f6      	b.n	800efea <_strtod_l+0x28a>
 800effc:	08013f04 	.word	0x08013f04
 800f000:	08013c54 	.word	0x08013c54
 800f004:	7ff00000 	.word	0x7ff00000
 800f008:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f00a:	1c51      	adds	r1, r2, #1
 800f00c:	9117      	str	r1, [sp, #92]	; 0x5c
 800f00e:	7852      	ldrb	r2, [r2, #1]
 800f010:	2a30      	cmp	r2, #48	; 0x30
 800f012:	d0f9      	beq.n	800f008 <_strtod_l+0x2a8>
 800f014:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800f018:	2908      	cmp	r1, #8
 800f01a:	f63f af79 	bhi.w	800ef10 <_strtod_l+0x1b0>
 800f01e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800f022:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f024:	9206      	str	r2, [sp, #24]
 800f026:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800f028:	1c51      	adds	r1, r2, #1
 800f02a:	9117      	str	r1, [sp, #92]	; 0x5c
 800f02c:	7852      	ldrb	r2, [r2, #1]
 800f02e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800f032:	2e09      	cmp	r6, #9
 800f034:	d937      	bls.n	800f0a6 <_strtod_l+0x346>
 800f036:	9e06      	ldr	r6, [sp, #24]
 800f038:	1b89      	subs	r1, r1, r6
 800f03a:	2908      	cmp	r1, #8
 800f03c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800f040:	dc02      	bgt.n	800f048 <_strtod_l+0x2e8>
 800f042:	4576      	cmp	r6, lr
 800f044:	bfa8      	it	ge
 800f046:	4676      	movge	r6, lr
 800f048:	f1bc 0f00 	cmp.w	ip, #0
 800f04c:	d000      	beq.n	800f050 <_strtod_l+0x2f0>
 800f04e:	4276      	negs	r6, r6
 800f050:	2d00      	cmp	r5, #0
 800f052:	d14d      	bne.n	800f0f0 <_strtod_l+0x390>
 800f054:	9904      	ldr	r1, [sp, #16]
 800f056:	4301      	orrs	r1, r0
 800f058:	f47f aec6 	bne.w	800ede8 <_strtod_l+0x88>
 800f05c:	2b00      	cmp	r3, #0
 800f05e:	f47f aee1 	bne.w	800ee24 <_strtod_l+0xc4>
 800f062:	2a69      	cmp	r2, #105	; 0x69
 800f064:	d027      	beq.n	800f0b6 <_strtod_l+0x356>
 800f066:	dc24      	bgt.n	800f0b2 <_strtod_l+0x352>
 800f068:	2a49      	cmp	r2, #73	; 0x49
 800f06a:	d024      	beq.n	800f0b6 <_strtod_l+0x356>
 800f06c:	2a4e      	cmp	r2, #78	; 0x4e
 800f06e:	f47f aed9 	bne.w	800ee24 <_strtod_l+0xc4>
 800f072:	499f      	ldr	r1, [pc, #636]	; (800f2f0 <_strtod_l+0x590>)
 800f074:	a817      	add	r0, sp, #92	; 0x5c
 800f076:	f002 f8c3 	bl	8011200 <__match>
 800f07a:	2800      	cmp	r0, #0
 800f07c:	f43f aed2 	beq.w	800ee24 <_strtod_l+0xc4>
 800f080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f082:	781b      	ldrb	r3, [r3, #0]
 800f084:	2b28      	cmp	r3, #40	; 0x28
 800f086:	d12d      	bne.n	800f0e4 <_strtod_l+0x384>
 800f088:	499a      	ldr	r1, [pc, #616]	; (800f2f4 <_strtod_l+0x594>)
 800f08a:	aa1a      	add	r2, sp, #104	; 0x68
 800f08c:	a817      	add	r0, sp, #92	; 0x5c
 800f08e:	f002 f8cb 	bl	8011228 <__hexnan>
 800f092:	2805      	cmp	r0, #5
 800f094:	d126      	bne.n	800f0e4 <_strtod_l+0x384>
 800f096:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f098:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800f09c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800f0a0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800f0a4:	e6a0      	b.n	800ede8 <_strtod_l+0x88>
 800f0a6:	210a      	movs	r1, #10
 800f0a8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800f0ac:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800f0b0:	e7b9      	b.n	800f026 <_strtod_l+0x2c6>
 800f0b2:	2a6e      	cmp	r2, #110	; 0x6e
 800f0b4:	e7db      	b.n	800f06e <_strtod_l+0x30e>
 800f0b6:	4990      	ldr	r1, [pc, #576]	; (800f2f8 <_strtod_l+0x598>)
 800f0b8:	a817      	add	r0, sp, #92	; 0x5c
 800f0ba:	f002 f8a1 	bl	8011200 <__match>
 800f0be:	2800      	cmp	r0, #0
 800f0c0:	f43f aeb0 	beq.w	800ee24 <_strtod_l+0xc4>
 800f0c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0c6:	498d      	ldr	r1, [pc, #564]	; (800f2fc <_strtod_l+0x59c>)
 800f0c8:	3b01      	subs	r3, #1
 800f0ca:	a817      	add	r0, sp, #92	; 0x5c
 800f0cc:	9317      	str	r3, [sp, #92]	; 0x5c
 800f0ce:	f002 f897 	bl	8011200 <__match>
 800f0d2:	b910      	cbnz	r0, 800f0da <_strtod_l+0x37a>
 800f0d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f0d6:	3301      	adds	r3, #1
 800f0d8:	9317      	str	r3, [sp, #92]	; 0x5c
 800f0da:	f8df b230 	ldr.w	fp, [pc, #560]	; 800f30c <_strtod_l+0x5ac>
 800f0de:	f04f 0a00 	mov.w	sl, #0
 800f0e2:	e681      	b.n	800ede8 <_strtod_l+0x88>
 800f0e4:	4886      	ldr	r0, [pc, #536]	; (800f300 <_strtod_l+0x5a0>)
 800f0e6:	f003 f8d3 	bl	8012290 <nan>
 800f0ea:	ec5b ab10 	vmov	sl, fp, d0
 800f0ee:	e67b      	b.n	800ede8 <_strtod_l+0x88>
 800f0f0:	9b05      	ldr	r3, [sp, #20]
 800f0f2:	9807      	ldr	r0, [sp, #28]
 800f0f4:	1af3      	subs	r3, r6, r3
 800f0f6:	2f00      	cmp	r7, #0
 800f0f8:	bf08      	it	eq
 800f0fa:	462f      	moveq	r7, r5
 800f0fc:	2d10      	cmp	r5, #16
 800f0fe:	9306      	str	r3, [sp, #24]
 800f100:	46a8      	mov	r8, r5
 800f102:	bfa8      	it	ge
 800f104:	f04f 0810 	movge.w	r8, #16
 800f108:	f7f1 fa24 	bl	8000554 <__aeabi_ui2d>
 800f10c:	2d09      	cmp	r5, #9
 800f10e:	4682      	mov	sl, r0
 800f110:	468b      	mov	fp, r1
 800f112:	dd13      	ble.n	800f13c <_strtod_l+0x3dc>
 800f114:	4b7b      	ldr	r3, [pc, #492]	; (800f304 <_strtod_l+0x5a4>)
 800f116:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800f11a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800f11e:	f7f1 fa93 	bl	8000648 <__aeabi_dmul>
 800f122:	4682      	mov	sl, r0
 800f124:	4648      	mov	r0, r9
 800f126:	468b      	mov	fp, r1
 800f128:	f7f1 fa14 	bl	8000554 <__aeabi_ui2d>
 800f12c:	4602      	mov	r2, r0
 800f12e:	460b      	mov	r3, r1
 800f130:	4650      	mov	r0, sl
 800f132:	4659      	mov	r1, fp
 800f134:	f7f1 f8d2 	bl	80002dc <__adddf3>
 800f138:	4682      	mov	sl, r0
 800f13a:	468b      	mov	fp, r1
 800f13c:	2d0f      	cmp	r5, #15
 800f13e:	dc38      	bgt.n	800f1b2 <_strtod_l+0x452>
 800f140:	9b06      	ldr	r3, [sp, #24]
 800f142:	2b00      	cmp	r3, #0
 800f144:	f43f ae50 	beq.w	800ede8 <_strtod_l+0x88>
 800f148:	dd24      	ble.n	800f194 <_strtod_l+0x434>
 800f14a:	2b16      	cmp	r3, #22
 800f14c:	dc0b      	bgt.n	800f166 <_strtod_l+0x406>
 800f14e:	496d      	ldr	r1, [pc, #436]	; (800f304 <_strtod_l+0x5a4>)
 800f150:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f154:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f158:	4652      	mov	r2, sl
 800f15a:	465b      	mov	r3, fp
 800f15c:	f7f1 fa74 	bl	8000648 <__aeabi_dmul>
 800f160:	4682      	mov	sl, r0
 800f162:	468b      	mov	fp, r1
 800f164:	e640      	b.n	800ede8 <_strtod_l+0x88>
 800f166:	9a06      	ldr	r2, [sp, #24]
 800f168:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800f16c:	4293      	cmp	r3, r2
 800f16e:	db20      	blt.n	800f1b2 <_strtod_l+0x452>
 800f170:	4c64      	ldr	r4, [pc, #400]	; (800f304 <_strtod_l+0x5a4>)
 800f172:	f1c5 050f 	rsb	r5, r5, #15
 800f176:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800f17a:	4652      	mov	r2, sl
 800f17c:	465b      	mov	r3, fp
 800f17e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f182:	f7f1 fa61 	bl	8000648 <__aeabi_dmul>
 800f186:	9b06      	ldr	r3, [sp, #24]
 800f188:	1b5d      	subs	r5, r3, r5
 800f18a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800f18e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800f192:	e7e3      	b.n	800f15c <_strtod_l+0x3fc>
 800f194:	9b06      	ldr	r3, [sp, #24]
 800f196:	3316      	adds	r3, #22
 800f198:	db0b      	blt.n	800f1b2 <_strtod_l+0x452>
 800f19a:	9b05      	ldr	r3, [sp, #20]
 800f19c:	1b9e      	subs	r6, r3, r6
 800f19e:	4b59      	ldr	r3, [pc, #356]	; (800f304 <_strtod_l+0x5a4>)
 800f1a0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800f1a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800f1a8:	4650      	mov	r0, sl
 800f1aa:	4659      	mov	r1, fp
 800f1ac:	f7f1 fb76 	bl	800089c <__aeabi_ddiv>
 800f1b0:	e7d6      	b.n	800f160 <_strtod_l+0x400>
 800f1b2:	9b06      	ldr	r3, [sp, #24]
 800f1b4:	eba5 0808 	sub.w	r8, r5, r8
 800f1b8:	4498      	add	r8, r3
 800f1ba:	f1b8 0f00 	cmp.w	r8, #0
 800f1be:	dd74      	ble.n	800f2aa <_strtod_l+0x54a>
 800f1c0:	f018 030f 	ands.w	r3, r8, #15
 800f1c4:	d00a      	beq.n	800f1dc <_strtod_l+0x47c>
 800f1c6:	494f      	ldr	r1, [pc, #316]	; (800f304 <_strtod_l+0x5a4>)
 800f1c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800f1cc:	4652      	mov	r2, sl
 800f1ce:	465b      	mov	r3, fp
 800f1d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1d4:	f7f1 fa38 	bl	8000648 <__aeabi_dmul>
 800f1d8:	4682      	mov	sl, r0
 800f1da:	468b      	mov	fp, r1
 800f1dc:	f038 080f 	bics.w	r8, r8, #15
 800f1e0:	d04f      	beq.n	800f282 <_strtod_l+0x522>
 800f1e2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800f1e6:	dd22      	ble.n	800f22e <_strtod_l+0x4ce>
 800f1e8:	2500      	movs	r5, #0
 800f1ea:	462e      	mov	r6, r5
 800f1ec:	9507      	str	r5, [sp, #28]
 800f1ee:	9505      	str	r5, [sp, #20]
 800f1f0:	2322      	movs	r3, #34	; 0x22
 800f1f2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800f30c <_strtod_l+0x5ac>
 800f1f6:	6023      	str	r3, [r4, #0]
 800f1f8:	f04f 0a00 	mov.w	sl, #0
 800f1fc:	9b07      	ldr	r3, [sp, #28]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f43f adf2 	beq.w	800ede8 <_strtod_l+0x88>
 800f204:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f206:	4620      	mov	r0, r4
 800f208:	f002 f970 	bl	80114ec <_Bfree>
 800f20c:	9905      	ldr	r1, [sp, #20]
 800f20e:	4620      	mov	r0, r4
 800f210:	f002 f96c 	bl	80114ec <_Bfree>
 800f214:	4631      	mov	r1, r6
 800f216:	4620      	mov	r0, r4
 800f218:	f002 f968 	bl	80114ec <_Bfree>
 800f21c:	9907      	ldr	r1, [sp, #28]
 800f21e:	4620      	mov	r0, r4
 800f220:	f002 f964 	bl	80114ec <_Bfree>
 800f224:	4629      	mov	r1, r5
 800f226:	4620      	mov	r0, r4
 800f228:	f002 f960 	bl	80114ec <_Bfree>
 800f22c:	e5dc      	b.n	800ede8 <_strtod_l+0x88>
 800f22e:	4b36      	ldr	r3, [pc, #216]	; (800f308 <_strtod_l+0x5a8>)
 800f230:	9304      	str	r3, [sp, #16]
 800f232:	2300      	movs	r3, #0
 800f234:	ea4f 1828 	mov.w	r8, r8, asr #4
 800f238:	4650      	mov	r0, sl
 800f23a:	4659      	mov	r1, fp
 800f23c:	4699      	mov	r9, r3
 800f23e:	f1b8 0f01 	cmp.w	r8, #1
 800f242:	dc21      	bgt.n	800f288 <_strtod_l+0x528>
 800f244:	b10b      	cbz	r3, 800f24a <_strtod_l+0x4ea>
 800f246:	4682      	mov	sl, r0
 800f248:	468b      	mov	fp, r1
 800f24a:	4b2f      	ldr	r3, [pc, #188]	; (800f308 <_strtod_l+0x5a8>)
 800f24c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800f250:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800f254:	4652      	mov	r2, sl
 800f256:	465b      	mov	r3, fp
 800f258:	e9d9 0100 	ldrd	r0, r1, [r9]
 800f25c:	f7f1 f9f4 	bl	8000648 <__aeabi_dmul>
 800f260:	4b2a      	ldr	r3, [pc, #168]	; (800f30c <_strtod_l+0x5ac>)
 800f262:	460a      	mov	r2, r1
 800f264:	400b      	ands	r3, r1
 800f266:	492a      	ldr	r1, [pc, #168]	; (800f310 <_strtod_l+0x5b0>)
 800f268:	428b      	cmp	r3, r1
 800f26a:	4682      	mov	sl, r0
 800f26c:	d8bc      	bhi.n	800f1e8 <_strtod_l+0x488>
 800f26e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800f272:	428b      	cmp	r3, r1
 800f274:	bf86      	itte	hi
 800f276:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800f314 <_strtod_l+0x5b4>
 800f27a:	f04f 3aff 	movhi.w	sl, #4294967295
 800f27e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800f282:	2300      	movs	r3, #0
 800f284:	9304      	str	r3, [sp, #16]
 800f286:	e084      	b.n	800f392 <_strtod_l+0x632>
 800f288:	f018 0f01 	tst.w	r8, #1
 800f28c:	d005      	beq.n	800f29a <_strtod_l+0x53a>
 800f28e:	9b04      	ldr	r3, [sp, #16]
 800f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f294:	f7f1 f9d8 	bl	8000648 <__aeabi_dmul>
 800f298:	2301      	movs	r3, #1
 800f29a:	9a04      	ldr	r2, [sp, #16]
 800f29c:	3208      	adds	r2, #8
 800f29e:	f109 0901 	add.w	r9, r9, #1
 800f2a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800f2a6:	9204      	str	r2, [sp, #16]
 800f2a8:	e7c9      	b.n	800f23e <_strtod_l+0x4de>
 800f2aa:	d0ea      	beq.n	800f282 <_strtod_l+0x522>
 800f2ac:	f1c8 0800 	rsb	r8, r8, #0
 800f2b0:	f018 020f 	ands.w	r2, r8, #15
 800f2b4:	d00a      	beq.n	800f2cc <_strtod_l+0x56c>
 800f2b6:	4b13      	ldr	r3, [pc, #76]	; (800f304 <_strtod_l+0x5a4>)
 800f2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f2bc:	4650      	mov	r0, sl
 800f2be:	4659      	mov	r1, fp
 800f2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c4:	f7f1 faea 	bl	800089c <__aeabi_ddiv>
 800f2c8:	4682      	mov	sl, r0
 800f2ca:	468b      	mov	fp, r1
 800f2cc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800f2d0:	d0d7      	beq.n	800f282 <_strtod_l+0x522>
 800f2d2:	f1b8 0f1f 	cmp.w	r8, #31
 800f2d6:	dd1f      	ble.n	800f318 <_strtod_l+0x5b8>
 800f2d8:	2500      	movs	r5, #0
 800f2da:	462e      	mov	r6, r5
 800f2dc:	9507      	str	r5, [sp, #28]
 800f2de:	9505      	str	r5, [sp, #20]
 800f2e0:	2322      	movs	r3, #34	; 0x22
 800f2e2:	f04f 0a00 	mov.w	sl, #0
 800f2e6:	f04f 0b00 	mov.w	fp, #0
 800f2ea:	6023      	str	r3, [r4, #0]
 800f2ec:	e786      	b.n	800f1fc <_strtod_l+0x49c>
 800f2ee:	bf00      	nop
 800f2f0:	08013c2d 	.word	0x08013c2d
 800f2f4:	08013c68 	.word	0x08013c68
 800f2f8:	08013c25 	.word	0x08013c25
 800f2fc:	08013dac 	.word	0x08013dac
 800f300:	080140c0 	.word	0x080140c0
 800f304:	08013fa0 	.word	0x08013fa0
 800f308:	08013f78 	.word	0x08013f78
 800f30c:	7ff00000 	.word	0x7ff00000
 800f310:	7ca00000 	.word	0x7ca00000
 800f314:	7fefffff 	.word	0x7fefffff
 800f318:	f018 0310 	ands.w	r3, r8, #16
 800f31c:	bf18      	it	ne
 800f31e:	236a      	movne	r3, #106	; 0x6a
 800f320:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800f6d0 <_strtod_l+0x970>
 800f324:	9304      	str	r3, [sp, #16]
 800f326:	4650      	mov	r0, sl
 800f328:	4659      	mov	r1, fp
 800f32a:	2300      	movs	r3, #0
 800f32c:	f018 0f01 	tst.w	r8, #1
 800f330:	d004      	beq.n	800f33c <_strtod_l+0x5dc>
 800f332:	e9d9 2300 	ldrd	r2, r3, [r9]
 800f336:	f7f1 f987 	bl	8000648 <__aeabi_dmul>
 800f33a:	2301      	movs	r3, #1
 800f33c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800f340:	f109 0908 	add.w	r9, r9, #8
 800f344:	d1f2      	bne.n	800f32c <_strtod_l+0x5cc>
 800f346:	b10b      	cbz	r3, 800f34c <_strtod_l+0x5ec>
 800f348:	4682      	mov	sl, r0
 800f34a:	468b      	mov	fp, r1
 800f34c:	9b04      	ldr	r3, [sp, #16]
 800f34e:	b1c3      	cbz	r3, 800f382 <_strtod_l+0x622>
 800f350:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800f354:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800f358:	2b00      	cmp	r3, #0
 800f35a:	4659      	mov	r1, fp
 800f35c:	dd11      	ble.n	800f382 <_strtod_l+0x622>
 800f35e:	2b1f      	cmp	r3, #31
 800f360:	f340 8124 	ble.w	800f5ac <_strtod_l+0x84c>
 800f364:	2b34      	cmp	r3, #52	; 0x34
 800f366:	bfde      	ittt	le
 800f368:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800f36c:	f04f 33ff 	movle.w	r3, #4294967295
 800f370:	fa03 f202 	lslle.w	r2, r3, r2
 800f374:	f04f 0a00 	mov.w	sl, #0
 800f378:	bfcc      	ite	gt
 800f37a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800f37e:	ea02 0b01 	andle.w	fp, r2, r1
 800f382:	2200      	movs	r2, #0
 800f384:	2300      	movs	r3, #0
 800f386:	4650      	mov	r0, sl
 800f388:	4659      	mov	r1, fp
 800f38a:	f7f1 fbc5 	bl	8000b18 <__aeabi_dcmpeq>
 800f38e:	2800      	cmp	r0, #0
 800f390:	d1a2      	bne.n	800f2d8 <_strtod_l+0x578>
 800f392:	9b07      	ldr	r3, [sp, #28]
 800f394:	9300      	str	r3, [sp, #0]
 800f396:	9908      	ldr	r1, [sp, #32]
 800f398:	462b      	mov	r3, r5
 800f39a:	463a      	mov	r2, r7
 800f39c:	4620      	mov	r0, r4
 800f39e:	f002 f90d 	bl	80115bc <__s2b>
 800f3a2:	9007      	str	r0, [sp, #28]
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	f43f af1f 	beq.w	800f1e8 <_strtod_l+0x488>
 800f3aa:	9b05      	ldr	r3, [sp, #20]
 800f3ac:	1b9e      	subs	r6, r3, r6
 800f3ae:	9b06      	ldr	r3, [sp, #24]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	bfb4      	ite	lt
 800f3b4:	4633      	movlt	r3, r6
 800f3b6:	2300      	movge	r3, #0
 800f3b8:	930c      	str	r3, [sp, #48]	; 0x30
 800f3ba:	9b06      	ldr	r3, [sp, #24]
 800f3bc:	2500      	movs	r5, #0
 800f3be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800f3c2:	9312      	str	r3, [sp, #72]	; 0x48
 800f3c4:	462e      	mov	r6, r5
 800f3c6:	9b07      	ldr	r3, [sp, #28]
 800f3c8:	4620      	mov	r0, r4
 800f3ca:	6859      	ldr	r1, [r3, #4]
 800f3cc:	f002 f84e 	bl	801146c <_Balloc>
 800f3d0:	9005      	str	r0, [sp, #20]
 800f3d2:	2800      	cmp	r0, #0
 800f3d4:	f43f af0c 	beq.w	800f1f0 <_strtod_l+0x490>
 800f3d8:	9b07      	ldr	r3, [sp, #28]
 800f3da:	691a      	ldr	r2, [r3, #16]
 800f3dc:	3202      	adds	r2, #2
 800f3de:	f103 010c 	add.w	r1, r3, #12
 800f3e2:	0092      	lsls	r2, r2, #2
 800f3e4:	300c      	adds	r0, #12
 800f3e6:	f7fe ff8f 	bl	800e308 <memcpy>
 800f3ea:	ec4b ab10 	vmov	d0, sl, fp
 800f3ee:	aa1a      	add	r2, sp, #104	; 0x68
 800f3f0:	a919      	add	r1, sp, #100	; 0x64
 800f3f2:	4620      	mov	r0, r4
 800f3f4:	f002 fc28 	bl	8011c48 <__d2b>
 800f3f8:	ec4b ab18 	vmov	d8, sl, fp
 800f3fc:	9018      	str	r0, [sp, #96]	; 0x60
 800f3fe:	2800      	cmp	r0, #0
 800f400:	f43f aef6 	beq.w	800f1f0 <_strtod_l+0x490>
 800f404:	2101      	movs	r1, #1
 800f406:	4620      	mov	r0, r4
 800f408:	f002 f972 	bl	80116f0 <__i2b>
 800f40c:	4606      	mov	r6, r0
 800f40e:	2800      	cmp	r0, #0
 800f410:	f43f aeee 	beq.w	800f1f0 <_strtod_l+0x490>
 800f414:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800f416:	9904      	ldr	r1, [sp, #16]
 800f418:	2b00      	cmp	r3, #0
 800f41a:	bfab      	itete	ge
 800f41c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800f41e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800f420:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800f422:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800f426:	bfac      	ite	ge
 800f428:	eb03 0902 	addge.w	r9, r3, r2
 800f42c:	1ad7      	sublt	r7, r2, r3
 800f42e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800f430:	eba3 0801 	sub.w	r8, r3, r1
 800f434:	4490      	add	r8, r2
 800f436:	4ba1      	ldr	r3, [pc, #644]	; (800f6bc <_strtod_l+0x95c>)
 800f438:	f108 38ff 	add.w	r8, r8, #4294967295
 800f43c:	4598      	cmp	r8, r3
 800f43e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800f442:	f280 80c7 	bge.w	800f5d4 <_strtod_l+0x874>
 800f446:	eba3 0308 	sub.w	r3, r3, r8
 800f44a:	2b1f      	cmp	r3, #31
 800f44c:	eba2 0203 	sub.w	r2, r2, r3
 800f450:	f04f 0101 	mov.w	r1, #1
 800f454:	f300 80b1 	bgt.w	800f5ba <_strtod_l+0x85a>
 800f458:	fa01 f303 	lsl.w	r3, r1, r3
 800f45c:	930d      	str	r3, [sp, #52]	; 0x34
 800f45e:	2300      	movs	r3, #0
 800f460:	9308      	str	r3, [sp, #32]
 800f462:	eb09 0802 	add.w	r8, r9, r2
 800f466:	9b04      	ldr	r3, [sp, #16]
 800f468:	45c1      	cmp	r9, r8
 800f46a:	4417      	add	r7, r2
 800f46c:	441f      	add	r7, r3
 800f46e:	464b      	mov	r3, r9
 800f470:	bfa8      	it	ge
 800f472:	4643      	movge	r3, r8
 800f474:	42bb      	cmp	r3, r7
 800f476:	bfa8      	it	ge
 800f478:	463b      	movge	r3, r7
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	bfc2      	ittt	gt
 800f47e:	eba8 0803 	subgt.w	r8, r8, r3
 800f482:	1aff      	subgt	r7, r7, r3
 800f484:	eba9 0903 	subgt.w	r9, r9, r3
 800f488:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	dd17      	ble.n	800f4be <_strtod_l+0x75e>
 800f48e:	4631      	mov	r1, r6
 800f490:	461a      	mov	r2, r3
 800f492:	4620      	mov	r0, r4
 800f494:	f002 f9ec 	bl	8011870 <__pow5mult>
 800f498:	4606      	mov	r6, r0
 800f49a:	2800      	cmp	r0, #0
 800f49c:	f43f aea8 	beq.w	800f1f0 <_strtod_l+0x490>
 800f4a0:	4601      	mov	r1, r0
 800f4a2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800f4a4:	4620      	mov	r0, r4
 800f4a6:	f002 f939 	bl	801171c <__multiply>
 800f4aa:	900b      	str	r0, [sp, #44]	; 0x2c
 800f4ac:	2800      	cmp	r0, #0
 800f4ae:	f43f ae9f 	beq.w	800f1f0 <_strtod_l+0x490>
 800f4b2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f4b4:	4620      	mov	r0, r4
 800f4b6:	f002 f819 	bl	80114ec <_Bfree>
 800f4ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4bc:	9318      	str	r3, [sp, #96]	; 0x60
 800f4be:	f1b8 0f00 	cmp.w	r8, #0
 800f4c2:	f300 808c 	bgt.w	800f5de <_strtod_l+0x87e>
 800f4c6:	9b06      	ldr	r3, [sp, #24]
 800f4c8:	2b00      	cmp	r3, #0
 800f4ca:	dd08      	ble.n	800f4de <_strtod_l+0x77e>
 800f4cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f4ce:	9905      	ldr	r1, [sp, #20]
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	f002 f9cd 	bl	8011870 <__pow5mult>
 800f4d6:	9005      	str	r0, [sp, #20]
 800f4d8:	2800      	cmp	r0, #0
 800f4da:	f43f ae89 	beq.w	800f1f0 <_strtod_l+0x490>
 800f4de:	2f00      	cmp	r7, #0
 800f4e0:	dd08      	ble.n	800f4f4 <_strtod_l+0x794>
 800f4e2:	9905      	ldr	r1, [sp, #20]
 800f4e4:	463a      	mov	r2, r7
 800f4e6:	4620      	mov	r0, r4
 800f4e8:	f002 fa1c 	bl	8011924 <__lshift>
 800f4ec:	9005      	str	r0, [sp, #20]
 800f4ee:	2800      	cmp	r0, #0
 800f4f0:	f43f ae7e 	beq.w	800f1f0 <_strtod_l+0x490>
 800f4f4:	f1b9 0f00 	cmp.w	r9, #0
 800f4f8:	dd08      	ble.n	800f50c <_strtod_l+0x7ac>
 800f4fa:	4631      	mov	r1, r6
 800f4fc:	464a      	mov	r2, r9
 800f4fe:	4620      	mov	r0, r4
 800f500:	f002 fa10 	bl	8011924 <__lshift>
 800f504:	4606      	mov	r6, r0
 800f506:	2800      	cmp	r0, #0
 800f508:	f43f ae72 	beq.w	800f1f0 <_strtod_l+0x490>
 800f50c:	9a05      	ldr	r2, [sp, #20]
 800f50e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f510:	4620      	mov	r0, r4
 800f512:	f002 fa93 	bl	8011a3c <__mdiff>
 800f516:	4605      	mov	r5, r0
 800f518:	2800      	cmp	r0, #0
 800f51a:	f43f ae69 	beq.w	800f1f0 <_strtod_l+0x490>
 800f51e:	68c3      	ldr	r3, [r0, #12]
 800f520:	930b      	str	r3, [sp, #44]	; 0x2c
 800f522:	2300      	movs	r3, #0
 800f524:	60c3      	str	r3, [r0, #12]
 800f526:	4631      	mov	r1, r6
 800f528:	f002 fa6c 	bl	8011a04 <__mcmp>
 800f52c:	2800      	cmp	r0, #0
 800f52e:	da60      	bge.n	800f5f2 <_strtod_l+0x892>
 800f530:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f532:	ea53 030a 	orrs.w	r3, r3, sl
 800f536:	f040 8082 	bne.w	800f63e <_strtod_l+0x8de>
 800f53a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d17d      	bne.n	800f63e <_strtod_l+0x8de>
 800f542:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f546:	0d1b      	lsrs	r3, r3, #20
 800f548:	051b      	lsls	r3, r3, #20
 800f54a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800f54e:	d976      	bls.n	800f63e <_strtod_l+0x8de>
 800f550:	696b      	ldr	r3, [r5, #20]
 800f552:	b913      	cbnz	r3, 800f55a <_strtod_l+0x7fa>
 800f554:	692b      	ldr	r3, [r5, #16]
 800f556:	2b01      	cmp	r3, #1
 800f558:	dd71      	ble.n	800f63e <_strtod_l+0x8de>
 800f55a:	4629      	mov	r1, r5
 800f55c:	2201      	movs	r2, #1
 800f55e:	4620      	mov	r0, r4
 800f560:	f002 f9e0 	bl	8011924 <__lshift>
 800f564:	4631      	mov	r1, r6
 800f566:	4605      	mov	r5, r0
 800f568:	f002 fa4c 	bl	8011a04 <__mcmp>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	dd66      	ble.n	800f63e <_strtod_l+0x8de>
 800f570:	9904      	ldr	r1, [sp, #16]
 800f572:	4a53      	ldr	r2, [pc, #332]	; (800f6c0 <_strtod_l+0x960>)
 800f574:	465b      	mov	r3, fp
 800f576:	2900      	cmp	r1, #0
 800f578:	f000 8081 	beq.w	800f67e <_strtod_l+0x91e>
 800f57c:	ea02 010b 	and.w	r1, r2, fp
 800f580:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800f584:	dc7b      	bgt.n	800f67e <_strtod_l+0x91e>
 800f586:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800f58a:	f77f aea9 	ble.w	800f2e0 <_strtod_l+0x580>
 800f58e:	4b4d      	ldr	r3, [pc, #308]	; (800f6c4 <_strtod_l+0x964>)
 800f590:	4650      	mov	r0, sl
 800f592:	4659      	mov	r1, fp
 800f594:	2200      	movs	r2, #0
 800f596:	f7f1 f857 	bl	8000648 <__aeabi_dmul>
 800f59a:	460b      	mov	r3, r1
 800f59c:	4303      	orrs	r3, r0
 800f59e:	bf08      	it	eq
 800f5a0:	2322      	moveq	r3, #34	; 0x22
 800f5a2:	4682      	mov	sl, r0
 800f5a4:	468b      	mov	fp, r1
 800f5a6:	bf08      	it	eq
 800f5a8:	6023      	streq	r3, [r4, #0]
 800f5aa:	e62b      	b.n	800f204 <_strtod_l+0x4a4>
 800f5ac:	f04f 32ff 	mov.w	r2, #4294967295
 800f5b0:	fa02 f303 	lsl.w	r3, r2, r3
 800f5b4:	ea03 0a0a 	and.w	sl, r3, sl
 800f5b8:	e6e3      	b.n	800f382 <_strtod_l+0x622>
 800f5ba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800f5be:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800f5c2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800f5c6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800f5ca:	fa01 f308 	lsl.w	r3, r1, r8
 800f5ce:	9308      	str	r3, [sp, #32]
 800f5d0:	910d      	str	r1, [sp, #52]	; 0x34
 800f5d2:	e746      	b.n	800f462 <_strtod_l+0x702>
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	9308      	str	r3, [sp, #32]
 800f5d8:	2301      	movs	r3, #1
 800f5da:	930d      	str	r3, [sp, #52]	; 0x34
 800f5dc:	e741      	b.n	800f462 <_strtod_l+0x702>
 800f5de:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f5e0:	4642      	mov	r2, r8
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	f002 f99e 	bl	8011924 <__lshift>
 800f5e8:	9018      	str	r0, [sp, #96]	; 0x60
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	f47f af6b 	bne.w	800f4c6 <_strtod_l+0x766>
 800f5f0:	e5fe      	b.n	800f1f0 <_strtod_l+0x490>
 800f5f2:	465f      	mov	r7, fp
 800f5f4:	d16e      	bne.n	800f6d4 <_strtod_l+0x974>
 800f5f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f5f8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f5fc:	b342      	cbz	r2, 800f650 <_strtod_l+0x8f0>
 800f5fe:	4a32      	ldr	r2, [pc, #200]	; (800f6c8 <_strtod_l+0x968>)
 800f600:	4293      	cmp	r3, r2
 800f602:	d128      	bne.n	800f656 <_strtod_l+0x8f6>
 800f604:	9b04      	ldr	r3, [sp, #16]
 800f606:	4651      	mov	r1, sl
 800f608:	b1eb      	cbz	r3, 800f646 <_strtod_l+0x8e6>
 800f60a:	4b2d      	ldr	r3, [pc, #180]	; (800f6c0 <_strtod_l+0x960>)
 800f60c:	403b      	ands	r3, r7
 800f60e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f612:	f04f 32ff 	mov.w	r2, #4294967295
 800f616:	d819      	bhi.n	800f64c <_strtod_l+0x8ec>
 800f618:	0d1b      	lsrs	r3, r3, #20
 800f61a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f61e:	fa02 f303 	lsl.w	r3, r2, r3
 800f622:	4299      	cmp	r1, r3
 800f624:	d117      	bne.n	800f656 <_strtod_l+0x8f6>
 800f626:	4b29      	ldr	r3, [pc, #164]	; (800f6cc <_strtod_l+0x96c>)
 800f628:	429f      	cmp	r7, r3
 800f62a:	d102      	bne.n	800f632 <_strtod_l+0x8d2>
 800f62c:	3101      	adds	r1, #1
 800f62e:	f43f addf 	beq.w	800f1f0 <_strtod_l+0x490>
 800f632:	4b23      	ldr	r3, [pc, #140]	; (800f6c0 <_strtod_l+0x960>)
 800f634:	403b      	ands	r3, r7
 800f636:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800f63a:	f04f 0a00 	mov.w	sl, #0
 800f63e:	9b04      	ldr	r3, [sp, #16]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1a4      	bne.n	800f58e <_strtod_l+0x82e>
 800f644:	e5de      	b.n	800f204 <_strtod_l+0x4a4>
 800f646:	f04f 33ff 	mov.w	r3, #4294967295
 800f64a:	e7ea      	b.n	800f622 <_strtod_l+0x8c2>
 800f64c:	4613      	mov	r3, r2
 800f64e:	e7e8      	b.n	800f622 <_strtod_l+0x8c2>
 800f650:	ea53 030a 	orrs.w	r3, r3, sl
 800f654:	d08c      	beq.n	800f570 <_strtod_l+0x810>
 800f656:	9b08      	ldr	r3, [sp, #32]
 800f658:	b1db      	cbz	r3, 800f692 <_strtod_l+0x932>
 800f65a:	423b      	tst	r3, r7
 800f65c:	d0ef      	beq.n	800f63e <_strtod_l+0x8de>
 800f65e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f660:	9a04      	ldr	r2, [sp, #16]
 800f662:	4650      	mov	r0, sl
 800f664:	4659      	mov	r1, fp
 800f666:	b1c3      	cbz	r3, 800f69a <_strtod_l+0x93a>
 800f668:	f7ff fb5c 	bl	800ed24 <sulp>
 800f66c:	4602      	mov	r2, r0
 800f66e:	460b      	mov	r3, r1
 800f670:	ec51 0b18 	vmov	r0, r1, d8
 800f674:	f7f0 fe32 	bl	80002dc <__adddf3>
 800f678:	4682      	mov	sl, r0
 800f67a:	468b      	mov	fp, r1
 800f67c:	e7df      	b.n	800f63e <_strtod_l+0x8de>
 800f67e:	4013      	ands	r3, r2
 800f680:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800f684:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800f688:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800f68c:	f04f 3aff 	mov.w	sl, #4294967295
 800f690:	e7d5      	b.n	800f63e <_strtod_l+0x8de>
 800f692:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f694:	ea13 0f0a 	tst.w	r3, sl
 800f698:	e7e0      	b.n	800f65c <_strtod_l+0x8fc>
 800f69a:	f7ff fb43 	bl	800ed24 <sulp>
 800f69e:	4602      	mov	r2, r0
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	ec51 0b18 	vmov	r0, r1, d8
 800f6a6:	f7f0 fe17 	bl	80002d8 <__aeabi_dsub>
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	2300      	movs	r3, #0
 800f6ae:	4682      	mov	sl, r0
 800f6b0:	468b      	mov	fp, r1
 800f6b2:	f7f1 fa31 	bl	8000b18 <__aeabi_dcmpeq>
 800f6b6:	2800      	cmp	r0, #0
 800f6b8:	d0c1      	beq.n	800f63e <_strtod_l+0x8de>
 800f6ba:	e611      	b.n	800f2e0 <_strtod_l+0x580>
 800f6bc:	fffffc02 	.word	0xfffffc02
 800f6c0:	7ff00000 	.word	0x7ff00000
 800f6c4:	39500000 	.word	0x39500000
 800f6c8:	000fffff 	.word	0x000fffff
 800f6cc:	7fefffff 	.word	0x7fefffff
 800f6d0:	08013c80 	.word	0x08013c80
 800f6d4:	4631      	mov	r1, r6
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f002 fb12 	bl	8011d00 <__ratio>
 800f6dc:	ec59 8b10 	vmov	r8, r9, d0
 800f6e0:	ee10 0a10 	vmov	r0, s0
 800f6e4:	2200      	movs	r2, #0
 800f6e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f6ea:	4649      	mov	r1, r9
 800f6ec:	f7f1 fa28 	bl	8000b40 <__aeabi_dcmple>
 800f6f0:	2800      	cmp	r0, #0
 800f6f2:	d07a      	beq.n	800f7ea <_strtod_l+0xa8a>
 800f6f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d04a      	beq.n	800f790 <_strtod_l+0xa30>
 800f6fa:	4b95      	ldr	r3, [pc, #596]	; (800f950 <_strtod_l+0xbf0>)
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f702:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800f950 <_strtod_l+0xbf0>
 800f706:	f04f 0800 	mov.w	r8, #0
 800f70a:	4b92      	ldr	r3, [pc, #584]	; (800f954 <_strtod_l+0xbf4>)
 800f70c:	403b      	ands	r3, r7
 800f70e:	930d      	str	r3, [sp, #52]	; 0x34
 800f710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f712:	4b91      	ldr	r3, [pc, #580]	; (800f958 <_strtod_l+0xbf8>)
 800f714:	429a      	cmp	r2, r3
 800f716:	f040 80b0 	bne.w	800f87a <_strtod_l+0xb1a>
 800f71a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f71e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800f722:	ec4b ab10 	vmov	d0, sl, fp
 800f726:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f72a:	f002 fa11 	bl	8011b50 <__ulp>
 800f72e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f732:	ec53 2b10 	vmov	r2, r3, d0
 800f736:	f7f0 ff87 	bl	8000648 <__aeabi_dmul>
 800f73a:	4652      	mov	r2, sl
 800f73c:	465b      	mov	r3, fp
 800f73e:	f7f0 fdcd 	bl	80002dc <__adddf3>
 800f742:	460b      	mov	r3, r1
 800f744:	4983      	ldr	r1, [pc, #524]	; (800f954 <_strtod_l+0xbf4>)
 800f746:	4a85      	ldr	r2, [pc, #532]	; (800f95c <_strtod_l+0xbfc>)
 800f748:	4019      	ands	r1, r3
 800f74a:	4291      	cmp	r1, r2
 800f74c:	4682      	mov	sl, r0
 800f74e:	d960      	bls.n	800f812 <_strtod_l+0xab2>
 800f750:	ee18 3a90 	vmov	r3, s17
 800f754:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800f758:	4293      	cmp	r3, r2
 800f75a:	d104      	bne.n	800f766 <_strtod_l+0xa06>
 800f75c:	ee18 3a10 	vmov	r3, s16
 800f760:	3301      	adds	r3, #1
 800f762:	f43f ad45 	beq.w	800f1f0 <_strtod_l+0x490>
 800f766:	f8df b200 	ldr.w	fp, [pc, #512]	; 800f968 <_strtod_l+0xc08>
 800f76a:	f04f 3aff 	mov.w	sl, #4294967295
 800f76e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800f770:	4620      	mov	r0, r4
 800f772:	f001 febb 	bl	80114ec <_Bfree>
 800f776:	9905      	ldr	r1, [sp, #20]
 800f778:	4620      	mov	r0, r4
 800f77a:	f001 feb7 	bl	80114ec <_Bfree>
 800f77e:	4631      	mov	r1, r6
 800f780:	4620      	mov	r0, r4
 800f782:	f001 feb3 	bl	80114ec <_Bfree>
 800f786:	4629      	mov	r1, r5
 800f788:	4620      	mov	r0, r4
 800f78a:	f001 feaf 	bl	80114ec <_Bfree>
 800f78e:	e61a      	b.n	800f3c6 <_strtod_l+0x666>
 800f790:	f1ba 0f00 	cmp.w	sl, #0
 800f794:	d11b      	bne.n	800f7ce <_strtod_l+0xa6e>
 800f796:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f79a:	b9f3      	cbnz	r3, 800f7da <_strtod_l+0xa7a>
 800f79c:	4b6c      	ldr	r3, [pc, #432]	; (800f950 <_strtod_l+0xbf0>)
 800f79e:	2200      	movs	r2, #0
 800f7a0:	4640      	mov	r0, r8
 800f7a2:	4649      	mov	r1, r9
 800f7a4:	f7f1 f9c2 	bl	8000b2c <__aeabi_dcmplt>
 800f7a8:	b9d0      	cbnz	r0, 800f7e0 <_strtod_l+0xa80>
 800f7aa:	4640      	mov	r0, r8
 800f7ac:	4649      	mov	r1, r9
 800f7ae:	4b6c      	ldr	r3, [pc, #432]	; (800f960 <_strtod_l+0xc00>)
 800f7b0:	2200      	movs	r2, #0
 800f7b2:	f7f0 ff49 	bl	8000648 <__aeabi_dmul>
 800f7b6:	4680      	mov	r8, r0
 800f7b8:	4689      	mov	r9, r1
 800f7ba:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f7be:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800f7c2:	9315      	str	r3, [sp, #84]	; 0x54
 800f7c4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800f7c8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f7cc:	e79d      	b.n	800f70a <_strtod_l+0x9aa>
 800f7ce:	f1ba 0f01 	cmp.w	sl, #1
 800f7d2:	d102      	bne.n	800f7da <_strtod_l+0xa7a>
 800f7d4:	2f00      	cmp	r7, #0
 800f7d6:	f43f ad83 	beq.w	800f2e0 <_strtod_l+0x580>
 800f7da:	4b62      	ldr	r3, [pc, #392]	; (800f964 <_strtod_l+0xc04>)
 800f7dc:	2200      	movs	r2, #0
 800f7de:	e78e      	b.n	800f6fe <_strtod_l+0x99e>
 800f7e0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800f960 <_strtod_l+0xc00>
 800f7e4:	f04f 0800 	mov.w	r8, #0
 800f7e8:	e7e7      	b.n	800f7ba <_strtod_l+0xa5a>
 800f7ea:	4b5d      	ldr	r3, [pc, #372]	; (800f960 <_strtod_l+0xc00>)
 800f7ec:	4640      	mov	r0, r8
 800f7ee:	4649      	mov	r1, r9
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	f7f0 ff29 	bl	8000648 <__aeabi_dmul>
 800f7f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f7f8:	4680      	mov	r8, r0
 800f7fa:	4689      	mov	r9, r1
 800f7fc:	b933      	cbnz	r3, 800f80c <_strtod_l+0xaac>
 800f7fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f802:	900e      	str	r0, [sp, #56]	; 0x38
 800f804:	930f      	str	r3, [sp, #60]	; 0x3c
 800f806:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800f80a:	e7dd      	b.n	800f7c8 <_strtod_l+0xa68>
 800f80c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800f810:	e7f9      	b.n	800f806 <_strtod_l+0xaa6>
 800f812:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800f816:	9b04      	ldr	r3, [sp, #16]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d1a8      	bne.n	800f76e <_strtod_l+0xa0e>
 800f81c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f820:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f822:	0d1b      	lsrs	r3, r3, #20
 800f824:	051b      	lsls	r3, r3, #20
 800f826:	429a      	cmp	r2, r3
 800f828:	d1a1      	bne.n	800f76e <_strtod_l+0xa0e>
 800f82a:	4640      	mov	r0, r8
 800f82c:	4649      	mov	r1, r9
 800f82e:	f7f1 fa6b 	bl	8000d08 <__aeabi_d2lz>
 800f832:	f7f0 fedb 	bl	80005ec <__aeabi_l2d>
 800f836:	4602      	mov	r2, r0
 800f838:	460b      	mov	r3, r1
 800f83a:	4640      	mov	r0, r8
 800f83c:	4649      	mov	r1, r9
 800f83e:	f7f0 fd4b 	bl	80002d8 <__aeabi_dsub>
 800f842:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f844:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f848:	ea43 030a 	orr.w	r3, r3, sl
 800f84c:	4313      	orrs	r3, r2
 800f84e:	4680      	mov	r8, r0
 800f850:	4689      	mov	r9, r1
 800f852:	d055      	beq.n	800f900 <_strtod_l+0xba0>
 800f854:	a336      	add	r3, pc, #216	; (adr r3, 800f930 <_strtod_l+0xbd0>)
 800f856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f85a:	f7f1 f967 	bl	8000b2c <__aeabi_dcmplt>
 800f85e:	2800      	cmp	r0, #0
 800f860:	f47f acd0 	bne.w	800f204 <_strtod_l+0x4a4>
 800f864:	a334      	add	r3, pc, #208	; (adr r3, 800f938 <_strtod_l+0xbd8>)
 800f866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f86a:	4640      	mov	r0, r8
 800f86c:	4649      	mov	r1, r9
 800f86e:	f7f1 f97b 	bl	8000b68 <__aeabi_dcmpgt>
 800f872:	2800      	cmp	r0, #0
 800f874:	f43f af7b 	beq.w	800f76e <_strtod_l+0xa0e>
 800f878:	e4c4      	b.n	800f204 <_strtod_l+0x4a4>
 800f87a:	9b04      	ldr	r3, [sp, #16]
 800f87c:	b333      	cbz	r3, 800f8cc <_strtod_l+0xb6c>
 800f87e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f880:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800f884:	d822      	bhi.n	800f8cc <_strtod_l+0xb6c>
 800f886:	a32e      	add	r3, pc, #184	; (adr r3, 800f940 <_strtod_l+0xbe0>)
 800f888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f88c:	4640      	mov	r0, r8
 800f88e:	4649      	mov	r1, r9
 800f890:	f7f1 f956 	bl	8000b40 <__aeabi_dcmple>
 800f894:	b1a0      	cbz	r0, 800f8c0 <_strtod_l+0xb60>
 800f896:	4649      	mov	r1, r9
 800f898:	4640      	mov	r0, r8
 800f89a:	f7f1 f9ad 	bl	8000bf8 <__aeabi_d2uiz>
 800f89e:	2801      	cmp	r0, #1
 800f8a0:	bf38      	it	cc
 800f8a2:	2001      	movcc	r0, #1
 800f8a4:	f7f0 fe56 	bl	8000554 <__aeabi_ui2d>
 800f8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f8aa:	4680      	mov	r8, r0
 800f8ac:	4689      	mov	r9, r1
 800f8ae:	bb23      	cbnz	r3, 800f8fa <_strtod_l+0xb9a>
 800f8b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f8b4:	9010      	str	r0, [sp, #64]	; 0x40
 800f8b6:	9311      	str	r3, [sp, #68]	; 0x44
 800f8b8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f8bc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800f8c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f8c2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f8c4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800f8c8:	1a9b      	subs	r3, r3, r2
 800f8ca:	9309      	str	r3, [sp, #36]	; 0x24
 800f8cc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8d0:	eeb0 0a48 	vmov.f32	s0, s16
 800f8d4:	eef0 0a68 	vmov.f32	s1, s17
 800f8d8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8dc:	f002 f938 	bl	8011b50 <__ulp>
 800f8e0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f8e4:	ec53 2b10 	vmov	r2, r3, d0
 800f8e8:	f7f0 feae 	bl	8000648 <__aeabi_dmul>
 800f8ec:	ec53 2b18 	vmov	r2, r3, d8
 800f8f0:	f7f0 fcf4 	bl	80002dc <__adddf3>
 800f8f4:	4682      	mov	sl, r0
 800f8f6:	468b      	mov	fp, r1
 800f8f8:	e78d      	b.n	800f816 <_strtod_l+0xab6>
 800f8fa:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800f8fe:	e7db      	b.n	800f8b8 <_strtod_l+0xb58>
 800f900:	a311      	add	r3, pc, #68	; (adr r3, 800f948 <_strtod_l+0xbe8>)
 800f902:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f906:	f7f1 f911 	bl	8000b2c <__aeabi_dcmplt>
 800f90a:	e7b2      	b.n	800f872 <_strtod_l+0xb12>
 800f90c:	2300      	movs	r3, #0
 800f90e:	930a      	str	r3, [sp, #40]	; 0x28
 800f910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f912:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f914:	6013      	str	r3, [r2, #0]
 800f916:	f7ff ba6b 	b.w	800edf0 <_strtod_l+0x90>
 800f91a:	2a65      	cmp	r2, #101	; 0x65
 800f91c:	f43f ab5f 	beq.w	800efde <_strtod_l+0x27e>
 800f920:	2a45      	cmp	r2, #69	; 0x45
 800f922:	f43f ab5c 	beq.w	800efde <_strtod_l+0x27e>
 800f926:	2301      	movs	r3, #1
 800f928:	f7ff bb94 	b.w	800f054 <_strtod_l+0x2f4>
 800f92c:	f3af 8000 	nop.w
 800f930:	94a03595 	.word	0x94a03595
 800f934:	3fdfffff 	.word	0x3fdfffff
 800f938:	35afe535 	.word	0x35afe535
 800f93c:	3fe00000 	.word	0x3fe00000
 800f940:	ffc00000 	.word	0xffc00000
 800f944:	41dfffff 	.word	0x41dfffff
 800f948:	94a03595 	.word	0x94a03595
 800f94c:	3fcfffff 	.word	0x3fcfffff
 800f950:	3ff00000 	.word	0x3ff00000
 800f954:	7ff00000 	.word	0x7ff00000
 800f958:	7fe00000 	.word	0x7fe00000
 800f95c:	7c9fffff 	.word	0x7c9fffff
 800f960:	3fe00000 	.word	0x3fe00000
 800f964:	bff00000 	.word	0xbff00000
 800f968:	7fefffff 	.word	0x7fefffff

0800f96c <strtod>:
 800f96c:	460a      	mov	r2, r1
 800f96e:	4601      	mov	r1, r0
 800f970:	4802      	ldr	r0, [pc, #8]	; (800f97c <strtod+0x10>)
 800f972:	4b03      	ldr	r3, [pc, #12]	; (800f980 <strtod+0x14>)
 800f974:	6800      	ldr	r0, [r0, #0]
 800f976:	f7ff b9f3 	b.w	800ed60 <_strtod_l>
 800f97a:	bf00      	nop
 800f97c:	2000002c 	.word	0x2000002c
 800f980:	20000094 	.word	0x20000094

0800f984 <_strtol_l.constprop.0>:
 800f984:	2b01      	cmp	r3, #1
 800f986:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f98a:	d001      	beq.n	800f990 <_strtol_l.constprop.0+0xc>
 800f98c:	2b24      	cmp	r3, #36	; 0x24
 800f98e:	d906      	bls.n	800f99e <_strtol_l.constprop.0+0x1a>
 800f990:	f7fe fc90 	bl	800e2b4 <__errno>
 800f994:	2316      	movs	r3, #22
 800f996:	6003      	str	r3, [r0, #0]
 800f998:	2000      	movs	r0, #0
 800f99a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f99e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800fa84 <_strtol_l.constprop.0+0x100>
 800f9a2:	460d      	mov	r5, r1
 800f9a4:	462e      	mov	r6, r5
 800f9a6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800f9aa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800f9ae:	f017 0708 	ands.w	r7, r7, #8
 800f9b2:	d1f7      	bne.n	800f9a4 <_strtol_l.constprop.0+0x20>
 800f9b4:	2c2d      	cmp	r4, #45	; 0x2d
 800f9b6:	d132      	bne.n	800fa1e <_strtol_l.constprop.0+0x9a>
 800f9b8:	782c      	ldrb	r4, [r5, #0]
 800f9ba:	2701      	movs	r7, #1
 800f9bc:	1cb5      	adds	r5, r6, #2
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d05b      	beq.n	800fa7a <_strtol_l.constprop.0+0xf6>
 800f9c2:	2b10      	cmp	r3, #16
 800f9c4:	d109      	bne.n	800f9da <_strtol_l.constprop.0+0x56>
 800f9c6:	2c30      	cmp	r4, #48	; 0x30
 800f9c8:	d107      	bne.n	800f9da <_strtol_l.constprop.0+0x56>
 800f9ca:	782c      	ldrb	r4, [r5, #0]
 800f9cc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800f9d0:	2c58      	cmp	r4, #88	; 0x58
 800f9d2:	d14d      	bne.n	800fa70 <_strtol_l.constprop.0+0xec>
 800f9d4:	786c      	ldrb	r4, [r5, #1]
 800f9d6:	2310      	movs	r3, #16
 800f9d8:	3502      	adds	r5, #2
 800f9da:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800f9de:	f108 38ff 	add.w	r8, r8, #4294967295
 800f9e2:	f04f 0c00 	mov.w	ip, #0
 800f9e6:	fbb8 f9f3 	udiv	r9, r8, r3
 800f9ea:	4666      	mov	r6, ip
 800f9ec:	fb03 8a19 	mls	sl, r3, r9, r8
 800f9f0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800f9f4:	f1be 0f09 	cmp.w	lr, #9
 800f9f8:	d816      	bhi.n	800fa28 <_strtol_l.constprop.0+0xa4>
 800f9fa:	4674      	mov	r4, lr
 800f9fc:	42a3      	cmp	r3, r4
 800f9fe:	dd24      	ble.n	800fa4a <_strtol_l.constprop.0+0xc6>
 800fa00:	f1bc 0f00 	cmp.w	ip, #0
 800fa04:	db1e      	blt.n	800fa44 <_strtol_l.constprop.0+0xc0>
 800fa06:	45b1      	cmp	r9, r6
 800fa08:	d31c      	bcc.n	800fa44 <_strtol_l.constprop.0+0xc0>
 800fa0a:	d101      	bne.n	800fa10 <_strtol_l.constprop.0+0x8c>
 800fa0c:	45a2      	cmp	sl, r4
 800fa0e:	db19      	blt.n	800fa44 <_strtol_l.constprop.0+0xc0>
 800fa10:	fb06 4603 	mla	r6, r6, r3, r4
 800fa14:	f04f 0c01 	mov.w	ip, #1
 800fa18:	f815 4b01 	ldrb.w	r4, [r5], #1
 800fa1c:	e7e8      	b.n	800f9f0 <_strtol_l.constprop.0+0x6c>
 800fa1e:	2c2b      	cmp	r4, #43	; 0x2b
 800fa20:	bf04      	itt	eq
 800fa22:	782c      	ldrbeq	r4, [r5, #0]
 800fa24:	1cb5      	addeq	r5, r6, #2
 800fa26:	e7ca      	b.n	800f9be <_strtol_l.constprop.0+0x3a>
 800fa28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800fa2c:	f1be 0f19 	cmp.w	lr, #25
 800fa30:	d801      	bhi.n	800fa36 <_strtol_l.constprop.0+0xb2>
 800fa32:	3c37      	subs	r4, #55	; 0x37
 800fa34:	e7e2      	b.n	800f9fc <_strtol_l.constprop.0+0x78>
 800fa36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800fa3a:	f1be 0f19 	cmp.w	lr, #25
 800fa3e:	d804      	bhi.n	800fa4a <_strtol_l.constprop.0+0xc6>
 800fa40:	3c57      	subs	r4, #87	; 0x57
 800fa42:	e7db      	b.n	800f9fc <_strtol_l.constprop.0+0x78>
 800fa44:	f04f 3cff 	mov.w	ip, #4294967295
 800fa48:	e7e6      	b.n	800fa18 <_strtol_l.constprop.0+0x94>
 800fa4a:	f1bc 0f00 	cmp.w	ip, #0
 800fa4e:	da05      	bge.n	800fa5c <_strtol_l.constprop.0+0xd8>
 800fa50:	2322      	movs	r3, #34	; 0x22
 800fa52:	6003      	str	r3, [r0, #0]
 800fa54:	4646      	mov	r6, r8
 800fa56:	b942      	cbnz	r2, 800fa6a <_strtol_l.constprop.0+0xe6>
 800fa58:	4630      	mov	r0, r6
 800fa5a:	e79e      	b.n	800f99a <_strtol_l.constprop.0+0x16>
 800fa5c:	b107      	cbz	r7, 800fa60 <_strtol_l.constprop.0+0xdc>
 800fa5e:	4276      	negs	r6, r6
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	d0f9      	beq.n	800fa58 <_strtol_l.constprop.0+0xd4>
 800fa64:	f1bc 0f00 	cmp.w	ip, #0
 800fa68:	d000      	beq.n	800fa6c <_strtol_l.constprop.0+0xe8>
 800fa6a:	1e69      	subs	r1, r5, #1
 800fa6c:	6011      	str	r1, [r2, #0]
 800fa6e:	e7f3      	b.n	800fa58 <_strtol_l.constprop.0+0xd4>
 800fa70:	2430      	movs	r4, #48	; 0x30
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d1b1      	bne.n	800f9da <_strtol_l.constprop.0+0x56>
 800fa76:	2308      	movs	r3, #8
 800fa78:	e7af      	b.n	800f9da <_strtol_l.constprop.0+0x56>
 800fa7a:	2c30      	cmp	r4, #48	; 0x30
 800fa7c:	d0a5      	beq.n	800f9ca <_strtol_l.constprop.0+0x46>
 800fa7e:	230a      	movs	r3, #10
 800fa80:	e7ab      	b.n	800f9da <_strtol_l.constprop.0+0x56>
 800fa82:	bf00      	nop
 800fa84:	08013ca9 	.word	0x08013ca9

0800fa88 <strtol>:
 800fa88:	4613      	mov	r3, r2
 800fa8a:	460a      	mov	r2, r1
 800fa8c:	4601      	mov	r1, r0
 800fa8e:	4802      	ldr	r0, [pc, #8]	; (800fa98 <strtol+0x10>)
 800fa90:	6800      	ldr	r0, [r0, #0]
 800fa92:	f7ff bf77 	b.w	800f984 <_strtol_l.constprop.0>
 800fa96:	bf00      	nop
 800fa98:	2000002c 	.word	0x2000002c

0800fa9c <__swbuf_r>:
 800fa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa9e:	460e      	mov	r6, r1
 800faa0:	4614      	mov	r4, r2
 800faa2:	4605      	mov	r5, r0
 800faa4:	b118      	cbz	r0, 800faae <__swbuf_r+0x12>
 800faa6:	6983      	ldr	r3, [r0, #24]
 800faa8:	b90b      	cbnz	r3, 800faae <__swbuf_r+0x12>
 800faaa:	f001 f84d 	bl	8010b48 <__sinit>
 800faae:	4b21      	ldr	r3, [pc, #132]	; (800fb34 <__swbuf_r+0x98>)
 800fab0:	429c      	cmp	r4, r3
 800fab2:	d12b      	bne.n	800fb0c <__swbuf_r+0x70>
 800fab4:	686c      	ldr	r4, [r5, #4]
 800fab6:	69a3      	ldr	r3, [r4, #24]
 800fab8:	60a3      	str	r3, [r4, #8]
 800faba:	89a3      	ldrh	r3, [r4, #12]
 800fabc:	071a      	lsls	r2, r3, #28
 800fabe:	d52f      	bpl.n	800fb20 <__swbuf_r+0x84>
 800fac0:	6923      	ldr	r3, [r4, #16]
 800fac2:	b36b      	cbz	r3, 800fb20 <__swbuf_r+0x84>
 800fac4:	6923      	ldr	r3, [r4, #16]
 800fac6:	6820      	ldr	r0, [r4, #0]
 800fac8:	1ac0      	subs	r0, r0, r3
 800faca:	6963      	ldr	r3, [r4, #20]
 800facc:	b2f6      	uxtb	r6, r6
 800face:	4283      	cmp	r3, r0
 800fad0:	4637      	mov	r7, r6
 800fad2:	dc04      	bgt.n	800fade <__swbuf_r+0x42>
 800fad4:	4621      	mov	r1, r4
 800fad6:	4628      	mov	r0, r5
 800fad8:	f000 ffa2 	bl	8010a20 <_fflush_r>
 800fadc:	bb30      	cbnz	r0, 800fb2c <__swbuf_r+0x90>
 800fade:	68a3      	ldr	r3, [r4, #8]
 800fae0:	3b01      	subs	r3, #1
 800fae2:	60a3      	str	r3, [r4, #8]
 800fae4:	6823      	ldr	r3, [r4, #0]
 800fae6:	1c5a      	adds	r2, r3, #1
 800fae8:	6022      	str	r2, [r4, #0]
 800faea:	701e      	strb	r6, [r3, #0]
 800faec:	6963      	ldr	r3, [r4, #20]
 800faee:	3001      	adds	r0, #1
 800faf0:	4283      	cmp	r3, r0
 800faf2:	d004      	beq.n	800fafe <__swbuf_r+0x62>
 800faf4:	89a3      	ldrh	r3, [r4, #12]
 800faf6:	07db      	lsls	r3, r3, #31
 800faf8:	d506      	bpl.n	800fb08 <__swbuf_r+0x6c>
 800fafa:	2e0a      	cmp	r6, #10
 800fafc:	d104      	bne.n	800fb08 <__swbuf_r+0x6c>
 800fafe:	4621      	mov	r1, r4
 800fb00:	4628      	mov	r0, r5
 800fb02:	f000 ff8d 	bl	8010a20 <_fflush_r>
 800fb06:	b988      	cbnz	r0, 800fb2c <__swbuf_r+0x90>
 800fb08:	4638      	mov	r0, r7
 800fb0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb0c:	4b0a      	ldr	r3, [pc, #40]	; (800fb38 <__swbuf_r+0x9c>)
 800fb0e:	429c      	cmp	r4, r3
 800fb10:	d101      	bne.n	800fb16 <__swbuf_r+0x7a>
 800fb12:	68ac      	ldr	r4, [r5, #8]
 800fb14:	e7cf      	b.n	800fab6 <__swbuf_r+0x1a>
 800fb16:	4b09      	ldr	r3, [pc, #36]	; (800fb3c <__swbuf_r+0xa0>)
 800fb18:	429c      	cmp	r4, r3
 800fb1a:	bf08      	it	eq
 800fb1c:	68ec      	ldreq	r4, [r5, #12]
 800fb1e:	e7ca      	b.n	800fab6 <__swbuf_r+0x1a>
 800fb20:	4621      	mov	r1, r4
 800fb22:	4628      	mov	r0, r5
 800fb24:	f000 f80c 	bl	800fb40 <__swsetup_r>
 800fb28:	2800      	cmp	r0, #0
 800fb2a:	d0cb      	beq.n	800fac4 <__swbuf_r+0x28>
 800fb2c:	f04f 37ff 	mov.w	r7, #4294967295
 800fb30:	e7ea      	b.n	800fb08 <__swbuf_r+0x6c>
 800fb32:	bf00      	nop
 800fb34:	08013e5c 	.word	0x08013e5c
 800fb38:	08013e7c 	.word	0x08013e7c
 800fb3c:	08013e3c 	.word	0x08013e3c

0800fb40 <__swsetup_r>:
 800fb40:	4b32      	ldr	r3, [pc, #200]	; (800fc0c <__swsetup_r+0xcc>)
 800fb42:	b570      	push	{r4, r5, r6, lr}
 800fb44:	681d      	ldr	r5, [r3, #0]
 800fb46:	4606      	mov	r6, r0
 800fb48:	460c      	mov	r4, r1
 800fb4a:	b125      	cbz	r5, 800fb56 <__swsetup_r+0x16>
 800fb4c:	69ab      	ldr	r3, [r5, #24]
 800fb4e:	b913      	cbnz	r3, 800fb56 <__swsetup_r+0x16>
 800fb50:	4628      	mov	r0, r5
 800fb52:	f000 fff9 	bl	8010b48 <__sinit>
 800fb56:	4b2e      	ldr	r3, [pc, #184]	; (800fc10 <__swsetup_r+0xd0>)
 800fb58:	429c      	cmp	r4, r3
 800fb5a:	d10f      	bne.n	800fb7c <__swsetup_r+0x3c>
 800fb5c:	686c      	ldr	r4, [r5, #4]
 800fb5e:	89a3      	ldrh	r3, [r4, #12]
 800fb60:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fb64:	0719      	lsls	r1, r3, #28
 800fb66:	d42c      	bmi.n	800fbc2 <__swsetup_r+0x82>
 800fb68:	06dd      	lsls	r5, r3, #27
 800fb6a:	d411      	bmi.n	800fb90 <__swsetup_r+0x50>
 800fb6c:	2309      	movs	r3, #9
 800fb6e:	6033      	str	r3, [r6, #0]
 800fb70:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fb74:	81a3      	strh	r3, [r4, #12]
 800fb76:	f04f 30ff 	mov.w	r0, #4294967295
 800fb7a:	e03e      	b.n	800fbfa <__swsetup_r+0xba>
 800fb7c:	4b25      	ldr	r3, [pc, #148]	; (800fc14 <__swsetup_r+0xd4>)
 800fb7e:	429c      	cmp	r4, r3
 800fb80:	d101      	bne.n	800fb86 <__swsetup_r+0x46>
 800fb82:	68ac      	ldr	r4, [r5, #8]
 800fb84:	e7eb      	b.n	800fb5e <__swsetup_r+0x1e>
 800fb86:	4b24      	ldr	r3, [pc, #144]	; (800fc18 <__swsetup_r+0xd8>)
 800fb88:	429c      	cmp	r4, r3
 800fb8a:	bf08      	it	eq
 800fb8c:	68ec      	ldreq	r4, [r5, #12]
 800fb8e:	e7e6      	b.n	800fb5e <__swsetup_r+0x1e>
 800fb90:	0758      	lsls	r0, r3, #29
 800fb92:	d512      	bpl.n	800fbba <__swsetup_r+0x7a>
 800fb94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fb96:	b141      	cbz	r1, 800fbaa <__swsetup_r+0x6a>
 800fb98:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fb9c:	4299      	cmp	r1, r3
 800fb9e:	d002      	beq.n	800fba6 <__swsetup_r+0x66>
 800fba0:	4630      	mov	r0, r6
 800fba2:	f002 f93b 	bl	8011e1c <_free_r>
 800fba6:	2300      	movs	r3, #0
 800fba8:	6363      	str	r3, [r4, #52]	; 0x34
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fbb0:	81a3      	strh	r3, [r4, #12]
 800fbb2:	2300      	movs	r3, #0
 800fbb4:	6063      	str	r3, [r4, #4]
 800fbb6:	6923      	ldr	r3, [r4, #16]
 800fbb8:	6023      	str	r3, [r4, #0]
 800fbba:	89a3      	ldrh	r3, [r4, #12]
 800fbbc:	f043 0308 	orr.w	r3, r3, #8
 800fbc0:	81a3      	strh	r3, [r4, #12]
 800fbc2:	6923      	ldr	r3, [r4, #16]
 800fbc4:	b94b      	cbnz	r3, 800fbda <__swsetup_r+0x9a>
 800fbc6:	89a3      	ldrh	r3, [r4, #12]
 800fbc8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fbcc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fbd0:	d003      	beq.n	800fbda <__swsetup_r+0x9a>
 800fbd2:	4621      	mov	r1, r4
 800fbd4:	4630      	mov	r0, r6
 800fbd6:	f001 fbef 	bl	80113b8 <__smakebuf_r>
 800fbda:	89a0      	ldrh	r0, [r4, #12]
 800fbdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fbe0:	f010 0301 	ands.w	r3, r0, #1
 800fbe4:	d00a      	beq.n	800fbfc <__swsetup_r+0xbc>
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	60a3      	str	r3, [r4, #8]
 800fbea:	6963      	ldr	r3, [r4, #20]
 800fbec:	425b      	negs	r3, r3
 800fbee:	61a3      	str	r3, [r4, #24]
 800fbf0:	6923      	ldr	r3, [r4, #16]
 800fbf2:	b943      	cbnz	r3, 800fc06 <__swsetup_r+0xc6>
 800fbf4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fbf8:	d1ba      	bne.n	800fb70 <__swsetup_r+0x30>
 800fbfa:	bd70      	pop	{r4, r5, r6, pc}
 800fbfc:	0781      	lsls	r1, r0, #30
 800fbfe:	bf58      	it	pl
 800fc00:	6963      	ldrpl	r3, [r4, #20]
 800fc02:	60a3      	str	r3, [r4, #8]
 800fc04:	e7f4      	b.n	800fbf0 <__swsetup_r+0xb0>
 800fc06:	2000      	movs	r0, #0
 800fc08:	e7f7      	b.n	800fbfa <__swsetup_r+0xba>
 800fc0a:	bf00      	nop
 800fc0c:	2000002c 	.word	0x2000002c
 800fc10:	08013e5c 	.word	0x08013e5c
 800fc14:	08013e7c 	.word	0x08013e7c
 800fc18:	08013e3c 	.word	0x08013e3c

0800fc1c <quorem>:
 800fc1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc20:	6903      	ldr	r3, [r0, #16]
 800fc22:	690c      	ldr	r4, [r1, #16]
 800fc24:	42a3      	cmp	r3, r4
 800fc26:	4607      	mov	r7, r0
 800fc28:	f2c0 8081 	blt.w	800fd2e <quorem+0x112>
 800fc2c:	3c01      	subs	r4, #1
 800fc2e:	f101 0814 	add.w	r8, r1, #20
 800fc32:	f100 0514 	add.w	r5, r0, #20
 800fc36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fc3a:	9301      	str	r3, [sp, #4]
 800fc3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fc40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fc44:	3301      	adds	r3, #1
 800fc46:	429a      	cmp	r2, r3
 800fc48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fc4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fc50:	fbb2 f6f3 	udiv	r6, r2, r3
 800fc54:	d331      	bcc.n	800fcba <quorem+0x9e>
 800fc56:	f04f 0e00 	mov.w	lr, #0
 800fc5a:	4640      	mov	r0, r8
 800fc5c:	46ac      	mov	ip, r5
 800fc5e:	46f2      	mov	sl, lr
 800fc60:	f850 2b04 	ldr.w	r2, [r0], #4
 800fc64:	b293      	uxth	r3, r2
 800fc66:	fb06 e303 	mla	r3, r6, r3, lr
 800fc6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800fc6e:	b29b      	uxth	r3, r3
 800fc70:	ebaa 0303 	sub.w	r3, sl, r3
 800fc74:	f8dc a000 	ldr.w	sl, [ip]
 800fc78:	0c12      	lsrs	r2, r2, #16
 800fc7a:	fa13 f38a 	uxtah	r3, r3, sl
 800fc7e:	fb06 e202 	mla	r2, r6, r2, lr
 800fc82:	9300      	str	r3, [sp, #0]
 800fc84:	9b00      	ldr	r3, [sp, #0]
 800fc86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800fc8a:	b292      	uxth	r2, r2
 800fc8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800fc90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fc94:	f8bd 3000 	ldrh.w	r3, [sp]
 800fc98:	4581      	cmp	r9, r0
 800fc9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc9e:	f84c 3b04 	str.w	r3, [ip], #4
 800fca2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800fca6:	d2db      	bcs.n	800fc60 <quorem+0x44>
 800fca8:	f855 300b 	ldr.w	r3, [r5, fp]
 800fcac:	b92b      	cbnz	r3, 800fcba <quorem+0x9e>
 800fcae:	9b01      	ldr	r3, [sp, #4]
 800fcb0:	3b04      	subs	r3, #4
 800fcb2:	429d      	cmp	r5, r3
 800fcb4:	461a      	mov	r2, r3
 800fcb6:	d32e      	bcc.n	800fd16 <quorem+0xfa>
 800fcb8:	613c      	str	r4, [r7, #16]
 800fcba:	4638      	mov	r0, r7
 800fcbc:	f001 fea2 	bl	8011a04 <__mcmp>
 800fcc0:	2800      	cmp	r0, #0
 800fcc2:	db24      	blt.n	800fd0e <quorem+0xf2>
 800fcc4:	3601      	adds	r6, #1
 800fcc6:	4628      	mov	r0, r5
 800fcc8:	f04f 0c00 	mov.w	ip, #0
 800fccc:	f858 2b04 	ldr.w	r2, [r8], #4
 800fcd0:	f8d0 e000 	ldr.w	lr, [r0]
 800fcd4:	b293      	uxth	r3, r2
 800fcd6:	ebac 0303 	sub.w	r3, ip, r3
 800fcda:	0c12      	lsrs	r2, r2, #16
 800fcdc:	fa13 f38e 	uxtah	r3, r3, lr
 800fce0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800fce4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800fce8:	b29b      	uxth	r3, r3
 800fcea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fcee:	45c1      	cmp	r9, r8
 800fcf0:	f840 3b04 	str.w	r3, [r0], #4
 800fcf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800fcf8:	d2e8      	bcs.n	800fccc <quorem+0xb0>
 800fcfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fcfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fd02:	b922      	cbnz	r2, 800fd0e <quorem+0xf2>
 800fd04:	3b04      	subs	r3, #4
 800fd06:	429d      	cmp	r5, r3
 800fd08:	461a      	mov	r2, r3
 800fd0a:	d30a      	bcc.n	800fd22 <quorem+0x106>
 800fd0c:	613c      	str	r4, [r7, #16]
 800fd0e:	4630      	mov	r0, r6
 800fd10:	b003      	add	sp, #12
 800fd12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd16:	6812      	ldr	r2, [r2, #0]
 800fd18:	3b04      	subs	r3, #4
 800fd1a:	2a00      	cmp	r2, #0
 800fd1c:	d1cc      	bne.n	800fcb8 <quorem+0x9c>
 800fd1e:	3c01      	subs	r4, #1
 800fd20:	e7c7      	b.n	800fcb2 <quorem+0x96>
 800fd22:	6812      	ldr	r2, [r2, #0]
 800fd24:	3b04      	subs	r3, #4
 800fd26:	2a00      	cmp	r2, #0
 800fd28:	d1f0      	bne.n	800fd0c <quorem+0xf0>
 800fd2a:	3c01      	subs	r4, #1
 800fd2c:	e7eb      	b.n	800fd06 <quorem+0xea>
 800fd2e:	2000      	movs	r0, #0
 800fd30:	e7ee      	b.n	800fd10 <quorem+0xf4>
 800fd32:	0000      	movs	r0, r0
 800fd34:	0000      	movs	r0, r0
	...

0800fd38 <_dtoa_r>:
 800fd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd3c:	ed2d 8b04 	vpush	{d8-d9}
 800fd40:	ec57 6b10 	vmov	r6, r7, d0
 800fd44:	b093      	sub	sp, #76	; 0x4c
 800fd46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800fd48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800fd4c:	9106      	str	r1, [sp, #24]
 800fd4e:	ee10 aa10 	vmov	sl, s0
 800fd52:	4604      	mov	r4, r0
 800fd54:	9209      	str	r2, [sp, #36]	; 0x24
 800fd56:	930c      	str	r3, [sp, #48]	; 0x30
 800fd58:	46bb      	mov	fp, r7
 800fd5a:	b975      	cbnz	r5, 800fd7a <_dtoa_r+0x42>
 800fd5c:	2010      	movs	r0, #16
 800fd5e:	f001 fb6b 	bl	8011438 <malloc>
 800fd62:	4602      	mov	r2, r0
 800fd64:	6260      	str	r0, [r4, #36]	; 0x24
 800fd66:	b920      	cbnz	r0, 800fd72 <_dtoa_r+0x3a>
 800fd68:	4ba7      	ldr	r3, [pc, #668]	; (8010008 <_dtoa_r+0x2d0>)
 800fd6a:	21ea      	movs	r1, #234	; 0xea
 800fd6c:	48a7      	ldr	r0, [pc, #668]	; (801000c <_dtoa_r+0x2d4>)
 800fd6e:	f002 fb1d 	bl	80123ac <__assert_func>
 800fd72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800fd76:	6005      	str	r5, [r0, #0]
 800fd78:	60c5      	str	r5, [r0, #12]
 800fd7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd7c:	6819      	ldr	r1, [r3, #0]
 800fd7e:	b151      	cbz	r1, 800fd96 <_dtoa_r+0x5e>
 800fd80:	685a      	ldr	r2, [r3, #4]
 800fd82:	604a      	str	r2, [r1, #4]
 800fd84:	2301      	movs	r3, #1
 800fd86:	4093      	lsls	r3, r2
 800fd88:	608b      	str	r3, [r1, #8]
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	f001 fbae 	bl	80114ec <_Bfree>
 800fd90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800fd92:	2200      	movs	r2, #0
 800fd94:	601a      	str	r2, [r3, #0]
 800fd96:	1e3b      	subs	r3, r7, #0
 800fd98:	bfaa      	itet	ge
 800fd9a:	2300      	movge	r3, #0
 800fd9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800fda0:	f8c8 3000 	strge.w	r3, [r8]
 800fda4:	4b9a      	ldr	r3, [pc, #616]	; (8010010 <_dtoa_r+0x2d8>)
 800fda6:	bfbc      	itt	lt
 800fda8:	2201      	movlt	r2, #1
 800fdaa:	f8c8 2000 	strlt.w	r2, [r8]
 800fdae:	ea33 030b 	bics.w	r3, r3, fp
 800fdb2:	d11b      	bne.n	800fdec <_dtoa_r+0xb4>
 800fdb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fdb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800fdba:	6013      	str	r3, [r2, #0]
 800fdbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800fdc0:	4333      	orrs	r3, r6
 800fdc2:	f000 8592 	beq.w	80108ea <_dtoa_r+0xbb2>
 800fdc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fdc8:	b963      	cbnz	r3, 800fde4 <_dtoa_r+0xac>
 800fdca:	4b92      	ldr	r3, [pc, #584]	; (8010014 <_dtoa_r+0x2dc>)
 800fdcc:	e022      	b.n	800fe14 <_dtoa_r+0xdc>
 800fdce:	4b92      	ldr	r3, [pc, #584]	; (8010018 <_dtoa_r+0x2e0>)
 800fdd0:	9301      	str	r3, [sp, #4]
 800fdd2:	3308      	adds	r3, #8
 800fdd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fdd6:	6013      	str	r3, [r2, #0]
 800fdd8:	9801      	ldr	r0, [sp, #4]
 800fdda:	b013      	add	sp, #76	; 0x4c
 800fddc:	ecbd 8b04 	vpop	{d8-d9}
 800fde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fde4:	4b8b      	ldr	r3, [pc, #556]	; (8010014 <_dtoa_r+0x2dc>)
 800fde6:	9301      	str	r3, [sp, #4]
 800fde8:	3303      	adds	r3, #3
 800fdea:	e7f3      	b.n	800fdd4 <_dtoa_r+0x9c>
 800fdec:	2200      	movs	r2, #0
 800fdee:	2300      	movs	r3, #0
 800fdf0:	4650      	mov	r0, sl
 800fdf2:	4659      	mov	r1, fp
 800fdf4:	f7f0 fe90 	bl	8000b18 <__aeabi_dcmpeq>
 800fdf8:	ec4b ab19 	vmov	d9, sl, fp
 800fdfc:	4680      	mov	r8, r0
 800fdfe:	b158      	cbz	r0, 800fe18 <_dtoa_r+0xe0>
 800fe00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800fe02:	2301      	movs	r3, #1
 800fe04:	6013      	str	r3, [r2, #0]
 800fe06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f000 856b 	beq.w	80108e4 <_dtoa_r+0xbac>
 800fe0e:	4883      	ldr	r0, [pc, #524]	; (801001c <_dtoa_r+0x2e4>)
 800fe10:	6018      	str	r0, [r3, #0]
 800fe12:	1e43      	subs	r3, r0, #1
 800fe14:	9301      	str	r3, [sp, #4]
 800fe16:	e7df      	b.n	800fdd8 <_dtoa_r+0xa0>
 800fe18:	ec4b ab10 	vmov	d0, sl, fp
 800fe1c:	aa10      	add	r2, sp, #64	; 0x40
 800fe1e:	a911      	add	r1, sp, #68	; 0x44
 800fe20:	4620      	mov	r0, r4
 800fe22:	f001 ff11 	bl	8011c48 <__d2b>
 800fe26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800fe2a:	ee08 0a10 	vmov	s16, r0
 800fe2e:	2d00      	cmp	r5, #0
 800fe30:	f000 8084 	beq.w	800ff3c <_dtoa_r+0x204>
 800fe34:	ee19 3a90 	vmov	r3, s19
 800fe38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800fe40:	4656      	mov	r6, sl
 800fe42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800fe46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800fe4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800fe4e:	4b74      	ldr	r3, [pc, #464]	; (8010020 <_dtoa_r+0x2e8>)
 800fe50:	2200      	movs	r2, #0
 800fe52:	4630      	mov	r0, r6
 800fe54:	4639      	mov	r1, r7
 800fe56:	f7f0 fa3f 	bl	80002d8 <__aeabi_dsub>
 800fe5a:	a365      	add	r3, pc, #404	; (adr r3, 800fff0 <_dtoa_r+0x2b8>)
 800fe5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe60:	f7f0 fbf2 	bl	8000648 <__aeabi_dmul>
 800fe64:	a364      	add	r3, pc, #400	; (adr r3, 800fff8 <_dtoa_r+0x2c0>)
 800fe66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe6a:	f7f0 fa37 	bl	80002dc <__adddf3>
 800fe6e:	4606      	mov	r6, r0
 800fe70:	4628      	mov	r0, r5
 800fe72:	460f      	mov	r7, r1
 800fe74:	f7f0 fb7e 	bl	8000574 <__aeabi_i2d>
 800fe78:	a361      	add	r3, pc, #388	; (adr r3, 8010000 <_dtoa_r+0x2c8>)
 800fe7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe7e:	f7f0 fbe3 	bl	8000648 <__aeabi_dmul>
 800fe82:	4602      	mov	r2, r0
 800fe84:	460b      	mov	r3, r1
 800fe86:	4630      	mov	r0, r6
 800fe88:	4639      	mov	r1, r7
 800fe8a:	f7f0 fa27 	bl	80002dc <__adddf3>
 800fe8e:	4606      	mov	r6, r0
 800fe90:	460f      	mov	r7, r1
 800fe92:	f7f0 fe89 	bl	8000ba8 <__aeabi_d2iz>
 800fe96:	2200      	movs	r2, #0
 800fe98:	9000      	str	r0, [sp, #0]
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	4630      	mov	r0, r6
 800fe9e:	4639      	mov	r1, r7
 800fea0:	f7f0 fe44 	bl	8000b2c <__aeabi_dcmplt>
 800fea4:	b150      	cbz	r0, 800febc <_dtoa_r+0x184>
 800fea6:	9800      	ldr	r0, [sp, #0]
 800fea8:	f7f0 fb64 	bl	8000574 <__aeabi_i2d>
 800feac:	4632      	mov	r2, r6
 800feae:	463b      	mov	r3, r7
 800feb0:	f7f0 fe32 	bl	8000b18 <__aeabi_dcmpeq>
 800feb4:	b910      	cbnz	r0, 800febc <_dtoa_r+0x184>
 800feb6:	9b00      	ldr	r3, [sp, #0]
 800feb8:	3b01      	subs	r3, #1
 800feba:	9300      	str	r3, [sp, #0]
 800febc:	9b00      	ldr	r3, [sp, #0]
 800febe:	2b16      	cmp	r3, #22
 800fec0:	d85a      	bhi.n	800ff78 <_dtoa_r+0x240>
 800fec2:	9a00      	ldr	r2, [sp, #0]
 800fec4:	4b57      	ldr	r3, [pc, #348]	; (8010024 <_dtoa_r+0x2ec>)
 800fec6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800feca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fece:	ec51 0b19 	vmov	r0, r1, d9
 800fed2:	f7f0 fe2b 	bl	8000b2c <__aeabi_dcmplt>
 800fed6:	2800      	cmp	r0, #0
 800fed8:	d050      	beq.n	800ff7c <_dtoa_r+0x244>
 800feda:	9b00      	ldr	r3, [sp, #0]
 800fedc:	3b01      	subs	r3, #1
 800fede:	9300      	str	r3, [sp, #0]
 800fee0:	2300      	movs	r3, #0
 800fee2:	930b      	str	r3, [sp, #44]	; 0x2c
 800fee4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800fee6:	1b5d      	subs	r5, r3, r5
 800fee8:	1e6b      	subs	r3, r5, #1
 800feea:	9305      	str	r3, [sp, #20]
 800feec:	bf45      	ittet	mi
 800feee:	f1c5 0301 	rsbmi	r3, r5, #1
 800fef2:	9304      	strmi	r3, [sp, #16]
 800fef4:	2300      	movpl	r3, #0
 800fef6:	2300      	movmi	r3, #0
 800fef8:	bf4c      	ite	mi
 800fefa:	9305      	strmi	r3, [sp, #20]
 800fefc:	9304      	strpl	r3, [sp, #16]
 800fefe:	9b00      	ldr	r3, [sp, #0]
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	db3d      	blt.n	800ff80 <_dtoa_r+0x248>
 800ff04:	9b05      	ldr	r3, [sp, #20]
 800ff06:	9a00      	ldr	r2, [sp, #0]
 800ff08:	920a      	str	r2, [sp, #40]	; 0x28
 800ff0a:	4413      	add	r3, r2
 800ff0c:	9305      	str	r3, [sp, #20]
 800ff0e:	2300      	movs	r3, #0
 800ff10:	9307      	str	r3, [sp, #28]
 800ff12:	9b06      	ldr	r3, [sp, #24]
 800ff14:	2b09      	cmp	r3, #9
 800ff16:	f200 8089 	bhi.w	801002c <_dtoa_r+0x2f4>
 800ff1a:	2b05      	cmp	r3, #5
 800ff1c:	bfc4      	itt	gt
 800ff1e:	3b04      	subgt	r3, #4
 800ff20:	9306      	strgt	r3, [sp, #24]
 800ff22:	9b06      	ldr	r3, [sp, #24]
 800ff24:	f1a3 0302 	sub.w	r3, r3, #2
 800ff28:	bfcc      	ite	gt
 800ff2a:	2500      	movgt	r5, #0
 800ff2c:	2501      	movle	r5, #1
 800ff2e:	2b03      	cmp	r3, #3
 800ff30:	f200 8087 	bhi.w	8010042 <_dtoa_r+0x30a>
 800ff34:	e8df f003 	tbb	[pc, r3]
 800ff38:	59383a2d 	.word	0x59383a2d
 800ff3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ff40:	441d      	add	r5, r3
 800ff42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ff46:	2b20      	cmp	r3, #32
 800ff48:	bfc1      	itttt	gt
 800ff4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ff4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ff52:	fa0b f303 	lslgt.w	r3, fp, r3
 800ff56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ff5a:	bfda      	itte	le
 800ff5c:	f1c3 0320 	rsble	r3, r3, #32
 800ff60:	fa06 f003 	lslle.w	r0, r6, r3
 800ff64:	4318      	orrgt	r0, r3
 800ff66:	f7f0 faf5 	bl	8000554 <__aeabi_ui2d>
 800ff6a:	2301      	movs	r3, #1
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ff72:	3d01      	subs	r5, #1
 800ff74:	930e      	str	r3, [sp, #56]	; 0x38
 800ff76:	e76a      	b.n	800fe4e <_dtoa_r+0x116>
 800ff78:	2301      	movs	r3, #1
 800ff7a:	e7b2      	b.n	800fee2 <_dtoa_r+0x1aa>
 800ff7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ff7e:	e7b1      	b.n	800fee4 <_dtoa_r+0x1ac>
 800ff80:	9b04      	ldr	r3, [sp, #16]
 800ff82:	9a00      	ldr	r2, [sp, #0]
 800ff84:	1a9b      	subs	r3, r3, r2
 800ff86:	9304      	str	r3, [sp, #16]
 800ff88:	4253      	negs	r3, r2
 800ff8a:	9307      	str	r3, [sp, #28]
 800ff8c:	2300      	movs	r3, #0
 800ff8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ff90:	e7bf      	b.n	800ff12 <_dtoa_r+0x1da>
 800ff92:	2300      	movs	r3, #0
 800ff94:	9308      	str	r3, [sp, #32]
 800ff96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	dc55      	bgt.n	8010048 <_dtoa_r+0x310>
 800ff9c:	2301      	movs	r3, #1
 800ff9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ffa2:	461a      	mov	r2, r3
 800ffa4:	9209      	str	r2, [sp, #36]	; 0x24
 800ffa6:	e00c      	b.n	800ffc2 <_dtoa_r+0x28a>
 800ffa8:	2301      	movs	r3, #1
 800ffaa:	e7f3      	b.n	800ff94 <_dtoa_r+0x25c>
 800ffac:	2300      	movs	r3, #0
 800ffae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ffb0:	9308      	str	r3, [sp, #32]
 800ffb2:	9b00      	ldr	r3, [sp, #0]
 800ffb4:	4413      	add	r3, r2
 800ffb6:	9302      	str	r3, [sp, #8]
 800ffb8:	3301      	adds	r3, #1
 800ffba:	2b01      	cmp	r3, #1
 800ffbc:	9303      	str	r3, [sp, #12]
 800ffbe:	bfb8      	it	lt
 800ffc0:	2301      	movlt	r3, #1
 800ffc2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	6042      	str	r2, [r0, #4]
 800ffc8:	2204      	movs	r2, #4
 800ffca:	f102 0614 	add.w	r6, r2, #20
 800ffce:	429e      	cmp	r6, r3
 800ffd0:	6841      	ldr	r1, [r0, #4]
 800ffd2:	d93d      	bls.n	8010050 <_dtoa_r+0x318>
 800ffd4:	4620      	mov	r0, r4
 800ffd6:	f001 fa49 	bl	801146c <_Balloc>
 800ffda:	9001      	str	r0, [sp, #4]
 800ffdc:	2800      	cmp	r0, #0
 800ffde:	d13b      	bne.n	8010058 <_dtoa_r+0x320>
 800ffe0:	4b11      	ldr	r3, [pc, #68]	; (8010028 <_dtoa_r+0x2f0>)
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ffe8:	e6c0      	b.n	800fd6c <_dtoa_r+0x34>
 800ffea:	2301      	movs	r3, #1
 800ffec:	e7df      	b.n	800ffae <_dtoa_r+0x276>
 800ffee:	bf00      	nop
 800fff0:	636f4361 	.word	0x636f4361
 800fff4:	3fd287a7 	.word	0x3fd287a7
 800fff8:	8b60c8b3 	.word	0x8b60c8b3
 800fffc:	3fc68a28 	.word	0x3fc68a28
 8010000:	509f79fb 	.word	0x509f79fb
 8010004:	3fd34413 	.word	0x3fd34413
 8010008:	08013db6 	.word	0x08013db6
 801000c:	08013dcd 	.word	0x08013dcd
 8010010:	7ff00000 	.word	0x7ff00000
 8010014:	08013db2 	.word	0x08013db2
 8010018:	08013da9 	.word	0x08013da9
 801001c:	08013c31 	.word	0x08013c31
 8010020:	3ff80000 	.word	0x3ff80000
 8010024:	08013fa0 	.word	0x08013fa0
 8010028:	08013e28 	.word	0x08013e28
 801002c:	2501      	movs	r5, #1
 801002e:	2300      	movs	r3, #0
 8010030:	9306      	str	r3, [sp, #24]
 8010032:	9508      	str	r5, [sp, #32]
 8010034:	f04f 33ff 	mov.w	r3, #4294967295
 8010038:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801003c:	2200      	movs	r2, #0
 801003e:	2312      	movs	r3, #18
 8010040:	e7b0      	b.n	800ffa4 <_dtoa_r+0x26c>
 8010042:	2301      	movs	r3, #1
 8010044:	9308      	str	r3, [sp, #32]
 8010046:	e7f5      	b.n	8010034 <_dtoa_r+0x2fc>
 8010048:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801004a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801004e:	e7b8      	b.n	800ffc2 <_dtoa_r+0x28a>
 8010050:	3101      	adds	r1, #1
 8010052:	6041      	str	r1, [r0, #4]
 8010054:	0052      	lsls	r2, r2, #1
 8010056:	e7b8      	b.n	800ffca <_dtoa_r+0x292>
 8010058:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801005a:	9a01      	ldr	r2, [sp, #4]
 801005c:	601a      	str	r2, [r3, #0]
 801005e:	9b03      	ldr	r3, [sp, #12]
 8010060:	2b0e      	cmp	r3, #14
 8010062:	f200 809d 	bhi.w	80101a0 <_dtoa_r+0x468>
 8010066:	2d00      	cmp	r5, #0
 8010068:	f000 809a 	beq.w	80101a0 <_dtoa_r+0x468>
 801006c:	9b00      	ldr	r3, [sp, #0]
 801006e:	2b00      	cmp	r3, #0
 8010070:	dd32      	ble.n	80100d8 <_dtoa_r+0x3a0>
 8010072:	4ab7      	ldr	r2, [pc, #732]	; (8010350 <_dtoa_r+0x618>)
 8010074:	f003 030f 	and.w	r3, r3, #15
 8010078:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801007c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8010080:	9b00      	ldr	r3, [sp, #0]
 8010082:	05d8      	lsls	r0, r3, #23
 8010084:	ea4f 1723 	mov.w	r7, r3, asr #4
 8010088:	d516      	bpl.n	80100b8 <_dtoa_r+0x380>
 801008a:	4bb2      	ldr	r3, [pc, #712]	; (8010354 <_dtoa_r+0x61c>)
 801008c:	ec51 0b19 	vmov	r0, r1, d9
 8010090:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8010094:	f7f0 fc02 	bl	800089c <__aeabi_ddiv>
 8010098:	f007 070f 	and.w	r7, r7, #15
 801009c:	4682      	mov	sl, r0
 801009e:	468b      	mov	fp, r1
 80100a0:	2503      	movs	r5, #3
 80100a2:	4eac      	ldr	r6, [pc, #688]	; (8010354 <_dtoa_r+0x61c>)
 80100a4:	b957      	cbnz	r7, 80100bc <_dtoa_r+0x384>
 80100a6:	4642      	mov	r2, r8
 80100a8:	464b      	mov	r3, r9
 80100aa:	4650      	mov	r0, sl
 80100ac:	4659      	mov	r1, fp
 80100ae:	f7f0 fbf5 	bl	800089c <__aeabi_ddiv>
 80100b2:	4682      	mov	sl, r0
 80100b4:	468b      	mov	fp, r1
 80100b6:	e028      	b.n	801010a <_dtoa_r+0x3d2>
 80100b8:	2502      	movs	r5, #2
 80100ba:	e7f2      	b.n	80100a2 <_dtoa_r+0x36a>
 80100bc:	07f9      	lsls	r1, r7, #31
 80100be:	d508      	bpl.n	80100d2 <_dtoa_r+0x39a>
 80100c0:	4640      	mov	r0, r8
 80100c2:	4649      	mov	r1, r9
 80100c4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80100c8:	f7f0 fabe 	bl	8000648 <__aeabi_dmul>
 80100cc:	3501      	adds	r5, #1
 80100ce:	4680      	mov	r8, r0
 80100d0:	4689      	mov	r9, r1
 80100d2:	107f      	asrs	r7, r7, #1
 80100d4:	3608      	adds	r6, #8
 80100d6:	e7e5      	b.n	80100a4 <_dtoa_r+0x36c>
 80100d8:	f000 809b 	beq.w	8010212 <_dtoa_r+0x4da>
 80100dc:	9b00      	ldr	r3, [sp, #0]
 80100de:	4f9d      	ldr	r7, [pc, #628]	; (8010354 <_dtoa_r+0x61c>)
 80100e0:	425e      	negs	r6, r3
 80100e2:	4b9b      	ldr	r3, [pc, #620]	; (8010350 <_dtoa_r+0x618>)
 80100e4:	f006 020f 	and.w	r2, r6, #15
 80100e8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80100ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100f0:	ec51 0b19 	vmov	r0, r1, d9
 80100f4:	f7f0 faa8 	bl	8000648 <__aeabi_dmul>
 80100f8:	1136      	asrs	r6, r6, #4
 80100fa:	4682      	mov	sl, r0
 80100fc:	468b      	mov	fp, r1
 80100fe:	2300      	movs	r3, #0
 8010100:	2502      	movs	r5, #2
 8010102:	2e00      	cmp	r6, #0
 8010104:	d17a      	bne.n	80101fc <_dtoa_r+0x4c4>
 8010106:	2b00      	cmp	r3, #0
 8010108:	d1d3      	bne.n	80100b2 <_dtoa_r+0x37a>
 801010a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801010c:	2b00      	cmp	r3, #0
 801010e:	f000 8082 	beq.w	8010216 <_dtoa_r+0x4de>
 8010112:	4b91      	ldr	r3, [pc, #580]	; (8010358 <_dtoa_r+0x620>)
 8010114:	2200      	movs	r2, #0
 8010116:	4650      	mov	r0, sl
 8010118:	4659      	mov	r1, fp
 801011a:	f7f0 fd07 	bl	8000b2c <__aeabi_dcmplt>
 801011e:	2800      	cmp	r0, #0
 8010120:	d079      	beq.n	8010216 <_dtoa_r+0x4de>
 8010122:	9b03      	ldr	r3, [sp, #12]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d076      	beq.n	8010216 <_dtoa_r+0x4de>
 8010128:	9b02      	ldr	r3, [sp, #8]
 801012a:	2b00      	cmp	r3, #0
 801012c:	dd36      	ble.n	801019c <_dtoa_r+0x464>
 801012e:	9b00      	ldr	r3, [sp, #0]
 8010130:	4650      	mov	r0, sl
 8010132:	4659      	mov	r1, fp
 8010134:	1e5f      	subs	r7, r3, #1
 8010136:	2200      	movs	r2, #0
 8010138:	4b88      	ldr	r3, [pc, #544]	; (801035c <_dtoa_r+0x624>)
 801013a:	f7f0 fa85 	bl	8000648 <__aeabi_dmul>
 801013e:	9e02      	ldr	r6, [sp, #8]
 8010140:	4682      	mov	sl, r0
 8010142:	468b      	mov	fp, r1
 8010144:	3501      	adds	r5, #1
 8010146:	4628      	mov	r0, r5
 8010148:	f7f0 fa14 	bl	8000574 <__aeabi_i2d>
 801014c:	4652      	mov	r2, sl
 801014e:	465b      	mov	r3, fp
 8010150:	f7f0 fa7a 	bl	8000648 <__aeabi_dmul>
 8010154:	4b82      	ldr	r3, [pc, #520]	; (8010360 <_dtoa_r+0x628>)
 8010156:	2200      	movs	r2, #0
 8010158:	f7f0 f8c0 	bl	80002dc <__adddf3>
 801015c:	46d0      	mov	r8, sl
 801015e:	46d9      	mov	r9, fp
 8010160:	4682      	mov	sl, r0
 8010162:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8010166:	2e00      	cmp	r6, #0
 8010168:	d158      	bne.n	801021c <_dtoa_r+0x4e4>
 801016a:	4b7e      	ldr	r3, [pc, #504]	; (8010364 <_dtoa_r+0x62c>)
 801016c:	2200      	movs	r2, #0
 801016e:	4640      	mov	r0, r8
 8010170:	4649      	mov	r1, r9
 8010172:	f7f0 f8b1 	bl	80002d8 <__aeabi_dsub>
 8010176:	4652      	mov	r2, sl
 8010178:	465b      	mov	r3, fp
 801017a:	4680      	mov	r8, r0
 801017c:	4689      	mov	r9, r1
 801017e:	f7f0 fcf3 	bl	8000b68 <__aeabi_dcmpgt>
 8010182:	2800      	cmp	r0, #0
 8010184:	f040 8295 	bne.w	80106b2 <_dtoa_r+0x97a>
 8010188:	4652      	mov	r2, sl
 801018a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801018e:	4640      	mov	r0, r8
 8010190:	4649      	mov	r1, r9
 8010192:	f7f0 fccb 	bl	8000b2c <__aeabi_dcmplt>
 8010196:	2800      	cmp	r0, #0
 8010198:	f040 8289 	bne.w	80106ae <_dtoa_r+0x976>
 801019c:	ec5b ab19 	vmov	sl, fp, d9
 80101a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	f2c0 8148 	blt.w	8010438 <_dtoa_r+0x700>
 80101a8:	9a00      	ldr	r2, [sp, #0]
 80101aa:	2a0e      	cmp	r2, #14
 80101ac:	f300 8144 	bgt.w	8010438 <_dtoa_r+0x700>
 80101b0:	4b67      	ldr	r3, [pc, #412]	; (8010350 <_dtoa_r+0x618>)
 80101b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80101b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80101ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80101bc:	2b00      	cmp	r3, #0
 80101be:	f280 80d5 	bge.w	801036c <_dtoa_r+0x634>
 80101c2:	9b03      	ldr	r3, [sp, #12]
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f300 80d1 	bgt.w	801036c <_dtoa_r+0x634>
 80101ca:	f040 826f 	bne.w	80106ac <_dtoa_r+0x974>
 80101ce:	4b65      	ldr	r3, [pc, #404]	; (8010364 <_dtoa_r+0x62c>)
 80101d0:	2200      	movs	r2, #0
 80101d2:	4640      	mov	r0, r8
 80101d4:	4649      	mov	r1, r9
 80101d6:	f7f0 fa37 	bl	8000648 <__aeabi_dmul>
 80101da:	4652      	mov	r2, sl
 80101dc:	465b      	mov	r3, fp
 80101de:	f7f0 fcb9 	bl	8000b54 <__aeabi_dcmpge>
 80101e2:	9e03      	ldr	r6, [sp, #12]
 80101e4:	4637      	mov	r7, r6
 80101e6:	2800      	cmp	r0, #0
 80101e8:	f040 8245 	bne.w	8010676 <_dtoa_r+0x93e>
 80101ec:	9d01      	ldr	r5, [sp, #4]
 80101ee:	2331      	movs	r3, #49	; 0x31
 80101f0:	f805 3b01 	strb.w	r3, [r5], #1
 80101f4:	9b00      	ldr	r3, [sp, #0]
 80101f6:	3301      	adds	r3, #1
 80101f8:	9300      	str	r3, [sp, #0]
 80101fa:	e240      	b.n	801067e <_dtoa_r+0x946>
 80101fc:	07f2      	lsls	r2, r6, #31
 80101fe:	d505      	bpl.n	801020c <_dtoa_r+0x4d4>
 8010200:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010204:	f7f0 fa20 	bl	8000648 <__aeabi_dmul>
 8010208:	3501      	adds	r5, #1
 801020a:	2301      	movs	r3, #1
 801020c:	1076      	asrs	r6, r6, #1
 801020e:	3708      	adds	r7, #8
 8010210:	e777      	b.n	8010102 <_dtoa_r+0x3ca>
 8010212:	2502      	movs	r5, #2
 8010214:	e779      	b.n	801010a <_dtoa_r+0x3d2>
 8010216:	9f00      	ldr	r7, [sp, #0]
 8010218:	9e03      	ldr	r6, [sp, #12]
 801021a:	e794      	b.n	8010146 <_dtoa_r+0x40e>
 801021c:	9901      	ldr	r1, [sp, #4]
 801021e:	4b4c      	ldr	r3, [pc, #304]	; (8010350 <_dtoa_r+0x618>)
 8010220:	4431      	add	r1, r6
 8010222:	910d      	str	r1, [sp, #52]	; 0x34
 8010224:	9908      	ldr	r1, [sp, #32]
 8010226:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801022a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801022e:	2900      	cmp	r1, #0
 8010230:	d043      	beq.n	80102ba <_dtoa_r+0x582>
 8010232:	494d      	ldr	r1, [pc, #308]	; (8010368 <_dtoa_r+0x630>)
 8010234:	2000      	movs	r0, #0
 8010236:	f7f0 fb31 	bl	800089c <__aeabi_ddiv>
 801023a:	4652      	mov	r2, sl
 801023c:	465b      	mov	r3, fp
 801023e:	f7f0 f84b 	bl	80002d8 <__aeabi_dsub>
 8010242:	9d01      	ldr	r5, [sp, #4]
 8010244:	4682      	mov	sl, r0
 8010246:	468b      	mov	fp, r1
 8010248:	4649      	mov	r1, r9
 801024a:	4640      	mov	r0, r8
 801024c:	f7f0 fcac 	bl	8000ba8 <__aeabi_d2iz>
 8010250:	4606      	mov	r6, r0
 8010252:	f7f0 f98f 	bl	8000574 <__aeabi_i2d>
 8010256:	4602      	mov	r2, r0
 8010258:	460b      	mov	r3, r1
 801025a:	4640      	mov	r0, r8
 801025c:	4649      	mov	r1, r9
 801025e:	f7f0 f83b 	bl	80002d8 <__aeabi_dsub>
 8010262:	3630      	adds	r6, #48	; 0x30
 8010264:	f805 6b01 	strb.w	r6, [r5], #1
 8010268:	4652      	mov	r2, sl
 801026a:	465b      	mov	r3, fp
 801026c:	4680      	mov	r8, r0
 801026e:	4689      	mov	r9, r1
 8010270:	f7f0 fc5c 	bl	8000b2c <__aeabi_dcmplt>
 8010274:	2800      	cmp	r0, #0
 8010276:	d163      	bne.n	8010340 <_dtoa_r+0x608>
 8010278:	4642      	mov	r2, r8
 801027a:	464b      	mov	r3, r9
 801027c:	4936      	ldr	r1, [pc, #216]	; (8010358 <_dtoa_r+0x620>)
 801027e:	2000      	movs	r0, #0
 8010280:	f7f0 f82a 	bl	80002d8 <__aeabi_dsub>
 8010284:	4652      	mov	r2, sl
 8010286:	465b      	mov	r3, fp
 8010288:	f7f0 fc50 	bl	8000b2c <__aeabi_dcmplt>
 801028c:	2800      	cmp	r0, #0
 801028e:	f040 80b5 	bne.w	80103fc <_dtoa_r+0x6c4>
 8010292:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8010294:	429d      	cmp	r5, r3
 8010296:	d081      	beq.n	801019c <_dtoa_r+0x464>
 8010298:	4b30      	ldr	r3, [pc, #192]	; (801035c <_dtoa_r+0x624>)
 801029a:	2200      	movs	r2, #0
 801029c:	4650      	mov	r0, sl
 801029e:	4659      	mov	r1, fp
 80102a0:	f7f0 f9d2 	bl	8000648 <__aeabi_dmul>
 80102a4:	4b2d      	ldr	r3, [pc, #180]	; (801035c <_dtoa_r+0x624>)
 80102a6:	4682      	mov	sl, r0
 80102a8:	468b      	mov	fp, r1
 80102aa:	4640      	mov	r0, r8
 80102ac:	4649      	mov	r1, r9
 80102ae:	2200      	movs	r2, #0
 80102b0:	f7f0 f9ca 	bl	8000648 <__aeabi_dmul>
 80102b4:	4680      	mov	r8, r0
 80102b6:	4689      	mov	r9, r1
 80102b8:	e7c6      	b.n	8010248 <_dtoa_r+0x510>
 80102ba:	4650      	mov	r0, sl
 80102bc:	4659      	mov	r1, fp
 80102be:	f7f0 f9c3 	bl	8000648 <__aeabi_dmul>
 80102c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102c4:	9d01      	ldr	r5, [sp, #4]
 80102c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80102c8:	4682      	mov	sl, r0
 80102ca:	468b      	mov	fp, r1
 80102cc:	4649      	mov	r1, r9
 80102ce:	4640      	mov	r0, r8
 80102d0:	f7f0 fc6a 	bl	8000ba8 <__aeabi_d2iz>
 80102d4:	4606      	mov	r6, r0
 80102d6:	f7f0 f94d 	bl	8000574 <__aeabi_i2d>
 80102da:	3630      	adds	r6, #48	; 0x30
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4640      	mov	r0, r8
 80102e2:	4649      	mov	r1, r9
 80102e4:	f7ef fff8 	bl	80002d8 <__aeabi_dsub>
 80102e8:	f805 6b01 	strb.w	r6, [r5], #1
 80102ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80102ee:	429d      	cmp	r5, r3
 80102f0:	4680      	mov	r8, r0
 80102f2:	4689      	mov	r9, r1
 80102f4:	f04f 0200 	mov.w	r2, #0
 80102f8:	d124      	bne.n	8010344 <_dtoa_r+0x60c>
 80102fa:	4b1b      	ldr	r3, [pc, #108]	; (8010368 <_dtoa_r+0x630>)
 80102fc:	4650      	mov	r0, sl
 80102fe:	4659      	mov	r1, fp
 8010300:	f7ef ffec 	bl	80002dc <__adddf3>
 8010304:	4602      	mov	r2, r0
 8010306:	460b      	mov	r3, r1
 8010308:	4640      	mov	r0, r8
 801030a:	4649      	mov	r1, r9
 801030c:	f7f0 fc2c 	bl	8000b68 <__aeabi_dcmpgt>
 8010310:	2800      	cmp	r0, #0
 8010312:	d173      	bne.n	80103fc <_dtoa_r+0x6c4>
 8010314:	4652      	mov	r2, sl
 8010316:	465b      	mov	r3, fp
 8010318:	4913      	ldr	r1, [pc, #76]	; (8010368 <_dtoa_r+0x630>)
 801031a:	2000      	movs	r0, #0
 801031c:	f7ef ffdc 	bl	80002d8 <__aeabi_dsub>
 8010320:	4602      	mov	r2, r0
 8010322:	460b      	mov	r3, r1
 8010324:	4640      	mov	r0, r8
 8010326:	4649      	mov	r1, r9
 8010328:	f7f0 fc00 	bl	8000b2c <__aeabi_dcmplt>
 801032c:	2800      	cmp	r0, #0
 801032e:	f43f af35 	beq.w	801019c <_dtoa_r+0x464>
 8010332:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8010334:	1e6b      	subs	r3, r5, #1
 8010336:	930f      	str	r3, [sp, #60]	; 0x3c
 8010338:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801033c:	2b30      	cmp	r3, #48	; 0x30
 801033e:	d0f8      	beq.n	8010332 <_dtoa_r+0x5fa>
 8010340:	9700      	str	r7, [sp, #0]
 8010342:	e049      	b.n	80103d8 <_dtoa_r+0x6a0>
 8010344:	4b05      	ldr	r3, [pc, #20]	; (801035c <_dtoa_r+0x624>)
 8010346:	f7f0 f97f 	bl	8000648 <__aeabi_dmul>
 801034a:	4680      	mov	r8, r0
 801034c:	4689      	mov	r9, r1
 801034e:	e7bd      	b.n	80102cc <_dtoa_r+0x594>
 8010350:	08013fa0 	.word	0x08013fa0
 8010354:	08013f78 	.word	0x08013f78
 8010358:	3ff00000 	.word	0x3ff00000
 801035c:	40240000 	.word	0x40240000
 8010360:	401c0000 	.word	0x401c0000
 8010364:	40140000 	.word	0x40140000
 8010368:	3fe00000 	.word	0x3fe00000
 801036c:	9d01      	ldr	r5, [sp, #4]
 801036e:	4656      	mov	r6, sl
 8010370:	465f      	mov	r7, fp
 8010372:	4642      	mov	r2, r8
 8010374:	464b      	mov	r3, r9
 8010376:	4630      	mov	r0, r6
 8010378:	4639      	mov	r1, r7
 801037a:	f7f0 fa8f 	bl	800089c <__aeabi_ddiv>
 801037e:	f7f0 fc13 	bl	8000ba8 <__aeabi_d2iz>
 8010382:	4682      	mov	sl, r0
 8010384:	f7f0 f8f6 	bl	8000574 <__aeabi_i2d>
 8010388:	4642      	mov	r2, r8
 801038a:	464b      	mov	r3, r9
 801038c:	f7f0 f95c 	bl	8000648 <__aeabi_dmul>
 8010390:	4602      	mov	r2, r0
 8010392:	460b      	mov	r3, r1
 8010394:	4630      	mov	r0, r6
 8010396:	4639      	mov	r1, r7
 8010398:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801039c:	f7ef ff9c 	bl	80002d8 <__aeabi_dsub>
 80103a0:	f805 6b01 	strb.w	r6, [r5], #1
 80103a4:	9e01      	ldr	r6, [sp, #4]
 80103a6:	9f03      	ldr	r7, [sp, #12]
 80103a8:	1bae      	subs	r6, r5, r6
 80103aa:	42b7      	cmp	r7, r6
 80103ac:	4602      	mov	r2, r0
 80103ae:	460b      	mov	r3, r1
 80103b0:	d135      	bne.n	801041e <_dtoa_r+0x6e6>
 80103b2:	f7ef ff93 	bl	80002dc <__adddf3>
 80103b6:	4642      	mov	r2, r8
 80103b8:	464b      	mov	r3, r9
 80103ba:	4606      	mov	r6, r0
 80103bc:	460f      	mov	r7, r1
 80103be:	f7f0 fbd3 	bl	8000b68 <__aeabi_dcmpgt>
 80103c2:	b9d0      	cbnz	r0, 80103fa <_dtoa_r+0x6c2>
 80103c4:	4642      	mov	r2, r8
 80103c6:	464b      	mov	r3, r9
 80103c8:	4630      	mov	r0, r6
 80103ca:	4639      	mov	r1, r7
 80103cc:	f7f0 fba4 	bl	8000b18 <__aeabi_dcmpeq>
 80103d0:	b110      	cbz	r0, 80103d8 <_dtoa_r+0x6a0>
 80103d2:	f01a 0f01 	tst.w	sl, #1
 80103d6:	d110      	bne.n	80103fa <_dtoa_r+0x6c2>
 80103d8:	4620      	mov	r0, r4
 80103da:	ee18 1a10 	vmov	r1, s16
 80103de:	f001 f885 	bl	80114ec <_Bfree>
 80103e2:	2300      	movs	r3, #0
 80103e4:	9800      	ldr	r0, [sp, #0]
 80103e6:	702b      	strb	r3, [r5, #0]
 80103e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103ea:	3001      	adds	r0, #1
 80103ec:	6018      	str	r0, [r3, #0]
 80103ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80103f0:	2b00      	cmp	r3, #0
 80103f2:	f43f acf1 	beq.w	800fdd8 <_dtoa_r+0xa0>
 80103f6:	601d      	str	r5, [r3, #0]
 80103f8:	e4ee      	b.n	800fdd8 <_dtoa_r+0xa0>
 80103fa:	9f00      	ldr	r7, [sp, #0]
 80103fc:	462b      	mov	r3, r5
 80103fe:	461d      	mov	r5, r3
 8010400:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8010404:	2a39      	cmp	r2, #57	; 0x39
 8010406:	d106      	bne.n	8010416 <_dtoa_r+0x6de>
 8010408:	9a01      	ldr	r2, [sp, #4]
 801040a:	429a      	cmp	r2, r3
 801040c:	d1f7      	bne.n	80103fe <_dtoa_r+0x6c6>
 801040e:	9901      	ldr	r1, [sp, #4]
 8010410:	2230      	movs	r2, #48	; 0x30
 8010412:	3701      	adds	r7, #1
 8010414:	700a      	strb	r2, [r1, #0]
 8010416:	781a      	ldrb	r2, [r3, #0]
 8010418:	3201      	adds	r2, #1
 801041a:	701a      	strb	r2, [r3, #0]
 801041c:	e790      	b.n	8010340 <_dtoa_r+0x608>
 801041e:	4ba6      	ldr	r3, [pc, #664]	; (80106b8 <_dtoa_r+0x980>)
 8010420:	2200      	movs	r2, #0
 8010422:	f7f0 f911 	bl	8000648 <__aeabi_dmul>
 8010426:	2200      	movs	r2, #0
 8010428:	2300      	movs	r3, #0
 801042a:	4606      	mov	r6, r0
 801042c:	460f      	mov	r7, r1
 801042e:	f7f0 fb73 	bl	8000b18 <__aeabi_dcmpeq>
 8010432:	2800      	cmp	r0, #0
 8010434:	d09d      	beq.n	8010372 <_dtoa_r+0x63a>
 8010436:	e7cf      	b.n	80103d8 <_dtoa_r+0x6a0>
 8010438:	9a08      	ldr	r2, [sp, #32]
 801043a:	2a00      	cmp	r2, #0
 801043c:	f000 80d7 	beq.w	80105ee <_dtoa_r+0x8b6>
 8010440:	9a06      	ldr	r2, [sp, #24]
 8010442:	2a01      	cmp	r2, #1
 8010444:	f300 80ba 	bgt.w	80105bc <_dtoa_r+0x884>
 8010448:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801044a:	2a00      	cmp	r2, #0
 801044c:	f000 80b2 	beq.w	80105b4 <_dtoa_r+0x87c>
 8010450:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8010454:	9e07      	ldr	r6, [sp, #28]
 8010456:	9d04      	ldr	r5, [sp, #16]
 8010458:	9a04      	ldr	r2, [sp, #16]
 801045a:	441a      	add	r2, r3
 801045c:	9204      	str	r2, [sp, #16]
 801045e:	9a05      	ldr	r2, [sp, #20]
 8010460:	2101      	movs	r1, #1
 8010462:	441a      	add	r2, r3
 8010464:	4620      	mov	r0, r4
 8010466:	9205      	str	r2, [sp, #20]
 8010468:	f001 f942 	bl	80116f0 <__i2b>
 801046c:	4607      	mov	r7, r0
 801046e:	2d00      	cmp	r5, #0
 8010470:	dd0c      	ble.n	801048c <_dtoa_r+0x754>
 8010472:	9b05      	ldr	r3, [sp, #20]
 8010474:	2b00      	cmp	r3, #0
 8010476:	dd09      	ble.n	801048c <_dtoa_r+0x754>
 8010478:	42ab      	cmp	r3, r5
 801047a:	9a04      	ldr	r2, [sp, #16]
 801047c:	bfa8      	it	ge
 801047e:	462b      	movge	r3, r5
 8010480:	1ad2      	subs	r2, r2, r3
 8010482:	9204      	str	r2, [sp, #16]
 8010484:	9a05      	ldr	r2, [sp, #20]
 8010486:	1aed      	subs	r5, r5, r3
 8010488:	1ad3      	subs	r3, r2, r3
 801048a:	9305      	str	r3, [sp, #20]
 801048c:	9b07      	ldr	r3, [sp, #28]
 801048e:	b31b      	cbz	r3, 80104d8 <_dtoa_r+0x7a0>
 8010490:	9b08      	ldr	r3, [sp, #32]
 8010492:	2b00      	cmp	r3, #0
 8010494:	f000 80af 	beq.w	80105f6 <_dtoa_r+0x8be>
 8010498:	2e00      	cmp	r6, #0
 801049a:	dd13      	ble.n	80104c4 <_dtoa_r+0x78c>
 801049c:	4639      	mov	r1, r7
 801049e:	4632      	mov	r2, r6
 80104a0:	4620      	mov	r0, r4
 80104a2:	f001 f9e5 	bl	8011870 <__pow5mult>
 80104a6:	ee18 2a10 	vmov	r2, s16
 80104aa:	4601      	mov	r1, r0
 80104ac:	4607      	mov	r7, r0
 80104ae:	4620      	mov	r0, r4
 80104b0:	f001 f934 	bl	801171c <__multiply>
 80104b4:	ee18 1a10 	vmov	r1, s16
 80104b8:	4680      	mov	r8, r0
 80104ba:	4620      	mov	r0, r4
 80104bc:	f001 f816 	bl	80114ec <_Bfree>
 80104c0:	ee08 8a10 	vmov	s16, r8
 80104c4:	9b07      	ldr	r3, [sp, #28]
 80104c6:	1b9a      	subs	r2, r3, r6
 80104c8:	d006      	beq.n	80104d8 <_dtoa_r+0x7a0>
 80104ca:	ee18 1a10 	vmov	r1, s16
 80104ce:	4620      	mov	r0, r4
 80104d0:	f001 f9ce 	bl	8011870 <__pow5mult>
 80104d4:	ee08 0a10 	vmov	s16, r0
 80104d8:	2101      	movs	r1, #1
 80104da:	4620      	mov	r0, r4
 80104dc:	f001 f908 	bl	80116f0 <__i2b>
 80104e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80104e2:	2b00      	cmp	r3, #0
 80104e4:	4606      	mov	r6, r0
 80104e6:	f340 8088 	ble.w	80105fa <_dtoa_r+0x8c2>
 80104ea:	461a      	mov	r2, r3
 80104ec:	4601      	mov	r1, r0
 80104ee:	4620      	mov	r0, r4
 80104f0:	f001 f9be 	bl	8011870 <__pow5mult>
 80104f4:	9b06      	ldr	r3, [sp, #24]
 80104f6:	2b01      	cmp	r3, #1
 80104f8:	4606      	mov	r6, r0
 80104fa:	f340 8081 	ble.w	8010600 <_dtoa_r+0x8c8>
 80104fe:	f04f 0800 	mov.w	r8, #0
 8010502:	6933      	ldr	r3, [r6, #16]
 8010504:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8010508:	6918      	ldr	r0, [r3, #16]
 801050a:	f001 f8a1 	bl	8011650 <__hi0bits>
 801050e:	f1c0 0020 	rsb	r0, r0, #32
 8010512:	9b05      	ldr	r3, [sp, #20]
 8010514:	4418      	add	r0, r3
 8010516:	f010 001f 	ands.w	r0, r0, #31
 801051a:	f000 8092 	beq.w	8010642 <_dtoa_r+0x90a>
 801051e:	f1c0 0320 	rsb	r3, r0, #32
 8010522:	2b04      	cmp	r3, #4
 8010524:	f340 808a 	ble.w	801063c <_dtoa_r+0x904>
 8010528:	f1c0 001c 	rsb	r0, r0, #28
 801052c:	9b04      	ldr	r3, [sp, #16]
 801052e:	4403      	add	r3, r0
 8010530:	9304      	str	r3, [sp, #16]
 8010532:	9b05      	ldr	r3, [sp, #20]
 8010534:	4403      	add	r3, r0
 8010536:	4405      	add	r5, r0
 8010538:	9305      	str	r3, [sp, #20]
 801053a:	9b04      	ldr	r3, [sp, #16]
 801053c:	2b00      	cmp	r3, #0
 801053e:	dd07      	ble.n	8010550 <_dtoa_r+0x818>
 8010540:	ee18 1a10 	vmov	r1, s16
 8010544:	461a      	mov	r2, r3
 8010546:	4620      	mov	r0, r4
 8010548:	f001 f9ec 	bl	8011924 <__lshift>
 801054c:	ee08 0a10 	vmov	s16, r0
 8010550:	9b05      	ldr	r3, [sp, #20]
 8010552:	2b00      	cmp	r3, #0
 8010554:	dd05      	ble.n	8010562 <_dtoa_r+0x82a>
 8010556:	4631      	mov	r1, r6
 8010558:	461a      	mov	r2, r3
 801055a:	4620      	mov	r0, r4
 801055c:	f001 f9e2 	bl	8011924 <__lshift>
 8010560:	4606      	mov	r6, r0
 8010562:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d06e      	beq.n	8010646 <_dtoa_r+0x90e>
 8010568:	ee18 0a10 	vmov	r0, s16
 801056c:	4631      	mov	r1, r6
 801056e:	f001 fa49 	bl	8011a04 <__mcmp>
 8010572:	2800      	cmp	r0, #0
 8010574:	da67      	bge.n	8010646 <_dtoa_r+0x90e>
 8010576:	9b00      	ldr	r3, [sp, #0]
 8010578:	3b01      	subs	r3, #1
 801057a:	ee18 1a10 	vmov	r1, s16
 801057e:	9300      	str	r3, [sp, #0]
 8010580:	220a      	movs	r2, #10
 8010582:	2300      	movs	r3, #0
 8010584:	4620      	mov	r0, r4
 8010586:	f000 ffd3 	bl	8011530 <__multadd>
 801058a:	9b08      	ldr	r3, [sp, #32]
 801058c:	ee08 0a10 	vmov	s16, r0
 8010590:	2b00      	cmp	r3, #0
 8010592:	f000 81b1 	beq.w	80108f8 <_dtoa_r+0xbc0>
 8010596:	2300      	movs	r3, #0
 8010598:	4639      	mov	r1, r7
 801059a:	220a      	movs	r2, #10
 801059c:	4620      	mov	r0, r4
 801059e:	f000 ffc7 	bl	8011530 <__multadd>
 80105a2:	9b02      	ldr	r3, [sp, #8]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	4607      	mov	r7, r0
 80105a8:	f300 808e 	bgt.w	80106c8 <_dtoa_r+0x990>
 80105ac:	9b06      	ldr	r3, [sp, #24]
 80105ae:	2b02      	cmp	r3, #2
 80105b0:	dc51      	bgt.n	8010656 <_dtoa_r+0x91e>
 80105b2:	e089      	b.n	80106c8 <_dtoa_r+0x990>
 80105b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80105b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80105ba:	e74b      	b.n	8010454 <_dtoa_r+0x71c>
 80105bc:	9b03      	ldr	r3, [sp, #12]
 80105be:	1e5e      	subs	r6, r3, #1
 80105c0:	9b07      	ldr	r3, [sp, #28]
 80105c2:	42b3      	cmp	r3, r6
 80105c4:	bfbf      	itttt	lt
 80105c6:	9b07      	ldrlt	r3, [sp, #28]
 80105c8:	9607      	strlt	r6, [sp, #28]
 80105ca:	1af2      	sublt	r2, r6, r3
 80105cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80105ce:	bfb6      	itet	lt
 80105d0:	189b      	addlt	r3, r3, r2
 80105d2:	1b9e      	subge	r6, r3, r6
 80105d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80105d6:	9b03      	ldr	r3, [sp, #12]
 80105d8:	bfb8      	it	lt
 80105da:	2600      	movlt	r6, #0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	bfb7      	itett	lt
 80105e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80105e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80105e8:	1a9d      	sublt	r5, r3, r2
 80105ea:	2300      	movlt	r3, #0
 80105ec:	e734      	b.n	8010458 <_dtoa_r+0x720>
 80105ee:	9e07      	ldr	r6, [sp, #28]
 80105f0:	9d04      	ldr	r5, [sp, #16]
 80105f2:	9f08      	ldr	r7, [sp, #32]
 80105f4:	e73b      	b.n	801046e <_dtoa_r+0x736>
 80105f6:	9a07      	ldr	r2, [sp, #28]
 80105f8:	e767      	b.n	80104ca <_dtoa_r+0x792>
 80105fa:	9b06      	ldr	r3, [sp, #24]
 80105fc:	2b01      	cmp	r3, #1
 80105fe:	dc18      	bgt.n	8010632 <_dtoa_r+0x8fa>
 8010600:	f1ba 0f00 	cmp.w	sl, #0
 8010604:	d115      	bne.n	8010632 <_dtoa_r+0x8fa>
 8010606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801060a:	b993      	cbnz	r3, 8010632 <_dtoa_r+0x8fa>
 801060c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8010610:	0d1b      	lsrs	r3, r3, #20
 8010612:	051b      	lsls	r3, r3, #20
 8010614:	b183      	cbz	r3, 8010638 <_dtoa_r+0x900>
 8010616:	9b04      	ldr	r3, [sp, #16]
 8010618:	3301      	adds	r3, #1
 801061a:	9304      	str	r3, [sp, #16]
 801061c:	9b05      	ldr	r3, [sp, #20]
 801061e:	3301      	adds	r3, #1
 8010620:	9305      	str	r3, [sp, #20]
 8010622:	f04f 0801 	mov.w	r8, #1
 8010626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010628:	2b00      	cmp	r3, #0
 801062a:	f47f af6a 	bne.w	8010502 <_dtoa_r+0x7ca>
 801062e:	2001      	movs	r0, #1
 8010630:	e76f      	b.n	8010512 <_dtoa_r+0x7da>
 8010632:	f04f 0800 	mov.w	r8, #0
 8010636:	e7f6      	b.n	8010626 <_dtoa_r+0x8ee>
 8010638:	4698      	mov	r8, r3
 801063a:	e7f4      	b.n	8010626 <_dtoa_r+0x8ee>
 801063c:	f43f af7d 	beq.w	801053a <_dtoa_r+0x802>
 8010640:	4618      	mov	r0, r3
 8010642:	301c      	adds	r0, #28
 8010644:	e772      	b.n	801052c <_dtoa_r+0x7f4>
 8010646:	9b03      	ldr	r3, [sp, #12]
 8010648:	2b00      	cmp	r3, #0
 801064a:	dc37      	bgt.n	80106bc <_dtoa_r+0x984>
 801064c:	9b06      	ldr	r3, [sp, #24]
 801064e:	2b02      	cmp	r3, #2
 8010650:	dd34      	ble.n	80106bc <_dtoa_r+0x984>
 8010652:	9b03      	ldr	r3, [sp, #12]
 8010654:	9302      	str	r3, [sp, #8]
 8010656:	9b02      	ldr	r3, [sp, #8]
 8010658:	b96b      	cbnz	r3, 8010676 <_dtoa_r+0x93e>
 801065a:	4631      	mov	r1, r6
 801065c:	2205      	movs	r2, #5
 801065e:	4620      	mov	r0, r4
 8010660:	f000 ff66 	bl	8011530 <__multadd>
 8010664:	4601      	mov	r1, r0
 8010666:	4606      	mov	r6, r0
 8010668:	ee18 0a10 	vmov	r0, s16
 801066c:	f001 f9ca 	bl	8011a04 <__mcmp>
 8010670:	2800      	cmp	r0, #0
 8010672:	f73f adbb 	bgt.w	80101ec <_dtoa_r+0x4b4>
 8010676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010678:	9d01      	ldr	r5, [sp, #4]
 801067a:	43db      	mvns	r3, r3
 801067c:	9300      	str	r3, [sp, #0]
 801067e:	f04f 0800 	mov.w	r8, #0
 8010682:	4631      	mov	r1, r6
 8010684:	4620      	mov	r0, r4
 8010686:	f000 ff31 	bl	80114ec <_Bfree>
 801068a:	2f00      	cmp	r7, #0
 801068c:	f43f aea4 	beq.w	80103d8 <_dtoa_r+0x6a0>
 8010690:	f1b8 0f00 	cmp.w	r8, #0
 8010694:	d005      	beq.n	80106a2 <_dtoa_r+0x96a>
 8010696:	45b8      	cmp	r8, r7
 8010698:	d003      	beq.n	80106a2 <_dtoa_r+0x96a>
 801069a:	4641      	mov	r1, r8
 801069c:	4620      	mov	r0, r4
 801069e:	f000 ff25 	bl	80114ec <_Bfree>
 80106a2:	4639      	mov	r1, r7
 80106a4:	4620      	mov	r0, r4
 80106a6:	f000 ff21 	bl	80114ec <_Bfree>
 80106aa:	e695      	b.n	80103d8 <_dtoa_r+0x6a0>
 80106ac:	2600      	movs	r6, #0
 80106ae:	4637      	mov	r7, r6
 80106b0:	e7e1      	b.n	8010676 <_dtoa_r+0x93e>
 80106b2:	9700      	str	r7, [sp, #0]
 80106b4:	4637      	mov	r7, r6
 80106b6:	e599      	b.n	80101ec <_dtoa_r+0x4b4>
 80106b8:	40240000 	.word	0x40240000
 80106bc:	9b08      	ldr	r3, [sp, #32]
 80106be:	2b00      	cmp	r3, #0
 80106c0:	f000 80ca 	beq.w	8010858 <_dtoa_r+0xb20>
 80106c4:	9b03      	ldr	r3, [sp, #12]
 80106c6:	9302      	str	r3, [sp, #8]
 80106c8:	2d00      	cmp	r5, #0
 80106ca:	dd05      	ble.n	80106d8 <_dtoa_r+0x9a0>
 80106cc:	4639      	mov	r1, r7
 80106ce:	462a      	mov	r2, r5
 80106d0:	4620      	mov	r0, r4
 80106d2:	f001 f927 	bl	8011924 <__lshift>
 80106d6:	4607      	mov	r7, r0
 80106d8:	f1b8 0f00 	cmp.w	r8, #0
 80106dc:	d05b      	beq.n	8010796 <_dtoa_r+0xa5e>
 80106de:	6879      	ldr	r1, [r7, #4]
 80106e0:	4620      	mov	r0, r4
 80106e2:	f000 fec3 	bl	801146c <_Balloc>
 80106e6:	4605      	mov	r5, r0
 80106e8:	b928      	cbnz	r0, 80106f6 <_dtoa_r+0x9be>
 80106ea:	4b87      	ldr	r3, [pc, #540]	; (8010908 <_dtoa_r+0xbd0>)
 80106ec:	4602      	mov	r2, r0
 80106ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 80106f2:	f7ff bb3b 	b.w	800fd6c <_dtoa_r+0x34>
 80106f6:	693a      	ldr	r2, [r7, #16]
 80106f8:	3202      	adds	r2, #2
 80106fa:	0092      	lsls	r2, r2, #2
 80106fc:	f107 010c 	add.w	r1, r7, #12
 8010700:	300c      	adds	r0, #12
 8010702:	f7fd fe01 	bl	800e308 <memcpy>
 8010706:	2201      	movs	r2, #1
 8010708:	4629      	mov	r1, r5
 801070a:	4620      	mov	r0, r4
 801070c:	f001 f90a 	bl	8011924 <__lshift>
 8010710:	9b01      	ldr	r3, [sp, #4]
 8010712:	f103 0901 	add.w	r9, r3, #1
 8010716:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801071a:	4413      	add	r3, r2
 801071c:	9305      	str	r3, [sp, #20]
 801071e:	f00a 0301 	and.w	r3, sl, #1
 8010722:	46b8      	mov	r8, r7
 8010724:	9304      	str	r3, [sp, #16]
 8010726:	4607      	mov	r7, r0
 8010728:	4631      	mov	r1, r6
 801072a:	ee18 0a10 	vmov	r0, s16
 801072e:	f7ff fa75 	bl	800fc1c <quorem>
 8010732:	4641      	mov	r1, r8
 8010734:	9002      	str	r0, [sp, #8]
 8010736:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801073a:	ee18 0a10 	vmov	r0, s16
 801073e:	f001 f961 	bl	8011a04 <__mcmp>
 8010742:	463a      	mov	r2, r7
 8010744:	9003      	str	r0, [sp, #12]
 8010746:	4631      	mov	r1, r6
 8010748:	4620      	mov	r0, r4
 801074a:	f001 f977 	bl	8011a3c <__mdiff>
 801074e:	68c2      	ldr	r2, [r0, #12]
 8010750:	f109 3bff 	add.w	fp, r9, #4294967295
 8010754:	4605      	mov	r5, r0
 8010756:	bb02      	cbnz	r2, 801079a <_dtoa_r+0xa62>
 8010758:	4601      	mov	r1, r0
 801075a:	ee18 0a10 	vmov	r0, s16
 801075e:	f001 f951 	bl	8011a04 <__mcmp>
 8010762:	4602      	mov	r2, r0
 8010764:	4629      	mov	r1, r5
 8010766:	4620      	mov	r0, r4
 8010768:	9207      	str	r2, [sp, #28]
 801076a:	f000 febf 	bl	80114ec <_Bfree>
 801076e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8010772:	ea43 0102 	orr.w	r1, r3, r2
 8010776:	9b04      	ldr	r3, [sp, #16]
 8010778:	430b      	orrs	r3, r1
 801077a:	464d      	mov	r5, r9
 801077c:	d10f      	bne.n	801079e <_dtoa_r+0xa66>
 801077e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8010782:	d02a      	beq.n	80107da <_dtoa_r+0xaa2>
 8010784:	9b03      	ldr	r3, [sp, #12]
 8010786:	2b00      	cmp	r3, #0
 8010788:	dd02      	ble.n	8010790 <_dtoa_r+0xa58>
 801078a:	9b02      	ldr	r3, [sp, #8]
 801078c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8010790:	f88b a000 	strb.w	sl, [fp]
 8010794:	e775      	b.n	8010682 <_dtoa_r+0x94a>
 8010796:	4638      	mov	r0, r7
 8010798:	e7ba      	b.n	8010710 <_dtoa_r+0x9d8>
 801079a:	2201      	movs	r2, #1
 801079c:	e7e2      	b.n	8010764 <_dtoa_r+0xa2c>
 801079e:	9b03      	ldr	r3, [sp, #12]
 80107a0:	2b00      	cmp	r3, #0
 80107a2:	db04      	blt.n	80107ae <_dtoa_r+0xa76>
 80107a4:	9906      	ldr	r1, [sp, #24]
 80107a6:	430b      	orrs	r3, r1
 80107a8:	9904      	ldr	r1, [sp, #16]
 80107aa:	430b      	orrs	r3, r1
 80107ac:	d122      	bne.n	80107f4 <_dtoa_r+0xabc>
 80107ae:	2a00      	cmp	r2, #0
 80107b0:	ddee      	ble.n	8010790 <_dtoa_r+0xa58>
 80107b2:	ee18 1a10 	vmov	r1, s16
 80107b6:	2201      	movs	r2, #1
 80107b8:	4620      	mov	r0, r4
 80107ba:	f001 f8b3 	bl	8011924 <__lshift>
 80107be:	4631      	mov	r1, r6
 80107c0:	ee08 0a10 	vmov	s16, r0
 80107c4:	f001 f91e 	bl	8011a04 <__mcmp>
 80107c8:	2800      	cmp	r0, #0
 80107ca:	dc03      	bgt.n	80107d4 <_dtoa_r+0xa9c>
 80107cc:	d1e0      	bne.n	8010790 <_dtoa_r+0xa58>
 80107ce:	f01a 0f01 	tst.w	sl, #1
 80107d2:	d0dd      	beq.n	8010790 <_dtoa_r+0xa58>
 80107d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80107d8:	d1d7      	bne.n	801078a <_dtoa_r+0xa52>
 80107da:	2339      	movs	r3, #57	; 0x39
 80107dc:	f88b 3000 	strb.w	r3, [fp]
 80107e0:	462b      	mov	r3, r5
 80107e2:	461d      	mov	r5, r3
 80107e4:	3b01      	subs	r3, #1
 80107e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80107ea:	2a39      	cmp	r2, #57	; 0x39
 80107ec:	d071      	beq.n	80108d2 <_dtoa_r+0xb9a>
 80107ee:	3201      	adds	r2, #1
 80107f0:	701a      	strb	r2, [r3, #0]
 80107f2:	e746      	b.n	8010682 <_dtoa_r+0x94a>
 80107f4:	2a00      	cmp	r2, #0
 80107f6:	dd07      	ble.n	8010808 <_dtoa_r+0xad0>
 80107f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80107fc:	d0ed      	beq.n	80107da <_dtoa_r+0xaa2>
 80107fe:	f10a 0301 	add.w	r3, sl, #1
 8010802:	f88b 3000 	strb.w	r3, [fp]
 8010806:	e73c      	b.n	8010682 <_dtoa_r+0x94a>
 8010808:	9b05      	ldr	r3, [sp, #20]
 801080a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801080e:	4599      	cmp	r9, r3
 8010810:	d047      	beq.n	80108a2 <_dtoa_r+0xb6a>
 8010812:	ee18 1a10 	vmov	r1, s16
 8010816:	2300      	movs	r3, #0
 8010818:	220a      	movs	r2, #10
 801081a:	4620      	mov	r0, r4
 801081c:	f000 fe88 	bl	8011530 <__multadd>
 8010820:	45b8      	cmp	r8, r7
 8010822:	ee08 0a10 	vmov	s16, r0
 8010826:	f04f 0300 	mov.w	r3, #0
 801082a:	f04f 020a 	mov.w	r2, #10
 801082e:	4641      	mov	r1, r8
 8010830:	4620      	mov	r0, r4
 8010832:	d106      	bne.n	8010842 <_dtoa_r+0xb0a>
 8010834:	f000 fe7c 	bl	8011530 <__multadd>
 8010838:	4680      	mov	r8, r0
 801083a:	4607      	mov	r7, r0
 801083c:	f109 0901 	add.w	r9, r9, #1
 8010840:	e772      	b.n	8010728 <_dtoa_r+0x9f0>
 8010842:	f000 fe75 	bl	8011530 <__multadd>
 8010846:	4639      	mov	r1, r7
 8010848:	4680      	mov	r8, r0
 801084a:	2300      	movs	r3, #0
 801084c:	220a      	movs	r2, #10
 801084e:	4620      	mov	r0, r4
 8010850:	f000 fe6e 	bl	8011530 <__multadd>
 8010854:	4607      	mov	r7, r0
 8010856:	e7f1      	b.n	801083c <_dtoa_r+0xb04>
 8010858:	9b03      	ldr	r3, [sp, #12]
 801085a:	9302      	str	r3, [sp, #8]
 801085c:	9d01      	ldr	r5, [sp, #4]
 801085e:	ee18 0a10 	vmov	r0, s16
 8010862:	4631      	mov	r1, r6
 8010864:	f7ff f9da 	bl	800fc1c <quorem>
 8010868:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801086c:	9b01      	ldr	r3, [sp, #4]
 801086e:	f805 ab01 	strb.w	sl, [r5], #1
 8010872:	1aea      	subs	r2, r5, r3
 8010874:	9b02      	ldr	r3, [sp, #8]
 8010876:	4293      	cmp	r3, r2
 8010878:	dd09      	ble.n	801088e <_dtoa_r+0xb56>
 801087a:	ee18 1a10 	vmov	r1, s16
 801087e:	2300      	movs	r3, #0
 8010880:	220a      	movs	r2, #10
 8010882:	4620      	mov	r0, r4
 8010884:	f000 fe54 	bl	8011530 <__multadd>
 8010888:	ee08 0a10 	vmov	s16, r0
 801088c:	e7e7      	b.n	801085e <_dtoa_r+0xb26>
 801088e:	9b02      	ldr	r3, [sp, #8]
 8010890:	2b00      	cmp	r3, #0
 8010892:	bfc8      	it	gt
 8010894:	461d      	movgt	r5, r3
 8010896:	9b01      	ldr	r3, [sp, #4]
 8010898:	bfd8      	it	le
 801089a:	2501      	movle	r5, #1
 801089c:	441d      	add	r5, r3
 801089e:	f04f 0800 	mov.w	r8, #0
 80108a2:	ee18 1a10 	vmov	r1, s16
 80108a6:	2201      	movs	r2, #1
 80108a8:	4620      	mov	r0, r4
 80108aa:	f001 f83b 	bl	8011924 <__lshift>
 80108ae:	4631      	mov	r1, r6
 80108b0:	ee08 0a10 	vmov	s16, r0
 80108b4:	f001 f8a6 	bl	8011a04 <__mcmp>
 80108b8:	2800      	cmp	r0, #0
 80108ba:	dc91      	bgt.n	80107e0 <_dtoa_r+0xaa8>
 80108bc:	d102      	bne.n	80108c4 <_dtoa_r+0xb8c>
 80108be:	f01a 0f01 	tst.w	sl, #1
 80108c2:	d18d      	bne.n	80107e0 <_dtoa_r+0xaa8>
 80108c4:	462b      	mov	r3, r5
 80108c6:	461d      	mov	r5, r3
 80108c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80108cc:	2a30      	cmp	r2, #48	; 0x30
 80108ce:	d0fa      	beq.n	80108c6 <_dtoa_r+0xb8e>
 80108d0:	e6d7      	b.n	8010682 <_dtoa_r+0x94a>
 80108d2:	9a01      	ldr	r2, [sp, #4]
 80108d4:	429a      	cmp	r2, r3
 80108d6:	d184      	bne.n	80107e2 <_dtoa_r+0xaaa>
 80108d8:	9b00      	ldr	r3, [sp, #0]
 80108da:	3301      	adds	r3, #1
 80108dc:	9300      	str	r3, [sp, #0]
 80108de:	2331      	movs	r3, #49	; 0x31
 80108e0:	7013      	strb	r3, [r2, #0]
 80108e2:	e6ce      	b.n	8010682 <_dtoa_r+0x94a>
 80108e4:	4b09      	ldr	r3, [pc, #36]	; (801090c <_dtoa_r+0xbd4>)
 80108e6:	f7ff ba95 	b.w	800fe14 <_dtoa_r+0xdc>
 80108ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	f47f aa6e 	bne.w	800fdce <_dtoa_r+0x96>
 80108f2:	4b07      	ldr	r3, [pc, #28]	; (8010910 <_dtoa_r+0xbd8>)
 80108f4:	f7ff ba8e 	b.w	800fe14 <_dtoa_r+0xdc>
 80108f8:	9b02      	ldr	r3, [sp, #8]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	dcae      	bgt.n	801085c <_dtoa_r+0xb24>
 80108fe:	9b06      	ldr	r3, [sp, #24]
 8010900:	2b02      	cmp	r3, #2
 8010902:	f73f aea8 	bgt.w	8010656 <_dtoa_r+0x91e>
 8010906:	e7a9      	b.n	801085c <_dtoa_r+0xb24>
 8010908:	08013e28 	.word	0x08013e28
 801090c:	08013c30 	.word	0x08013c30
 8010910:	08013da9 	.word	0x08013da9

08010914 <__sflush_r>:
 8010914:	898a      	ldrh	r2, [r1, #12]
 8010916:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801091a:	4605      	mov	r5, r0
 801091c:	0710      	lsls	r0, r2, #28
 801091e:	460c      	mov	r4, r1
 8010920:	d458      	bmi.n	80109d4 <__sflush_r+0xc0>
 8010922:	684b      	ldr	r3, [r1, #4]
 8010924:	2b00      	cmp	r3, #0
 8010926:	dc05      	bgt.n	8010934 <__sflush_r+0x20>
 8010928:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801092a:	2b00      	cmp	r3, #0
 801092c:	dc02      	bgt.n	8010934 <__sflush_r+0x20>
 801092e:	2000      	movs	r0, #0
 8010930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010934:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010936:	2e00      	cmp	r6, #0
 8010938:	d0f9      	beq.n	801092e <__sflush_r+0x1a>
 801093a:	2300      	movs	r3, #0
 801093c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010940:	682f      	ldr	r7, [r5, #0]
 8010942:	602b      	str	r3, [r5, #0]
 8010944:	d032      	beq.n	80109ac <__sflush_r+0x98>
 8010946:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010948:	89a3      	ldrh	r3, [r4, #12]
 801094a:	075a      	lsls	r2, r3, #29
 801094c:	d505      	bpl.n	801095a <__sflush_r+0x46>
 801094e:	6863      	ldr	r3, [r4, #4]
 8010950:	1ac0      	subs	r0, r0, r3
 8010952:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010954:	b10b      	cbz	r3, 801095a <__sflush_r+0x46>
 8010956:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010958:	1ac0      	subs	r0, r0, r3
 801095a:	2300      	movs	r3, #0
 801095c:	4602      	mov	r2, r0
 801095e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010960:	6a21      	ldr	r1, [r4, #32]
 8010962:	4628      	mov	r0, r5
 8010964:	47b0      	blx	r6
 8010966:	1c43      	adds	r3, r0, #1
 8010968:	89a3      	ldrh	r3, [r4, #12]
 801096a:	d106      	bne.n	801097a <__sflush_r+0x66>
 801096c:	6829      	ldr	r1, [r5, #0]
 801096e:	291d      	cmp	r1, #29
 8010970:	d82c      	bhi.n	80109cc <__sflush_r+0xb8>
 8010972:	4a2a      	ldr	r2, [pc, #168]	; (8010a1c <__sflush_r+0x108>)
 8010974:	40ca      	lsrs	r2, r1
 8010976:	07d6      	lsls	r6, r2, #31
 8010978:	d528      	bpl.n	80109cc <__sflush_r+0xb8>
 801097a:	2200      	movs	r2, #0
 801097c:	6062      	str	r2, [r4, #4]
 801097e:	04d9      	lsls	r1, r3, #19
 8010980:	6922      	ldr	r2, [r4, #16]
 8010982:	6022      	str	r2, [r4, #0]
 8010984:	d504      	bpl.n	8010990 <__sflush_r+0x7c>
 8010986:	1c42      	adds	r2, r0, #1
 8010988:	d101      	bne.n	801098e <__sflush_r+0x7a>
 801098a:	682b      	ldr	r3, [r5, #0]
 801098c:	b903      	cbnz	r3, 8010990 <__sflush_r+0x7c>
 801098e:	6560      	str	r0, [r4, #84]	; 0x54
 8010990:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010992:	602f      	str	r7, [r5, #0]
 8010994:	2900      	cmp	r1, #0
 8010996:	d0ca      	beq.n	801092e <__sflush_r+0x1a>
 8010998:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801099c:	4299      	cmp	r1, r3
 801099e:	d002      	beq.n	80109a6 <__sflush_r+0x92>
 80109a0:	4628      	mov	r0, r5
 80109a2:	f001 fa3b 	bl	8011e1c <_free_r>
 80109a6:	2000      	movs	r0, #0
 80109a8:	6360      	str	r0, [r4, #52]	; 0x34
 80109aa:	e7c1      	b.n	8010930 <__sflush_r+0x1c>
 80109ac:	6a21      	ldr	r1, [r4, #32]
 80109ae:	2301      	movs	r3, #1
 80109b0:	4628      	mov	r0, r5
 80109b2:	47b0      	blx	r6
 80109b4:	1c41      	adds	r1, r0, #1
 80109b6:	d1c7      	bne.n	8010948 <__sflush_r+0x34>
 80109b8:	682b      	ldr	r3, [r5, #0]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d0c4      	beq.n	8010948 <__sflush_r+0x34>
 80109be:	2b1d      	cmp	r3, #29
 80109c0:	d001      	beq.n	80109c6 <__sflush_r+0xb2>
 80109c2:	2b16      	cmp	r3, #22
 80109c4:	d101      	bne.n	80109ca <__sflush_r+0xb6>
 80109c6:	602f      	str	r7, [r5, #0]
 80109c8:	e7b1      	b.n	801092e <__sflush_r+0x1a>
 80109ca:	89a3      	ldrh	r3, [r4, #12]
 80109cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109d0:	81a3      	strh	r3, [r4, #12]
 80109d2:	e7ad      	b.n	8010930 <__sflush_r+0x1c>
 80109d4:	690f      	ldr	r7, [r1, #16]
 80109d6:	2f00      	cmp	r7, #0
 80109d8:	d0a9      	beq.n	801092e <__sflush_r+0x1a>
 80109da:	0793      	lsls	r3, r2, #30
 80109dc:	680e      	ldr	r6, [r1, #0]
 80109de:	bf08      	it	eq
 80109e0:	694b      	ldreq	r3, [r1, #20]
 80109e2:	600f      	str	r7, [r1, #0]
 80109e4:	bf18      	it	ne
 80109e6:	2300      	movne	r3, #0
 80109e8:	eba6 0807 	sub.w	r8, r6, r7
 80109ec:	608b      	str	r3, [r1, #8]
 80109ee:	f1b8 0f00 	cmp.w	r8, #0
 80109f2:	dd9c      	ble.n	801092e <__sflush_r+0x1a>
 80109f4:	6a21      	ldr	r1, [r4, #32]
 80109f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109f8:	4643      	mov	r3, r8
 80109fa:	463a      	mov	r2, r7
 80109fc:	4628      	mov	r0, r5
 80109fe:	47b0      	blx	r6
 8010a00:	2800      	cmp	r0, #0
 8010a02:	dc06      	bgt.n	8010a12 <__sflush_r+0xfe>
 8010a04:	89a3      	ldrh	r3, [r4, #12]
 8010a06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a0a:	81a3      	strh	r3, [r4, #12]
 8010a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8010a10:	e78e      	b.n	8010930 <__sflush_r+0x1c>
 8010a12:	4407      	add	r7, r0
 8010a14:	eba8 0800 	sub.w	r8, r8, r0
 8010a18:	e7e9      	b.n	80109ee <__sflush_r+0xda>
 8010a1a:	bf00      	nop
 8010a1c:	20400001 	.word	0x20400001

08010a20 <_fflush_r>:
 8010a20:	b538      	push	{r3, r4, r5, lr}
 8010a22:	690b      	ldr	r3, [r1, #16]
 8010a24:	4605      	mov	r5, r0
 8010a26:	460c      	mov	r4, r1
 8010a28:	b913      	cbnz	r3, 8010a30 <_fflush_r+0x10>
 8010a2a:	2500      	movs	r5, #0
 8010a2c:	4628      	mov	r0, r5
 8010a2e:	bd38      	pop	{r3, r4, r5, pc}
 8010a30:	b118      	cbz	r0, 8010a3a <_fflush_r+0x1a>
 8010a32:	6983      	ldr	r3, [r0, #24]
 8010a34:	b90b      	cbnz	r3, 8010a3a <_fflush_r+0x1a>
 8010a36:	f000 f887 	bl	8010b48 <__sinit>
 8010a3a:	4b14      	ldr	r3, [pc, #80]	; (8010a8c <_fflush_r+0x6c>)
 8010a3c:	429c      	cmp	r4, r3
 8010a3e:	d11b      	bne.n	8010a78 <_fflush_r+0x58>
 8010a40:	686c      	ldr	r4, [r5, #4]
 8010a42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d0ef      	beq.n	8010a2a <_fflush_r+0xa>
 8010a4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010a4c:	07d0      	lsls	r0, r2, #31
 8010a4e:	d404      	bmi.n	8010a5a <_fflush_r+0x3a>
 8010a50:	0599      	lsls	r1, r3, #22
 8010a52:	d402      	bmi.n	8010a5a <_fflush_r+0x3a>
 8010a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a56:	f000 fc88 	bl	801136a <__retarget_lock_acquire_recursive>
 8010a5a:	4628      	mov	r0, r5
 8010a5c:	4621      	mov	r1, r4
 8010a5e:	f7ff ff59 	bl	8010914 <__sflush_r>
 8010a62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a64:	07da      	lsls	r2, r3, #31
 8010a66:	4605      	mov	r5, r0
 8010a68:	d4e0      	bmi.n	8010a2c <_fflush_r+0xc>
 8010a6a:	89a3      	ldrh	r3, [r4, #12]
 8010a6c:	059b      	lsls	r3, r3, #22
 8010a6e:	d4dd      	bmi.n	8010a2c <_fflush_r+0xc>
 8010a70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a72:	f000 fc7b 	bl	801136c <__retarget_lock_release_recursive>
 8010a76:	e7d9      	b.n	8010a2c <_fflush_r+0xc>
 8010a78:	4b05      	ldr	r3, [pc, #20]	; (8010a90 <_fflush_r+0x70>)
 8010a7a:	429c      	cmp	r4, r3
 8010a7c:	d101      	bne.n	8010a82 <_fflush_r+0x62>
 8010a7e:	68ac      	ldr	r4, [r5, #8]
 8010a80:	e7df      	b.n	8010a42 <_fflush_r+0x22>
 8010a82:	4b04      	ldr	r3, [pc, #16]	; (8010a94 <_fflush_r+0x74>)
 8010a84:	429c      	cmp	r4, r3
 8010a86:	bf08      	it	eq
 8010a88:	68ec      	ldreq	r4, [r5, #12]
 8010a8a:	e7da      	b.n	8010a42 <_fflush_r+0x22>
 8010a8c:	08013e5c 	.word	0x08013e5c
 8010a90:	08013e7c 	.word	0x08013e7c
 8010a94:	08013e3c 	.word	0x08013e3c

08010a98 <std>:
 8010a98:	2300      	movs	r3, #0
 8010a9a:	b510      	push	{r4, lr}
 8010a9c:	4604      	mov	r4, r0
 8010a9e:	e9c0 3300 	strd	r3, r3, [r0]
 8010aa2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010aa6:	6083      	str	r3, [r0, #8]
 8010aa8:	8181      	strh	r1, [r0, #12]
 8010aaa:	6643      	str	r3, [r0, #100]	; 0x64
 8010aac:	81c2      	strh	r2, [r0, #14]
 8010aae:	6183      	str	r3, [r0, #24]
 8010ab0:	4619      	mov	r1, r3
 8010ab2:	2208      	movs	r2, #8
 8010ab4:	305c      	adds	r0, #92	; 0x5c
 8010ab6:	f7fd fc35 	bl	800e324 <memset>
 8010aba:	4b05      	ldr	r3, [pc, #20]	; (8010ad0 <std+0x38>)
 8010abc:	6263      	str	r3, [r4, #36]	; 0x24
 8010abe:	4b05      	ldr	r3, [pc, #20]	; (8010ad4 <std+0x3c>)
 8010ac0:	62a3      	str	r3, [r4, #40]	; 0x28
 8010ac2:	4b05      	ldr	r3, [pc, #20]	; (8010ad8 <std+0x40>)
 8010ac4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010ac6:	4b05      	ldr	r3, [pc, #20]	; (8010adc <std+0x44>)
 8010ac8:	6224      	str	r4, [r4, #32]
 8010aca:	6323      	str	r3, [r4, #48]	; 0x30
 8010acc:	bd10      	pop	{r4, pc}
 8010ace:	bf00      	nop
 8010ad0:	080122c1 	.word	0x080122c1
 8010ad4:	080122e3 	.word	0x080122e3
 8010ad8:	0801231b 	.word	0x0801231b
 8010adc:	0801233f 	.word	0x0801233f

08010ae0 <_cleanup_r>:
 8010ae0:	4901      	ldr	r1, [pc, #4]	; (8010ae8 <_cleanup_r+0x8>)
 8010ae2:	f000 b8af 	b.w	8010c44 <_fwalk_reent>
 8010ae6:	bf00      	nop
 8010ae8:	08010a21 	.word	0x08010a21

08010aec <__sfmoreglue>:
 8010aec:	b570      	push	{r4, r5, r6, lr}
 8010aee:	2268      	movs	r2, #104	; 0x68
 8010af0:	1e4d      	subs	r5, r1, #1
 8010af2:	4355      	muls	r5, r2
 8010af4:	460e      	mov	r6, r1
 8010af6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010afa:	f001 f9fb 	bl	8011ef4 <_malloc_r>
 8010afe:	4604      	mov	r4, r0
 8010b00:	b140      	cbz	r0, 8010b14 <__sfmoreglue+0x28>
 8010b02:	2100      	movs	r1, #0
 8010b04:	e9c0 1600 	strd	r1, r6, [r0]
 8010b08:	300c      	adds	r0, #12
 8010b0a:	60a0      	str	r0, [r4, #8]
 8010b0c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010b10:	f7fd fc08 	bl	800e324 <memset>
 8010b14:	4620      	mov	r0, r4
 8010b16:	bd70      	pop	{r4, r5, r6, pc}

08010b18 <__sfp_lock_acquire>:
 8010b18:	4801      	ldr	r0, [pc, #4]	; (8010b20 <__sfp_lock_acquire+0x8>)
 8010b1a:	f000 bc26 	b.w	801136a <__retarget_lock_acquire_recursive>
 8010b1e:	bf00      	nop
 8010b20:	2000516d 	.word	0x2000516d

08010b24 <__sfp_lock_release>:
 8010b24:	4801      	ldr	r0, [pc, #4]	; (8010b2c <__sfp_lock_release+0x8>)
 8010b26:	f000 bc21 	b.w	801136c <__retarget_lock_release_recursive>
 8010b2a:	bf00      	nop
 8010b2c:	2000516d 	.word	0x2000516d

08010b30 <__sinit_lock_acquire>:
 8010b30:	4801      	ldr	r0, [pc, #4]	; (8010b38 <__sinit_lock_acquire+0x8>)
 8010b32:	f000 bc1a 	b.w	801136a <__retarget_lock_acquire_recursive>
 8010b36:	bf00      	nop
 8010b38:	2000516e 	.word	0x2000516e

08010b3c <__sinit_lock_release>:
 8010b3c:	4801      	ldr	r0, [pc, #4]	; (8010b44 <__sinit_lock_release+0x8>)
 8010b3e:	f000 bc15 	b.w	801136c <__retarget_lock_release_recursive>
 8010b42:	bf00      	nop
 8010b44:	2000516e 	.word	0x2000516e

08010b48 <__sinit>:
 8010b48:	b510      	push	{r4, lr}
 8010b4a:	4604      	mov	r4, r0
 8010b4c:	f7ff fff0 	bl	8010b30 <__sinit_lock_acquire>
 8010b50:	69a3      	ldr	r3, [r4, #24]
 8010b52:	b11b      	cbz	r3, 8010b5c <__sinit+0x14>
 8010b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b58:	f7ff bff0 	b.w	8010b3c <__sinit_lock_release>
 8010b5c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b60:	6523      	str	r3, [r4, #80]	; 0x50
 8010b62:	4b13      	ldr	r3, [pc, #76]	; (8010bb0 <__sinit+0x68>)
 8010b64:	4a13      	ldr	r2, [pc, #76]	; (8010bb4 <__sinit+0x6c>)
 8010b66:	681b      	ldr	r3, [r3, #0]
 8010b68:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b6a:	42a3      	cmp	r3, r4
 8010b6c:	bf04      	itt	eq
 8010b6e:	2301      	moveq	r3, #1
 8010b70:	61a3      	streq	r3, [r4, #24]
 8010b72:	4620      	mov	r0, r4
 8010b74:	f000 f820 	bl	8010bb8 <__sfp>
 8010b78:	6060      	str	r0, [r4, #4]
 8010b7a:	4620      	mov	r0, r4
 8010b7c:	f000 f81c 	bl	8010bb8 <__sfp>
 8010b80:	60a0      	str	r0, [r4, #8]
 8010b82:	4620      	mov	r0, r4
 8010b84:	f000 f818 	bl	8010bb8 <__sfp>
 8010b88:	2200      	movs	r2, #0
 8010b8a:	60e0      	str	r0, [r4, #12]
 8010b8c:	2104      	movs	r1, #4
 8010b8e:	6860      	ldr	r0, [r4, #4]
 8010b90:	f7ff ff82 	bl	8010a98 <std>
 8010b94:	68a0      	ldr	r0, [r4, #8]
 8010b96:	2201      	movs	r2, #1
 8010b98:	2109      	movs	r1, #9
 8010b9a:	f7ff ff7d 	bl	8010a98 <std>
 8010b9e:	68e0      	ldr	r0, [r4, #12]
 8010ba0:	2202      	movs	r2, #2
 8010ba2:	2112      	movs	r1, #18
 8010ba4:	f7ff ff78 	bl	8010a98 <std>
 8010ba8:	2301      	movs	r3, #1
 8010baa:	61a3      	str	r3, [r4, #24]
 8010bac:	e7d2      	b.n	8010b54 <__sinit+0xc>
 8010bae:	bf00      	nop
 8010bb0:	08013c1c 	.word	0x08013c1c
 8010bb4:	08010ae1 	.word	0x08010ae1

08010bb8 <__sfp>:
 8010bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010bba:	4607      	mov	r7, r0
 8010bbc:	f7ff ffac 	bl	8010b18 <__sfp_lock_acquire>
 8010bc0:	4b1e      	ldr	r3, [pc, #120]	; (8010c3c <__sfp+0x84>)
 8010bc2:	681e      	ldr	r6, [r3, #0]
 8010bc4:	69b3      	ldr	r3, [r6, #24]
 8010bc6:	b913      	cbnz	r3, 8010bce <__sfp+0x16>
 8010bc8:	4630      	mov	r0, r6
 8010bca:	f7ff ffbd 	bl	8010b48 <__sinit>
 8010bce:	3648      	adds	r6, #72	; 0x48
 8010bd0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010bd4:	3b01      	subs	r3, #1
 8010bd6:	d503      	bpl.n	8010be0 <__sfp+0x28>
 8010bd8:	6833      	ldr	r3, [r6, #0]
 8010bda:	b30b      	cbz	r3, 8010c20 <__sfp+0x68>
 8010bdc:	6836      	ldr	r6, [r6, #0]
 8010bde:	e7f7      	b.n	8010bd0 <__sfp+0x18>
 8010be0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010be4:	b9d5      	cbnz	r5, 8010c1c <__sfp+0x64>
 8010be6:	4b16      	ldr	r3, [pc, #88]	; (8010c40 <__sfp+0x88>)
 8010be8:	60e3      	str	r3, [r4, #12]
 8010bea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010bee:	6665      	str	r5, [r4, #100]	; 0x64
 8010bf0:	f000 fbba 	bl	8011368 <__retarget_lock_init_recursive>
 8010bf4:	f7ff ff96 	bl	8010b24 <__sfp_lock_release>
 8010bf8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010bfc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010c00:	6025      	str	r5, [r4, #0]
 8010c02:	61a5      	str	r5, [r4, #24]
 8010c04:	2208      	movs	r2, #8
 8010c06:	4629      	mov	r1, r5
 8010c08:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010c0c:	f7fd fb8a 	bl	800e324 <memset>
 8010c10:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010c14:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010c18:	4620      	mov	r0, r4
 8010c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010c1c:	3468      	adds	r4, #104	; 0x68
 8010c1e:	e7d9      	b.n	8010bd4 <__sfp+0x1c>
 8010c20:	2104      	movs	r1, #4
 8010c22:	4638      	mov	r0, r7
 8010c24:	f7ff ff62 	bl	8010aec <__sfmoreglue>
 8010c28:	4604      	mov	r4, r0
 8010c2a:	6030      	str	r0, [r6, #0]
 8010c2c:	2800      	cmp	r0, #0
 8010c2e:	d1d5      	bne.n	8010bdc <__sfp+0x24>
 8010c30:	f7ff ff78 	bl	8010b24 <__sfp_lock_release>
 8010c34:	230c      	movs	r3, #12
 8010c36:	603b      	str	r3, [r7, #0]
 8010c38:	e7ee      	b.n	8010c18 <__sfp+0x60>
 8010c3a:	bf00      	nop
 8010c3c:	08013c1c 	.word	0x08013c1c
 8010c40:	ffff0001 	.word	0xffff0001

08010c44 <_fwalk_reent>:
 8010c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010c48:	4606      	mov	r6, r0
 8010c4a:	4688      	mov	r8, r1
 8010c4c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010c50:	2700      	movs	r7, #0
 8010c52:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c56:	f1b9 0901 	subs.w	r9, r9, #1
 8010c5a:	d505      	bpl.n	8010c68 <_fwalk_reent+0x24>
 8010c5c:	6824      	ldr	r4, [r4, #0]
 8010c5e:	2c00      	cmp	r4, #0
 8010c60:	d1f7      	bne.n	8010c52 <_fwalk_reent+0xe>
 8010c62:	4638      	mov	r0, r7
 8010c64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c68:	89ab      	ldrh	r3, [r5, #12]
 8010c6a:	2b01      	cmp	r3, #1
 8010c6c:	d907      	bls.n	8010c7e <_fwalk_reent+0x3a>
 8010c6e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c72:	3301      	adds	r3, #1
 8010c74:	d003      	beq.n	8010c7e <_fwalk_reent+0x3a>
 8010c76:	4629      	mov	r1, r5
 8010c78:	4630      	mov	r0, r6
 8010c7a:	47c0      	blx	r8
 8010c7c:	4307      	orrs	r7, r0
 8010c7e:	3568      	adds	r5, #104	; 0x68
 8010c80:	e7e9      	b.n	8010c56 <_fwalk_reent+0x12>

08010c82 <rshift>:
 8010c82:	6903      	ldr	r3, [r0, #16]
 8010c84:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8010c88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010c8c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8010c90:	f100 0414 	add.w	r4, r0, #20
 8010c94:	dd45      	ble.n	8010d22 <rshift+0xa0>
 8010c96:	f011 011f 	ands.w	r1, r1, #31
 8010c9a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8010c9e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8010ca2:	d10c      	bne.n	8010cbe <rshift+0x3c>
 8010ca4:	f100 0710 	add.w	r7, r0, #16
 8010ca8:	4629      	mov	r1, r5
 8010caa:	42b1      	cmp	r1, r6
 8010cac:	d334      	bcc.n	8010d18 <rshift+0x96>
 8010cae:	1a9b      	subs	r3, r3, r2
 8010cb0:	009b      	lsls	r3, r3, #2
 8010cb2:	1eea      	subs	r2, r5, #3
 8010cb4:	4296      	cmp	r6, r2
 8010cb6:	bf38      	it	cc
 8010cb8:	2300      	movcc	r3, #0
 8010cba:	4423      	add	r3, r4
 8010cbc:	e015      	b.n	8010cea <rshift+0x68>
 8010cbe:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8010cc2:	f1c1 0820 	rsb	r8, r1, #32
 8010cc6:	40cf      	lsrs	r7, r1
 8010cc8:	f105 0e04 	add.w	lr, r5, #4
 8010ccc:	46a1      	mov	r9, r4
 8010cce:	4576      	cmp	r6, lr
 8010cd0:	46f4      	mov	ip, lr
 8010cd2:	d815      	bhi.n	8010d00 <rshift+0x7e>
 8010cd4:	1a9a      	subs	r2, r3, r2
 8010cd6:	0092      	lsls	r2, r2, #2
 8010cd8:	3a04      	subs	r2, #4
 8010cda:	3501      	adds	r5, #1
 8010cdc:	42ae      	cmp	r6, r5
 8010cde:	bf38      	it	cc
 8010ce0:	2200      	movcc	r2, #0
 8010ce2:	18a3      	adds	r3, r4, r2
 8010ce4:	50a7      	str	r7, [r4, r2]
 8010ce6:	b107      	cbz	r7, 8010cea <rshift+0x68>
 8010ce8:	3304      	adds	r3, #4
 8010cea:	1b1a      	subs	r2, r3, r4
 8010cec:	42a3      	cmp	r3, r4
 8010cee:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8010cf2:	bf08      	it	eq
 8010cf4:	2300      	moveq	r3, #0
 8010cf6:	6102      	str	r2, [r0, #16]
 8010cf8:	bf08      	it	eq
 8010cfa:	6143      	streq	r3, [r0, #20]
 8010cfc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010d00:	f8dc c000 	ldr.w	ip, [ip]
 8010d04:	fa0c fc08 	lsl.w	ip, ip, r8
 8010d08:	ea4c 0707 	orr.w	r7, ip, r7
 8010d0c:	f849 7b04 	str.w	r7, [r9], #4
 8010d10:	f85e 7b04 	ldr.w	r7, [lr], #4
 8010d14:	40cf      	lsrs	r7, r1
 8010d16:	e7da      	b.n	8010cce <rshift+0x4c>
 8010d18:	f851 cb04 	ldr.w	ip, [r1], #4
 8010d1c:	f847 cf04 	str.w	ip, [r7, #4]!
 8010d20:	e7c3      	b.n	8010caa <rshift+0x28>
 8010d22:	4623      	mov	r3, r4
 8010d24:	e7e1      	b.n	8010cea <rshift+0x68>

08010d26 <__hexdig_fun>:
 8010d26:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8010d2a:	2b09      	cmp	r3, #9
 8010d2c:	d802      	bhi.n	8010d34 <__hexdig_fun+0xe>
 8010d2e:	3820      	subs	r0, #32
 8010d30:	b2c0      	uxtb	r0, r0
 8010d32:	4770      	bx	lr
 8010d34:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8010d38:	2b05      	cmp	r3, #5
 8010d3a:	d801      	bhi.n	8010d40 <__hexdig_fun+0x1a>
 8010d3c:	3847      	subs	r0, #71	; 0x47
 8010d3e:	e7f7      	b.n	8010d30 <__hexdig_fun+0xa>
 8010d40:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8010d44:	2b05      	cmp	r3, #5
 8010d46:	d801      	bhi.n	8010d4c <__hexdig_fun+0x26>
 8010d48:	3827      	subs	r0, #39	; 0x27
 8010d4a:	e7f1      	b.n	8010d30 <__hexdig_fun+0xa>
 8010d4c:	2000      	movs	r0, #0
 8010d4e:	4770      	bx	lr

08010d50 <__gethex>:
 8010d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d54:	ed2d 8b02 	vpush	{d8}
 8010d58:	b089      	sub	sp, #36	; 0x24
 8010d5a:	ee08 0a10 	vmov	s16, r0
 8010d5e:	9304      	str	r3, [sp, #16]
 8010d60:	4bb4      	ldr	r3, [pc, #720]	; (8011034 <__gethex+0x2e4>)
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	9301      	str	r3, [sp, #4]
 8010d66:	4618      	mov	r0, r3
 8010d68:	468b      	mov	fp, r1
 8010d6a:	4690      	mov	r8, r2
 8010d6c:	f7ef fa58 	bl	8000220 <strlen>
 8010d70:	9b01      	ldr	r3, [sp, #4]
 8010d72:	f8db 2000 	ldr.w	r2, [fp]
 8010d76:	4403      	add	r3, r0
 8010d78:	4682      	mov	sl, r0
 8010d7a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010d7e:	9305      	str	r3, [sp, #20]
 8010d80:	1c93      	adds	r3, r2, #2
 8010d82:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8010d86:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8010d8a:	32fe      	adds	r2, #254	; 0xfe
 8010d8c:	18d1      	adds	r1, r2, r3
 8010d8e:	461f      	mov	r7, r3
 8010d90:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010d94:	9100      	str	r1, [sp, #0]
 8010d96:	2830      	cmp	r0, #48	; 0x30
 8010d98:	d0f8      	beq.n	8010d8c <__gethex+0x3c>
 8010d9a:	f7ff ffc4 	bl	8010d26 <__hexdig_fun>
 8010d9e:	4604      	mov	r4, r0
 8010da0:	2800      	cmp	r0, #0
 8010da2:	d13a      	bne.n	8010e1a <__gethex+0xca>
 8010da4:	9901      	ldr	r1, [sp, #4]
 8010da6:	4652      	mov	r2, sl
 8010da8:	4638      	mov	r0, r7
 8010daa:	f001 facc 	bl	8012346 <strncmp>
 8010dae:	4605      	mov	r5, r0
 8010db0:	2800      	cmp	r0, #0
 8010db2:	d168      	bne.n	8010e86 <__gethex+0x136>
 8010db4:	f817 000a 	ldrb.w	r0, [r7, sl]
 8010db8:	eb07 060a 	add.w	r6, r7, sl
 8010dbc:	f7ff ffb3 	bl	8010d26 <__hexdig_fun>
 8010dc0:	2800      	cmp	r0, #0
 8010dc2:	d062      	beq.n	8010e8a <__gethex+0x13a>
 8010dc4:	4633      	mov	r3, r6
 8010dc6:	7818      	ldrb	r0, [r3, #0]
 8010dc8:	2830      	cmp	r0, #48	; 0x30
 8010dca:	461f      	mov	r7, r3
 8010dcc:	f103 0301 	add.w	r3, r3, #1
 8010dd0:	d0f9      	beq.n	8010dc6 <__gethex+0x76>
 8010dd2:	f7ff ffa8 	bl	8010d26 <__hexdig_fun>
 8010dd6:	2301      	movs	r3, #1
 8010dd8:	fab0 f480 	clz	r4, r0
 8010ddc:	0964      	lsrs	r4, r4, #5
 8010dde:	4635      	mov	r5, r6
 8010de0:	9300      	str	r3, [sp, #0]
 8010de2:	463a      	mov	r2, r7
 8010de4:	4616      	mov	r6, r2
 8010de6:	3201      	adds	r2, #1
 8010de8:	7830      	ldrb	r0, [r6, #0]
 8010dea:	f7ff ff9c 	bl	8010d26 <__hexdig_fun>
 8010dee:	2800      	cmp	r0, #0
 8010df0:	d1f8      	bne.n	8010de4 <__gethex+0x94>
 8010df2:	9901      	ldr	r1, [sp, #4]
 8010df4:	4652      	mov	r2, sl
 8010df6:	4630      	mov	r0, r6
 8010df8:	f001 faa5 	bl	8012346 <strncmp>
 8010dfc:	b980      	cbnz	r0, 8010e20 <__gethex+0xd0>
 8010dfe:	b94d      	cbnz	r5, 8010e14 <__gethex+0xc4>
 8010e00:	eb06 050a 	add.w	r5, r6, sl
 8010e04:	462a      	mov	r2, r5
 8010e06:	4616      	mov	r6, r2
 8010e08:	3201      	adds	r2, #1
 8010e0a:	7830      	ldrb	r0, [r6, #0]
 8010e0c:	f7ff ff8b 	bl	8010d26 <__hexdig_fun>
 8010e10:	2800      	cmp	r0, #0
 8010e12:	d1f8      	bne.n	8010e06 <__gethex+0xb6>
 8010e14:	1bad      	subs	r5, r5, r6
 8010e16:	00ad      	lsls	r5, r5, #2
 8010e18:	e004      	b.n	8010e24 <__gethex+0xd4>
 8010e1a:	2400      	movs	r4, #0
 8010e1c:	4625      	mov	r5, r4
 8010e1e:	e7e0      	b.n	8010de2 <__gethex+0x92>
 8010e20:	2d00      	cmp	r5, #0
 8010e22:	d1f7      	bne.n	8010e14 <__gethex+0xc4>
 8010e24:	7833      	ldrb	r3, [r6, #0]
 8010e26:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8010e2a:	2b50      	cmp	r3, #80	; 0x50
 8010e2c:	d13b      	bne.n	8010ea6 <__gethex+0x156>
 8010e2e:	7873      	ldrb	r3, [r6, #1]
 8010e30:	2b2b      	cmp	r3, #43	; 0x2b
 8010e32:	d02c      	beq.n	8010e8e <__gethex+0x13e>
 8010e34:	2b2d      	cmp	r3, #45	; 0x2d
 8010e36:	d02e      	beq.n	8010e96 <__gethex+0x146>
 8010e38:	1c71      	adds	r1, r6, #1
 8010e3a:	f04f 0900 	mov.w	r9, #0
 8010e3e:	7808      	ldrb	r0, [r1, #0]
 8010e40:	f7ff ff71 	bl	8010d26 <__hexdig_fun>
 8010e44:	1e43      	subs	r3, r0, #1
 8010e46:	b2db      	uxtb	r3, r3
 8010e48:	2b18      	cmp	r3, #24
 8010e4a:	d82c      	bhi.n	8010ea6 <__gethex+0x156>
 8010e4c:	f1a0 0210 	sub.w	r2, r0, #16
 8010e50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8010e54:	f7ff ff67 	bl	8010d26 <__hexdig_fun>
 8010e58:	1e43      	subs	r3, r0, #1
 8010e5a:	b2db      	uxtb	r3, r3
 8010e5c:	2b18      	cmp	r3, #24
 8010e5e:	d91d      	bls.n	8010e9c <__gethex+0x14c>
 8010e60:	f1b9 0f00 	cmp.w	r9, #0
 8010e64:	d000      	beq.n	8010e68 <__gethex+0x118>
 8010e66:	4252      	negs	r2, r2
 8010e68:	4415      	add	r5, r2
 8010e6a:	f8cb 1000 	str.w	r1, [fp]
 8010e6e:	b1e4      	cbz	r4, 8010eaa <__gethex+0x15a>
 8010e70:	9b00      	ldr	r3, [sp, #0]
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	bf14      	ite	ne
 8010e76:	2700      	movne	r7, #0
 8010e78:	2706      	moveq	r7, #6
 8010e7a:	4638      	mov	r0, r7
 8010e7c:	b009      	add	sp, #36	; 0x24
 8010e7e:	ecbd 8b02 	vpop	{d8}
 8010e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e86:	463e      	mov	r6, r7
 8010e88:	4625      	mov	r5, r4
 8010e8a:	2401      	movs	r4, #1
 8010e8c:	e7ca      	b.n	8010e24 <__gethex+0xd4>
 8010e8e:	f04f 0900 	mov.w	r9, #0
 8010e92:	1cb1      	adds	r1, r6, #2
 8010e94:	e7d3      	b.n	8010e3e <__gethex+0xee>
 8010e96:	f04f 0901 	mov.w	r9, #1
 8010e9a:	e7fa      	b.n	8010e92 <__gethex+0x142>
 8010e9c:	230a      	movs	r3, #10
 8010e9e:	fb03 0202 	mla	r2, r3, r2, r0
 8010ea2:	3a10      	subs	r2, #16
 8010ea4:	e7d4      	b.n	8010e50 <__gethex+0x100>
 8010ea6:	4631      	mov	r1, r6
 8010ea8:	e7df      	b.n	8010e6a <__gethex+0x11a>
 8010eaa:	1bf3      	subs	r3, r6, r7
 8010eac:	3b01      	subs	r3, #1
 8010eae:	4621      	mov	r1, r4
 8010eb0:	2b07      	cmp	r3, #7
 8010eb2:	dc0b      	bgt.n	8010ecc <__gethex+0x17c>
 8010eb4:	ee18 0a10 	vmov	r0, s16
 8010eb8:	f000 fad8 	bl	801146c <_Balloc>
 8010ebc:	4604      	mov	r4, r0
 8010ebe:	b940      	cbnz	r0, 8010ed2 <__gethex+0x182>
 8010ec0:	4b5d      	ldr	r3, [pc, #372]	; (8011038 <__gethex+0x2e8>)
 8010ec2:	4602      	mov	r2, r0
 8010ec4:	21de      	movs	r1, #222	; 0xde
 8010ec6:	485d      	ldr	r0, [pc, #372]	; (801103c <__gethex+0x2ec>)
 8010ec8:	f001 fa70 	bl	80123ac <__assert_func>
 8010ecc:	3101      	adds	r1, #1
 8010ece:	105b      	asrs	r3, r3, #1
 8010ed0:	e7ee      	b.n	8010eb0 <__gethex+0x160>
 8010ed2:	f100 0914 	add.w	r9, r0, #20
 8010ed6:	f04f 0b00 	mov.w	fp, #0
 8010eda:	f1ca 0301 	rsb	r3, sl, #1
 8010ede:	f8cd 9008 	str.w	r9, [sp, #8]
 8010ee2:	f8cd b000 	str.w	fp, [sp]
 8010ee6:	9306      	str	r3, [sp, #24]
 8010ee8:	42b7      	cmp	r7, r6
 8010eea:	d340      	bcc.n	8010f6e <__gethex+0x21e>
 8010eec:	9802      	ldr	r0, [sp, #8]
 8010eee:	9b00      	ldr	r3, [sp, #0]
 8010ef0:	f840 3b04 	str.w	r3, [r0], #4
 8010ef4:	eba0 0009 	sub.w	r0, r0, r9
 8010ef8:	1080      	asrs	r0, r0, #2
 8010efa:	0146      	lsls	r6, r0, #5
 8010efc:	6120      	str	r0, [r4, #16]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f000 fba6 	bl	8011650 <__hi0bits>
 8010f04:	1a30      	subs	r0, r6, r0
 8010f06:	f8d8 6000 	ldr.w	r6, [r8]
 8010f0a:	42b0      	cmp	r0, r6
 8010f0c:	dd63      	ble.n	8010fd6 <__gethex+0x286>
 8010f0e:	1b87      	subs	r7, r0, r6
 8010f10:	4639      	mov	r1, r7
 8010f12:	4620      	mov	r0, r4
 8010f14:	f000 ff4a 	bl	8011dac <__any_on>
 8010f18:	4682      	mov	sl, r0
 8010f1a:	b1a8      	cbz	r0, 8010f48 <__gethex+0x1f8>
 8010f1c:	1e7b      	subs	r3, r7, #1
 8010f1e:	1159      	asrs	r1, r3, #5
 8010f20:	f003 021f 	and.w	r2, r3, #31
 8010f24:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8010f28:	f04f 0a01 	mov.w	sl, #1
 8010f2c:	fa0a f202 	lsl.w	r2, sl, r2
 8010f30:	420a      	tst	r2, r1
 8010f32:	d009      	beq.n	8010f48 <__gethex+0x1f8>
 8010f34:	4553      	cmp	r3, sl
 8010f36:	dd05      	ble.n	8010f44 <__gethex+0x1f4>
 8010f38:	1eb9      	subs	r1, r7, #2
 8010f3a:	4620      	mov	r0, r4
 8010f3c:	f000 ff36 	bl	8011dac <__any_on>
 8010f40:	2800      	cmp	r0, #0
 8010f42:	d145      	bne.n	8010fd0 <__gethex+0x280>
 8010f44:	f04f 0a02 	mov.w	sl, #2
 8010f48:	4639      	mov	r1, r7
 8010f4a:	4620      	mov	r0, r4
 8010f4c:	f7ff fe99 	bl	8010c82 <rshift>
 8010f50:	443d      	add	r5, r7
 8010f52:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010f56:	42ab      	cmp	r3, r5
 8010f58:	da4c      	bge.n	8010ff4 <__gethex+0x2a4>
 8010f5a:	ee18 0a10 	vmov	r0, s16
 8010f5e:	4621      	mov	r1, r4
 8010f60:	f000 fac4 	bl	80114ec <_Bfree>
 8010f64:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8010f66:	2300      	movs	r3, #0
 8010f68:	6013      	str	r3, [r2, #0]
 8010f6a:	27a3      	movs	r7, #163	; 0xa3
 8010f6c:	e785      	b.n	8010e7a <__gethex+0x12a>
 8010f6e:	1e73      	subs	r3, r6, #1
 8010f70:	9a05      	ldr	r2, [sp, #20]
 8010f72:	9303      	str	r3, [sp, #12]
 8010f74:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	d019      	beq.n	8010fb0 <__gethex+0x260>
 8010f7c:	f1bb 0f20 	cmp.w	fp, #32
 8010f80:	d107      	bne.n	8010f92 <__gethex+0x242>
 8010f82:	9b02      	ldr	r3, [sp, #8]
 8010f84:	9a00      	ldr	r2, [sp, #0]
 8010f86:	f843 2b04 	str.w	r2, [r3], #4
 8010f8a:	9302      	str	r3, [sp, #8]
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	469b      	mov	fp, r3
 8010f92:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8010f96:	f7ff fec6 	bl	8010d26 <__hexdig_fun>
 8010f9a:	9b00      	ldr	r3, [sp, #0]
 8010f9c:	f000 000f 	and.w	r0, r0, #15
 8010fa0:	fa00 f00b 	lsl.w	r0, r0, fp
 8010fa4:	4303      	orrs	r3, r0
 8010fa6:	9300      	str	r3, [sp, #0]
 8010fa8:	f10b 0b04 	add.w	fp, fp, #4
 8010fac:	9b03      	ldr	r3, [sp, #12]
 8010fae:	e00d      	b.n	8010fcc <__gethex+0x27c>
 8010fb0:	9b03      	ldr	r3, [sp, #12]
 8010fb2:	9a06      	ldr	r2, [sp, #24]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	42bb      	cmp	r3, r7
 8010fb8:	d3e0      	bcc.n	8010f7c <__gethex+0x22c>
 8010fba:	4618      	mov	r0, r3
 8010fbc:	9901      	ldr	r1, [sp, #4]
 8010fbe:	9307      	str	r3, [sp, #28]
 8010fc0:	4652      	mov	r2, sl
 8010fc2:	f001 f9c0 	bl	8012346 <strncmp>
 8010fc6:	9b07      	ldr	r3, [sp, #28]
 8010fc8:	2800      	cmp	r0, #0
 8010fca:	d1d7      	bne.n	8010f7c <__gethex+0x22c>
 8010fcc:	461e      	mov	r6, r3
 8010fce:	e78b      	b.n	8010ee8 <__gethex+0x198>
 8010fd0:	f04f 0a03 	mov.w	sl, #3
 8010fd4:	e7b8      	b.n	8010f48 <__gethex+0x1f8>
 8010fd6:	da0a      	bge.n	8010fee <__gethex+0x29e>
 8010fd8:	1a37      	subs	r7, r6, r0
 8010fda:	4621      	mov	r1, r4
 8010fdc:	ee18 0a10 	vmov	r0, s16
 8010fe0:	463a      	mov	r2, r7
 8010fe2:	f000 fc9f 	bl	8011924 <__lshift>
 8010fe6:	1bed      	subs	r5, r5, r7
 8010fe8:	4604      	mov	r4, r0
 8010fea:	f100 0914 	add.w	r9, r0, #20
 8010fee:	f04f 0a00 	mov.w	sl, #0
 8010ff2:	e7ae      	b.n	8010f52 <__gethex+0x202>
 8010ff4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010ff8:	42a8      	cmp	r0, r5
 8010ffa:	dd72      	ble.n	80110e2 <__gethex+0x392>
 8010ffc:	1b45      	subs	r5, r0, r5
 8010ffe:	42ae      	cmp	r6, r5
 8011000:	dc36      	bgt.n	8011070 <__gethex+0x320>
 8011002:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8011006:	2b02      	cmp	r3, #2
 8011008:	d02a      	beq.n	8011060 <__gethex+0x310>
 801100a:	2b03      	cmp	r3, #3
 801100c:	d02c      	beq.n	8011068 <__gethex+0x318>
 801100e:	2b01      	cmp	r3, #1
 8011010:	d11c      	bne.n	801104c <__gethex+0x2fc>
 8011012:	42ae      	cmp	r6, r5
 8011014:	d11a      	bne.n	801104c <__gethex+0x2fc>
 8011016:	2e01      	cmp	r6, #1
 8011018:	d112      	bne.n	8011040 <__gethex+0x2f0>
 801101a:	9a04      	ldr	r2, [sp, #16]
 801101c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8011020:	6013      	str	r3, [r2, #0]
 8011022:	2301      	movs	r3, #1
 8011024:	6123      	str	r3, [r4, #16]
 8011026:	f8c9 3000 	str.w	r3, [r9]
 801102a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 801102c:	2762      	movs	r7, #98	; 0x62
 801102e:	601c      	str	r4, [r3, #0]
 8011030:	e723      	b.n	8010e7a <__gethex+0x12a>
 8011032:	bf00      	nop
 8011034:	08013f04 	.word	0x08013f04
 8011038:	08013e28 	.word	0x08013e28
 801103c:	08013e9c 	.word	0x08013e9c
 8011040:	1e71      	subs	r1, r6, #1
 8011042:	4620      	mov	r0, r4
 8011044:	f000 feb2 	bl	8011dac <__any_on>
 8011048:	2800      	cmp	r0, #0
 801104a:	d1e6      	bne.n	801101a <__gethex+0x2ca>
 801104c:	ee18 0a10 	vmov	r0, s16
 8011050:	4621      	mov	r1, r4
 8011052:	f000 fa4b 	bl	80114ec <_Bfree>
 8011056:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8011058:	2300      	movs	r3, #0
 801105a:	6013      	str	r3, [r2, #0]
 801105c:	2750      	movs	r7, #80	; 0x50
 801105e:	e70c      	b.n	8010e7a <__gethex+0x12a>
 8011060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8011062:	2b00      	cmp	r3, #0
 8011064:	d1f2      	bne.n	801104c <__gethex+0x2fc>
 8011066:	e7d8      	b.n	801101a <__gethex+0x2ca>
 8011068:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801106a:	2b00      	cmp	r3, #0
 801106c:	d1d5      	bne.n	801101a <__gethex+0x2ca>
 801106e:	e7ed      	b.n	801104c <__gethex+0x2fc>
 8011070:	1e6f      	subs	r7, r5, #1
 8011072:	f1ba 0f00 	cmp.w	sl, #0
 8011076:	d131      	bne.n	80110dc <__gethex+0x38c>
 8011078:	b127      	cbz	r7, 8011084 <__gethex+0x334>
 801107a:	4639      	mov	r1, r7
 801107c:	4620      	mov	r0, r4
 801107e:	f000 fe95 	bl	8011dac <__any_on>
 8011082:	4682      	mov	sl, r0
 8011084:	117b      	asrs	r3, r7, #5
 8011086:	2101      	movs	r1, #1
 8011088:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801108c:	f007 071f 	and.w	r7, r7, #31
 8011090:	fa01 f707 	lsl.w	r7, r1, r7
 8011094:	421f      	tst	r7, r3
 8011096:	4629      	mov	r1, r5
 8011098:	4620      	mov	r0, r4
 801109a:	bf18      	it	ne
 801109c:	f04a 0a02 	orrne.w	sl, sl, #2
 80110a0:	1b76      	subs	r6, r6, r5
 80110a2:	f7ff fdee 	bl	8010c82 <rshift>
 80110a6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80110aa:	2702      	movs	r7, #2
 80110ac:	f1ba 0f00 	cmp.w	sl, #0
 80110b0:	d048      	beq.n	8011144 <__gethex+0x3f4>
 80110b2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80110b6:	2b02      	cmp	r3, #2
 80110b8:	d015      	beq.n	80110e6 <__gethex+0x396>
 80110ba:	2b03      	cmp	r3, #3
 80110bc:	d017      	beq.n	80110ee <__gethex+0x39e>
 80110be:	2b01      	cmp	r3, #1
 80110c0:	d109      	bne.n	80110d6 <__gethex+0x386>
 80110c2:	f01a 0f02 	tst.w	sl, #2
 80110c6:	d006      	beq.n	80110d6 <__gethex+0x386>
 80110c8:	f8d9 0000 	ldr.w	r0, [r9]
 80110cc:	ea4a 0a00 	orr.w	sl, sl, r0
 80110d0:	f01a 0f01 	tst.w	sl, #1
 80110d4:	d10e      	bne.n	80110f4 <__gethex+0x3a4>
 80110d6:	f047 0710 	orr.w	r7, r7, #16
 80110da:	e033      	b.n	8011144 <__gethex+0x3f4>
 80110dc:	f04f 0a01 	mov.w	sl, #1
 80110e0:	e7d0      	b.n	8011084 <__gethex+0x334>
 80110e2:	2701      	movs	r7, #1
 80110e4:	e7e2      	b.n	80110ac <__gethex+0x35c>
 80110e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110e8:	f1c3 0301 	rsb	r3, r3, #1
 80110ec:	9315      	str	r3, [sp, #84]	; 0x54
 80110ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d0f0      	beq.n	80110d6 <__gethex+0x386>
 80110f4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80110f8:	f104 0314 	add.w	r3, r4, #20
 80110fc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8011100:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8011104:	f04f 0c00 	mov.w	ip, #0
 8011108:	4618      	mov	r0, r3
 801110a:	f853 2b04 	ldr.w	r2, [r3], #4
 801110e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8011112:	d01c      	beq.n	801114e <__gethex+0x3fe>
 8011114:	3201      	adds	r2, #1
 8011116:	6002      	str	r2, [r0, #0]
 8011118:	2f02      	cmp	r7, #2
 801111a:	f104 0314 	add.w	r3, r4, #20
 801111e:	d13f      	bne.n	80111a0 <__gethex+0x450>
 8011120:	f8d8 2000 	ldr.w	r2, [r8]
 8011124:	3a01      	subs	r2, #1
 8011126:	42b2      	cmp	r2, r6
 8011128:	d10a      	bne.n	8011140 <__gethex+0x3f0>
 801112a:	1171      	asrs	r1, r6, #5
 801112c:	2201      	movs	r2, #1
 801112e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011132:	f006 061f 	and.w	r6, r6, #31
 8011136:	fa02 f606 	lsl.w	r6, r2, r6
 801113a:	421e      	tst	r6, r3
 801113c:	bf18      	it	ne
 801113e:	4617      	movne	r7, r2
 8011140:	f047 0720 	orr.w	r7, r7, #32
 8011144:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011146:	601c      	str	r4, [r3, #0]
 8011148:	9b04      	ldr	r3, [sp, #16]
 801114a:	601d      	str	r5, [r3, #0]
 801114c:	e695      	b.n	8010e7a <__gethex+0x12a>
 801114e:	4299      	cmp	r1, r3
 8011150:	f843 cc04 	str.w	ip, [r3, #-4]
 8011154:	d8d8      	bhi.n	8011108 <__gethex+0x3b8>
 8011156:	68a3      	ldr	r3, [r4, #8]
 8011158:	459b      	cmp	fp, r3
 801115a:	db19      	blt.n	8011190 <__gethex+0x440>
 801115c:	6861      	ldr	r1, [r4, #4]
 801115e:	ee18 0a10 	vmov	r0, s16
 8011162:	3101      	adds	r1, #1
 8011164:	f000 f982 	bl	801146c <_Balloc>
 8011168:	4681      	mov	r9, r0
 801116a:	b918      	cbnz	r0, 8011174 <__gethex+0x424>
 801116c:	4b1a      	ldr	r3, [pc, #104]	; (80111d8 <__gethex+0x488>)
 801116e:	4602      	mov	r2, r0
 8011170:	2184      	movs	r1, #132	; 0x84
 8011172:	e6a8      	b.n	8010ec6 <__gethex+0x176>
 8011174:	6922      	ldr	r2, [r4, #16]
 8011176:	3202      	adds	r2, #2
 8011178:	f104 010c 	add.w	r1, r4, #12
 801117c:	0092      	lsls	r2, r2, #2
 801117e:	300c      	adds	r0, #12
 8011180:	f7fd f8c2 	bl	800e308 <memcpy>
 8011184:	4621      	mov	r1, r4
 8011186:	ee18 0a10 	vmov	r0, s16
 801118a:	f000 f9af 	bl	80114ec <_Bfree>
 801118e:	464c      	mov	r4, r9
 8011190:	6923      	ldr	r3, [r4, #16]
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8011198:	6122      	str	r2, [r4, #16]
 801119a:	2201      	movs	r2, #1
 801119c:	615a      	str	r2, [r3, #20]
 801119e:	e7bb      	b.n	8011118 <__gethex+0x3c8>
 80111a0:	6922      	ldr	r2, [r4, #16]
 80111a2:	455a      	cmp	r2, fp
 80111a4:	dd0b      	ble.n	80111be <__gethex+0x46e>
 80111a6:	2101      	movs	r1, #1
 80111a8:	4620      	mov	r0, r4
 80111aa:	f7ff fd6a 	bl	8010c82 <rshift>
 80111ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80111b2:	3501      	adds	r5, #1
 80111b4:	42ab      	cmp	r3, r5
 80111b6:	f6ff aed0 	blt.w	8010f5a <__gethex+0x20a>
 80111ba:	2701      	movs	r7, #1
 80111bc:	e7c0      	b.n	8011140 <__gethex+0x3f0>
 80111be:	f016 061f 	ands.w	r6, r6, #31
 80111c2:	d0fa      	beq.n	80111ba <__gethex+0x46a>
 80111c4:	4453      	add	r3, sl
 80111c6:	f1c6 0620 	rsb	r6, r6, #32
 80111ca:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80111ce:	f000 fa3f 	bl	8011650 <__hi0bits>
 80111d2:	42b0      	cmp	r0, r6
 80111d4:	dbe7      	blt.n	80111a6 <__gethex+0x456>
 80111d6:	e7f0      	b.n	80111ba <__gethex+0x46a>
 80111d8:	08013e28 	.word	0x08013e28

080111dc <L_shift>:
 80111dc:	f1c2 0208 	rsb	r2, r2, #8
 80111e0:	0092      	lsls	r2, r2, #2
 80111e2:	b570      	push	{r4, r5, r6, lr}
 80111e4:	f1c2 0620 	rsb	r6, r2, #32
 80111e8:	6843      	ldr	r3, [r0, #4]
 80111ea:	6804      	ldr	r4, [r0, #0]
 80111ec:	fa03 f506 	lsl.w	r5, r3, r6
 80111f0:	432c      	orrs	r4, r5
 80111f2:	40d3      	lsrs	r3, r2
 80111f4:	6004      	str	r4, [r0, #0]
 80111f6:	f840 3f04 	str.w	r3, [r0, #4]!
 80111fa:	4288      	cmp	r0, r1
 80111fc:	d3f4      	bcc.n	80111e8 <L_shift+0xc>
 80111fe:	bd70      	pop	{r4, r5, r6, pc}

08011200 <__match>:
 8011200:	b530      	push	{r4, r5, lr}
 8011202:	6803      	ldr	r3, [r0, #0]
 8011204:	3301      	adds	r3, #1
 8011206:	f811 4b01 	ldrb.w	r4, [r1], #1
 801120a:	b914      	cbnz	r4, 8011212 <__match+0x12>
 801120c:	6003      	str	r3, [r0, #0]
 801120e:	2001      	movs	r0, #1
 8011210:	bd30      	pop	{r4, r5, pc}
 8011212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011216:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 801121a:	2d19      	cmp	r5, #25
 801121c:	bf98      	it	ls
 801121e:	3220      	addls	r2, #32
 8011220:	42a2      	cmp	r2, r4
 8011222:	d0f0      	beq.n	8011206 <__match+0x6>
 8011224:	2000      	movs	r0, #0
 8011226:	e7f3      	b.n	8011210 <__match+0x10>

08011228 <__hexnan>:
 8011228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801122c:	680b      	ldr	r3, [r1, #0]
 801122e:	115e      	asrs	r6, r3, #5
 8011230:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8011234:	f013 031f 	ands.w	r3, r3, #31
 8011238:	b087      	sub	sp, #28
 801123a:	bf18      	it	ne
 801123c:	3604      	addne	r6, #4
 801123e:	2500      	movs	r5, #0
 8011240:	1f37      	subs	r7, r6, #4
 8011242:	4690      	mov	r8, r2
 8011244:	6802      	ldr	r2, [r0, #0]
 8011246:	9301      	str	r3, [sp, #4]
 8011248:	4682      	mov	sl, r0
 801124a:	f846 5c04 	str.w	r5, [r6, #-4]
 801124e:	46b9      	mov	r9, r7
 8011250:	463c      	mov	r4, r7
 8011252:	9502      	str	r5, [sp, #8]
 8011254:	46ab      	mov	fp, r5
 8011256:	7851      	ldrb	r1, [r2, #1]
 8011258:	1c53      	adds	r3, r2, #1
 801125a:	9303      	str	r3, [sp, #12]
 801125c:	b341      	cbz	r1, 80112b0 <__hexnan+0x88>
 801125e:	4608      	mov	r0, r1
 8011260:	9205      	str	r2, [sp, #20]
 8011262:	9104      	str	r1, [sp, #16]
 8011264:	f7ff fd5f 	bl	8010d26 <__hexdig_fun>
 8011268:	2800      	cmp	r0, #0
 801126a:	d14f      	bne.n	801130c <__hexnan+0xe4>
 801126c:	9904      	ldr	r1, [sp, #16]
 801126e:	9a05      	ldr	r2, [sp, #20]
 8011270:	2920      	cmp	r1, #32
 8011272:	d818      	bhi.n	80112a6 <__hexnan+0x7e>
 8011274:	9b02      	ldr	r3, [sp, #8]
 8011276:	459b      	cmp	fp, r3
 8011278:	dd13      	ble.n	80112a2 <__hexnan+0x7a>
 801127a:	454c      	cmp	r4, r9
 801127c:	d206      	bcs.n	801128c <__hexnan+0x64>
 801127e:	2d07      	cmp	r5, #7
 8011280:	dc04      	bgt.n	801128c <__hexnan+0x64>
 8011282:	462a      	mov	r2, r5
 8011284:	4649      	mov	r1, r9
 8011286:	4620      	mov	r0, r4
 8011288:	f7ff ffa8 	bl	80111dc <L_shift>
 801128c:	4544      	cmp	r4, r8
 801128e:	d950      	bls.n	8011332 <__hexnan+0x10a>
 8011290:	2300      	movs	r3, #0
 8011292:	f1a4 0904 	sub.w	r9, r4, #4
 8011296:	f844 3c04 	str.w	r3, [r4, #-4]
 801129a:	f8cd b008 	str.w	fp, [sp, #8]
 801129e:	464c      	mov	r4, r9
 80112a0:	461d      	mov	r5, r3
 80112a2:	9a03      	ldr	r2, [sp, #12]
 80112a4:	e7d7      	b.n	8011256 <__hexnan+0x2e>
 80112a6:	2929      	cmp	r1, #41	; 0x29
 80112a8:	d156      	bne.n	8011358 <__hexnan+0x130>
 80112aa:	3202      	adds	r2, #2
 80112ac:	f8ca 2000 	str.w	r2, [sl]
 80112b0:	f1bb 0f00 	cmp.w	fp, #0
 80112b4:	d050      	beq.n	8011358 <__hexnan+0x130>
 80112b6:	454c      	cmp	r4, r9
 80112b8:	d206      	bcs.n	80112c8 <__hexnan+0xa0>
 80112ba:	2d07      	cmp	r5, #7
 80112bc:	dc04      	bgt.n	80112c8 <__hexnan+0xa0>
 80112be:	462a      	mov	r2, r5
 80112c0:	4649      	mov	r1, r9
 80112c2:	4620      	mov	r0, r4
 80112c4:	f7ff ff8a 	bl	80111dc <L_shift>
 80112c8:	4544      	cmp	r4, r8
 80112ca:	d934      	bls.n	8011336 <__hexnan+0x10e>
 80112cc:	f1a8 0204 	sub.w	r2, r8, #4
 80112d0:	4623      	mov	r3, r4
 80112d2:	f853 1b04 	ldr.w	r1, [r3], #4
 80112d6:	f842 1f04 	str.w	r1, [r2, #4]!
 80112da:	429f      	cmp	r7, r3
 80112dc:	d2f9      	bcs.n	80112d2 <__hexnan+0xaa>
 80112de:	1b3b      	subs	r3, r7, r4
 80112e0:	f023 0303 	bic.w	r3, r3, #3
 80112e4:	3304      	adds	r3, #4
 80112e6:	3401      	adds	r4, #1
 80112e8:	3e03      	subs	r6, #3
 80112ea:	42b4      	cmp	r4, r6
 80112ec:	bf88      	it	hi
 80112ee:	2304      	movhi	r3, #4
 80112f0:	4443      	add	r3, r8
 80112f2:	2200      	movs	r2, #0
 80112f4:	f843 2b04 	str.w	r2, [r3], #4
 80112f8:	429f      	cmp	r7, r3
 80112fa:	d2fb      	bcs.n	80112f4 <__hexnan+0xcc>
 80112fc:	683b      	ldr	r3, [r7, #0]
 80112fe:	b91b      	cbnz	r3, 8011308 <__hexnan+0xe0>
 8011300:	4547      	cmp	r7, r8
 8011302:	d127      	bne.n	8011354 <__hexnan+0x12c>
 8011304:	2301      	movs	r3, #1
 8011306:	603b      	str	r3, [r7, #0]
 8011308:	2005      	movs	r0, #5
 801130a:	e026      	b.n	801135a <__hexnan+0x132>
 801130c:	3501      	adds	r5, #1
 801130e:	2d08      	cmp	r5, #8
 8011310:	f10b 0b01 	add.w	fp, fp, #1
 8011314:	dd06      	ble.n	8011324 <__hexnan+0xfc>
 8011316:	4544      	cmp	r4, r8
 8011318:	d9c3      	bls.n	80112a2 <__hexnan+0x7a>
 801131a:	2300      	movs	r3, #0
 801131c:	f844 3c04 	str.w	r3, [r4, #-4]
 8011320:	2501      	movs	r5, #1
 8011322:	3c04      	subs	r4, #4
 8011324:	6822      	ldr	r2, [r4, #0]
 8011326:	f000 000f 	and.w	r0, r0, #15
 801132a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 801132e:	6022      	str	r2, [r4, #0]
 8011330:	e7b7      	b.n	80112a2 <__hexnan+0x7a>
 8011332:	2508      	movs	r5, #8
 8011334:	e7b5      	b.n	80112a2 <__hexnan+0x7a>
 8011336:	9b01      	ldr	r3, [sp, #4]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d0df      	beq.n	80112fc <__hexnan+0xd4>
 801133c:	f04f 32ff 	mov.w	r2, #4294967295
 8011340:	f1c3 0320 	rsb	r3, r3, #32
 8011344:	fa22 f303 	lsr.w	r3, r2, r3
 8011348:	f856 2c04 	ldr.w	r2, [r6, #-4]
 801134c:	401a      	ands	r2, r3
 801134e:	f846 2c04 	str.w	r2, [r6, #-4]
 8011352:	e7d3      	b.n	80112fc <__hexnan+0xd4>
 8011354:	3f04      	subs	r7, #4
 8011356:	e7d1      	b.n	80112fc <__hexnan+0xd4>
 8011358:	2004      	movs	r0, #4
 801135a:	b007      	add	sp, #28
 801135c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011360 <_localeconv_r>:
 8011360:	4800      	ldr	r0, [pc, #0]	; (8011364 <_localeconv_r+0x4>)
 8011362:	4770      	bx	lr
 8011364:	20000184 	.word	0x20000184

08011368 <__retarget_lock_init_recursive>:
 8011368:	4770      	bx	lr

0801136a <__retarget_lock_acquire_recursive>:
 801136a:	4770      	bx	lr

0801136c <__retarget_lock_release_recursive>:
 801136c:	4770      	bx	lr

0801136e <__swhatbuf_r>:
 801136e:	b570      	push	{r4, r5, r6, lr}
 8011370:	460e      	mov	r6, r1
 8011372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011376:	2900      	cmp	r1, #0
 8011378:	b096      	sub	sp, #88	; 0x58
 801137a:	4614      	mov	r4, r2
 801137c:	461d      	mov	r5, r3
 801137e:	da08      	bge.n	8011392 <__swhatbuf_r+0x24>
 8011380:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011384:	2200      	movs	r2, #0
 8011386:	602a      	str	r2, [r5, #0]
 8011388:	061a      	lsls	r2, r3, #24
 801138a:	d410      	bmi.n	80113ae <__swhatbuf_r+0x40>
 801138c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011390:	e00e      	b.n	80113b0 <__swhatbuf_r+0x42>
 8011392:	466a      	mov	r2, sp
 8011394:	f001 f84a 	bl	801242c <_fstat_r>
 8011398:	2800      	cmp	r0, #0
 801139a:	dbf1      	blt.n	8011380 <__swhatbuf_r+0x12>
 801139c:	9a01      	ldr	r2, [sp, #4]
 801139e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80113a2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80113a6:	425a      	negs	r2, r3
 80113a8:	415a      	adcs	r2, r3
 80113aa:	602a      	str	r2, [r5, #0]
 80113ac:	e7ee      	b.n	801138c <__swhatbuf_r+0x1e>
 80113ae:	2340      	movs	r3, #64	; 0x40
 80113b0:	2000      	movs	r0, #0
 80113b2:	6023      	str	r3, [r4, #0]
 80113b4:	b016      	add	sp, #88	; 0x58
 80113b6:	bd70      	pop	{r4, r5, r6, pc}

080113b8 <__smakebuf_r>:
 80113b8:	898b      	ldrh	r3, [r1, #12]
 80113ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80113bc:	079d      	lsls	r5, r3, #30
 80113be:	4606      	mov	r6, r0
 80113c0:	460c      	mov	r4, r1
 80113c2:	d507      	bpl.n	80113d4 <__smakebuf_r+0x1c>
 80113c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80113c8:	6023      	str	r3, [r4, #0]
 80113ca:	6123      	str	r3, [r4, #16]
 80113cc:	2301      	movs	r3, #1
 80113ce:	6163      	str	r3, [r4, #20]
 80113d0:	b002      	add	sp, #8
 80113d2:	bd70      	pop	{r4, r5, r6, pc}
 80113d4:	ab01      	add	r3, sp, #4
 80113d6:	466a      	mov	r2, sp
 80113d8:	f7ff ffc9 	bl	801136e <__swhatbuf_r>
 80113dc:	9900      	ldr	r1, [sp, #0]
 80113de:	4605      	mov	r5, r0
 80113e0:	4630      	mov	r0, r6
 80113e2:	f000 fd87 	bl	8011ef4 <_malloc_r>
 80113e6:	b948      	cbnz	r0, 80113fc <__smakebuf_r+0x44>
 80113e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80113ec:	059a      	lsls	r2, r3, #22
 80113ee:	d4ef      	bmi.n	80113d0 <__smakebuf_r+0x18>
 80113f0:	f023 0303 	bic.w	r3, r3, #3
 80113f4:	f043 0302 	orr.w	r3, r3, #2
 80113f8:	81a3      	strh	r3, [r4, #12]
 80113fa:	e7e3      	b.n	80113c4 <__smakebuf_r+0xc>
 80113fc:	4b0d      	ldr	r3, [pc, #52]	; (8011434 <__smakebuf_r+0x7c>)
 80113fe:	62b3      	str	r3, [r6, #40]	; 0x28
 8011400:	89a3      	ldrh	r3, [r4, #12]
 8011402:	6020      	str	r0, [r4, #0]
 8011404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011408:	81a3      	strh	r3, [r4, #12]
 801140a:	9b00      	ldr	r3, [sp, #0]
 801140c:	6163      	str	r3, [r4, #20]
 801140e:	9b01      	ldr	r3, [sp, #4]
 8011410:	6120      	str	r0, [r4, #16]
 8011412:	b15b      	cbz	r3, 801142c <__smakebuf_r+0x74>
 8011414:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011418:	4630      	mov	r0, r6
 801141a:	f001 f819 	bl	8012450 <_isatty_r>
 801141e:	b128      	cbz	r0, 801142c <__smakebuf_r+0x74>
 8011420:	89a3      	ldrh	r3, [r4, #12]
 8011422:	f023 0303 	bic.w	r3, r3, #3
 8011426:	f043 0301 	orr.w	r3, r3, #1
 801142a:	81a3      	strh	r3, [r4, #12]
 801142c:	89a0      	ldrh	r0, [r4, #12]
 801142e:	4305      	orrs	r5, r0
 8011430:	81a5      	strh	r5, [r4, #12]
 8011432:	e7cd      	b.n	80113d0 <__smakebuf_r+0x18>
 8011434:	08010ae1 	.word	0x08010ae1

08011438 <malloc>:
 8011438:	4b02      	ldr	r3, [pc, #8]	; (8011444 <malloc+0xc>)
 801143a:	4601      	mov	r1, r0
 801143c:	6818      	ldr	r0, [r3, #0]
 801143e:	f000 bd59 	b.w	8011ef4 <_malloc_r>
 8011442:	bf00      	nop
 8011444:	2000002c 	.word	0x2000002c

08011448 <__ascii_mbtowc>:
 8011448:	b082      	sub	sp, #8
 801144a:	b901      	cbnz	r1, 801144e <__ascii_mbtowc+0x6>
 801144c:	a901      	add	r1, sp, #4
 801144e:	b142      	cbz	r2, 8011462 <__ascii_mbtowc+0x1a>
 8011450:	b14b      	cbz	r3, 8011466 <__ascii_mbtowc+0x1e>
 8011452:	7813      	ldrb	r3, [r2, #0]
 8011454:	600b      	str	r3, [r1, #0]
 8011456:	7812      	ldrb	r2, [r2, #0]
 8011458:	1e10      	subs	r0, r2, #0
 801145a:	bf18      	it	ne
 801145c:	2001      	movne	r0, #1
 801145e:	b002      	add	sp, #8
 8011460:	4770      	bx	lr
 8011462:	4610      	mov	r0, r2
 8011464:	e7fb      	b.n	801145e <__ascii_mbtowc+0x16>
 8011466:	f06f 0001 	mvn.w	r0, #1
 801146a:	e7f8      	b.n	801145e <__ascii_mbtowc+0x16>

0801146c <_Balloc>:
 801146c:	b570      	push	{r4, r5, r6, lr}
 801146e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8011470:	4604      	mov	r4, r0
 8011472:	460d      	mov	r5, r1
 8011474:	b976      	cbnz	r6, 8011494 <_Balloc+0x28>
 8011476:	2010      	movs	r0, #16
 8011478:	f7ff ffde 	bl	8011438 <malloc>
 801147c:	4602      	mov	r2, r0
 801147e:	6260      	str	r0, [r4, #36]	; 0x24
 8011480:	b920      	cbnz	r0, 801148c <_Balloc+0x20>
 8011482:	4b18      	ldr	r3, [pc, #96]	; (80114e4 <_Balloc+0x78>)
 8011484:	4818      	ldr	r0, [pc, #96]	; (80114e8 <_Balloc+0x7c>)
 8011486:	2166      	movs	r1, #102	; 0x66
 8011488:	f000 ff90 	bl	80123ac <__assert_func>
 801148c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011490:	6006      	str	r6, [r0, #0]
 8011492:	60c6      	str	r6, [r0, #12]
 8011494:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8011496:	68f3      	ldr	r3, [r6, #12]
 8011498:	b183      	cbz	r3, 80114bc <_Balloc+0x50>
 801149a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80114a2:	b9b8      	cbnz	r0, 80114d4 <_Balloc+0x68>
 80114a4:	2101      	movs	r1, #1
 80114a6:	fa01 f605 	lsl.w	r6, r1, r5
 80114aa:	1d72      	adds	r2, r6, #5
 80114ac:	0092      	lsls	r2, r2, #2
 80114ae:	4620      	mov	r0, r4
 80114b0:	f000 fc9d 	bl	8011dee <_calloc_r>
 80114b4:	b160      	cbz	r0, 80114d0 <_Balloc+0x64>
 80114b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80114ba:	e00e      	b.n	80114da <_Balloc+0x6e>
 80114bc:	2221      	movs	r2, #33	; 0x21
 80114be:	2104      	movs	r1, #4
 80114c0:	4620      	mov	r0, r4
 80114c2:	f000 fc94 	bl	8011dee <_calloc_r>
 80114c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80114c8:	60f0      	str	r0, [r6, #12]
 80114ca:	68db      	ldr	r3, [r3, #12]
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d1e4      	bne.n	801149a <_Balloc+0x2e>
 80114d0:	2000      	movs	r0, #0
 80114d2:	bd70      	pop	{r4, r5, r6, pc}
 80114d4:	6802      	ldr	r2, [r0, #0]
 80114d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80114da:	2300      	movs	r3, #0
 80114dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80114e0:	e7f7      	b.n	80114d2 <_Balloc+0x66>
 80114e2:	bf00      	nop
 80114e4:	08013db6 	.word	0x08013db6
 80114e8:	08013f18 	.word	0x08013f18

080114ec <_Bfree>:
 80114ec:	b570      	push	{r4, r5, r6, lr}
 80114ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80114f0:	4605      	mov	r5, r0
 80114f2:	460c      	mov	r4, r1
 80114f4:	b976      	cbnz	r6, 8011514 <_Bfree+0x28>
 80114f6:	2010      	movs	r0, #16
 80114f8:	f7ff ff9e 	bl	8011438 <malloc>
 80114fc:	4602      	mov	r2, r0
 80114fe:	6268      	str	r0, [r5, #36]	; 0x24
 8011500:	b920      	cbnz	r0, 801150c <_Bfree+0x20>
 8011502:	4b09      	ldr	r3, [pc, #36]	; (8011528 <_Bfree+0x3c>)
 8011504:	4809      	ldr	r0, [pc, #36]	; (801152c <_Bfree+0x40>)
 8011506:	218a      	movs	r1, #138	; 0x8a
 8011508:	f000 ff50 	bl	80123ac <__assert_func>
 801150c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8011510:	6006      	str	r6, [r0, #0]
 8011512:	60c6      	str	r6, [r0, #12]
 8011514:	b13c      	cbz	r4, 8011526 <_Bfree+0x3a>
 8011516:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8011518:	6862      	ldr	r2, [r4, #4]
 801151a:	68db      	ldr	r3, [r3, #12]
 801151c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8011520:	6021      	str	r1, [r4, #0]
 8011522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8011526:	bd70      	pop	{r4, r5, r6, pc}
 8011528:	08013db6 	.word	0x08013db6
 801152c:	08013f18 	.word	0x08013f18

08011530 <__multadd>:
 8011530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011534:	690d      	ldr	r5, [r1, #16]
 8011536:	4607      	mov	r7, r0
 8011538:	460c      	mov	r4, r1
 801153a:	461e      	mov	r6, r3
 801153c:	f101 0c14 	add.w	ip, r1, #20
 8011540:	2000      	movs	r0, #0
 8011542:	f8dc 3000 	ldr.w	r3, [ip]
 8011546:	b299      	uxth	r1, r3
 8011548:	fb02 6101 	mla	r1, r2, r1, r6
 801154c:	0c1e      	lsrs	r6, r3, #16
 801154e:	0c0b      	lsrs	r3, r1, #16
 8011550:	fb02 3306 	mla	r3, r2, r6, r3
 8011554:	b289      	uxth	r1, r1
 8011556:	3001      	adds	r0, #1
 8011558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801155c:	4285      	cmp	r5, r0
 801155e:	f84c 1b04 	str.w	r1, [ip], #4
 8011562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8011566:	dcec      	bgt.n	8011542 <__multadd+0x12>
 8011568:	b30e      	cbz	r6, 80115ae <__multadd+0x7e>
 801156a:	68a3      	ldr	r3, [r4, #8]
 801156c:	42ab      	cmp	r3, r5
 801156e:	dc19      	bgt.n	80115a4 <__multadd+0x74>
 8011570:	6861      	ldr	r1, [r4, #4]
 8011572:	4638      	mov	r0, r7
 8011574:	3101      	adds	r1, #1
 8011576:	f7ff ff79 	bl	801146c <_Balloc>
 801157a:	4680      	mov	r8, r0
 801157c:	b928      	cbnz	r0, 801158a <__multadd+0x5a>
 801157e:	4602      	mov	r2, r0
 8011580:	4b0c      	ldr	r3, [pc, #48]	; (80115b4 <__multadd+0x84>)
 8011582:	480d      	ldr	r0, [pc, #52]	; (80115b8 <__multadd+0x88>)
 8011584:	21b5      	movs	r1, #181	; 0xb5
 8011586:	f000 ff11 	bl	80123ac <__assert_func>
 801158a:	6922      	ldr	r2, [r4, #16]
 801158c:	3202      	adds	r2, #2
 801158e:	f104 010c 	add.w	r1, r4, #12
 8011592:	0092      	lsls	r2, r2, #2
 8011594:	300c      	adds	r0, #12
 8011596:	f7fc feb7 	bl	800e308 <memcpy>
 801159a:	4621      	mov	r1, r4
 801159c:	4638      	mov	r0, r7
 801159e:	f7ff ffa5 	bl	80114ec <_Bfree>
 80115a2:	4644      	mov	r4, r8
 80115a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80115a8:	3501      	adds	r5, #1
 80115aa:	615e      	str	r6, [r3, #20]
 80115ac:	6125      	str	r5, [r4, #16]
 80115ae:	4620      	mov	r0, r4
 80115b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80115b4:	08013e28 	.word	0x08013e28
 80115b8:	08013f18 	.word	0x08013f18

080115bc <__s2b>:
 80115bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80115c0:	460c      	mov	r4, r1
 80115c2:	4615      	mov	r5, r2
 80115c4:	461f      	mov	r7, r3
 80115c6:	2209      	movs	r2, #9
 80115c8:	3308      	adds	r3, #8
 80115ca:	4606      	mov	r6, r0
 80115cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80115d0:	2100      	movs	r1, #0
 80115d2:	2201      	movs	r2, #1
 80115d4:	429a      	cmp	r2, r3
 80115d6:	db09      	blt.n	80115ec <__s2b+0x30>
 80115d8:	4630      	mov	r0, r6
 80115da:	f7ff ff47 	bl	801146c <_Balloc>
 80115de:	b940      	cbnz	r0, 80115f2 <__s2b+0x36>
 80115e0:	4602      	mov	r2, r0
 80115e2:	4b19      	ldr	r3, [pc, #100]	; (8011648 <__s2b+0x8c>)
 80115e4:	4819      	ldr	r0, [pc, #100]	; (801164c <__s2b+0x90>)
 80115e6:	21ce      	movs	r1, #206	; 0xce
 80115e8:	f000 fee0 	bl	80123ac <__assert_func>
 80115ec:	0052      	lsls	r2, r2, #1
 80115ee:	3101      	adds	r1, #1
 80115f0:	e7f0      	b.n	80115d4 <__s2b+0x18>
 80115f2:	9b08      	ldr	r3, [sp, #32]
 80115f4:	6143      	str	r3, [r0, #20]
 80115f6:	2d09      	cmp	r5, #9
 80115f8:	f04f 0301 	mov.w	r3, #1
 80115fc:	6103      	str	r3, [r0, #16]
 80115fe:	dd16      	ble.n	801162e <__s2b+0x72>
 8011600:	f104 0909 	add.w	r9, r4, #9
 8011604:	46c8      	mov	r8, r9
 8011606:	442c      	add	r4, r5
 8011608:	f818 3b01 	ldrb.w	r3, [r8], #1
 801160c:	4601      	mov	r1, r0
 801160e:	3b30      	subs	r3, #48	; 0x30
 8011610:	220a      	movs	r2, #10
 8011612:	4630      	mov	r0, r6
 8011614:	f7ff ff8c 	bl	8011530 <__multadd>
 8011618:	45a0      	cmp	r8, r4
 801161a:	d1f5      	bne.n	8011608 <__s2b+0x4c>
 801161c:	f1a5 0408 	sub.w	r4, r5, #8
 8011620:	444c      	add	r4, r9
 8011622:	1b2d      	subs	r5, r5, r4
 8011624:	1963      	adds	r3, r4, r5
 8011626:	42bb      	cmp	r3, r7
 8011628:	db04      	blt.n	8011634 <__s2b+0x78>
 801162a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801162e:	340a      	adds	r4, #10
 8011630:	2509      	movs	r5, #9
 8011632:	e7f6      	b.n	8011622 <__s2b+0x66>
 8011634:	f814 3b01 	ldrb.w	r3, [r4], #1
 8011638:	4601      	mov	r1, r0
 801163a:	3b30      	subs	r3, #48	; 0x30
 801163c:	220a      	movs	r2, #10
 801163e:	4630      	mov	r0, r6
 8011640:	f7ff ff76 	bl	8011530 <__multadd>
 8011644:	e7ee      	b.n	8011624 <__s2b+0x68>
 8011646:	bf00      	nop
 8011648:	08013e28 	.word	0x08013e28
 801164c:	08013f18 	.word	0x08013f18

08011650 <__hi0bits>:
 8011650:	0c03      	lsrs	r3, r0, #16
 8011652:	041b      	lsls	r3, r3, #16
 8011654:	b9d3      	cbnz	r3, 801168c <__hi0bits+0x3c>
 8011656:	0400      	lsls	r0, r0, #16
 8011658:	2310      	movs	r3, #16
 801165a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801165e:	bf04      	itt	eq
 8011660:	0200      	lsleq	r0, r0, #8
 8011662:	3308      	addeq	r3, #8
 8011664:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8011668:	bf04      	itt	eq
 801166a:	0100      	lsleq	r0, r0, #4
 801166c:	3304      	addeq	r3, #4
 801166e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8011672:	bf04      	itt	eq
 8011674:	0080      	lsleq	r0, r0, #2
 8011676:	3302      	addeq	r3, #2
 8011678:	2800      	cmp	r0, #0
 801167a:	db05      	blt.n	8011688 <__hi0bits+0x38>
 801167c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8011680:	f103 0301 	add.w	r3, r3, #1
 8011684:	bf08      	it	eq
 8011686:	2320      	moveq	r3, #32
 8011688:	4618      	mov	r0, r3
 801168a:	4770      	bx	lr
 801168c:	2300      	movs	r3, #0
 801168e:	e7e4      	b.n	801165a <__hi0bits+0xa>

08011690 <__lo0bits>:
 8011690:	6803      	ldr	r3, [r0, #0]
 8011692:	f013 0207 	ands.w	r2, r3, #7
 8011696:	4601      	mov	r1, r0
 8011698:	d00b      	beq.n	80116b2 <__lo0bits+0x22>
 801169a:	07da      	lsls	r2, r3, #31
 801169c:	d423      	bmi.n	80116e6 <__lo0bits+0x56>
 801169e:	0798      	lsls	r0, r3, #30
 80116a0:	bf49      	itett	mi
 80116a2:	085b      	lsrmi	r3, r3, #1
 80116a4:	089b      	lsrpl	r3, r3, #2
 80116a6:	2001      	movmi	r0, #1
 80116a8:	600b      	strmi	r3, [r1, #0]
 80116aa:	bf5c      	itt	pl
 80116ac:	600b      	strpl	r3, [r1, #0]
 80116ae:	2002      	movpl	r0, #2
 80116b0:	4770      	bx	lr
 80116b2:	b298      	uxth	r0, r3
 80116b4:	b9a8      	cbnz	r0, 80116e2 <__lo0bits+0x52>
 80116b6:	0c1b      	lsrs	r3, r3, #16
 80116b8:	2010      	movs	r0, #16
 80116ba:	b2da      	uxtb	r2, r3
 80116bc:	b90a      	cbnz	r2, 80116c2 <__lo0bits+0x32>
 80116be:	3008      	adds	r0, #8
 80116c0:	0a1b      	lsrs	r3, r3, #8
 80116c2:	071a      	lsls	r2, r3, #28
 80116c4:	bf04      	itt	eq
 80116c6:	091b      	lsreq	r3, r3, #4
 80116c8:	3004      	addeq	r0, #4
 80116ca:	079a      	lsls	r2, r3, #30
 80116cc:	bf04      	itt	eq
 80116ce:	089b      	lsreq	r3, r3, #2
 80116d0:	3002      	addeq	r0, #2
 80116d2:	07da      	lsls	r2, r3, #31
 80116d4:	d403      	bmi.n	80116de <__lo0bits+0x4e>
 80116d6:	085b      	lsrs	r3, r3, #1
 80116d8:	f100 0001 	add.w	r0, r0, #1
 80116dc:	d005      	beq.n	80116ea <__lo0bits+0x5a>
 80116de:	600b      	str	r3, [r1, #0]
 80116e0:	4770      	bx	lr
 80116e2:	4610      	mov	r0, r2
 80116e4:	e7e9      	b.n	80116ba <__lo0bits+0x2a>
 80116e6:	2000      	movs	r0, #0
 80116e8:	4770      	bx	lr
 80116ea:	2020      	movs	r0, #32
 80116ec:	4770      	bx	lr
	...

080116f0 <__i2b>:
 80116f0:	b510      	push	{r4, lr}
 80116f2:	460c      	mov	r4, r1
 80116f4:	2101      	movs	r1, #1
 80116f6:	f7ff feb9 	bl	801146c <_Balloc>
 80116fa:	4602      	mov	r2, r0
 80116fc:	b928      	cbnz	r0, 801170a <__i2b+0x1a>
 80116fe:	4b05      	ldr	r3, [pc, #20]	; (8011714 <__i2b+0x24>)
 8011700:	4805      	ldr	r0, [pc, #20]	; (8011718 <__i2b+0x28>)
 8011702:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8011706:	f000 fe51 	bl	80123ac <__assert_func>
 801170a:	2301      	movs	r3, #1
 801170c:	6144      	str	r4, [r0, #20]
 801170e:	6103      	str	r3, [r0, #16]
 8011710:	bd10      	pop	{r4, pc}
 8011712:	bf00      	nop
 8011714:	08013e28 	.word	0x08013e28
 8011718:	08013f18 	.word	0x08013f18

0801171c <__multiply>:
 801171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011720:	4691      	mov	r9, r2
 8011722:	690a      	ldr	r2, [r1, #16]
 8011724:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011728:	429a      	cmp	r2, r3
 801172a:	bfb8      	it	lt
 801172c:	460b      	movlt	r3, r1
 801172e:	460c      	mov	r4, r1
 8011730:	bfbc      	itt	lt
 8011732:	464c      	movlt	r4, r9
 8011734:	4699      	movlt	r9, r3
 8011736:	6927      	ldr	r7, [r4, #16]
 8011738:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801173c:	68a3      	ldr	r3, [r4, #8]
 801173e:	6861      	ldr	r1, [r4, #4]
 8011740:	eb07 060a 	add.w	r6, r7, sl
 8011744:	42b3      	cmp	r3, r6
 8011746:	b085      	sub	sp, #20
 8011748:	bfb8      	it	lt
 801174a:	3101      	addlt	r1, #1
 801174c:	f7ff fe8e 	bl	801146c <_Balloc>
 8011750:	b930      	cbnz	r0, 8011760 <__multiply+0x44>
 8011752:	4602      	mov	r2, r0
 8011754:	4b44      	ldr	r3, [pc, #272]	; (8011868 <__multiply+0x14c>)
 8011756:	4845      	ldr	r0, [pc, #276]	; (801186c <__multiply+0x150>)
 8011758:	f240 115d 	movw	r1, #349	; 0x15d
 801175c:	f000 fe26 	bl	80123ac <__assert_func>
 8011760:	f100 0514 	add.w	r5, r0, #20
 8011764:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8011768:	462b      	mov	r3, r5
 801176a:	2200      	movs	r2, #0
 801176c:	4543      	cmp	r3, r8
 801176e:	d321      	bcc.n	80117b4 <__multiply+0x98>
 8011770:	f104 0314 	add.w	r3, r4, #20
 8011774:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8011778:	f109 0314 	add.w	r3, r9, #20
 801177c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8011780:	9202      	str	r2, [sp, #8]
 8011782:	1b3a      	subs	r2, r7, r4
 8011784:	3a15      	subs	r2, #21
 8011786:	f022 0203 	bic.w	r2, r2, #3
 801178a:	3204      	adds	r2, #4
 801178c:	f104 0115 	add.w	r1, r4, #21
 8011790:	428f      	cmp	r7, r1
 8011792:	bf38      	it	cc
 8011794:	2204      	movcc	r2, #4
 8011796:	9201      	str	r2, [sp, #4]
 8011798:	9a02      	ldr	r2, [sp, #8]
 801179a:	9303      	str	r3, [sp, #12]
 801179c:	429a      	cmp	r2, r3
 801179e:	d80c      	bhi.n	80117ba <__multiply+0x9e>
 80117a0:	2e00      	cmp	r6, #0
 80117a2:	dd03      	ble.n	80117ac <__multiply+0x90>
 80117a4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d05a      	beq.n	8011862 <__multiply+0x146>
 80117ac:	6106      	str	r6, [r0, #16]
 80117ae:	b005      	add	sp, #20
 80117b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80117b4:	f843 2b04 	str.w	r2, [r3], #4
 80117b8:	e7d8      	b.n	801176c <__multiply+0x50>
 80117ba:	f8b3 a000 	ldrh.w	sl, [r3]
 80117be:	f1ba 0f00 	cmp.w	sl, #0
 80117c2:	d024      	beq.n	801180e <__multiply+0xf2>
 80117c4:	f104 0e14 	add.w	lr, r4, #20
 80117c8:	46a9      	mov	r9, r5
 80117ca:	f04f 0c00 	mov.w	ip, #0
 80117ce:	f85e 2b04 	ldr.w	r2, [lr], #4
 80117d2:	f8d9 1000 	ldr.w	r1, [r9]
 80117d6:	fa1f fb82 	uxth.w	fp, r2
 80117da:	b289      	uxth	r1, r1
 80117dc:	fb0a 110b 	mla	r1, sl, fp, r1
 80117e0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80117e4:	f8d9 2000 	ldr.w	r2, [r9]
 80117e8:	4461      	add	r1, ip
 80117ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80117ee:	fb0a c20b 	mla	r2, sl, fp, ip
 80117f2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80117f6:	b289      	uxth	r1, r1
 80117f8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80117fc:	4577      	cmp	r7, lr
 80117fe:	f849 1b04 	str.w	r1, [r9], #4
 8011802:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8011806:	d8e2      	bhi.n	80117ce <__multiply+0xb2>
 8011808:	9a01      	ldr	r2, [sp, #4]
 801180a:	f845 c002 	str.w	ip, [r5, r2]
 801180e:	9a03      	ldr	r2, [sp, #12]
 8011810:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8011814:	3304      	adds	r3, #4
 8011816:	f1b9 0f00 	cmp.w	r9, #0
 801181a:	d020      	beq.n	801185e <__multiply+0x142>
 801181c:	6829      	ldr	r1, [r5, #0]
 801181e:	f104 0c14 	add.w	ip, r4, #20
 8011822:	46ae      	mov	lr, r5
 8011824:	f04f 0a00 	mov.w	sl, #0
 8011828:	f8bc b000 	ldrh.w	fp, [ip]
 801182c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8011830:	fb09 220b 	mla	r2, r9, fp, r2
 8011834:	4492      	add	sl, r2
 8011836:	b289      	uxth	r1, r1
 8011838:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801183c:	f84e 1b04 	str.w	r1, [lr], #4
 8011840:	f85c 2b04 	ldr.w	r2, [ip], #4
 8011844:	f8be 1000 	ldrh.w	r1, [lr]
 8011848:	0c12      	lsrs	r2, r2, #16
 801184a:	fb09 1102 	mla	r1, r9, r2, r1
 801184e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8011852:	4567      	cmp	r7, ip
 8011854:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8011858:	d8e6      	bhi.n	8011828 <__multiply+0x10c>
 801185a:	9a01      	ldr	r2, [sp, #4]
 801185c:	50a9      	str	r1, [r5, r2]
 801185e:	3504      	adds	r5, #4
 8011860:	e79a      	b.n	8011798 <__multiply+0x7c>
 8011862:	3e01      	subs	r6, #1
 8011864:	e79c      	b.n	80117a0 <__multiply+0x84>
 8011866:	bf00      	nop
 8011868:	08013e28 	.word	0x08013e28
 801186c:	08013f18 	.word	0x08013f18

08011870 <__pow5mult>:
 8011870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011874:	4615      	mov	r5, r2
 8011876:	f012 0203 	ands.w	r2, r2, #3
 801187a:	4606      	mov	r6, r0
 801187c:	460f      	mov	r7, r1
 801187e:	d007      	beq.n	8011890 <__pow5mult+0x20>
 8011880:	4c25      	ldr	r4, [pc, #148]	; (8011918 <__pow5mult+0xa8>)
 8011882:	3a01      	subs	r2, #1
 8011884:	2300      	movs	r3, #0
 8011886:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801188a:	f7ff fe51 	bl	8011530 <__multadd>
 801188e:	4607      	mov	r7, r0
 8011890:	10ad      	asrs	r5, r5, #2
 8011892:	d03d      	beq.n	8011910 <__pow5mult+0xa0>
 8011894:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8011896:	b97c      	cbnz	r4, 80118b8 <__pow5mult+0x48>
 8011898:	2010      	movs	r0, #16
 801189a:	f7ff fdcd 	bl	8011438 <malloc>
 801189e:	4602      	mov	r2, r0
 80118a0:	6270      	str	r0, [r6, #36]	; 0x24
 80118a2:	b928      	cbnz	r0, 80118b0 <__pow5mult+0x40>
 80118a4:	4b1d      	ldr	r3, [pc, #116]	; (801191c <__pow5mult+0xac>)
 80118a6:	481e      	ldr	r0, [pc, #120]	; (8011920 <__pow5mult+0xb0>)
 80118a8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80118ac:	f000 fd7e 	bl	80123ac <__assert_func>
 80118b0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80118b4:	6004      	str	r4, [r0, #0]
 80118b6:	60c4      	str	r4, [r0, #12]
 80118b8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80118bc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80118c0:	b94c      	cbnz	r4, 80118d6 <__pow5mult+0x66>
 80118c2:	f240 2171 	movw	r1, #625	; 0x271
 80118c6:	4630      	mov	r0, r6
 80118c8:	f7ff ff12 	bl	80116f0 <__i2b>
 80118cc:	2300      	movs	r3, #0
 80118ce:	f8c8 0008 	str.w	r0, [r8, #8]
 80118d2:	4604      	mov	r4, r0
 80118d4:	6003      	str	r3, [r0, #0]
 80118d6:	f04f 0900 	mov.w	r9, #0
 80118da:	07eb      	lsls	r3, r5, #31
 80118dc:	d50a      	bpl.n	80118f4 <__pow5mult+0x84>
 80118de:	4639      	mov	r1, r7
 80118e0:	4622      	mov	r2, r4
 80118e2:	4630      	mov	r0, r6
 80118e4:	f7ff ff1a 	bl	801171c <__multiply>
 80118e8:	4639      	mov	r1, r7
 80118ea:	4680      	mov	r8, r0
 80118ec:	4630      	mov	r0, r6
 80118ee:	f7ff fdfd 	bl	80114ec <_Bfree>
 80118f2:	4647      	mov	r7, r8
 80118f4:	106d      	asrs	r5, r5, #1
 80118f6:	d00b      	beq.n	8011910 <__pow5mult+0xa0>
 80118f8:	6820      	ldr	r0, [r4, #0]
 80118fa:	b938      	cbnz	r0, 801190c <__pow5mult+0x9c>
 80118fc:	4622      	mov	r2, r4
 80118fe:	4621      	mov	r1, r4
 8011900:	4630      	mov	r0, r6
 8011902:	f7ff ff0b 	bl	801171c <__multiply>
 8011906:	6020      	str	r0, [r4, #0]
 8011908:	f8c0 9000 	str.w	r9, [r0]
 801190c:	4604      	mov	r4, r0
 801190e:	e7e4      	b.n	80118da <__pow5mult+0x6a>
 8011910:	4638      	mov	r0, r7
 8011912:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011916:	bf00      	nop
 8011918:	08014068 	.word	0x08014068
 801191c:	08013db6 	.word	0x08013db6
 8011920:	08013f18 	.word	0x08013f18

08011924 <__lshift>:
 8011924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011928:	460c      	mov	r4, r1
 801192a:	6849      	ldr	r1, [r1, #4]
 801192c:	6923      	ldr	r3, [r4, #16]
 801192e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8011932:	68a3      	ldr	r3, [r4, #8]
 8011934:	4607      	mov	r7, r0
 8011936:	4691      	mov	r9, r2
 8011938:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801193c:	f108 0601 	add.w	r6, r8, #1
 8011940:	42b3      	cmp	r3, r6
 8011942:	db0b      	blt.n	801195c <__lshift+0x38>
 8011944:	4638      	mov	r0, r7
 8011946:	f7ff fd91 	bl	801146c <_Balloc>
 801194a:	4605      	mov	r5, r0
 801194c:	b948      	cbnz	r0, 8011962 <__lshift+0x3e>
 801194e:	4602      	mov	r2, r0
 8011950:	4b2a      	ldr	r3, [pc, #168]	; (80119fc <__lshift+0xd8>)
 8011952:	482b      	ldr	r0, [pc, #172]	; (8011a00 <__lshift+0xdc>)
 8011954:	f240 11d9 	movw	r1, #473	; 0x1d9
 8011958:	f000 fd28 	bl	80123ac <__assert_func>
 801195c:	3101      	adds	r1, #1
 801195e:	005b      	lsls	r3, r3, #1
 8011960:	e7ee      	b.n	8011940 <__lshift+0x1c>
 8011962:	2300      	movs	r3, #0
 8011964:	f100 0114 	add.w	r1, r0, #20
 8011968:	f100 0210 	add.w	r2, r0, #16
 801196c:	4618      	mov	r0, r3
 801196e:	4553      	cmp	r3, sl
 8011970:	db37      	blt.n	80119e2 <__lshift+0xbe>
 8011972:	6920      	ldr	r0, [r4, #16]
 8011974:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011978:	f104 0314 	add.w	r3, r4, #20
 801197c:	f019 091f 	ands.w	r9, r9, #31
 8011980:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011984:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8011988:	d02f      	beq.n	80119ea <__lshift+0xc6>
 801198a:	f1c9 0e20 	rsb	lr, r9, #32
 801198e:	468a      	mov	sl, r1
 8011990:	f04f 0c00 	mov.w	ip, #0
 8011994:	681a      	ldr	r2, [r3, #0]
 8011996:	fa02 f209 	lsl.w	r2, r2, r9
 801199a:	ea42 020c 	orr.w	r2, r2, ip
 801199e:	f84a 2b04 	str.w	r2, [sl], #4
 80119a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80119a6:	4298      	cmp	r0, r3
 80119a8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80119ac:	d8f2      	bhi.n	8011994 <__lshift+0x70>
 80119ae:	1b03      	subs	r3, r0, r4
 80119b0:	3b15      	subs	r3, #21
 80119b2:	f023 0303 	bic.w	r3, r3, #3
 80119b6:	3304      	adds	r3, #4
 80119b8:	f104 0215 	add.w	r2, r4, #21
 80119bc:	4290      	cmp	r0, r2
 80119be:	bf38      	it	cc
 80119c0:	2304      	movcc	r3, #4
 80119c2:	f841 c003 	str.w	ip, [r1, r3]
 80119c6:	f1bc 0f00 	cmp.w	ip, #0
 80119ca:	d001      	beq.n	80119d0 <__lshift+0xac>
 80119cc:	f108 0602 	add.w	r6, r8, #2
 80119d0:	3e01      	subs	r6, #1
 80119d2:	4638      	mov	r0, r7
 80119d4:	612e      	str	r6, [r5, #16]
 80119d6:	4621      	mov	r1, r4
 80119d8:	f7ff fd88 	bl	80114ec <_Bfree>
 80119dc:	4628      	mov	r0, r5
 80119de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80119e2:	f842 0f04 	str.w	r0, [r2, #4]!
 80119e6:	3301      	adds	r3, #1
 80119e8:	e7c1      	b.n	801196e <__lshift+0x4a>
 80119ea:	3904      	subs	r1, #4
 80119ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80119f0:	f841 2f04 	str.w	r2, [r1, #4]!
 80119f4:	4298      	cmp	r0, r3
 80119f6:	d8f9      	bhi.n	80119ec <__lshift+0xc8>
 80119f8:	e7ea      	b.n	80119d0 <__lshift+0xac>
 80119fa:	bf00      	nop
 80119fc:	08013e28 	.word	0x08013e28
 8011a00:	08013f18 	.word	0x08013f18

08011a04 <__mcmp>:
 8011a04:	b530      	push	{r4, r5, lr}
 8011a06:	6902      	ldr	r2, [r0, #16]
 8011a08:	690c      	ldr	r4, [r1, #16]
 8011a0a:	1b12      	subs	r2, r2, r4
 8011a0c:	d10e      	bne.n	8011a2c <__mcmp+0x28>
 8011a0e:	f100 0314 	add.w	r3, r0, #20
 8011a12:	3114      	adds	r1, #20
 8011a14:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8011a18:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8011a1c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8011a20:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8011a24:	42a5      	cmp	r5, r4
 8011a26:	d003      	beq.n	8011a30 <__mcmp+0x2c>
 8011a28:	d305      	bcc.n	8011a36 <__mcmp+0x32>
 8011a2a:	2201      	movs	r2, #1
 8011a2c:	4610      	mov	r0, r2
 8011a2e:	bd30      	pop	{r4, r5, pc}
 8011a30:	4283      	cmp	r3, r0
 8011a32:	d3f3      	bcc.n	8011a1c <__mcmp+0x18>
 8011a34:	e7fa      	b.n	8011a2c <__mcmp+0x28>
 8011a36:	f04f 32ff 	mov.w	r2, #4294967295
 8011a3a:	e7f7      	b.n	8011a2c <__mcmp+0x28>

08011a3c <__mdiff>:
 8011a3c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a40:	460c      	mov	r4, r1
 8011a42:	4606      	mov	r6, r0
 8011a44:	4611      	mov	r1, r2
 8011a46:	4620      	mov	r0, r4
 8011a48:	4690      	mov	r8, r2
 8011a4a:	f7ff ffdb 	bl	8011a04 <__mcmp>
 8011a4e:	1e05      	subs	r5, r0, #0
 8011a50:	d110      	bne.n	8011a74 <__mdiff+0x38>
 8011a52:	4629      	mov	r1, r5
 8011a54:	4630      	mov	r0, r6
 8011a56:	f7ff fd09 	bl	801146c <_Balloc>
 8011a5a:	b930      	cbnz	r0, 8011a6a <__mdiff+0x2e>
 8011a5c:	4b3a      	ldr	r3, [pc, #232]	; (8011b48 <__mdiff+0x10c>)
 8011a5e:	4602      	mov	r2, r0
 8011a60:	f240 2132 	movw	r1, #562	; 0x232
 8011a64:	4839      	ldr	r0, [pc, #228]	; (8011b4c <__mdiff+0x110>)
 8011a66:	f000 fca1 	bl	80123ac <__assert_func>
 8011a6a:	2301      	movs	r3, #1
 8011a6c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8011a70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a74:	bfa4      	itt	ge
 8011a76:	4643      	movge	r3, r8
 8011a78:	46a0      	movge	r8, r4
 8011a7a:	4630      	mov	r0, r6
 8011a7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8011a80:	bfa6      	itte	ge
 8011a82:	461c      	movge	r4, r3
 8011a84:	2500      	movge	r5, #0
 8011a86:	2501      	movlt	r5, #1
 8011a88:	f7ff fcf0 	bl	801146c <_Balloc>
 8011a8c:	b920      	cbnz	r0, 8011a98 <__mdiff+0x5c>
 8011a8e:	4b2e      	ldr	r3, [pc, #184]	; (8011b48 <__mdiff+0x10c>)
 8011a90:	4602      	mov	r2, r0
 8011a92:	f44f 7110 	mov.w	r1, #576	; 0x240
 8011a96:	e7e5      	b.n	8011a64 <__mdiff+0x28>
 8011a98:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8011a9c:	6926      	ldr	r6, [r4, #16]
 8011a9e:	60c5      	str	r5, [r0, #12]
 8011aa0:	f104 0914 	add.w	r9, r4, #20
 8011aa4:	f108 0514 	add.w	r5, r8, #20
 8011aa8:	f100 0e14 	add.w	lr, r0, #20
 8011aac:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8011ab0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8011ab4:	f108 0210 	add.w	r2, r8, #16
 8011ab8:	46f2      	mov	sl, lr
 8011aba:	2100      	movs	r1, #0
 8011abc:	f859 3b04 	ldr.w	r3, [r9], #4
 8011ac0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8011ac4:	fa1f f883 	uxth.w	r8, r3
 8011ac8:	fa11 f18b 	uxtah	r1, r1, fp
 8011acc:	0c1b      	lsrs	r3, r3, #16
 8011ace:	eba1 0808 	sub.w	r8, r1, r8
 8011ad2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8011ad6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8011ada:	fa1f f888 	uxth.w	r8, r8
 8011ade:	1419      	asrs	r1, r3, #16
 8011ae0:	454e      	cmp	r6, r9
 8011ae2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8011ae6:	f84a 3b04 	str.w	r3, [sl], #4
 8011aea:	d8e7      	bhi.n	8011abc <__mdiff+0x80>
 8011aec:	1b33      	subs	r3, r6, r4
 8011aee:	3b15      	subs	r3, #21
 8011af0:	f023 0303 	bic.w	r3, r3, #3
 8011af4:	3304      	adds	r3, #4
 8011af6:	3415      	adds	r4, #21
 8011af8:	42a6      	cmp	r6, r4
 8011afa:	bf38      	it	cc
 8011afc:	2304      	movcc	r3, #4
 8011afe:	441d      	add	r5, r3
 8011b00:	4473      	add	r3, lr
 8011b02:	469e      	mov	lr, r3
 8011b04:	462e      	mov	r6, r5
 8011b06:	4566      	cmp	r6, ip
 8011b08:	d30e      	bcc.n	8011b28 <__mdiff+0xec>
 8011b0a:	f10c 0203 	add.w	r2, ip, #3
 8011b0e:	1b52      	subs	r2, r2, r5
 8011b10:	f022 0203 	bic.w	r2, r2, #3
 8011b14:	3d03      	subs	r5, #3
 8011b16:	45ac      	cmp	ip, r5
 8011b18:	bf38      	it	cc
 8011b1a:	2200      	movcc	r2, #0
 8011b1c:	441a      	add	r2, r3
 8011b1e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8011b22:	b17b      	cbz	r3, 8011b44 <__mdiff+0x108>
 8011b24:	6107      	str	r7, [r0, #16]
 8011b26:	e7a3      	b.n	8011a70 <__mdiff+0x34>
 8011b28:	f856 8b04 	ldr.w	r8, [r6], #4
 8011b2c:	fa11 f288 	uxtah	r2, r1, r8
 8011b30:	1414      	asrs	r4, r2, #16
 8011b32:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8011b36:	b292      	uxth	r2, r2
 8011b38:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8011b3c:	f84e 2b04 	str.w	r2, [lr], #4
 8011b40:	1421      	asrs	r1, r4, #16
 8011b42:	e7e0      	b.n	8011b06 <__mdiff+0xca>
 8011b44:	3f01      	subs	r7, #1
 8011b46:	e7ea      	b.n	8011b1e <__mdiff+0xe2>
 8011b48:	08013e28 	.word	0x08013e28
 8011b4c:	08013f18 	.word	0x08013f18

08011b50 <__ulp>:
 8011b50:	b082      	sub	sp, #8
 8011b52:	ed8d 0b00 	vstr	d0, [sp]
 8011b56:	9b01      	ldr	r3, [sp, #4]
 8011b58:	4912      	ldr	r1, [pc, #72]	; (8011ba4 <__ulp+0x54>)
 8011b5a:	4019      	ands	r1, r3
 8011b5c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8011b60:	2900      	cmp	r1, #0
 8011b62:	dd05      	ble.n	8011b70 <__ulp+0x20>
 8011b64:	2200      	movs	r2, #0
 8011b66:	460b      	mov	r3, r1
 8011b68:	ec43 2b10 	vmov	d0, r2, r3
 8011b6c:	b002      	add	sp, #8
 8011b6e:	4770      	bx	lr
 8011b70:	4249      	negs	r1, r1
 8011b72:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8011b76:	ea4f 5021 	mov.w	r0, r1, asr #20
 8011b7a:	f04f 0200 	mov.w	r2, #0
 8011b7e:	f04f 0300 	mov.w	r3, #0
 8011b82:	da04      	bge.n	8011b8e <__ulp+0x3e>
 8011b84:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8011b88:	fa41 f300 	asr.w	r3, r1, r0
 8011b8c:	e7ec      	b.n	8011b68 <__ulp+0x18>
 8011b8e:	f1a0 0114 	sub.w	r1, r0, #20
 8011b92:	291e      	cmp	r1, #30
 8011b94:	bfda      	itte	le
 8011b96:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8011b9a:	fa20 f101 	lsrle.w	r1, r0, r1
 8011b9e:	2101      	movgt	r1, #1
 8011ba0:	460a      	mov	r2, r1
 8011ba2:	e7e1      	b.n	8011b68 <__ulp+0x18>
 8011ba4:	7ff00000 	.word	0x7ff00000

08011ba8 <__b2d>:
 8011ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011baa:	6905      	ldr	r5, [r0, #16]
 8011bac:	f100 0714 	add.w	r7, r0, #20
 8011bb0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8011bb4:	1f2e      	subs	r6, r5, #4
 8011bb6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8011bba:	4620      	mov	r0, r4
 8011bbc:	f7ff fd48 	bl	8011650 <__hi0bits>
 8011bc0:	f1c0 0320 	rsb	r3, r0, #32
 8011bc4:	280a      	cmp	r0, #10
 8011bc6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8011c44 <__b2d+0x9c>
 8011bca:	600b      	str	r3, [r1, #0]
 8011bcc:	dc14      	bgt.n	8011bf8 <__b2d+0x50>
 8011bce:	f1c0 0e0b 	rsb	lr, r0, #11
 8011bd2:	fa24 f10e 	lsr.w	r1, r4, lr
 8011bd6:	42b7      	cmp	r7, r6
 8011bd8:	ea41 030c 	orr.w	r3, r1, ip
 8011bdc:	bf34      	ite	cc
 8011bde:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011be2:	2100      	movcs	r1, #0
 8011be4:	3015      	adds	r0, #21
 8011be6:	fa04 f000 	lsl.w	r0, r4, r0
 8011bea:	fa21 f10e 	lsr.w	r1, r1, lr
 8011bee:	ea40 0201 	orr.w	r2, r0, r1
 8011bf2:	ec43 2b10 	vmov	d0, r2, r3
 8011bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011bf8:	42b7      	cmp	r7, r6
 8011bfa:	bf3a      	itte	cc
 8011bfc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011c00:	f1a5 0608 	subcc.w	r6, r5, #8
 8011c04:	2100      	movcs	r1, #0
 8011c06:	380b      	subs	r0, #11
 8011c08:	d017      	beq.n	8011c3a <__b2d+0x92>
 8011c0a:	f1c0 0c20 	rsb	ip, r0, #32
 8011c0e:	fa04 f500 	lsl.w	r5, r4, r0
 8011c12:	42be      	cmp	r6, r7
 8011c14:	fa21 f40c 	lsr.w	r4, r1, ip
 8011c18:	ea45 0504 	orr.w	r5, r5, r4
 8011c1c:	bf8c      	ite	hi
 8011c1e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011c22:	2400      	movls	r4, #0
 8011c24:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8011c28:	fa01 f000 	lsl.w	r0, r1, r0
 8011c2c:	fa24 f40c 	lsr.w	r4, r4, ip
 8011c30:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011c34:	ea40 0204 	orr.w	r2, r0, r4
 8011c38:	e7db      	b.n	8011bf2 <__b2d+0x4a>
 8011c3a:	ea44 030c 	orr.w	r3, r4, ip
 8011c3e:	460a      	mov	r2, r1
 8011c40:	e7d7      	b.n	8011bf2 <__b2d+0x4a>
 8011c42:	bf00      	nop
 8011c44:	3ff00000 	.word	0x3ff00000

08011c48 <__d2b>:
 8011c48:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011c4c:	4689      	mov	r9, r1
 8011c4e:	2101      	movs	r1, #1
 8011c50:	ec57 6b10 	vmov	r6, r7, d0
 8011c54:	4690      	mov	r8, r2
 8011c56:	f7ff fc09 	bl	801146c <_Balloc>
 8011c5a:	4604      	mov	r4, r0
 8011c5c:	b930      	cbnz	r0, 8011c6c <__d2b+0x24>
 8011c5e:	4602      	mov	r2, r0
 8011c60:	4b25      	ldr	r3, [pc, #148]	; (8011cf8 <__d2b+0xb0>)
 8011c62:	4826      	ldr	r0, [pc, #152]	; (8011cfc <__d2b+0xb4>)
 8011c64:	f240 310a 	movw	r1, #778	; 0x30a
 8011c68:	f000 fba0 	bl	80123ac <__assert_func>
 8011c6c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8011c70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8011c74:	bb35      	cbnz	r5, 8011cc4 <__d2b+0x7c>
 8011c76:	2e00      	cmp	r6, #0
 8011c78:	9301      	str	r3, [sp, #4]
 8011c7a:	d028      	beq.n	8011cce <__d2b+0x86>
 8011c7c:	4668      	mov	r0, sp
 8011c7e:	9600      	str	r6, [sp, #0]
 8011c80:	f7ff fd06 	bl	8011690 <__lo0bits>
 8011c84:	9900      	ldr	r1, [sp, #0]
 8011c86:	b300      	cbz	r0, 8011cca <__d2b+0x82>
 8011c88:	9a01      	ldr	r2, [sp, #4]
 8011c8a:	f1c0 0320 	rsb	r3, r0, #32
 8011c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8011c92:	430b      	orrs	r3, r1
 8011c94:	40c2      	lsrs	r2, r0
 8011c96:	6163      	str	r3, [r4, #20]
 8011c98:	9201      	str	r2, [sp, #4]
 8011c9a:	9b01      	ldr	r3, [sp, #4]
 8011c9c:	61a3      	str	r3, [r4, #24]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	bf14      	ite	ne
 8011ca2:	2202      	movne	r2, #2
 8011ca4:	2201      	moveq	r2, #1
 8011ca6:	6122      	str	r2, [r4, #16]
 8011ca8:	b1d5      	cbz	r5, 8011ce0 <__d2b+0x98>
 8011caa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8011cae:	4405      	add	r5, r0
 8011cb0:	f8c9 5000 	str.w	r5, [r9]
 8011cb4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8011cb8:	f8c8 0000 	str.w	r0, [r8]
 8011cbc:	4620      	mov	r0, r4
 8011cbe:	b003      	add	sp, #12
 8011cc0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011cc4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8011cc8:	e7d5      	b.n	8011c76 <__d2b+0x2e>
 8011cca:	6161      	str	r1, [r4, #20]
 8011ccc:	e7e5      	b.n	8011c9a <__d2b+0x52>
 8011cce:	a801      	add	r0, sp, #4
 8011cd0:	f7ff fcde 	bl	8011690 <__lo0bits>
 8011cd4:	9b01      	ldr	r3, [sp, #4]
 8011cd6:	6163      	str	r3, [r4, #20]
 8011cd8:	2201      	movs	r2, #1
 8011cda:	6122      	str	r2, [r4, #16]
 8011cdc:	3020      	adds	r0, #32
 8011cde:	e7e3      	b.n	8011ca8 <__d2b+0x60>
 8011ce0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8011ce4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8011ce8:	f8c9 0000 	str.w	r0, [r9]
 8011cec:	6918      	ldr	r0, [r3, #16]
 8011cee:	f7ff fcaf 	bl	8011650 <__hi0bits>
 8011cf2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8011cf6:	e7df      	b.n	8011cb8 <__d2b+0x70>
 8011cf8:	08013e28 	.word	0x08013e28
 8011cfc:	08013f18 	.word	0x08013f18

08011d00 <__ratio>:
 8011d00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d04:	4688      	mov	r8, r1
 8011d06:	4669      	mov	r1, sp
 8011d08:	4681      	mov	r9, r0
 8011d0a:	f7ff ff4d 	bl	8011ba8 <__b2d>
 8011d0e:	a901      	add	r1, sp, #4
 8011d10:	4640      	mov	r0, r8
 8011d12:	ec55 4b10 	vmov	r4, r5, d0
 8011d16:	f7ff ff47 	bl	8011ba8 <__b2d>
 8011d1a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8011d1e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011d22:	eba3 0c02 	sub.w	ip, r3, r2
 8011d26:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011d2a:	1a9b      	subs	r3, r3, r2
 8011d2c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8011d30:	ec51 0b10 	vmov	r0, r1, d0
 8011d34:	2b00      	cmp	r3, #0
 8011d36:	bfd6      	itet	le
 8011d38:	460a      	movle	r2, r1
 8011d3a:	462a      	movgt	r2, r5
 8011d3c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8011d40:	468b      	mov	fp, r1
 8011d42:	462f      	mov	r7, r5
 8011d44:	bfd4      	ite	le
 8011d46:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8011d4a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8011d4e:	4620      	mov	r0, r4
 8011d50:	ee10 2a10 	vmov	r2, s0
 8011d54:	465b      	mov	r3, fp
 8011d56:	4639      	mov	r1, r7
 8011d58:	f7ee fda0 	bl	800089c <__aeabi_ddiv>
 8011d5c:	ec41 0b10 	vmov	d0, r0, r1
 8011d60:	b003      	add	sp, #12
 8011d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011d66 <__copybits>:
 8011d66:	3901      	subs	r1, #1
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	1149      	asrs	r1, r1, #5
 8011d6c:	6914      	ldr	r4, [r2, #16]
 8011d6e:	3101      	adds	r1, #1
 8011d70:	f102 0314 	add.w	r3, r2, #20
 8011d74:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011d78:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8011d7c:	1f05      	subs	r5, r0, #4
 8011d7e:	42a3      	cmp	r3, r4
 8011d80:	d30c      	bcc.n	8011d9c <__copybits+0x36>
 8011d82:	1aa3      	subs	r3, r4, r2
 8011d84:	3b11      	subs	r3, #17
 8011d86:	f023 0303 	bic.w	r3, r3, #3
 8011d8a:	3211      	adds	r2, #17
 8011d8c:	42a2      	cmp	r2, r4
 8011d8e:	bf88      	it	hi
 8011d90:	2300      	movhi	r3, #0
 8011d92:	4418      	add	r0, r3
 8011d94:	2300      	movs	r3, #0
 8011d96:	4288      	cmp	r0, r1
 8011d98:	d305      	bcc.n	8011da6 <__copybits+0x40>
 8011d9a:	bd70      	pop	{r4, r5, r6, pc}
 8011d9c:	f853 6b04 	ldr.w	r6, [r3], #4
 8011da0:	f845 6f04 	str.w	r6, [r5, #4]!
 8011da4:	e7eb      	b.n	8011d7e <__copybits+0x18>
 8011da6:	f840 3b04 	str.w	r3, [r0], #4
 8011daa:	e7f4      	b.n	8011d96 <__copybits+0x30>

08011dac <__any_on>:
 8011dac:	f100 0214 	add.w	r2, r0, #20
 8011db0:	6900      	ldr	r0, [r0, #16]
 8011db2:	114b      	asrs	r3, r1, #5
 8011db4:	4298      	cmp	r0, r3
 8011db6:	b510      	push	{r4, lr}
 8011db8:	db11      	blt.n	8011dde <__any_on+0x32>
 8011dba:	dd0a      	ble.n	8011dd2 <__any_on+0x26>
 8011dbc:	f011 011f 	ands.w	r1, r1, #31
 8011dc0:	d007      	beq.n	8011dd2 <__any_on+0x26>
 8011dc2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8011dc6:	fa24 f001 	lsr.w	r0, r4, r1
 8011dca:	fa00 f101 	lsl.w	r1, r0, r1
 8011dce:	428c      	cmp	r4, r1
 8011dd0:	d10b      	bne.n	8011dea <__any_on+0x3e>
 8011dd2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011dd6:	4293      	cmp	r3, r2
 8011dd8:	d803      	bhi.n	8011de2 <__any_on+0x36>
 8011dda:	2000      	movs	r0, #0
 8011ddc:	bd10      	pop	{r4, pc}
 8011dde:	4603      	mov	r3, r0
 8011de0:	e7f7      	b.n	8011dd2 <__any_on+0x26>
 8011de2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8011de6:	2900      	cmp	r1, #0
 8011de8:	d0f5      	beq.n	8011dd6 <__any_on+0x2a>
 8011dea:	2001      	movs	r0, #1
 8011dec:	e7f6      	b.n	8011ddc <__any_on+0x30>

08011dee <_calloc_r>:
 8011dee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011df0:	fba1 2402 	umull	r2, r4, r1, r2
 8011df4:	b94c      	cbnz	r4, 8011e0a <_calloc_r+0x1c>
 8011df6:	4611      	mov	r1, r2
 8011df8:	9201      	str	r2, [sp, #4]
 8011dfa:	f000 f87b 	bl	8011ef4 <_malloc_r>
 8011dfe:	9a01      	ldr	r2, [sp, #4]
 8011e00:	4605      	mov	r5, r0
 8011e02:	b930      	cbnz	r0, 8011e12 <_calloc_r+0x24>
 8011e04:	4628      	mov	r0, r5
 8011e06:	b003      	add	sp, #12
 8011e08:	bd30      	pop	{r4, r5, pc}
 8011e0a:	220c      	movs	r2, #12
 8011e0c:	6002      	str	r2, [r0, #0]
 8011e0e:	2500      	movs	r5, #0
 8011e10:	e7f8      	b.n	8011e04 <_calloc_r+0x16>
 8011e12:	4621      	mov	r1, r4
 8011e14:	f7fc fa86 	bl	800e324 <memset>
 8011e18:	e7f4      	b.n	8011e04 <_calloc_r+0x16>
	...

08011e1c <_free_r>:
 8011e1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011e1e:	2900      	cmp	r1, #0
 8011e20:	d044      	beq.n	8011eac <_free_r+0x90>
 8011e22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011e26:	9001      	str	r0, [sp, #4]
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	f1a1 0404 	sub.w	r4, r1, #4
 8011e2e:	bfb8      	it	lt
 8011e30:	18e4      	addlt	r4, r4, r3
 8011e32:	f000 fb2f 	bl	8012494 <__malloc_lock>
 8011e36:	4a1e      	ldr	r2, [pc, #120]	; (8011eb0 <_free_r+0x94>)
 8011e38:	9801      	ldr	r0, [sp, #4]
 8011e3a:	6813      	ldr	r3, [r2, #0]
 8011e3c:	b933      	cbnz	r3, 8011e4c <_free_r+0x30>
 8011e3e:	6063      	str	r3, [r4, #4]
 8011e40:	6014      	str	r4, [r2, #0]
 8011e42:	b003      	add	sp, #12
 8011e44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011e48:	f000 bb2a 	b.w	80124a0 <__malloc_unlock>
 8011e4c:	42a3      	cmp	r3, r4
 8011e4e:	d908      	bls.n	8011e62 <_free_r+0x46>
 8011e50:	6825      	ldr	r5, [r4, #0]
 8011e52:	1961      	adds	r1, r4, r5
 8011e54:	428b      	cmp	r3, r1
 8011e56:	bf01      	itttt	eq
 8011e58:	6819      	ldreq	r1, [r3, #0]
 8011e5a:	685b      	ldreq	r3, [r3, #4]
 8011e5c:	1949      	addeq	r1, r1, r5
 8011e5e:	6021      	streq	r1, [r4, #0]
 8011e60:	e7ed      	b.n	8011e3e <_free_r+0x22>
 8011e62:	461a      	mov	r2, r3
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	b10b      	cbz	r3, 8011e6c <_free_r+0x50>
 8011e68:	42a3      	cmp	r3, r4
 8011e6a:	d9fa      	bls.n	8011e62 <_free_r+0x46>
 8011e6c:	6811      	ldr	r1, [r2, #0]
 8011e6e:	1855      	adds	r5, r2, r1
 8011e70:	42a5      	cmp	r5, r4
 8011e72:	d10b      	bne.n	8011e8c <_free_r+0x70>
 8011e74:	6824      	ldr	r4, [r4, #0]
 8011e76:	4421      	add	r1, r4
 8011e78:	1854      	adds	r4, r2, r1
 8011e7a:	42a3      	cmp	r3, r4
 8011e7c:	6011      	str	r1, [r2, #0]
 8011e7e:	d1e0      	bne.n	8011e42 <_free_r+0x26>
 8011e80:	681c      	ldr	r4, [r3, #0]
 8011e82:	685b      	ldr	r3, [r3, #4]
 8011e84:	6053      	str	r3, [r2, #4]
 8011e86:	4421      	add	r1, r4
 8011e88:	6011      	str	r1, [r2, #0]
 8011e8a:	e7da      	b.n	8011e42 <_free_r+0x26>
 8011e8c:	d902      	bls.n	8011e94 <_free_r+0x78>
 8011e8e:	230c      	movs	r3, #12
 8011e90:	6003      	str	r3, [r0, #0]
 8011e92:	e7d6      	b.n	8011e42 <_free_r+0x26>
 8011e94:	6825      	ldr	r5, [r4, #0]
 8011e96:	1961      	adds	r1, r4, r5
 8011e98:	428b      	cmp	r3, r1
 8011e9a:	bf04      	itt	eq
 8011e9c:	6819      	ldreq	r1, [r3, #0]
 8011e9e:	685b      	ldreq	r3, [r3, #4]
 8011ea0:	6063      	str	r3, [r4, #4]
 8011ea2:	bf04      	itt	eq
 8011ea4:	1949      	addeq	r1, r1, r5
 8011ea6:	6021      	streq	r1, [r4, #0]
 8011ea8:	6054      	str	r4, [r2, #4]
 8011eaa:	e7ca      	b.n	8011e42 <_free_r+0x26>
 8011eac:	b003      	add	sp, #12
 8011eae:	bd30      	pop	{r4, r5, pc}
 8011eb0:	20005170 	.word	0x20005170

08011eb4 <sbrk_aligned>:
 8011eb4:	b570      	push	{r4, r5, r6, lr}
 8011eb6:	4e0e      	ldr	r6, [pc, #56]	; (8011ef0 <sbrk_aligned+0x3c>)
 8011eb8:	460c      	mov	r4, r1
 8011eba:	6831      	ldr	r1, [r6, #0]
 8011ebc:	4605      	mov	r5, r0
 8011ebe:	b911      	cbnz	r1, 8011ec6 <sbrk_aligned+0x12>
 8011ec0:	f000 f9ee 	bl	80122a0 <_sbrk_r>
 8011ec4:	6030      	str	r0, [r6, #0]
 8011ec6:	4621      	mov	r1, r4
 8011ec8:	4628      	mov	r0, r5
 8011eca:	f000 f9e9 	bl	80122a0 <_sbrk_r>
 8011ece:	1c43      	adds	r3, r0, #1
 8011ed0:	d00a      	beq.n	8011ee8 <sbrk_aligned+0x34>
 8011ed2:	1cc4      	adds	r4, r0, #3
 8011ed4:	f024 0403 	bic.w	r4, r4, #3
 8011ed8:	42a0      	cmp	r0, r4
 8011eda:	d007      	beq.n	8011eec <sbrk_aligned+0x38>
 8011edc:	1a21      	subs	r1, r4, r0
 8011ede:	4628      	mov	r0, r5
 8011ee0:	f000 f9de 	bl	80122a0 <_sbrk_r>
 8011ee4:	3001      	adds	r0, #1
 8011ee6:	d101      	bne.n	8011eec <sbrk_aligned+0x38>
 8011ee8:	f04f 34ff 	mov.w	r4, #4294967295
 8011eec:	4620      	mov	r0, r4
 8011eee:	bd70      	pop	{r4, r5, r6, pc}
 8011ef0:	20005174 	.word	0x20005174

08011ef4 <_malloc_r>:
 8011ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011ef8:	1ccd      	adds	r5, r1, #3
 8011efa:	f025 0503 	bic.w	r5, r5, #3
 8011efe:	3508      	adds	r5, #8
 8011f00:	2d0c      	cmp	r5, #12
 8011f02:	bf38      	it	cc
 8011f04:	250c      	movcc	r5, #12
 8011f06:	2d00      	cmp	r5, #0
 8011f08:	4607      	mov	r7, r0
 8011f0a:	db01      	blt.n	8011f10 <_malloc_r+0x1c>
 8011f0c:	42a9      	cmp	r1, r5
 8011f0e:	d905      	bls.n	8011f1c <_malloc_r+0x28>
 8011f10:	230c      	movs	r3, #12
 8011f12:	603b      	str	r3, [r7, #0]
 8011f14:	2600      	movs	r6, #0
 8011f16:	4630      	mov	r0, r6
 8011f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011f1c:	4e2e      	ldr	r6, [pc, #184]	; (8011fd8 <_malloc_r+0xe4>)
 8011f1e:	f000 fab9 	bl	8012494 <__malloc_lock>
 8011f22:	6833      	ldr	r3, [r6, #0]
 8011f24:	461c      	mov	r4, r3
 8011f26:	bb34      	cbnz	r4, 8011f76 <_malloc_r+0x82>
 8011f28:	4629      	mov	r1, r5
 8011f2a:	4638      	mov	r0, r7
 8011f2c:	f7ff ffc2 	bl	8011eb4 <sbrk_aligned>
 8011f30:	1c43      	adds	r3, r0, #1
 8011f32:	4604      	mov	r4, r0
 8011f34:	d14d      	bne.n	8011fd2 <_malloc_r+0xde>
 8011f36:	6834      	ldr	r4, [r6, #0]
 8011f38:	4626      	mov	r6, r4
 8011f3a:	2e00      	cmp	r6, #0
 8011f3c:	d140      	bne.n	8011fc0 <_malloc_r+0xcc>
 8011f3e:	6823      	ldr	r3, [r4, #0]
 8011f40:	4631      	mov	r1, r6
 8011f42:	4638      	mov	r0, r7
 8011f44:	eb04 0803 	add.w	r8, r4, r3
 8011f48:	f000 f9aa 	bl	80122a0 <_sbrk_r>
 8011f4c:	4580      	cmp	r8, r0
 8011f4e:	d13a      	bne.n	8011fc6 <_malloc_r+0xd2>
 8011f50:	6821      	ldr	r1, [r4, #0]
 8011f52:	3503      	adds	r5, #3
 8011f54:	1a6d      	subs	r5, r5, r1
 8011f56:	f025 0503 	bic.w	r5, r5, #3
 8011f5a:	3508      	adds	r5, #8
 8011f5c:	2d0c      	cmp	r5, #12
 8011f5e:	bf38      	it	cc
 8011f60:	250c      	movcc	r5, #12
 8011f62:	4629      	mov	r1, r5
 8011f64:	4638      	mov	r0, r7
 8011f66:	f7ff ffa5 	bl	8011eb4 <sbrk_aligned>
 8011f6a:	3001      	adds	r0, #1
 8011f6c:	d02b      	beq.n	8011fc6 <_malloc_r+0xd2>
 8011f6e:	6823      	ldr	r3, [r4, #0]
 8011f70:	442b      	add	r3, r5
 8011f72:	6023      	str	r3, [r4, #0]
 8011f74:	e00e      	b.n	8011f94 <_malloc_r+0xa0>
 8011f76:	6822      	ldr	r2, [r4, #0]
 8011f78:	1b52      	subs	r2, r2, r5
 8011f7a:	d41e      	bmi.n	8011fba <_malloc_r+0xc6>
 8011f7c:	2a0b      	cmp	r2, #11
 8011f7e:	d916      	bls.n	8011fae <_malloc_r+0xba>
 8011f80:	1961      	adds	r1, r4, r5
 8011f82:	42a3      	cmp	r3, r4
 8011f84:	6025      	str	r5, [r4, #0]
 8011f86:	bf18      	it	ne
 8011f88:	6059      	strne	r1, [r3, #4]
 8011f8a:	6863      	ldr	r3, [r4, #4]
 8011f8c:	bf08      	it	eq
 8011f8e:	6031      	streq	r1, [r6, #0]
 8011f90:	5162      	str	r2, [r4, r5]
 8011f92:	604b      	str	r3, [r1, #4]
 8011f94:	4638      	mov	r0, r7
 8011f96:	f104 060b 	add.w	r6, r4, #11
 8011f9a:	f000 fa81 	bl	80124a0 <__malloc_unlock>
 8011f9e:	f026 0607 	bic.w	r6, r6, #7
 8011fa2:	1d23      	adds	r3, r4, #4
 8011fa4:	1af2      	subs	r2, r6, r3
 8011fa6:	d0b6      	beq.n	8011f16 <_malloc_r+0x22>
 8011fa8:	1b9b      	subs	r3, r3, r6
 8011faa:	50a3      	str	r3, [r4, r2]
 8011fac:	e7b3      	b.n	8011f16 <_malloc_r+0x22>
 8011fae:	6862      	ldr	r2, [r4, #4]
 8011fb0:	42a3      	cmp	r3, r4
 8011fb2:	bf0c      	ite	eq
 8011fb4:	6032      	streq	r2, [r6, #0]
 8011fb6:	605a      	strne	r2, [r3, #4]
 8011fb8:	e7ec      	b.n	8011f94 <_malloc_r+0xa0>
 8011fba:	4623      	mov	r3, r4
 8011fbc:	6864      	ldr	r4, [r4, #4]
 8011fbe:	e7b2      	b.n	8011f26 <_malloc_r+0x32>
 8011fc0:	4634      	mov	r4, r6
 8011fc2:	6876      	ldr	r6, [r6, #4]
 8011fc4:	e7b9      	b.n	8011f3a <_malloc_r+0x46>
 8011fc6:	230c      	movs	r3, #12
 8011fc8:	603b      	str	r3, [r7, #0]
 8011fca:	4638      	mov	r0, r7
 8011fcc:	f000 fa68 	bl	80124a0 <__malloc_unlock>
 8011fd0:	e7a1      	b.n	8011f16 <_malloc_r+0x22>
 8011fd2:	6025      	str	r5, [r4, #0]
 8011fd4:	e7de      	b.n	8011f94 <_malloc_r+0xa0>
 8011fd6:	bf00      	nop
 8011fd8:	20005170 	.word	0x20005170

08011fdc <__sfputc_r>:
 8011fdc:	6893      	ldr	r3, [r2, #8]
 8011fde:	3b01      	subs	r3, #1
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	b410      	push	{r4}
 8011fe4:	6093      	str	r3, [r2, #8]
 8011fe6:	da08      	bge.n	8011ffa <__sfputc_r+0x1e>
 8011fe8:	6994      	ldr	r4, [r2, #24]
 8011fea:	42a3      	cmp	r3, r4
 8011fec:	db01      	blt.n	8011ff2 <__sfputc_r+0x16>
 8011fee:	290a      	cmp	r1, #10
 8011ff0:	d103      	bne.n	8011ffa <__sfputc_r+0x1e>
 8011ff2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011ff6:	f7fd bd51 	b.w	800fa9c <__swbuf_r>
 8011ffa:	6813      	ldr	r3, [r2, #0]
 8011ffc:	1c58      	adds	r0, r3, #1
 8011ffe:	6010      	str	r0, [r2, #0]
 8012000:	7019      	strb	r1, [r3, #0]
 8012002:	4608      	mov	r0, r1
 8012004:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012008:	4770      	bx	lr

0801200a <__sfputs_r>:
 801200a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801200c:	4606      	mov	r6, r0
 801200e:	460f      	mov	r7, r1
 8012010:	4614      	mov	r4, r2
 8012012:	18d5      	adds	r5, r2, r3
 8012014:	42ac      	cmp	r4, r5
 8012016:	d101      	bne.n	801201c <__sfputs_r+0x12>
 8012018:	2000      	movs	r0, #0
 801201a:	e007      	b.n	801202c <__sfputs_r+0x22>
 801201c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012020:	463a      	mov	r2, r7
 8012022:	4630      	mov	r0, r6
 8012024:	f7ff ffda 	bl	8011fdc <__sfputc_r>
 8012028:	1c43      	adds	r3, r0, #1
 801202a:	d1f3      	bne.n	8012014 <__sfputs_r+0xa>
 801202c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08012030 <_vfiprintf_r>:
 8012030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012034:	460d      	mov	r5, r1
 8012036:	b09d      	sub	sp, #116	; 0x74
 8012038:	4614      	mov	r4, r2
 801203a:	4698      	mov	r8, r3
 801203c:	4606      	mov	r6, r0
 801203e:	b118      	cbz	r0, 8012048 <_vfiprintf_r+0x18>
 8012040:	6983      	ldr	r3, [r0, #24]
 8012042:	b90b      	cbnz	r3, 8012048 <_vfiprintf_r+0x18>
 8012044:	f7fe fd80 	bl	8010b48 <__sinit>
 8012048:	4b89      	ldr	r3, [pc, #548]	; (8012270 <_vfiprintf_r+0x240>)
 801204a:	429d      	cmp	r5, r3
 801204c:	d11b      	bne.n	8012086 <_vfiprintf_r+0x56>
 801204e:	6875      	ldr	r5, [r6, #4]
 8012050:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012052:	07d9      	lsls	r1, r3, #31
 8012054:	d405      	bmi.n	8012062 <_vfiprintf_r+0x32>
 8012056:	89ab      	ldrh	r3, [r5, #12]
 8012058:	059a      	lsls	r2, r3, #22
 801205a:	d402      	bmi.n	8012062 <_vfiprintf_r+0x32>
 801205c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801205e:	f7ff f984 	bl	801136a <__retarget_lock_acquire_recursive>
 8012062:	89ab      	ldrh	r3, [r5, #12]
 8012064:	071b      	lsls	r3, r3, #28
 8012066:	d501      	bpl.n	801206c <_vfiprintf_r+0x3c>
 8012068:	692b      	ldr	r3, [r5, #16]
 801206a:	b9eb      	cbnz	r3, 80120a8 <_vfiprintf_r+0x78>
 801206c:	4629      	mov	r1, r5
 801206e:	4630      	mov	r0, r6
 8012070:	f7fd fd66 	bl	800fb40 <__swsetup_r>
 8012074:	b1c0      	cbz	r0, 80120a8 <_vfiprintf_r+0x78>
 8012076:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012078:	07dc      	lsls	r4, r3, #31
 801207a:	d50e      	bpl.n	801209a <_vfiprintf_r+0x6a>
 801207c:	f04f 30ff 	mov.w	r0, #4294967295
 8012080:	b01d      	add	sp, #116	; 0x74
 8012082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012086:	4b7b      	ldr	r3, [pc, #492]	; (8012274 <_vfiprintf_r+0x244>)
 8012088:	429d      	cmp	r5, r3
 801208a:	d101      	bne.n	8012090 <_vfiprintf_r+0x60>
 801208c:	68b5      	ldr	r5, [r6, #8]
 801208e:	e7df      	b.n	8012050 <_vfiprintf_r+0x20>
 8012090:	4b79      	ldr	r3, [pc, #484]	; (8012278 <_vfiprintf_r+0x248>)
 8012092:	429d      	cmp	r5, r3
 8012094:	bf08      	it	eq
 8012096:	68f5      	ldreq	r5, [r6, #12]
 8012098:	e7da      	b.n	8012050 <_vfiprintf_r+0x20>
 801209a:	89ab      	ldrh	r3, [r5, #12]
 801209c:	0598      	lsls	r0, r3, #22
 801209e:	d4ed      	bmi.n	801207c <_vfiprintf_r+0x4c>
 80120a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80120a2:	f7ff f963 	bl	801136c <__retarget_lock_release_recursive>
 80120a6:	e7e9      	b.n	801207c <_vfiprintf_r+0x4c>
 80120a8:	2300      	movs	r3, #0
 80120aa:	9309      	str	r3, [sp, #36]	; 0x24
 80120ac:	2320      	movs	r3, #32
 80120ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80120b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80120b6:	2330      	movs	r3, #48	; 0x30
 80120b8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801227c <_vfiprintf_r+0x24c>
 80120bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80120c0:	f04f 0901 	mov.w	r9, #1
 80120c4:	4623      	mov	r3, r4
 80120c6:	469a      	mov	sl, r3
 80120c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80120cc:	b10a      	cbz	r2, 80120d2 <_vfiprintf_r+0xa2>
 80120ce:	2a25      	cmp	r2, #37	; 0x25
 80120d0:	d1f9      	bne.n	80120c6 <_vfiprintf_r+0x96>
 80120d2:	ebba 0b04 	subs.w	fp, sl, r4
 80120d6:	d00b      	beq.n	80120f0 <_vfiprintf_r+0xc0>
 80120d8:	465b      	mov	r3, fp
 80120da:	4622      	mov	r2, r4
 80120dc:	4629      	mov	r1, r5
 80120de:	4630      	mov	r0, r6
 80120e0:	f7ff ff93 	bl	801200a <__sfputs_r>
 80120e4:	3001      	adds	r0, #1
 80120e6:	f000 80aa 	beq.w	801223e <_vfiprintf_r+0x20e>
 80120ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120ec:	445a      	add	r2, fp
 80120ee:	9209      	str	r2, [sp, #36]	; 0x24
 80120f0:	f89a 3000 	ldrb.w	r3, [sl]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	f000 80a2 	beq.w	801223e <_vfiprintf_r+0x20e>
 80120fa:	2300      	movs	r3, #0
 80120fc:	f04f 32ff 	mov.w	r2, #4294967295
 8012100:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012104:	f10a 0a01 	add.w	sl, sl, #1
 8012108:	9304      	str	r3, [sp, #16]
 801210a:	9307      	str	r3, [sp, #28]
 801210c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8012110:	931a      	str	r3, [sp, #104]	; 0x68
 8012112:	4654      	mov	r4, sl
 8012114:	2205      	movs	r2, #5
 8012116:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211a:	4858      	ldr	r0, [pc, #352]	; (801227c <_vfiprintf_r+0x24c>)
 801211c:	f7ee f888 	bl	8000230 <memchr>
 8012120:	9a04      	ldr	r2, [sp, #16]
 8012122:	b9d8      	cbnz	r0, 801215c <_vfiprintf_r+0x12c>
 8012124:	06d1      	lsls	r1, r2, #27
 8012126:	bf44      	itt	mi
 8012128:	2320      	movmi	r3, #32
 801212a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801212e:	0713      	lsls	r3, r2, #28
 8012130:	bf44      	itt	mi
 8012132:	232b      	movmi	r3, #43	; 0x2b
 8012134:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012138:	f89a 3000 	ldrb.w	r3, [sl]
 801213c:	2b2a      	cmp	r3, #42	; 0x2a
 801213e:	d015      	beq.n	801216c <_vfiprintf_r+0x13c>
 8012140:	9a07      	ldr	r2, [sp, #28]
 8012142:	4654      	mov	r4, sl
 8012144:	2000      	movs	r0, #0
 8012146:	f04f 0c0a 	mov.w	ip, #10
 801214a:	4621      	mov	r1, r4
 801214c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8012150:	3b30      	subs	r3, #48	; 0x30
 8012152:	2b09      	cmp	r3, #9
 8012154:	d94e      	bls.n	80121f4 <_vfiprintf_r+0x1c4>
 8012156:	b1b0      	cbz	r0, 8012186 <_vfiprintf_r+0x156>
 8012158:	9207      	str	r2, [sp, #28]
 801215a:	e014      	b.n	8012186 <_vfiprintf_r+0x156>
 801215c:	eba0 0308 	sub.w	r3, r0, r8
 8012160:	fa09 f303 	lsl.w	r3, r9, r3
 8012164:	4313      	orrs	r3, r2
 8012166:	9304      	str	r3, [sp, #16]
 8012168:	46a2      	mov	sl, r4
 801216a:	e7d2      	b.n	8012112 <_vfiprintf_r+0xe2>
 801216c:	9b03      	ldr	r3, [sp, #12]
 801216e:	1d19      	adds	r1, r3, #4
 8012170:	681b      	ldr	r3, [r3, #0]
 8012172:	9103      	str	r1, [sp, #12]
 8012174:	2b00      	cmp	r3, #0
 8012176:	bfbb      	ittet	lt
 8012178:	425b      	neglt	r3, r3
 801217a:	f042 0202 	orrlt.w	r2, r2, #2
 801217e:	9307      	strge	r3, [sp, #28]
 8012180:	9307      	strlt	r3, [sp, #28]
 8012182:	bfb8      	it	lt
 8012184:	9204      	strlt	r2, [sp, #16]
 8012186:	7823      	ldrb	r3, [r4, #0]
 8012188:	2b2e      	cmp	r3, #46	; 0x2e
 801218a:	d10c      	bne.n	80121a6 <_vfiprintf_r+0x176>
 801218c:	7863      	ldrb	r3, [r4, #1]
 801218e:	2b2a      	cmp	r3, #42	; 0x2a
 8012190:	d135      	bne.n	80121fe <_vfiprintf_r+0x1ce>
 8012192:	9b03      	ldr	r3, [sp, #12]
 8012194:	1d1a      	adds	r2, r3, #4
 8012196:	681b      	ldr	r3, [r3, #0]
 8012198:	9203      	str	r2, [sp, #12]
 801219a:	2b00      	cmp	r3, #0
 801219c:	bfb8      	it	lt
 801219e:	f04f 33ff 	movlt.w	r3, #4294967295
 80121a2:	3402      	adds	r4, #2
 80121a4:	9305      	str	r3, [sp, #20]
 80121a6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801228c <_vfiprintf_r+0x25c>
 80121aa:	7821      	ldrb	r1, [r4, #0]
 80121ac:	2203      	movs	r2, #3
 80121ae:	4650      	mov	r0, sl
 80121b0:	f7ee f83e 	bl	8000230 <memchr>
 80121b4:	b140      	cbz	r0, 80121c8 <_vfiprintf_r+0x198>
 80121b6:	2340      	movs	r3, #64	; 0x40
 80121b8:	eba0 000a 	sub.w	r0, r0, sl
 80121bc:	fa03 f000 	lsl.w	r0, r3, r0
 80121c0:	9b04      	ldr	r3, [sp, #16]
 80121c2:	4303      	orrs	r3, r0
 80121c4:	3401      	adds	r4, #1
 80121c6:	9304      	str	r3, [sp, #16]
 80121c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80121cc:	482c      	ldr	r0, [pc, #176]	; (8012280 <_vfiprintf_r+0x250>)
 80121ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80121d2:	2206      	movs	r2, #6
 80121d4:	f7ee f82c 	bl	8000230 <memchr>
 80121d8:	2800      	cmp	r0, #0
 80121da:	d03f      	beq.n	801225c <_vfiprintf_r+0x22c>
 80121dc:	4b29      	ldr	r3, [pc, #164]	; (8012284 <_vfiprintf_r+0x254>)
 80121de:	bb1b      	cbnz	r3, 8012228 <_vfiprintf_r+0x1f8>
 80121e0:	9b03      	ldr	r3, [sp, #12]
 80121e2:	3307      	adds	r3, #7
 80121e4:	f023 0307 	bic.w	r3, r3, #7
 80121e8:	3308      	adds	r3, #8
 80121ea:	9303      	str	r3, [sp, #12]
 80121ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121ee:	443b      	add	r3, r7
 80121f0:	9309      	str	r3, [sp, #36]	; 0x24
 80121f2:	e767      	b.n	80120c4 <_vfiprintf_r+0x94>
 80121f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80121f8:	460c      	mov	r4, r1
 80121fa:	2001      	movs	r0, #1
 80121fc:	e7a5      	b.n	801214a <_vfiprintf_r+0x11a>
 80121fe:	2300      	movs	r3, #0
 8012200:	3401      	adds	r4, #1
 8012202:	9305      	str	r3, [sp, #20]
 8012204:	4619      	mov	r1, r3
 8012206:	f04f 0c0a 	mov.w	ip, #10
 801220a:	4620      	mov	r0, r4
 801220c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8012210:	3a30      	subs	r2, #48	; 0x30
 8012212:	2a09      	cmp	r2, #9
 8012214:	d903      	bls.n	801221e <_vfiprintf_r+0x1ee>
 8012216:	2b00      	cmp	r3, #0
 8012218:	d0c5      	beq.n	80121a6 <_vfiprintf_r+0x176>
 801221a:	9105      	str	r1, [sp, #20]
 801221c:	e7c3      	b.n	80121a6 <_vfiprintf_r+0x176>
 801221e:	fb0c 2101 	mla	r1, ip, r1, r2
 8012222:	4604      	mov	r4, r0
 8012224:	2301      	movs	r3, #1
 8012226:	e7f0      	b.n	801220a <_vfiprintf_r+0x1da>
 8012228:	ab03      	add	r3, sp, #12
 801222a:	9300      	str	r3, [sp, #0]
 801222c:	462a      	mov	r2, r5
 801222e:	4b16      	ldr	r3, [pc, #88]	; (8012288 <_vfiprintf_r+0x258>)
 8012230:	a904      	add	r1, sp, #16
 8012232:	4630      	mov	r0, r6
 8012234:	f7fc f91e 	bl	800e474 <_printf_float>
 8012238:	4607      	mov	r7, r0
 801223a:	1c78      	adds	r0, r7, #1
 801223c:	d1d6      	bne.n	80121ec <_vfiprintf_r+0x1bc>
 801223e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012240:	07d9      	lsls	r1, r3, #31
 8012242:	d405      	bmi.n	8012250 <_vfiprintf_r+0x220>
 8012244:	89ab      	ldrh	r3, [r5, #12]
 8012246:	059a      	lsls	r2, r3, #22
 8012248:	d402      	bmi.n	8012250 <_vfiprintf_r+0x220>
 801224a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801224c:	f7ff f88e 	bl	801136c <__retarget_lock_release_recursive>
 8012250:	89ab      	ldrh	r3, [r5, #12]
 8012252:	065b      	lsls	r3, r3, #25
 8012254:	f53f af12 	bmi.w	801207c <_vfiprintf_r+0x4c>
 8012258:	9809      	ldr	r0, [sp, #36]	; 0x24
 801225a:	e711      	b.n	8012080 <_vfiprintf_r+0x50>
 801225c:	ab03      	add	r3, sp, #12
 801225e:	9300      	str	r3, [sp, #0]
 8012260:	462a      	mov	r2, r5
 8012262:	4b09      	ldr	r3, [pc, #36]	; (8012288 <_vfiprintf_r+0x258>)
 8012264:	a904      	add	r1, sp, #16
 8012266:	4630      	mov	r0, r6
 8012268:	f7fc fba8 	bl	800e9bc <_printf_i>
 801226c:	e7e4      	b.n	8012238 <_vfiprintf_r+0x208>
 801226e:	bf00      	nop
 8012270:	08013e5c 	.word	0x08013e5c
 8012274:	08013e7c 	.word	0x08013e7c
 8012278:	08013e3c 	.word	0x08013e3c
 801227c:	08014074 	.word	0x08014074
 8012280:	0801407e 	.word	0x0801407e
 8012284:	0800e475 	.word	0x0800e475
 8012288:	0801200b 	.word	0x0801200b
 801228c:	0801407a 	.word	0x0801407a

08012290 <nan>:
 8012290:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8012298 <nan+0x8>
 8012294:	4770      	bx	lr
 8012296:	bf00      	nop
 8012298:	00000000 	.word	0x00000000
 801229c:	7ff80000 	.word	0x7ff80000

080122a0 <_sbrk_r>:
 80122a0:	b538      	push	{r3, r4, r5, lr}
 80122a2:	4d06      	ldr	r5, [pc, #24]	; (80122bc <_sbrk_r+0x1c>)
 80122a4:	2300      	movs	r3, #0
 80122a6:	4604      	mov	r4, r0
 80122a8:	4608      	mov	r0, r1
 80122aa:	602b      	str	r3, [r5, #0]
 80122ac:	f7f2 fee2 	bl	8005074 <_sbrk>
 80122b0:	1c43      	adds	r3, r0, #1
 80122b2:	d102      	bne.n	80122ba <_sbrk_r+0x1a>
 80122b4:	682b      	ldr	r3, [r5, #0]
 80122b6:	b103      	cbz	r3, 80122ba <_sbrk_r+0x1a>
 80122b8:	6023      	str	r3, [r4, #0]
 80122ba:	bd38      	pop	{r3, r4, r5, pc}
 80122bc:	20005178 	.word	0x20005178

080122c0 <__sread>:
 80122c0:	b510      	push	{r4, lr}
 80122c2:	460c      	mov	r4, r1
 80122c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122c8:	f000 f8f0 	bl	80124ac <_read_r>
 80122cc:	2800      	cmp	r0, #0
 80122ce:	bfab      	itete	ge
 80122d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80122d2:	89a3      	ldrhlt	r3, [r4, #12]
 80122d4:	181b      	addge	r3, r3, r0
 80122d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80122da:	bfac      	ite	ge
 80122dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80122de:	81a3      	strhlt	r3, [r4, #12]
 80122e0:	bd10      	pop	{r4, pc}

080122e2 <__swrite>:
 80122e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122e6:	461f      	mov	r7, r3
 80122e8:	898b      	ldrh	r3, [r1, #12]
 80122ea:	05db      	lsls	r3, r3, #23
 80122ec:	4605      	mov	r5, r0
 80122ee:	460c      	mov	r4, r1
 80122f0:	4616      	mov	r6, r2
 80122f2:	d505      	bpl.n	8012300 <__swrite+0x1e>
 80122f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80122f8:	2302      	movs	r3, #2
 80122fa:	2200      	movs	r2, #0
 80122fc:	f000 f8b8 	bl	8012470 <_lseek_r>
 8012300:	89a3      	ldrh	r3, [r4, #12]
 8012302:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8012306:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801230a:	81a3      	strh	r3, [r4, #12]
 801230c:	4632      	mov	r2, r6
 801230e:	463b      	mov	r3, r7
 8012310:	4628      	mov	r0, r5
 8012312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012316:	f000 b837 	b.w	8012388 <_write_r>

0801231a <__sseek>:
 801231a:	b510      	push	{r4, lr}
 801231c:	460c      	mov	r4, r1
 801231e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012322:	f000 f8a5 	bl	8012470 <_lseek_r>
 8012326:	1c43      	adds	r3, r0, #1
 8012328:	89a3      	ldrh	r3, [r4, #12]
 801232a:	bf15      	itete	ne
 801232c:	6560      	strne	r0, [r4, #84]	; 0x54
 801232e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012332:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8012336:	81a3      	strheq	r3, [r4, #12]
 8012338:	bf18      	it	ne
 801233a:	81a3      	strhne	r3, [r4, #12]
 801233c:	bd10      	pop	{r4, pc}

0801233e <__sclose>:
 801233e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012342:	f000 b851 	b.w	80123e8 <_close_r>

08012346 <strncmp>:
 8012346:	b510      	push	{r4, lr}
 8012348:	b17a      	cbz	r2, 801236a <strncmp+0x24>
 801234a:	4603      	mov	r3, r0
 801234c:	3901      	subs	r1, #1
 801234e:	1884      	adds	r4, r0, r2
 8012350:	f813 0b01 	ldrb.w	r0, [r3], #1
 8012354:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8012358:	4290      	cmp	r0, r2
 801235a:	d101      	bne.n	8012360 <strncmp+0x1a>
 801235c:	42a3      	cmp	r3, r4
 801235e:	d101      	bne.n	8012364 <strncmp+0x1e>
 8012360:	1a80      	subs	r0, r0, r2
 8012362:	bd10      	pop	{r4, pc}
 8012364:	2800      	cmp	r0, #0
 8012366:	d1f3      	bne.n	8012350 <strncmp+0xa>
 8012368:	e7fa      	b.n	8012360 <strncmp+0x1a>
 801236a:	4610      	mov	r0, r2
 801236c:	e7f9      	b.n	8012362 <strncmp+0x1c>

0801236e <__ascii_wctomb>:
 801236e:	b149      	cbz	r1, 8012384 <__ascii_wctomb+0x16>
 8012370:	2aff      	cmp	r2, #255	; 0xff
 8012372:	bf85      	ittet	hi
 8012374:	238a      	movhi	r3, #138	; 0x8a
 8012376:	6003      	strhi	r3, [r0, #0]
 8012378:	700a      	strbls	r2, [r1, #0]
 801237a:	f04f 30ff 	movhi.w	r0, #4294967295
 801237e:	bf98      	it	ls
 8012380:	2001      	movls	r0, #1
 8012382:	4770      	bx	lr
 8012384:	4608      	mov	r0, r1
 8012386:	4770      	bx	lr

08012388 <_write_r>:
 8012388:	b538      	push	{r3, r4, r5, lr}
 801238a:	4d07      	ldr	r5, [pc, #28]	; (80123a8 <_write_r+0x20>)
 801238c:	4604      	mov	r4, r0
 801238e:	4608      	mov	r0, r1
 8012390:	4611      	mov	r1, r2
 8012392:	2200      	movs	r2, #0
 8012394:	602a      	str	r2, [r5, #0]
 8012396:	461a      	mov	r2, r3
 8012398:	f7f2 fe1b 	bl	8004fd2 <_write>
 801239c:	1c43      	adds	r3, r0, #1
 801239e:	d102      	bne.n	80123a6 <_write_r+0x1e>
 80123a0:	682b      	ldr	r3, [r5, #0]
 80123a2:	b103      	cbz	r3, 80123a6 <_write_r+0x1e>
 80123a4:	6023      	str	r3, [r4, #0]
 80123a6:	bd38      	pop	{r3, r4, r5, pc}
 80123a8:	20005178 	.word	0x20005178

080123ac <__assert_func>:
 80123ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80123ae:	4614      	mov	r4, r2
 80123b0:	461a      	mov	r2, r3
 80123b2:	4b09      	ldr	r3, [pc, #36]	; (80123d8 <__assert_func+0x2c>)
 80123b4:	681b      	ldr	r3, [r3, #0]
 80123b6:	4605      	mov	r5, r0
 80123b8:	68d8      	ldr	r0, [r3, #12]
 80123ba:	b14c      	cbz	r4, 80123d0 <__assert_func+0x24>
 80123bc:	4b07      	ldr	r3, [pc, #28]	; (80123dc <__assert_func+0x30>)
 80123be:	9100      	str	r1, [sp, #0]
 80123c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80123c4:	4906      	ldr	r1, [pc, #24]	; (80123e0 <__assert_func+0x34>)
 80123c6:	462b      	mov	r3, r5
 80123c8:	f000 f81e 	bl	8012408 <fiprintf>
 80123cc:	f000 f880 	bl	80124d0 <abort>
 80123d0:	4b04      	ldr	r3, [pc, #16]	; (80123e4 <__assert_func+0x38>)
 80123d2:	461c      	mov	r4, r3
 80123d4:	e7f3      	b.n	80123be <__assert_func+0x12>
 80123d6:	bf00      	nop
 80123d8:	2000002c 	.word	0x2000002c
 80123dc:	08014085 	.word	0x08014085
 80123e0:	08014092 	.word	0x08014092
 80123e4:	080140c0 	.word	0x080140c0

080123e8 <_close_r>:
 80123e8:	b538      	push	{r3, r4, r5, lr}
 80123ea:	4d06      	ldr	r5, [pc, #24]	; (8012404 <_close_r+0x1c>)
 80123ec:	2300      	movs	r3, #0
 80123ee:	4604      	mov	r4, r0
 80123f0:	4608      	mov	r0, r1
 80123f2:	602b      	str	r3, [r5, #0]
 80123f4:	f7f2 fe09 	bl	800500a <_close>
 80123f8:	1c43      	adds	r3, r0, #1
 80123fa:	d102      	bne.n	8012402 <_close_r+0x1a>
 80123fc:	682b      	ldr	r3, [r5, #0]
 80123fe:	b103      	cbz	r3, 8012402 <_close_r+0x1a>
 8012400:	6023      	str	r3, [r4, #0]
 8012402:	bd38      	pop	{r3, r4, r5, pc}
 8012404:	20005178 	.word	0x20005178

08012408 <fiprintf>:
 8012408:	b40e      	push	{r1, r2, r3}
 801240a:	b503      	push	{r0, r1, lr}
 801240c:	4601      	mov	r1, r0
 801240e:	ab03      	add	r3, sp, #12
 8012410:	4805      	ldr	r0, [pc, #20]	; (8012428 <fiprintf+0x20>)
 8012412:	f853 2b04 	ldr.w	r2, [r3], #4
 8012416:	6800      	ldr	r0, [r0, #0]
 8012418:	9301      	str	r3, [sp, #4]
 801241a:	f7ff fe09 	bl	8012030 <_vfiprintf_r>
 801241e:	b002      	add	sp, #8
 8012420:	f85d eb04 	ldr.w	lr, [sp], #4
 8012424:	b003      	add	sp, #12
 8012426:	4770      	bx	lr
 8012428:	2000002c 	.word	0x2000002c

0801242c <_fstat_r>:
 801242c:	b538      	push	{r3, r4, r5, lr}
 801242e:	4d07      	ldr	r5, [pc, #28]	; (801244c <_fstat_r+0x20>)
 8012430:	2300      	movs	r3, #0
 8012432:	4604      	mov	r4, r0
 8012434:	4608      	mov	r0, r1
 8012436:	4611      	mov	r1, r2
 8012438:	602b      	str	r3, [r5, #0]
 801243a:	f7f2 fdf2 	bl	8005022 <_fstat>
 801243e:	1c43      	adds	r3, r0, #1
 8012440:	d102      	bne.n	8012448 <_fstat_r+0x1c>
 8012442:	682b      	ldr	r3, [r5, #0]
 8012444:	b103      	cbz	r3, 8012448 <_fstat_r+0x1c>
 8012446:	6023      	str	r3, [r4, #0]
 8012448:	bd38      	pop	{r3, r4, r5, pc}
 801244a:	bf00      	nop
 801244c:	20005178 	.word	0x20005178

08012450 <_isatty_r>:
 8012450:	b538      	push	{r3, r4, r5, lr}
 8012452:	4d06      	ldr	r5, [pc, #24]	; (801246c <_isatty_r+0x1c>)
 8012454:	2300      	movs	r3, #0
 8012456:	4604      	mov	r4, r0
 8012458:	4608      	mov	r0, r1
 801245a:	602b      	str	r3, [r5, #0]
 801245c:	f7f2 fdf1 	bl	8005042 <_isatty>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	d102      	bne.n	801246a <_isatty_r+0x1a>
 8012464:	682b      	ldr	r3, [r5, #0]
 8012466:	b103      	cbz	r3, 801246a <_isatty_r+0x1a>
 8012468:	6023      	str	r3, [r4, #0]
 801246a:	bd38      	pop	{r3, r4, r5, pc}
 801246c:	20005178 	.word	0x20005178

08012470 <_lseek_r>:
 8012470:	b538      	push	{r3, r4, r5, lr}
 8012472:	4d07      	ldr	r5, [pc, #28]	; (8012490 <_lseek_r+0x20>)
 8012474:	4604      	mov	r4, r0
 8012476:	4608      	mov	r0, r1
 8012478:	4611      	mov	r1, r2
 801247a:	2200      	movs	r2, #0
 801247c:	602a      	str	r2, [r5, #0]
 801247e:	461a      	mov	r2, r3
 8012480:	f7f2 fdea 	bl	8005058 <_lseek>
 8012484:	1c43      	adds	r3, r0, #1
 8012486:	d102      	bne.n	801248e <_lseek_r+0x1e>
 8012488:	682b      	ldr	r3, [r5, #0]
 801248a:	b103      	cbz	r3, 801248e <_lseek_r+0x1e>
 801248c:	6023      	str	r3, [r4, #0]
 801248e:	bd38      	pop	{r3, r4, r5, pc}
 8012490:	20005178 	.word	0x20005178

08012494 <__malloc_lock>:
 8012494:	4801      	ldr	r0, [pc, #4]	; (801249c <__malloc_lock+0x8>)
 8012496:	f7fe bf68 	b.w	801136a <__retarget_lock_acquire_recursive>
 801249a:	bf00      	nop
 801249c:	2000516c 	.word	0x2000516c

080124a0 <__malloc_unlock>:
 80124a0:	4801      	ldr	r0, [pc, #4]	; (80124a8 <__malloc_unlock+0x8>)
 80124a2:	f7fe bf63 	b.w	801136c <__retarget_lock_release_recursive>
 80124a6:	bf00      	nop
 80124a8:	2000516c 	.word	0x2000516c

080124ac <_read_r>:
 80124ac:	b538      	push	{r3, r4, r5, lr}
 80124ae:	4d07      	ldr	r5, [pc, #28]	; (80124cc <_read_r+0x20>)
 80124b0:	4604      	mov	r4, r0
 80124b2:	4608      	mov	r0, r1
 80124b4:	4611      	mov	r1, r2
 80124b6:	2200      	movs	r2, #0
 80124b8:	602a      	str	r2, [r5, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	f7f2 fd6c 	bl	8004f98 <_read>
 80124c0:	1c43      	adds	r3, r0, #1
 80124c2:	d102      	bne.n	80124ca <_read_r+0x1e>
 80124c4:	682b      	ldr	r3, [r5, #0]
 80124c6:	b103      	cbz	r3, 80124ca <_read_r+0x1e>
 80124c8:	6023      	str	r3, [r4, #0]
 80124ca:	bd38      	pop	{r3, r4, r5, pc}
 80124cc:	20005178 	.word	0x20005178

080124d0 <abort>:
 80124d0:	b508      	push	{r3, lr}
 80124d2:	2006      	movs	r0, #6
 80124d4:	f000 f82c 	bl	8012530 <raise>
 80124d8:	2001      	movs	r0, #1
 80124da:	f7f2 fd53 	bl	8004f84 <_exit>

080124de <_raise_r>:
 80124de:	291f      	cmp	r1, #31
 80124e0:	b538      	push	{r3, r4, r5, lr}
 80124e2:	4604      	mov	r4, r0
 80124e4:	460d      	mov	r5, r1
 80124e6:	d904      	bls.n	80124f2 <_raise_r+0x14>
 80124e8:	2316      	movs	r3, #22
 80124ea:	6003      	str	r3, [r0, #0]
 80124ec:	f04f 30ff 	mov.w	r0, #4294967295
 80124f0:	bd38      	pop	{r3, r4, r5, pc}
 80124f2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80124f4:	b112      	cbz	r2, 80124fc <_raise_r+0x1e>
 80124f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80124fa:	b94b      	cbnz	r3, 8012510 <_raise_r+0x32>
 80124fc:	4620      	mov	r0, r4
 80124fe:	f000 f831 	bl	8012564 <_getpid_r>
 8012502:	462a      	mov	r2, r5
 8012504:	4601      	mov	r1, r0
 8012506:	4620      	mov	r0, r4
 8012508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801250c:	f000 b818 	b.w	8012540 <_kill_r>
 8012510:	2b01      	cmp	r3, #1
 8012512:	d00a      	beq.n	801252a <_raise_r+0x4c>
 8012514:	1c59      	adds	r1, r3, #1
 8012516:	d103      	bne.n	8012520 <_raise_r+0x42>
 8012518:	2316      	movs	r3, #22
 801251a:	6003      	str	r3, [r0, #0]
 801251c:	2001      	movs	r0, #1
 801251e:	e7e7      	b.n	80124f0 <_raise_r+0x12>
 8012520:	2400      	movs	r4, #0
 8012522:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8012526:	4628      	mov	r0, r5
 8012528:	4798      	blx	r3
 801252a:	2000      	movs	r0, #0
 801252c:	e7e0      	b.n	80124f0 <_raise_r+0x12>
	...

08012530 <raise>:
 8012530:	4b02      	ldr	r3, [pc, #8]	; (801253c <raise+0xc>)
 8012532:	4601      	mov	r1, r0
 8012534:	6818      	ldr	r0, [r3, #0]
 8012536:	f7ff bfd2 	b.w	80124de <_raise_r>
 801253a:	bf00      	nop
 801253c:	2000002c 	.word	0x2000002c

08012540 <_kill_r>:
 8012540:	b538      	push	{r3, r4, r5, lr}
 8012542:	4d07      	ldr	r5, [pc, #28]	; (8012560 <_kill_r+0x20>)
 8012544:	2300      	movs	r3, #0
 8012546:	4604      	mov	r4, r0
 8012548:	4608      	mov	r0, r1
 801254a:	4611      	mov	r1, r2
 801254c:	602b      	str	r3, [r5, #0]
 801254e:	f7f2 fd09 	bl	8004f64 <_kill>
 8012552:	1c43      	adds	r3, r0, #1
 8012554:	d102      	bne.n	801255c <_kill_r+0x1c>
 8012556:	682b      	ldr	r3, [r5, #0]
 8012558:	b103      	cbz	r3, 801255c <_kill_r+0x1c>
 801255a:	6023      	str	r3, [r4, #0]
 801255c:	bd38      	pop	{r3, r4, r5, pc}
 801255e:	bf00      	nop
 8012560:	20005178 	.word	0x20005178

08012564 <_getpid_r>:
 8012564:	f7f2 bcf6 	b.w	8004f54 <_getpid>

08012568 <round>:
 8012568:	ec51 0b10 	vmov	r0, r1, d0
 801256c:	b570      	push	{r4, r5, r6, lr}
 801256e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8012572:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8012576:	2c13      	cmp	r4, #19
 8012578:	ee10 2a10 	vmov	r2, s0
 801257c:	460b      	mov	r3, r1
 801257e:	dc19      	bgt.n	80125b4 <round+0x4c>
 8012580:	2c00      	cmp	r4, #0
 8012582:	da09      	bge.n	8012598 <round+0x30>
 8012584:	3401      	adds	r4, #1
 8012586:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801258a:	d103      	bne.n	8012594 <round+0x2c>
 801258c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8012590:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8012594:	2200      	movs	r2, #0
 8012596:	e028      	b.n	80125ea <round+0x82>
 8012598:	4d15      	ldr	r5, [pc, #84]	; (80125f0 <round+0x88>)
 801259a:	4125      	asrs	r5, r4
 801259c:	ea01 0605 	and.w	r6, r1, r5
 80125a0:	4332      	orrs	r2, r6
 80125a2:	d00e      	beq.n	80125c2 <round+0x5a>
 80125a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80125a8:	fa42 f404 	asr.w	r4, r2, r4
 80125ac:	4423      	add	r3, r4
 80125ae:	ea23 0305 	bic.w	r3, r3, r5
 80125b2:	e7ef      	b.n	8012594 <round+0x2c>
 80125b4:	2c33      	cmp	r4, #51	; 0x33
 80125b6:	dd07      	ble.n	80125c8 <round+0x60>
 80125b8:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80125bc:	d101      	bne.n	80125c2 <round+0x5a>
 80125be:	f7ed fe8d 	bl	80002dc <__adddf3>
 80125c2:	ec41 0b10 	vmov	d0, r0, r1
 80125c6:	bd70      	pop	{r4, r5, r6, pc}
 80125c8:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80125cc:	f04f 35ff 	mov.w	r5, #4294967295
 80125d0:	40f5      	lsrs	r5, r6
 80125d2:	4228      	tst	r0, r5
 80125d4:	d0f5      	beq.n	80125c2 <round+0x5a>
 80125d6:	2101      	movs	r1, #1
 80125d8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80125dc:	fa01 f404 	lsl.w	r4, r1, r4
 80125e0:	1912      	adds	r2, r2, r4
 80125e2:	bf28      	it	cs
 80125e4:	185b      	addcs	r3, r3, r1
 80125e6:	ea22 0205 	bic.w	r2, r2, r5
 80125ea:	4619      	mov	r1, r3
 80125ec:	4610      	mov	r0, r2
 80125ee:	e7e8      	b.n	80125c2 <round+0x5a>
 80125f0:	000fffff 	.word	0x000fffff

080125f4 <fmaxf>:
 80125f4:	b508      	push	{r3, lr}
 80125f6:	ed2d 8b02 	vpush	{d8}
 80125fa:	eeb0 8a40 	vmov.f32	s16, s0
 80125fe:	eef0 8a60 	vmov.f32	s17, s1
 8012602:	f000 f82d 	bl	8012660 <__fpclassifyf>
 8012606:	b148      	cbz	r0, 801261c <fmaxf+0x28>
 8012608:	eeb0 0a68 	vmov.f32	s0, s17
 801260c:	f000 f828 	bl	8012660 <__fpclassifyf>
 8012610:	b130      	cbz	r0, 8012620 <fmaxf+0x2c>
 8012612:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801261a:	dc01      	bgt.n	8012620 <fmaxf+0x2c>
 801261c:	eeb0 8a68 	vmov.f32	s16, s17
 8012620:	eeb0 0a48 	vmov.f32	s0, s16
 8012624:	ecbd 8b02 	vpop	{d8}
 8012628:	bd08      	pop	{r3, pc}

0801262a <fminf>:
 801262a:	b508      	push	{r3, lr}
 801262c:	ed2d 8b02 	vpush	{d8}
 8012630:	eeb0 8a40 	vmov.f32	s16, s0
 8012634:	eef0 8a60 	vmov.f32	s17, s1
 8012638:	f000 f812 	bl	8012660 <__fpclassifyf>
 801263c:	b148      	cbz	r0, 8012652 <fminf+0x28>
 801263e:	eeb0 0a68 	vmov.f32	s0, s17
 8012642:	f000 f80d 	bl	8012660 <__fpclassifyf>
 8012646:	b130      	cbz	r0, 8012656 <fminf+0x2c>
 8012648:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801264c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012650:	d401      	bmi.n	8012656 <fminf+0x2c>
 8012652:	eeb0 8a68 	vmov.f32	s16, s17
 8012656:	eeb0 0a48 	vmov.f32	s0, s16
 801265a:	ecbd 8b02 	vpop	{d8}
 801265e:	bd08      	pop	{r3, pc}

08012660 <__fpclassifyf>:
 8012660:	ee10 3a10 	vmov	r3, s0
 8012664:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8012668:	d00d      	beq.n	8012686 <__fpclassifyf+0x26>
 801266a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801266e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8012672:	d30a      	bcc.n	801268a <__fpclassifyf+0x2a>
 8012674:	4b07      	ldr	r3, [pc, #28]	; (8012694 <__fpclassifyf+0x34>)
 8012676:	1e42      	subs	r2, r0, #1
 8012678:	429a      	cmp	r2, r3
 801267a:	d908      	bls.n	801268e <__fpclassifyf+0x2e>
 801267c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8012680:	4258      	negs	r0, r3
 8012682:	4158      	adcs	r0, r3
 8012684:	4770      	bx	lr
 8012686:	2002      	movs	r0, #2
 8012688:	4770      	bx	lr
 801268a:	2004      	movs	r0, #4
 801268c:	4770      	bx	lr
 801268e:	2003      	movs	r0, #3
 8012690:	4770      	bx	lr
 8012692:	bf00      	nop
 8012694:	007ffffe 	.word	0x007ffffe

08012698 <exp>:
 8012698:	b538      	push	{r3, r4, r5, lr}
 801269a:	ed2d 8b02 	vpush	{d8}
 801269e:	ec55 4b10 	vmov	r4, r5, d0
 80126a2:	f000 f881 	bl	80127a8 <__ieee754_exp>
 80126a6:	eeb0 8a40 	vmov.f32	s16, s0
 80126aa:	eef0 8a60 	vmov.f32	s17, s1
 80126ae:	ec45 4b10 	vmov	d0, r4, r5
 80126b2:	f000 fab0 	bl	8012c16 <finite>
 80126b6:	b168      	cbz	r0, 80126d4 <exp+0x3c>
 80126b8:	a317      	add	r3, pc, #92	; (adr r3, 8012718 <exp+0x80>)
 80126ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126be:	4620      	mov	r0, r4
 80126c0:	4629      	mov	r1, r5
 80126c2:	f7ee fa51 	bl	8000b68 <__aeabi_dcmpgt>
 80126c6:	b160      	cbz	r0, 80126e2 <exp+0x4a>
 80126c8:	f7fb fdf4 	bl	800e2b4 <__errno>
 80126cc:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 8012708 <exp+0x70>
 80126d0:	2322      	movs	r3, #34	; 0x22
 80126d2:	6003      	str	r3, [r0, #0]
 80126d4:	eeb0 0a48 	vmov.f32	s0, s16
 80126d8:	eef0 0a68 	vmov.f32	s1, s17
 80126dc:	ecbd 8b02 	vpop	{d8}
 80126e0:	bd38      	pop	{r3, r4, r5, pc}
 80126e2:	a30f      	add	r3, pc, #60	; (adr r3, 8012720 <exp+0x88>)
 80126e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126e8:	4620      	mov	r0, r4
 80126ea:	4629      	mov	r1, r5
 80126ec:	f7ee fa1e 	bl	8000b2c <__aeabi_dcmplt>
 80126f0:	2800      	cmp	r0, #0
 80126f2:	d0ef      	beq.n	80126d4 <exp+0x3c>
 80126f4:	f7fb fdde 	bl	800e2b4 <__errno>
 80126f8:	2322      	movs	r3, #34	; 0x22
 80126fa:	ed9f 8b05 	vldr	d8, [pc, #20]	; 8012710 <exp+0x78>
 80126fe:	6003      	str	r3, [r0, #0]
 8012700:	e7e8      	b.n	80126d4 <exp+0x3c>
 8012702:	bf00      	nop
 8012704:	f3af 8000 	nop.w
 8012708:	00000000 	.word	0x00000000
 801270c:	7ff00000 	.word	0x7ff00000
	...
 8012718:	fefa39ef 	.word	0xfefa39ef
 801271c:	40862e42 	.word	0x40862e42
 8012720:	d52d3051 	.word	0xd52d3051
 8012724:	c0874910 	.word	0xc0874910

08012728 <fmodf>:
 8012728:	b508      	push	{r3, lr}
 801272a:	ed2d 8b02 	vpush	{d8}
 801272e:	eef0 8a40 	vmov.f32	s17, s0
 8012732:	eeb0 8a60 	vmov.f32	s16, s1
 8012736:	f000 f9b9 	bl	8012aac <__ieee754_fmodf>
 801273a:	eef4 8a48 	vcmp.f32	s17, s16
 801273e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012742:	d60c      	bvs.n	801275e <fmodf+0x36>
 8012744:	eddf 8a07 	vldr	s17, [pc, #28]	; 8012764 <fmodf+0x3c>
 8012748:	eeb4 8a68 	vcmp.f32	s16, s17
 801274c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012750:	d105      	bne.n	801275e <fmodf+0x36>
 8012752:	f7fb fdaf 	bl	800e2b4 <__errno>
 8012756:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801275a:	2321      	movs	r3, #33	; 0x21
 801275c:	6003      	str	r3, [r0, #0]
 801275e:	ecbd 8b02 	vpop	{d8}
 8012762:	bd08      	pop	{r3, pc}
 8012764:	00000000 	.word	0x00000000

08012768 <sqrtf>:
 8012768:	b508      	push	{r3, lr}
 801276a:	ed2d 8b02 	vpush	{d8}
 801276e:	eeb0 8a40 	vmov.f32	s16, s0
 8012772:	f000 fa1d 	bl	8012bb0 <__ieee754_sqrtf>
 8012776:	eeb4 8a48 	vcmp.f32	s16, s16
 801277a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801277e:	d60c      	bvs.n	801279a <sqrtf+0x32>
 8012780:	eddf 8a07 	vldr	s17, [pc, #28]	; 80127a0 <sqrtf+0x38>
 8012784:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8012788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801278c:	d505      	bpl.n	801279a <sqrtf+0x32>
 801278e:	f7fb fd91 	bl	800e2b4 <__errno>
 8012792:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8012796:	2321      	movs	r3, #33	; 0x21
 8012798:	6003      	str	r3, [r0, #0]
 801279a:	ecbd 8b02 	vpop	{d8}
 801279e:	bd08      	pop	{r3, pc}
	...

080127a8 <__ieee754_exp>:
 80127a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80127ac:	ec55 4b10 	vmov	r4, r5, d0
 80127b0:	49b5      	ldr	r1, [pc, #724]	; (8012a88 <__ieee754_exp+0x2e0>)
 80127b2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80127b6:	428b      	cmp	r3, r1
 80127b8:	ed2d 8b04 	vpush	{d8-d9}
 80127bc:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 80127c0:	d93d      	bls.n	801283e <__ieee754_exp+0x96>
 80127c2:	49b2      	ldr	r1, [pc, #712]	; (8012a8c <__ieee754_exp+0x2e4>)
 80127c4:	428b      	cmp	r3, r1
 80127c6:	d918      	bls.n	80127fa <__ieee754_exp+0x52>
 80127c8:	ee10 3a10 	vmov	r3, s0
 80127cc:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80127d0:	4313      	orrs	r3, r2
 80127d2:	d009      	beq.n	80127e8 <__ieee754_exp+0x40>
 80127d4:	ee10 2a10 	vmov	r2, s0
 80127d8:	462b      	mov	r3, r5
 80127da:	4620      	mov	r0, r4
 80127dc:	4629      	mov	r1, r5
 80127de:	f7ed fd7d 	bl	80002dc <__adddf3>
 80127e2:	4604      	mov	r4, r0
 80127e4:	460d      	mov	r5, r1
 80127e6:	e002      	b.n	80127ee <__ieee754_exp+0x46>
 80127e8:	b10e      	cbz	r6, 80127ee <__ieee754_exp+0x46>
 80127ea:	2400      	movs	r4, #0
 80127ec:	2500      	movs	r5, #0
 80127ee:	ecbd 8b04 	vpop	{d8-d9}
 80127f2:	ec45 4b10 	vmov	d0, r4, r5
 80127f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80127fa:	a38d      	add	r3, pc, #564	; (adr r3, 8012a30 <__ieee754_exp+0x288>)
 80127fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012800:	ee10 0a10 	vmov	r0, s0
 8012804:	4629      	mov	r1, r5
 8012806:	f7ee f9af 	bl	8000b68 <__aeabi_dcmpgt>
 801280a:	4607      	mov	r7, r0
 801280c:	b130      	cbz	r0, 801281c <__ieee754_exp+0x74>
 801280e:	ecbd 8b04 	vpop	{d8-d9}
 8012812:	2000      	movs	r0, #0
 8012814:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012818:	f000 b9f4 	b.w	8012c04 <__math_oflow>
 801281c:	a386      	add	r3, pc, #536	; (adr r3, 8012a38 <__ieee754_exp+0x290>)
 801281e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012822:	4620      	mov	r0, r4
 8012824:	4629      	mov	r1, r5
 8012826:	f7ee f981 	bl	8000b2c <__aeabi_dcmplt>
 801282a:	2800      	cmp	r0, #0
 801282c:	f000 808b 	beq.w	8012946 <__ieee754_exp+0x19e>
 8012830:	ecbd 8b04 	vpop	{d8-d9}
 8012834:	4638      	mov	r0, r7
 8012836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801283a:	f000 b9da 	b.w	8012bf2 <__math_uflow>
 801283e:	4a94      	ldr	r2, [pc, #592]	; (8012a90 <__ieee754_exp+0x2e8>)
 8012840:	4293      	cmp	r3, r2
 8012842:	f240 80ac 	bls.w	801299e <__ieee754_exp+0x1f6>
 8012846:	4a93      	ldr	r2, [pc, #588]	; (8012a94 <__ieee754_exp+0x2ec>)
 8012848:	4293      	cmp	r3, r2
 801284a:	d87c      	bhi.n	8012946 <__ieee754_exp+0x19e>
 801284c:	4b92      	ldr	r3, [pc, #584]	; (8012a98 <__ieee754_exp+0x2f0>)
 801284e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012856:	ee10 0a10 	vmov	r0, s0
 801285a:	4629      	mov	r1, r5
 801285c:	f7ed fd3c 	bl	80002d8 <__aeabi_dsub>
 8012860:	4b8e      	ldr	r3, [pc, #568]	; (8012a9c <__ieee754_exp+0x2f4>)
 8012862:	00f7      	lsls	r7, r6, #3
 8012864:	443b      	add	r3, r7
 8012866:	ed93 7b00 	vldr	d7, [r3]
 801286a:	f1c6 0a01 	rsb	sl, r6, #1
 801286e:	4680      	mov	r8, r0
 8012870:	4689      	mov	r9, r1
 8012872:	ebaa 0a06 	sub.w	sl, sl, r6
 8012876:	eeb0 8a47 	vmov.f32	s16, s14
 801287a:	eef0 8a67 	vmov.f32	s17, s15
 801287e:	ec53 2b18 	vmov	r2, r3, d8
 8012882:	4640      	mov	r0, r8
 8012884:	4649      	mov	r1, r9
 8012886:	f7ed fd27 	bl	80002d8 <__aeabi_dsub>
 801288a:	4604      	mov	r4, r0
 801288c:	460d      	mov	r5, r1
 801288e:	4622      	mov	r2, r4
 8012890:	462b      	mov	r3, r5
 8012892:	4620      	mov	r0, r4
 8012894:	4629      	mov	r1, r5
 8012896:	f7ed fed7 	bl	8000648 <__aeabi_dmul>
 801289a:	a369      	add	r3, pc, #420	; (adr r3, 8012a40 <__ieee754_exp+0x298>)
 801289c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128a0:	4606      	mov	r6, r0
 80128a2:	460f      	mov	r7, r1
 80128a4:	f7ed fed0 	bl	8000648 <__aeabi_dmul>
 80128a8:	a367      	add	r3, pc, #412	; (adr r3, 8012a48 <__ieee754_exp+0x2a0>)
 80128aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128ae:	f7ed fd13 	bl	80002d8 <__aeabi_dsub>
 80128b2:	4632      	mov	r2, r6
 80128b4:	463b      	mov	r3, r7
 80128b6:	f7ed fec7 	bl	8000648 <__aeabi_dmul>
 80128ba:	a365      	add	r3, pc, #404	; (adr r3, 8012a50 <__ieee754_exp+0x2a8>)
 80128bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128c0:	f7ed fd0c 	bl	80002dc <__adddf3>
 80128c4:	4632      	mov	r2, r6
 80128c6:	463b      	mov	r3, r7
 80128c8:	f7ed febe 	bl	8000648 <__aeabi_dmul>
 80128cc:	a362      	add	r3, pc, #392	; (adr r3, 8012a58 <__ieee754_exp+0x2b0>)
 80128ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128d2:	f7ed fd01 	bl	80002d8 <__aeabi_dsub>
 80128d6:	4632      	mov	r2, r6
 80128d8:	463b      	mov	r3, r7
 80128da:	f7ed feb5 	bl	8000648 <__aeabi_dmul>
 80128de:	a360      	add	r3, pc, #384	; (adr r3, 8012a60 <__ieee754_exp+0x2b8>)
 80128e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80128e4:	f7ed fcfa 	bl	80002dc <__adddf3>
 80128e8:	4632      	mov	r2, r6
 80128ea:	463b      	mov	r3, r7
 80128ec:	f7ed feac 	bl	8000648 <__aeabi_dmul>
 80128f0:	4602      	mov	r2, r0
 80128f2:	460b      	mov	r3, r1
 80128f4:	4620      	mov	r0, r4
 80128f6:	4629      	mov	r1, r5
 80128f8:	f7ed fcee 	bl	80002d8 <__aeabi_dsub>
 80128fc:	4602      	mov	r2, r0
 80128fe:	460b      	mov	r3, r1
 8012900:	4606      	mov	r6, r0
 8012902:	460f      	mov	r7, r1
 8012904:	4620      	mov	r0, r4
 8012906:	4629      	mov	r1, r5
 8012908:	f7ed fe9e 	bl	8000648 <__aeabi_dmul>
 801290c:	ec41 0b19 	vmov	d9, r0, r1
 8012910:	f1ba 0f00 	cmp.w	sl, #0
 8012914:	d15d      	bne.n	80129d2 <__ieee754_exp+0x22a>
 8012916:	2200      	movs	r2, #0
 8012918:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801291c:	4630      	mov	r0, r6
 801291e:	4639      	mov	r1, r7
 8012920:	f7ed fcda 	bl	80002d8 <__aeabi_dsub>
 8012924:	4602      	mov	r2, r0
 8012926:	460b      	mov	r3, r1
 8012928:	ec51 0b19 	vmov	r0, r1, d9
 801292c:	f7ed ffb6 	bl	800089c <__aeabi_ddiv>
 8012930:	4622      	mov	r2, r4
 8012932:	462b      	mov	r3, r5
 8012934:	f7ed fcd0 	bl	80002d8 <__aeabi_dsub>
 8012938:	4602      	mov	r2, r0
 801293a:	460b      	mov	r3, r1
 801293c:	2000      	movs	r0, #0
 801293e:	4958      	ldr	r1, [pc, #352]	; (8012aa0 <__ieee754_exp+0x2f8>)
 8012940:	f7ed fcca 	bl	80002d8 <__aeabi_dsub>
 8012944:	e74d      	b.n	80127e2 <__ieee754_exp+0x3a>
 8012946:	4857      	ldr	r0, [pc, #348]	; (8012aa4 <__ieee754_exp+0x2fc>)
 8012948:	a347      	add	r3, pc, #284	; (adr r3, 8012a68 <__ieee754_exp+0x2c0>)
 801294a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801294e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8012952:	4629      	mov	r1, r5
 8012954:	4620      	mov	r0, r4
 8012956:	f7ed fe77 	bl	8000648 <__aeabi_dmul>
 801295a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801295e:	f7ed fcbd 	bl	80002dc <__adddf3>
 8012962:	f7ee f921 	bl	8000ba8 <__aeabi_d2iz>
 8012966:	4682      	mov	sl, r0
 8012968:	f7ed fe04 	bl	8000574 <__aeabi_i2d>
 801296c:	a340      	add	r3, pc, #256	; (adr r3, 8012a70 <__ieee754_exp+0x2c8>)
 801296e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012972:	4606      	mov	r6, r0
 8012974:	460f      	mov	r7, r1
 8012976:	f7ed fe67 	bl	8000648 <__aeabi_dmul>
 801297a:	4602      	mov	r2, r0
 801297c:	460b      	mov	r3, r1
 801297e:	4620      	mov	r0, r4
 8012980:	4629      	mov	r1, r5
 8012982:	f7ed fca9 	bl	80002d8 <__aeabi_dsub>
 8012986:	a33c      	add	r3, pc, #240	; (adr r3, 8012a78 <__ieee754_exp+0x2d0>)
 8012988:	e9d3 2300 	ldrd	r2, r3, [r3]
 801298c:	4680      	mov	r8, r0
 801298e:	4689      	mov	r9, r1
 8012990:	4630      	mov	r0, r6
 8012992:	4639      	mov	r1, r7
 8012994:	f7ed fe58 	bl	8000648 <__aeabi_dmul>
 8012998:	ec41 0b18 	vmov	d8, r0, r1
 801299c:	e76f      	b.n	801287e <__ieee754_exp+0xd6>
 801299e:	4a42      	ldr	r2, [pc, #264]	; (8012aa8 <__ieee754_exp+0x300>)
 80129a0:	4293      	cmp	r3, r2
 80129a2:	d811      	bhi.n	80129c8 <__ieee754_exp+0x220>
 80129a4:	a336      	add	r3, pc, #216	; (adr r3, 8012a80 <__ieee754_exp+0x2d8>)
 80129a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80129aa:	ee10 0a10 	vmov	r0, s0
 80129ae:	4629      	mov	r1, r5
 80129b0:	f7ed fc94 	bl	80002dc <__adddf3>
 80129b4:	4b3a      	ldr	r3, [pc, #232]	; (8012aa0 <__ieee754_exp+0x2f8>)
 80129b6:	2200      	movs	r2, #0
 80129b8:	f7ee f8d6 	bl	8000b68 <__aeabi_dcmpgt>
 80129bc:	b138      	cbz	r0, 80129ce <__ieee754_exp+0x226>
 80129be:	4b38      	ldr	r3, [pc, #224]	; (8012aa0 <__ieee754_exp+0x2f8>)
 80129c0:	2200      	movs	r2, #0
 80129c2:	4620      	mov	r0, r4
 80129c4:	4629      	mov	r1, r5
 80129c6:	e70a      	b.n	80127de <__ieee754_exp+0x36>
 80129c8:	f04f 0a00 	mov.w	sl, #0
 80129cc:	e75f      	b.n	801288e <__ieee754_exp+0xe6>
 80129ce:	4682      	mov	sl, r0
 80129d0:	e75d      	b.n	801288e <__ieee754_exp+0xe6>
 80129d2:	4632      	mov	r2, r6
 80129d4:	463b      	mov	r3, r7
 80129d6:	2000      	movs	r0, #0
 80129d8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80129dc:	f7ed fc7c 	bl	80002d8 <__aeabi_dsub>
 80129e0:	4602      	mov	r2, r0
 80129e2:	460b      	mov	r3, r1
 80129e4:	ec51 0b19 	vmov	r0, r1, d9
 80129e8:	f7ed ff58 	bl	800089c <__aeabi_ddiv>
 80129ec:	4602      	mov	r2, r0
 80129ee:	460b      	mov	r3, r1
 80129f0:	ec51 0b18 	vmov	r0, r1, d8
 80129f4:	f7ed fc70 	bl	80002d8 <__aeabi_dsub>
 80129f8:	4642      	mov	r2, r8
 80129fa:	464b      	mov	r3, r9
 80129fc:	f7ed fc6c 	bl	80002d8 <__aeabi_dsub>
 8012a00:	4602      	mov	r2, r0
 8012a02:	460b      	mov	r3, r1
 8012a04:	2000      	movs	r0, #0
 8012a06:	4926      	ldr	r1, [pc, #152]	; (8012aa0 <__ieee754_exp+0x2f8>)
 8012a08:	f7ed fc66 	bl	80002d8 <__aeabi_dsub>
 8012a0c:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 8012a10:	4592      	cmp	sl, r2
 8012a12:	db02      	blt.n	8012a1a <__ieee754_exp+0x272>
 8012a14:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012a18:	e6e3      	b.n	80127e2 <__ieee754_exp+0x3a>
 8012a1a:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 8012a1e:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8012a22:	2200      	movs	r2, #0
 8012a24:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 8012a28:	f7ed fe0e 	bl	8000648 <__aeabi_dmul>
 8012a2c:	e6d9      	b.n	80127e2 <__ieee754_exp+0x3a>
 8012a2e:	bf00      	nop
 8012a30:	fefa39ef 	.word	0xfefa39ef
 8012a34:	40862e42 	.word	0x40862e42
 8012a38:	d52d3051 	.word	0xd52d3051
 8012a3c:	c0874910 	.word	0xc0874910
 8012a40:	72bea4d0 	.word	0x72bea4d0
 8012a44:	3e663769 	.word	0x3e663769
 8012a48:	c5d26bf1 	.word	0xc5d26bf1
 8012a4c:	3ebbbd41 	.word	0x3ebbbd41
 8012a50:	af25de2c 	.word	0xaf25de2c
 8012a54:	3f11566a 	.word	0x3f11566a
 8012a58:	16bebd93 	.word	0x16bebd93
 8012a5c:	3f66c16c 	.word	0x3f66c16c
 8012a60:	5555553e 	.word	0x5555553e
 8012a64:	3fc55555 	.word	0x3fc55555
 8012a68:	652b82fe 	.word	0x652b82fe
 8012a6c:	3ff71547 	.word	0x3ff71547
 8012a70:	fee00000 	.word	0xfee00000
 8012a74:	3fe62e42 	.word	0x3fe62e42
 8012a78:	35793c76 	.word	0x35793c76
 8012a7c:	3dea39ef 	.word	0x3dea39ef
 8012a80:	8800759c 	.word	0x8800759c
 8012a84:	7e37e43c 	.word	0x7e37e43c
 8012a88:	40862e41 	.word	0x40862e41
 8012a8c:	7fefffff 	.word	0x7fefffff
 8012a90:	3fd62e42 	.word	0x3fd62e42
 8012a94:	3ff0a2b1 	.word	0x3ff0a2b1
 8012a98:	080140d8 	.word	0x080140d8
 8012a9c:	080140e8 	.word	0x080140e8
 8012aa0:	3ff00000 	.word	0x3ff00000
 8012aa4:	080140c8 	.word	0x080140c8
 8012aa8:	3defffff 	.word	0x3defffff

08012aac <__ieee754_fmodf>:
 8012aac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012aae:	ee10 5a90 	vmov	r5, s1
 8012ab2:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8012ab6:	d009      	beq.n	8012acc <__ieee754_fmodf+0x20>
 8012ab8:	ee10 2a10 	vmov	r2, s0
 8012abc:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8012ac0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8012ac4:	da02      	bge.n	8012acc <__ieee754_fmodf+0x20>
 8012ac6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8012aca:	dd04      	ble.n	8012ad6 <__ieee754_fmodf+0x2a>
 8012acc:	ee60 0a20 	vmul.f32	s1, s0, s1
 8012ad0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8012ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012ad6:	42a3      	cmp	r3, r4
 8012ad8:	dbfc      	blt.n	8012ad4 <__ieee754_fmodf+0x28>
 8012ada:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 8012ade:	d105      	bne.n	8012aec <__ieee754_fmodf+0x40>
 8012ae0:	4b32      	ldr	r3, [pc, #200]	; (8012bac <__ieee754_fmodf+0x100>)
 8012ae2:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 8012ae6:	ed93 0a00 	vldr	s0, [r3]
 8012aea:	e7f3      	b.n	8012ad4 <__ieee754_fmodf+0x28>
 8012aec:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8012af0:	d13f      	bne.n	8012b72 <__ieee754_fmodf+0xc6>
 8012af2:	0219      	lsls	r1, r3, #8
 8012af4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8012af8:	2900      	cmp	r1, #0
 8012afa:	dc37      	bgt.n	8012b6c <__ieee754_fmodf+0xc0>
 8012afc:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 8012b00:	d13d      	bne.n	8012b7e <__ieee754_fmodf+0xd2>
 8012b02:	0227      	lsls	r7, r4, #8
 8012b04:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8012b08:	2f00      	cmp	r7, #0
 8012b0a:	da35      	bge.n	8012b78 <__ieee754_fmodf+0xcc>
 8012b0c:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8012b10:	bfbb      	ittet	lt
 8012b12:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012b16:	1a12      	sublt	r2, r2, r0
 8012b18:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8012b1c:	4093      	lsllt	r3, r2
 8012b1e:	bfa8      	it	ge
 8012b20:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8012b24:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012b28:	bfb5      	itete	lt
 8012b2a:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8012b2e:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8012b32:	1a52      	sublt	r2, r2, r1
 8012b34:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8012b38:	bfb8      	it	lt
 8012b3a:	4094      	lsllt	r4, r2
 8012b3c:	1a40      	subs	r0, r0, r1
 8012b3e:	1b1a      	subs	r2, r3, r4
 8012b40:	bb00      	cbnz	r0, 8012b84 <__ieee754_fmodf+0xd8>
 8012b42:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8012b46:	bf38      	it	cc
 8012b48:	4613      	movcc	r3, r2
 8012b4a:	2b00      	cmp	r3, #0
 8012b4c:	d0c8      	beq.n	8012ae0 <__ieee754_fmodf+0x34>
 8012b4e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8012b52:	db1f      	blt.n	8012b94 <__ieee754_fmodf+0xe8>
 8012b54:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8012b58:	db1f      	blt.n	8012b9a <__ieee754_fmodf+0xee>
 8012b5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8012b5e:	317f      	adds	r1, #127	; 0x7f
 8012b60:	4333      	orrs	r3, r6
 8012b62:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8012b66:	ee00 3a10 	vmov	s0, r3
 8012b6a:	e7b3      	b.n	8012ad4 <__ieee754_fmodf+0x28>
 8012b6c:	3801      	subs	r0, #1
 8012b6e:	0049      	lsls	r1, r1, #1
 8012b70:	e7c2      	b.n	8012af8 <__ieee754_fmodf+0x4c>
 8012b72:	15d8      	asrs	r0, r3, #23
 8012b74:	387f      	subs	r0, #127	; 0x7f
 8012b76:	e7c1      	b.n	8012afc <__ieee754_fmodf+0x50>
 8012b78:	3901      	subs	r1, #1
 8012b7a:	007f      	lsls	r7, r7, #1
 8012b7c:	e7c4      	b.n	8012b08 <__ieee754_fmodf+0x5c>
 8012b7e:	15e1      	asrs	r1, r4, #23
 8012b80:	397f      	subs	r1, #127	; 0x7f
 8012b82:	e7c3      	b.n	8012b0c <__ieee754_fmodf+0x60>
 8012b84:	2a00      	cmp	r2, #0
 8012b86:	da02      	bge.n	8012b8e <__ieee754_fmodf+0xe2>
 8012b88:	005b      	lsls	r3, r3, #1
 8012b8a:	3801      	subs	r0, #1
 8012b8c:	e7d7      	b.n	8012b3e <__ieee754_fmodf+0x92>
 8012b8e:	d0a7      	beq.n	8012ae0 <__ieee754_fmodf+0x34>
 8012b90:	0053      	lsls	r3, r2, #1
 8012b92:	e7fa      	b.n	8012b8a <__ieee754_fmodf+0xde>
 8012b94:	005b      	lsls	r3, r3, #1
 8012b96:	3901      	subs	r1, #1
 8012b98:	e7d9      	b.n	8012b4e <__ieee754_fmodf+0xa2>
 8012b9a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8012b9e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8012ba2:	3182      	adds	r1, #130	; 0x82
 8012ba4:	410b      	asrs	r3, r1
 8012ba6:	4333      	orrs	r3, r6
 8012ba8:	e7dd      	b.n	8012b66 <__ieee754_fmodf+0xba>
 8012baa:	bf00      	nop
 8012bac:	080140f8 	.word	0x080140f8

08012bb0 <__ieee754_sqrtf>:
 8012bb0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012bb4:	4770      	bx	lr

08012bb6 <with_errno>:
 8012bb6:	b570      	push	{r4, r5, r6, lr}
 8012bb8:	4604      	mov	r4, r0
 8012bba:	460d      	mov	r5, r1
 8012bbc:	4616      	mov	r6, r2
 8012bbe:	f7fb fb79 	bl	800e2b4 <__errno>
 8012bc2:	4629      	mov	r1, r5
 8012bc4:	6006      	str	r6, [r0, #0]
 8012bc6:	4620      	mov	r0, r4
 8012bc8:	bd70      	pop	{r4, r5, r6, pc}

08012bca <xflow>:
 8012bca:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012bcc:	4614      	mov	r4, r2
 8012bce:	461d      	mov	r5, r3
 8012bd0:	b108      	cbz	r0, 8012bd6 <xflow+0xc>
 8012bd2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8012bd6:	e9cd 2300 	strd	r2, r3, [sp]
 8012bda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012bde:	4620      	mov	r0, r4
 8012be0:	4629      	mov	r1, r5
 8012be2:	f7ed fd31 	bl	8000648 <__aeabi_dmul>
 8012be6:	2222      	movs	r2, #34	; 0x22
 8012be8:	b003      	add	sp, #12
 8012bea:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012bee:	f7ff bfe2 	b.w	8012bb6 <with_errno>

08012bf2 <__math_uflow>:
 8012bf2:	b508      	push	{r3, lr}
 8012bf4:	2200      	movs	r2, #0
 8012bf6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012bfa:	f7ff ffe6 	bl	8012bca <xflow>
 8012bfe:	ec41 0b10 	vmov	d0, r0, r1
 8012c02:	bd08      	pop	{r3, pc}

08012c04 <__math_oflow>:
 8012c04:	b508      	push	{r3, lr}
 8012c06:	2200      	movs	r2, #0
 8012c08:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012c0c:	f7ff ffdd 	bl	8012bca <xflow>
 8012c10:	ec41 0b10 	vmov	d0, r0, r1
 8012c14:	bd08      	pop	{r3, pc}

08012c16 <finite>:
 8012c16:	b082      	sub	sp, #8
 8012c18:	ed8d 0b00 	vstr	d0, [sp]
 8012c1c:	9801      	ldr	r0, [sp, #4]
 8012c1e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8012c22:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8012c26:	0fc0      	lsrs	r0, r0, #31
 8012c28:	b002      	add	sp, #8
 8012c2a:	4770      	bx	lr

08012c2c <_init>:
 8012c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c2e:	bf00      	nop
 8012c30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c32:	bc08      	pop	{r3}
 8012c34:	469e      	mov	lr, r3
 8012c36:	4770      	bx	lr

08012c38 <_fini>:
 8012c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012c3a:	bf00      	nop
 8012c3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012c3e:	bc08      	pop	{r3}
 8012c40:	469e      	mov	lr, r3
 8012c42:	4770      	bx	lr
