
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011534  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000014d0  08011718  08011718  00021718  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012be8  08012be8  00030200  2**0
                  CONTENTS
  4 .ARM          00000008  08012be8  08012be8  00022be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012bf0  08012bf0  00030200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012bf0  08012bf0  00022bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bf4  08012bf4  00022bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  08012bf8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ef8  20000200  08012df8  00030200  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200050f8  08012df8  000350f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002334d  00000000  00000000  00030230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000502e  00000000  00000000  0005357d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c30  00000000  00000000  000585b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001a10  00000000  00000000  0005a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025843  00000000  00000000  0005bbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022be8  00000000  00000000  00081433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e49fd  00000000  00000000  000a401b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00188a18  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008e50  00000000  00000000  00188a68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000200 	.word	0x20000200
 80001fc:	00000000 	.word	0x00000000
 8000200:	080116fc 	.word	0x080116fc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000204 	.word	0x20000204
 800021c:	080116fc 	.word	0x080116fc

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9aa 	b.w	8001044 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	4604      	mov	r4, r0
 8000d7c:	468e      	mov	lr, r1
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d14d      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d82:	428a      	cmp	r2, r1
 8000d84:	4694      	mov	ip, r2
 8000d86:	d969      	bls.n	8000e5c <__udivmoddi4+0xe8>
 8000d88:	fab2 f282 	clz	r2, r2
 8000d8c:	b152      	cbz	r2, 8000da4 <__udivmoddi4+0x30>
 8000d8e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d92:	f1c2 0120 	rsb	r1, r2, #32
 8000d96:	fa20 f101 	lsr.w	r1, r0, r1
 8000d9a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9e:	ea41 0e03 	orr.w	lr, r1, r3
 8000da2:	4094      	lsls	r4, r2
 8000da4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da8:	0c21      	lsrs	r1, r4, #16
 8000daa:	fbbe f6f8 	udiv	r6, lr, r8
 8000dae:	fa1f f78c 	uxth.w	r7, ip
 8000db2:	fb08 e316 	mls	r3, r8, r6, lr
 8000db6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000dba:	fb06 f107 	mul.w	r1, r6, r7
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dca:	f080 811f 	bcs.w	800100c <__udivmoddi4+0x298>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 811c 	bls.w	800100c <__udivmoddi4+0x298>
 8000dd4:	3e02      	subs	r6, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de0:	fb08 3310 	mls	r3, r8, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 f707 	mul.w	r7, r0, r7
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	d90a      	bls.n	8000e06 <__udivmoddi4+0x92>
 8000df0:	eb1c 0404 	adds.w	r4, ip, r4
 8000df4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df8:	f080 810a 	bcs.w	8001010 <__udivmoddi4+0x29c>
 8000dfc:	42a7      	cmp	r7, r4
 8000dfe:	f240 8107 	bls.w	8001010 <__udivmoddi4+0x29c>
 8000e02:	4464      	add	r4, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e0a:	1be4      	subs	r4, r4, r7
 8000e0c:	2600      	movs	r6, #0
 8000e0e:	b11d      	cbz	r5, 8000e18 <__udivmoddi4+0xa4>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c5 4300 	strd	r4, r3, [r5]
 8000e18:	4631      	mov	r1, r6
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xc2>
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	f000 80ef 	beq.w	8001006 <__udivmoddi4+0x292>
 8000e28:	2600      	movs	r6, #0
 8000e2a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e2e:	4630      	mov	r0, r6
 8000e30:	4631      	mov	r1, r6
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f683 	clz	r6, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d14a      	bne.n	8000ed4 <__udivmoddi4+0x160>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd4>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80f9 	bhi.w	800103a <__udivmoddi4+0x2c6>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	469e      	mov	lr, r3
 8000e52:	2d00      	cmp	r5, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa4>
 8000e56:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa4>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xec>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 8092 	bne.w	8000f8e <__udivmoddi4+0x21a>
 8000e6a:	eba1 010c 	sub.w	r1, r1, ip
 8000e6e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	2601      	movs	r6, #1
 8000e78:	0c20      	lsrs	r0, r4, #16
 8000e7a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e7e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e82:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e86:	fb0e f003 	mul.w	r0, lr, r3
 8000e8a:	4288      	cmp	r0, r1
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x12c>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e96:	d202      	bcs.n	8000e9e <__udivmoddi4+0x12a>
 8000e98:	4288      	cmp	r0, r1
 8000e9a:	f200 80cb 	bhi.w	8001034 <__udivmoddi4+0x2c0>
 8000e9e:	4643      	mov	r3, r8
 8000ea0:	1a09      	subs	r1, r1, r0
 8000ea2:	b2a4      	uxth	r4, r4
 8000ea4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ea8:	fb07 1110 	mls	r1, r7, r0, r1
 8000eac:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000eb0:	fb0e fe00 	mul.w	lr, lr, r0
 8000eb4:	45a6      	cmp	lr, r4
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x156>
 8000eb8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ebc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ec0:	d202      	bcs.n	8000ec8 <__udivmoddi4+0x154>
 8000ec2:	45a6      	cmp	lr, r4
 8000ec4:	f200 80bb 	bhi.w	800103e <__udivmoddi4+0x2ca>
 8000ec8:	4608      	mov	r0, r1
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ed2:	e79c      	b.n	8000e0e <__udivmoddi4+0x9a>
 8000ed4:	f1c6 0720 	rsb	r7, r6, #32
 8000ed8:	40b3      	lsls	r3, r6
 8000eda:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ede:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ee2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ee6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eea:	431c      	orrs	r4, r3
 8000eec:	40f9      	lsrs	r1, r7
 8000eee:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ef6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000efa:	0c20      	lsrs	r0, r4, #16
 8000efc:	fa1f fe8c 	uxth.w	lr, ip
 8000f00:	fb09 1118 	mls	r1, r9, r8, r1
 8000f04:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f08:	fb08 f00e 	mul.w	r0, r8, lr
 8000f0c:	4288      	cmp	r0, r1
 8000f0e:	fa02 f206 	lsl.w	r2, r2, r6
 8000f12:	d90b      	bls.n	8000f2c <__udivmoddi4+0x1b8>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f1c:	f080 8088 	bcs.w	8001030 <__udivmoddi4+0x2bc>
 8000f20:	4288      	cmp	r0, r1
 8000f22:	f240 8085 	bls.w	8001030 <__udivmoddi4+0x2bc>
 8000f26:	f1a8 0802 	sub.w	r8, r8, #2
 8000f2a:	4461      	add	r1, ip
 8000f2c:	1a09      	subs	r1, r1, r0
 8000f2e:	b2a4      	uxth	r4, r4
 8000f30:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f34:	fb09 1110 	mls	r1, r9, r0, r1
 8000f38:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f40:	458e      	cmp	lr, r1
 8000f42:	d908      	bls.n	8000f56 <__udivmoddi4+0x1e2>
 8000f44:	eb1c 0101 	adds.w	r1, ip, r1
 8000f48:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f4c:	d26c      	bcs.n	8001028 <__udivmoddi4+0x2b4>
 8000f4e:	458e      	cmp	lr, r1
 8000f50:	d96a      	bls.n	8001028 <__udivmoddi4+0x2b4>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4461      	add	r1, ip
 8000f56:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f5a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f5e:	eba1 010e 	sub.w	r1, r1, lr
 8000f62:	42a1      	cmp	r1, r4
 8000f64:	46c8      	mov	r8, r9
 8000f66:	46a6      	mov	lr, r4
 8000f68:	d356      	bcc.n	8001018 <__udivmoddi4+0x2a4>
 8000f6a:	d053      	beq.n	8001014 <__udivmoddi4+0x2a0>
 8000f6c:	b15d      	cbz	r5, 8000f86 <__udivmoddi4+0x212>
 8000f6e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f72:	eb61 010e 	sbc.w	r1, r1, lr
 8000f76:	fa01 f707 	lsl.w	r7, r1, r7
 8000f7a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f7e:	40f1      	lsrs	r1, r6
 8000f80:	431f      	orrs	r7, r3
 8000f82:	e9c5 7100 	strd	r7, r1, [r5]
 8000f86:	2600      	movs	r6, #0
 8000f88:	4631      	mov	r1, r6
 8000f8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8e:	f1c2 0320 	rsb	r3, r2, #32
 8000f92:	40d8      	lsrs	r0, r3
 8000f94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f98:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fa4:	fa1f fe8c 	uxth.w	lr, ip
 8000fa8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000fac:	fb07 3610 	mls	r6, r7, r0, r3
 8000fb0:	0c0b      	lsrs	r3, r1, #16
 8000fb2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fb6:	fb00 f60e 	mul.w	r6, r0, lr
 8000fba:	429e      	cmp	r6, r3
 8000fbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000fc0:	d908      	bls.n	8000fd4 <__udivmoddi4+0x260>
 8000fc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fc6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fca:	d22f      	bcs.n	800102c <__udivmoddi4+0x2b8>
 8000fcc:	429e      	cmp	r6, r3
 8000fce:	d92d      	bls.n	800102c <__udivmoddi4+0x2b8>
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	4463      	add	r3, ip
 8000fd4:	1b9b      	subs	r3, r3, r6
 8000fd6:	b289      	uxth	r1, r1
 8000fd8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fdc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fe0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fe4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fe8:	428b      	cmp	r3, r1
 8000fea:	d908      	bls.n	8000ffe <__udivmoddi4+0x28a>
 8000fec:	eb1c 0101 	adds.w	r1, ip, r1
 8000ff0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ff4:	d216      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000ff6:	428b      	cmp	r3, r1
 8000ff8:	d914      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000ffa:	3e02      	subs	r6, #2
 8000ffc:	4461      	add	r1, ip
 8000ffe:	1ac9      	subs	r1, r1, r3
 8001000:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8001004:	e738      	b.n	8000e78 <__udivmoddi4+0x104>
 8001006:	462e      	mov	r6, r5
 8001008:	4628      	mov	r0, r5
 800100a:	e705      	b.n	8000e18 <__udivmoddi4+0xa4>
 800100c:	4606      	mov	r6, r0
 800100e:	e6e3      	b.n	8000dd8 <__udivmoddi4+0x64>
 8001010:	4618      	mov	r0, r3
 8001012:	e6f8      	b.n	8000e06 <__udivmoddi4+0x92>
 8001014:	454b      	cmp	r3, r9
 8001016:	d2a9      	bcs.n	8000f6c <__udivmoddi4+0x1f8>
 8001018:	ebb9 0802 	subs.w	r8, r9, r2
 800101c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001020:	3801      	subs	r0, #1
 8001022:	e7a3      	b.n	8000f6c <__udivmoddi4+0x1f8>
 8001024:	4646      	mov	r6, r8
 8001026:	e7ea      	b.n	8000ffe <__udivmoddi4+0x28a>
 8001028:	4620      	mov	r0, r4
 800102a:	e794      	b.n	8000f56 <__udivmoddi4+0x1e2>
 800102c:	4640      	mov	r0, r8
 800102e:	e7d1      	b.n	8000fd4 <__udivmoddi4+0x260>
 8001030:	46d0      	mov	r8, sl
 8001032:	e77b      	b.n	8000f2c <__udivmoddi4+0x1b8>
 8001034:	3b02      	subs	r3, #2
 8001036:	4461      	add	r1, ip
 8001038:	e732      	b.n	8000ea0 <__udivmoddi4+0x12c>
 800103a:	4630      	mov	r0, r6
 800103c:	e709      	b.n	8000e52 <__udivmoddi4+0xde>
 800103e:	4464      	add	r4, ip
 8001040:	3802      	subs	r0, #2
 8001042:	e742      	b.n	8000eca <__udivmoddi4+0x156>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08c      	sub	sp, #48	; 0x30
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800104e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800105a:	1d3b      	adds	r3, r7, #4
 800105c:	2220      	movs	r2, #32
 800105e:	2100      	movs	r1, #0
 8001060:	4618      	mov	r0, r3
 8001062:	f00b fec7 	bl	800cdf4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8001066:	4b40      	ldr	r3, [pc, #256]	; (8001168 <MX_ADC1_Init+0x120>)
 8001068:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800106c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800106e:	4b3e      	ldr	r3, [pc, #248]	; (8001168 <MX_ADC1_Init+0x120>)
 8001070:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001074:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001076:	4b3c      	ldr	r3, [pc, #240]	; (8001168 <MX_ADC1_Init+0x120>)
 8001078:	2200      	movs	r2, #0
 800107a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107c:	4b3a      	ldr	r3, [pc, #232]	; (8001168 <MX_ADC1_Init+0x120>)
 800107e:	2200      	movs	r2, #0
 8001080:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8001082:	4b39      	ldr	r3, [pc, #228]	; (8001168 <MX_ADC1_Init+0x120>)
 8001084:	2200      	movs	r2, #0
 8001086:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001088:	4b37      	ldr	r3, [pc, #220]	; (8001168 <MX_ADC1_Init+0x120>)
 800108a:	2201      	movs	r2, #1
 800108c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800108e:	4b36      	ldr	r3, [pc, #216]	; (8001168 <MX_ADC1_Init+0x120>)
 8001090:	2208      	movs	r2, #8
 8001092:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001094:	4b34      	ldr	r3, [pc, #208]	; (8001168 <MX_ADC1_Init+0x120>)
 8001096:	2200      	movs	r2, #0
 8001098:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800109a:	4b33      	ldr	r3, [pc, #204]	; (8001168 <MX_ADC1_Init+0x120>)
 800109c:	2200      	movs	r2, #0
 800109e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 80010a0:	4b31      	ldr	r3, [pc, #196]	; (8001168 <MX_ADC1_Init+0x120>)
 80010a2:	2203      	movs	r2, #3
 80010a4:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010a6:	4b30      	ldr	r3, [pc, #192]	; (8001168 <MX_ADC1_Init+0x120>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <MX_ADC1_Init+0x120>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010b4:	4b2c      	ldr	r3, [pc, #176]	; (8001168 <MX_ADC1_Init+0x120>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010ba:	4b2b      	ldr	r3, [pc, #172]	; (8001168 <MX_ADC1_Init+0x120>)
 80010bc:	2200      	movs	r2, #0
 80010be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80010c2:	4b29      	ldr	r3, [pc, #164]	; (8001168 <MX_ADC1_Init+0x120>)
 80010c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c8:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <MX_ADC1_Init+0x120>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010d2:	4825      	ldr	r0, [pc, #148]	; (8001168 <MX_ADC1_Init+0x120>)
 80010d4:	f004 ff9a 	bl	800600c <HAL_ADC_Init>
 80010d8:	4603      	mov	r3, r0
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d001      	beq.n	80010e2 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 80010de:	f003 fb50 	bl	8004782 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ea:	4619      	mov	r1, r3
 80010ec:	481e      	ldr	r0, [pc, #120]	; (8001168 <MX_ADC1_Init+0x120>)
 80010ee:	f005 fef5 	bl	8006edc <HAL_ADCEx_MultiModeConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80010f8:	f003 fb43 	bl	8004782 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP1;
 80010fc:	4b1b      	ldr	r3, [pc, #108]	; (800116c <MX_ADC1_Init+0x124>)
 80010fe:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001100:	2306      	movs	r3, #6
 8001102:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001104:	2300      	movs	r3, #0
 8001106:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001108:	237f      	movs	r3, #127	; 0x7f
 800110a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800110c:	2304      	movs	r3, #4
 800110e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001110:	2300      	movs	r3, #0
 8001112:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	4619      	mov	r1, r3
 8001118:	4813      	ldr	r0, [pc, #76]	; (8001168 <MX_ADC1_Init+0x120>)
 800111a:	f005 f9d3 	bl	80064c4 <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8001124:	f003 fb2d 	bl	8004782 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001128:	4b11      	ldr	r3, [pc, #68]	; (8001170 <MX_ADC1_Init+0x128>)
 800112a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	230c      	movs	r3, #12
 800112e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	4619      	mov	r1, r3
 8001134:	480c      	ldr	r0, [pc, #48]	; (8001168 <MX_ADC1_Init+0x120>)
 8001136:	f005 f9c5 	bl	80064c4 <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xfc>
  {
    Error_Handler();
 8001140:	f003 fb1f 	bl	8004782 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <MX_ADC1_Init+0x12c>)
 8001146:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001148:	2312      	movs	r3, #18
 800114a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	1d3b      	adds	r3, r7, #4
 800114e:	4619      	mov	r1, r3
 8001150:	4805      	ldr	r0, [pc, #20]	; (8001168 <MX_ADC1_Init+0x120>)
 8001152:	f005 f9b7 	bl	80064c4 <HAL_ADC_ConfigChannel>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <MX_ADC1_Init+0x118>
  {
    Error_Handler();
 800115c:	f003 fb11 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001160:	bf00      	nop
 8001162:	3730      	adds	r7, #48	; 0x30
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	2000021c 	.word	0x2000021c
 800116c:	b6902000 	.word	0xb6902000
 8001170:	04300002 	.word	0x04300002
 8001174:	14f00020 	.word	0x14f00020

08001178 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b088      	sub	sp, #32
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2220      	movs	r2, #32
 8001182:	2100      	movs	r1, #0
 8001184:	4618      	mov	r0, r3
 8001186:	f00b fe35 	bl	800cdf4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 800118a:	4b32      	ldr	r3, [pc, #200]	; (8001254 <MX_ADC2_Init+0xdc>)
 800118c:	4a32      	ldr	r2, [pc, #200]	; (8001258 <MX_ADC2_Init+0xe0>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <MX_ADC2_Init+0xdc>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b2e      	ldr	r3, [pc, #184]	; (8001254 <MX_ADC2_Init+0xdc>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800119e:	4b2d      	ldr	r3, [pc, #180]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011a4:	4b2b      	ldr	r3, [pc, #172]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011aa:	4b2a      	ldr	r3, [pc, #168]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80011b0:	4b28      	ldr	r3, [pc, #160]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011b2:	2208      	movs	r2, #8
 80011b4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011b6:	4b27      	ldr	r3, [pc, #156]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011bc:	4b25      	ldr	r3, [pc, #148]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011c4:	2202      	movs	r2, #2
 80011c6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011c8:	4b22      	ldr	r3, [pc, #136]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011d0:	4b20      	ldr	r3, [pc, #128]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011d6:	4b1f      	ldr	r3, [pc, #124]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011d8:	2200      	movs	r2, #0
 80011da:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011dc:	4b1d      	ldr	r3, [pc, #116]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011de:	2200      	movs	r2, #0
 80011e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011e6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011ec:	4b19      	ldr	r3, [pc, #100]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80011f4:	4817      	ldr	r0, [pc, #92]	; (8001254 <MX_ADC2_Init+0xdc>)
 80011f6:	f004 ff09 	bl	800600c <HAL_ADC_Init>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_ADC2_Init+0x8c>
  {
    Error_Handler();
 8001200:	f003 fabf 	bl	8004782 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP2;
 8001204:	4b15      	ldr	r3, [pc, #84]	; (800125c <MX_ADC2_Init+0xe4>)
 8001206:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001208:	2306      	movs	r3, #6
 800120a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800120c:	2300      	movs	r3, #0
 800120e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001210:	237f      	movs	r3, #127	; 0x7f
 8001212:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001214:	2304      	movs	r3, #4
 8001216:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800121c:	463b      	mov	r3, r7
 800121e:	4619      	mov	r1, r3
 8001220:	480c      	ldr	r0, [pc, #48]	; (8001254 <MX_ADC2_Init+0xdc>)
 8001222:	f005 f94f 	bl	80064c4 <HAL_ADC_ConfigChannel>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_ADC2_Init+0xb8>
  {
    Error_Handler();
 800122c:	f003 faa9 	bl	8004782 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VOPAMP3_ADC2;
 8001230:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <MX_ADC2_Init+0xe8>)
 8001232:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001234:	230c      	movs	r3, #12
 8001236:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001238:	463b      	mov	r3, r7
 800123a:	4619      	mov	r1, r3
 800123c:	4805      	ldr	r0, [pc, #20]	; (8001254 <MX_ADC2_Init+0xdc>)
 800123e:	f005 f941 	bl	80064c4 <HAL_ADC_ConfigChannel>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <MX_ADC2_Init+0xd4>
  {
    Error_Handler();
 8001248:	f003 fa9b 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800124c:	bf00      	nop
 800124e:	3720      	adds	r7, #32
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000288 	.word	0x20000288
 8001258:	50000100 	.word	0x50000100
 800125c:	c3290000 	.word	0xc3290000
 8001260:	cb8c0000 	.word	0xcb8c0000

08001264 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08c      	sub	sp, #48	; 0x30
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 031c 	add.w	r3, r7, #28
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001284:	d172      	bne.n	800136c <HAL_ADC_MspInit+0x108>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001286:	4b5e      	ldr	r3, [pc, #376]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	4a5c      	ldr	r2, [pc, #368]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 800128e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001290:	4b5b      	ldr	r3, [pc, #364]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	2b01      	cmp	r3, #1
 8001296:	d10b      	bne.n	80012b0 <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001298:	4b5a      	ldr	r3, [pc, #360]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800129a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800129c:	4a59      	ldr	r2, [pc, #356]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800129e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a4:	4b57      	ldr	r3, [pc, #348]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b54      	ldr	r3, [pc, #336]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	4a53      	ldr	r2, [pc, #332]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012b6:	f043 0301 	orr.w	r3, r3, #1
 80012ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012bc:	4b51      	ldr	r3, [pc, #324]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c8:	4b4e      	ldr	r3, [pc, #312]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a4d      	ldr	r2, [pc, #308]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012ce:	f043 0302 	orr.w	r3, r3, #2
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b4b      	ldr	r3, [pc, #300]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012e0:	2301      	movs	r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f007 f947 	bl	8008588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80012fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001300:	2303      	movs	r3, #3
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	f107 031c 	add.w	r3, r7, #28
 800130c:	4619      	mov	r1, r3
 800130e:	483e      	ldr	r0, [pc, #248]	; (8001408 <HAL_ADC_MspInit+0x1a4>)
 8001310:	f007 f93a 	bl	8008588 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8001314:	4b3d      	ldr	r3, [pc, #244]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001316:	4a3e      	ldr	r2, [pc, #248]	; (8001410 <HAL_ADC_MspInit+0x1ac>)
 8001318:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800131a:	4b3c      	ldr	r3, [pc, #240]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800131c:	2205      	movs	r2, #5
 800131e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001320:	4b3a      	ldr	r3, [pc, #232]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001322:	2200      	movs	r2, #0
 8001324:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001326:	4b39      	ldr	r3, [pc, #228]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001328:	2200      	movs	r2, #0
 800132a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132c:	4b37      	ldr	r3, [pc, #220]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800132e:	2280      	movs	r2, #128	; 0x80
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b36      	ldr	r3, [pc, #216]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001334:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800133c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001342:	4b32      	ldr	r3, [pc, #200]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001344:	2200      	movs	r2, #0
 8001346:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001348:	4b30      	ldr	r3, [pc, #192]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 800134a:	2200      	movs	r2, #0
 800134c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800134e:	482f      	ldr	r0, [pc, #188]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001350:	f005 ff78 	bl	8007244 <HAL_DMA_Init>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800135a:	f003 fa12 	bl	8004782 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a2a      	ldr	r2, [pc, #168]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001362:	655a      	str	r2, [r3, #84]	; 0x54
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <HAL_ADC_MspInit+0x1a8>)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800136a:	e044      	b.n	80013f6 <HAL_ADC_MspInit+0x192>
  else if(adcHandle->Instance==ADC2)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a28      	ldr	r2, [pc, #160]	; (8001414 <HAL_ADC_MspInit+0x1b0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d13f      	bne.n	80013f6 <HAL_ADC_MspInit+0x192>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001376:	4b22      	ldr	r3, [pc, #136]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3301      	adds	r3, #1
 800137c:	4a20      	ldr	r2, [pc, #128]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 800137e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001380:	4b1f      	ldr	r3, [pc, #124]	; (8001400 <HAL_ADC_MspInit+0x19c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d10b      	bne.n	80013a0 <HAL_ADC_MspInit+0x13c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001388:	4b1e      	ldr	r3, [pc, #120]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800138a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800138c:	4a1d      	ldr	r2, [pc, #116]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 800138e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001392:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <HAL_ADC_MspInit+0x1a0>)
 8001396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001398:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800139c:	60fb      	str	r3, [r7, #12]
 800139e:	68fb      	ldr	r3, [r7, #12]
    hdma_adc2.Instance = DMA1_Channel2;
 80013a0:	4b1d      	ldr	r3, [pc, #116]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013a2:	4a1e      	ldr	r2, [pc, #120]	; (800141c <HAL_ADC_MspInit+0x1b8>)
 80013a4:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013a6:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013a8:	2224      	movs	r2, #36	; 0x24
 80013aa:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013b8:	4b17      	ldr	r3, [pc, #92]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013ba:	2280      	movs	r2, #128	; 0x80
 80013bc:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013be:	4b16      	ldr	r3, [pc, #88]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80013c4:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013c6:	4b14      	ldr	r3, [pc, #80]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013cc:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_NORMAL;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 80013d4:	4b10      	ldr	r3, [pc, #64]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 80013da:	480f      	ldr	r0, [pc, #60]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013dc:	f005 ff32 	bl	8007244 <HAL_DMA_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_ADC_MspInit+0x186>
      Error_Handler();
 80013e6:	f003 f9cc 	bl	8004782 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	4a0a      	ldr	r2, [pc, #40]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013ee:	655a      	str	r2, [r3, #84]	; 0x54
 80013f0:	4a09      	ldr	r2, [pc, #36]	; (8001418 <HAL_ADC_MspInit+0x1b4>)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013f6:	bf00      	nop
 80013f8:	3730      	adds	r7, #48	; 0x30
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	200003b4 	.word	0x200003b4
 8001404:	40021000 	.word	0x40021000
 8001408:	48000400 	.word	0x48000400
 800140c:	200002f4 	.word	0x200002f4
 8001410:	40020008 	.word	0x40020008
 8001414:	50000100 	.word	0x50000100
 8001418:	20000354 	.word	0x20000354
 800141c:	4002001c 	.word	0x4002001c

08001420 <order_phases>:
#include <stdlib.h>
#include "usart.h"
#include "math_ops.h"
#include "tim.h"

void order_phases(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001420:	b5b0      	push	{r4, r5, r7, lr}
 8001422:	b088      	sub	sp, #32
 8001424:	af02      	add	r7, sp, #8
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
	/* Checks phase order, to ensure that positive Q current produces
	   torque in the positive direction wrt the position sensor */
	PHASE_ORDER = 0;
 800142e:	4b7d      	ldr	r3, [pc, #500]	; (8001624 <order_phases+0x204>)
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
	if(!cal->started){
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	7c1b      	ldrb	r3, [r3, #16]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d108      	bne.n	800144e <order_phases+0x2e>
		printf("Checking phase sign, pole pairs\r\n");
 800143c:	487a      	ldr	r0, [pc, #488]	; (8001628 <order_phases+0x208>)
 800143e:	f00c f9d1 	bl	800d7e4 <puts>
		cal->started = 1;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2201      	movs	r2, #1
 8001446:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	683a      	ldr	r2, [r7, #0]
 800144c:	60da      	str	r2, [r3, #12]
	}
	cal->time = (float)(loop_count - cal->start_count)*DT;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	68db      	ldr	r3, [r3, #12]
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	ee07 3a90 	vmov	s15, r3
 800145a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800145e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800162c <order_phases+0x20c>
 8001462:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001472:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001476:	eef4 7ac7 	vcmpe.f32	s15, s14
 800147a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147e:	d529      	bpl.n	80014d4 <order_phases+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f04f 0200 	mov.w	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	687a      	ldr	r2, [r7, #4]
 800148e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001492:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
        cal->cal_position.elec_velocity = 0;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800149c:	461a      	mov	r2, r3
 800149e:	f04f 0300 	mov.w	r3, #0
 80014a2:	f8c2 317c 	str.w	r3, [r2, #380]	; 0x17c
        controller->i_d_des = I_CAL;
 80014a6:	4b62      	ldr	r3, [pc, #392]	; (8001630 <order_phases+0x210>)
 80014a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	f04f 0200 	mov.w	r2, #0
 80014b6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80014c0:	332c      	adds	r3, #44	; 0x2c
 80014c2:	4619      	mov	r1, r3
 80014c4:	68b8      	ldr	r0, [r7, #8]
 80014c6:	f001 fb9b 	bl	8002c00 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	619a      	str	r2, [r3, #24]
    	return;
 80014d2:	e0a4      	b.n	800161e <order_phases+0x1fe>
    }
    else if(cal->time < T1+2.0f*PI_F/W_CAL){
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	edd3 7a05 	vldr	s15, [r3, #20]
 80014da:	ed9f 7a56 	vldr	s14, [pc, #344]	; 8001634 <order_phases+0x214>
 80014de:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014e6:	d51d      	bpl.n	8001524 <order_phases+0x104>
    	// rotate voltage vector through one electrical cycle
    	cal->theta_ref = W_CAL*(cal->time-T1);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	edd3 7a05 	vldr	s15, [r3, #20]
 80014ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014f2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80014f6:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8001638 <order_phases+0x218>
 80014fa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	edc3 7a02 	vstr	s15, [r3, #8]
    	cal->cal_position.elec_angle = cal->theta_ref;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	687a      	ldr	r2, [r7, #4]
 800150a:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800150e:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
		commutate(controller, &cal->cal_position);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 8001518:	332c      	adds	r3, #44	; 0x2c
 800151a:	4619      	mov	r1, r3
 800151c:	68b8      	ldr	r0, [r7, #8]
 800151e:	f001 fb6f 	bl	8002c00 <commutate>
    	return;
 8001522:	e07c      	b.n	800161e <order_phases+0x1fe>
    }
	reset_foc(controller);
 8001524:	68b8      	ldr	r0, [r7, #8]
 8001526:	f001 faf7 	bl	8002b18 <reset_foc>

	float theta_end = encoder->angle_multiturn[0];
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	617b      	str	r3, [r7, #20]
	cal->ppairs = round(2.0f*PI_F/fabsf(theta_end-cal->theta_start));
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	edd3 7a06 	vldr	s15, [r3, #24]
 8001536:	ed97 7a05 	vldr	s14, [r7, #20]
 800153a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800153e:	eef0 7ae7 	vabs.f32	s15, s15
 8001542:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800163c <order_phases+0x21c>
 8001546:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800154a:	ee16 0a90 	vmov	r0, s13
 800154e:	f7ff f823 	bl	8000598 <__aeabi_f2d>
 8001552:	4602      	mov	r2, r0
 8001554:	460b      	mov	r3, r1
 8001556:	ec43 2b10 	vmov	d0, r2, r3
 800155a:	f00f fd6d 	bl	8011038 <round>
 800155e:	ec53 2b10 	vmov	r2, r3, d0
 8001562:	4610      	mov	r0, r2
 8001564:	4619      	mov	r1, r3
 8001566:	f7ff fb47 	bl	8000bf8 <__aeabi_d2uiz>
 800156a:	4603      	mov	r3, r0
 800156c:	b2da      	uxtb	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	701a      	strb	r2, [r3, #0]

	if(cal->theta_start < theta_end){
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a06 	vldr	s15, [r3, #24]
 8001578:	ed97 7a05 	vldr	s14, [r7, #20]
 800157c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001584:	dd07      	ble.n	8001596 <order_phases+0x176>
		cal->phase_order = 0;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2020 	strb.w	r2, [r3, #32]
		printf("Phase order correct\r\n");
 800158e:	482c      	ldr	r0, [pc, #176]	; (8001640 <order_phases+0x220>)
 8001590:	f00c f928 	bl	800d7e4 <puts>
 8001594:	e014      	b.n	80015c0 <order_phases+0x1a0>
	}
	else{
		cal->phase_order = 1;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2201      	movs	r2, #1
 800159a:	f883 2020 	strb.w	r2, [r3, #32]
		int offsetATemp = controller->adc_a_offset;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015a4:	613b      	str	r3, [r7, #16]
		controller->adc_a_offset = controller->adc_b_offset;
 80015a6:	68bb      	ldr	r3, [r7, #8]
 80015a8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		controller->adc_b_offset = offsetATemp;
 80015b2:	68bb      	ldr	r3, [r7, #8]
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
		printf("Swapping phase sign\r\n");
 80015ba:	4822      	ldr	r0, [pc, #136]	; (8001644 <order_phases+0x224>)
 80015bc:	f00c f912 	bl	800d7e4 <puts>
	}
    printf("Pole Pairs: %d\r\n", cal->ppairs);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	4820      	ldr	r0, [pc, #128]	; (8001648 <order_phases+0x228>)
 80015c8:	f00c f886 	bl	800d6d8 <iprintf>
    printf("Start: %.3f   End: %.3f\r\n", cal->theta_start, theta_end);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe ffe1 	bl	8000598 <__aeabi_f2d>
 80015d6:	4604      	mov	r4, r0
 80015d8:	460d      	mov	r5, r1
 80015da:	6978      	ldr	r0, [r7, #20]
 80015dc:	f7fe ffdc 	bl	8000598 <__aeabi_f2d>
 80015e0:	4602      	mov	r2, r0
 80015e2:	460b      	mov	r3, r1
 80015e4:	e9cd 2300 	strd	r2, r3, [sp]
 80015e8:	4622      	mov	r2, r4
 80015ea:	462b      	mov	r3, r5
 80015ec:	4817      	ldr	r0, [pc, #92]	; (800164c <order_phases+0x22c>)
 80015ee:	f00c f873 	bl	800d6d8 <iprintf>
    PHASE_ORDER = cal->phase_order;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <order_phases+0x204>)
 80015fc:	601a      	str	r2, [r3, #0]
    PPAIRS = (float)cal->ppairs;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	ee07 3a90 	vmov	s15, r3
 8001606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <order_phases+0x210>)
 800160c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    cal->started = 0;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	741a      	strb	r2, [r3, #16]
    cal->done_ordering = 1;	// Finished checking phase order
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2201      	movs	r2, #1
 800161a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
}
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bdb0      	pop	{r4, r5, r7, pc}
 8001624:	20004d50 	.word	0x20004d50
 8001628:	08011718 	.word	0x08011718
 800162c:	388bcf64 	.word	0x388bcf64
 8001630:	20004c50 	.word	0x20004c50
 8001634:	3f8d6775 	.word	0x3f8d6775
 8001638:	42700000 	.word	0x42700000
 800163c:	40c90fdb 	.word	0x40c90fdb
 8001640:	0801173c 	.word	0x0801173c
 8001644:	08011754 	.word	0x08011754
 8001648:	0801176c 	.word	0x0801176c
 800164c:	08011780 	.word	0x08011780

08001650 <calibrate_encoder>:

void calibrate_encoder(EncoderStruct *encoder, ControllerStruct *controller, CalStruct * cal, int loop_count){
 8001650:	b5b0      	push	{r4, r5, r7, lr}
 8001652:	b094      	sub	sp, #80	; 0x50
 8001654:	af02      	add	r7, sp, #8
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	607a      	str	r2, [r7, #4]
 800165c:	603b      	str	r3, [r7, #0]
	/* Calibrates e-zero and encoder nonliearity */

	if(!cal->started){
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7c1b      	ldrb	r3, [r3, #16]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10f      	bne.n	8001686 <calibrate_encoder+0x36>
		printf("Starting offset cal and linearization\r\n");
 8001666:	489e      	ldr	r0, [pc, #632]	; (80018e0 <calibrate_encoder+0x290>)
 8001668:	f00c f8bc 	bl	800d7e4 <puts>
		cal->started = 1;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	741a      	strb	r2, [r3, #16]
		cal->start_count = loop_count;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	683a      	ldr	r2, [r7, #0]
 8001676:	60da      	str	r2, [r3, #12]
		cal->next_sample_time = T1;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
		cal->sample_count = 0;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2200      	movs	r2, #0
 8001684:	849a      	strh	r2, [r3, #36]	; 0x24
	}

	cal->time = (float)(loop_count - cal->start_count)*DT;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001696:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80018e4 <calibrate_encoder+0x294>
 800169a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	edc3 7a05 	vstr	s15, [r3, #20]

    if(cal->time < T1){
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a05 	vldr	s15, [r3, #20]
 80016aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80016ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b6:	d525      	bpl.n	8001704 <calibrate_encoder+0xb4>
        // Set voltage angle to zero, wait for rotor position to settle
        cal->theta_ref = 0;//W_CAL*cal->time;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f04f 0200 	mov.w	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
        cal->cal_position.elec_angle = cal->theta_ref;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80016ca:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
        controller->i_d_des = I_CAL;
 80016ce:	4b86      	ldr	r3, [pc, #536]	; (80018e8 <calibrate_encoder+0x298>)
 80016d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        controller->i_q_des = 0.0f;
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	f04f 0200 	mov.w	r2, #0
 80016de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        commutate(controller, &cal->cal_position);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80016e8:	332c      	adds	r3, #44	; 0x2c
 80016ea:	4619      	mov	r1, r3
 80016ec:	68b8      	ldr	r0, [r7, #8]
 80016ee:	f001 fa87 	bl	8002c00 <commutate>
    	cal->theta_start = encoder->angle_multiturn[0];
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	68da      	ldr	r2, [r3, #12]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
    	cal->next_sample_time = cal->time;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	629a      	str	r2, [r3, #40]	; 0x28
    	return;
 8001702:	e258      	b.n	8001bb6 <calibrate_encoder+0x566>
    }
    else if (cal->time < T1+2.0f*PI_F*PPAIRS/W_CAL){
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	ed93 7a05 	vldr	s14, [r3, #20]
 800170a:	4b77      	ldr	r3, [pc, #476]	; (80018e8 <calibrate_encoder+0x298>)
 800170c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001710:	eddf 6a76 	vldr	s13, [pc, #472]	; 80018ec <calibrate_encoder+0x29c>
 8001714:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001718:	ed9f 6a75 	vldr	s12, [pc, #468]	; 80018f0 <calibrate_encoder+0x2a0>
 800171c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001720:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001724:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001728:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800172c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001730:	f140 808f 	bpl.w	8001852 <calibrate_encoder+0x202>
    	// rotate voltage vector through one mechanical rotation in the positive direction
		cal->theta_ref += W_CAL*DT;//(cal->time-T1);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	edd3 7a02 	vldr	s15, [r3, #8]
 800173a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80018f4 <calibrate_encoder+0x2a4>
 800173e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	edc3 7a02 	vstr	s15, [r3, #8]
		cal->cal_position.elec_angle = cal->theta_ref;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8001752:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
		commutate(controller, &cal->cal_position);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 800175c:	332c      	adds	r3, #44	; 0x2c
 800175e:	4619      	mov	r1, r3
 8001760:	68b8      	ldr	r0, [r7, #8]
 8001762:	f001 fa4d 	bl	8002c00 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if(cal->time > cal->next_sample_time){
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	ed93 7a05 	vldr	s14, [r3, #20]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001772:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001776:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800177a:	dc00      	bgt.n	800177e <calibrate_encoder+0x12e>
				return;
			}
			cal->sample_count++;

		}
		return;
 800177c:	e21b      	b.n	8001bb6 <calibrate_encoder+0x566>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	edd3 7a02 	vldr	s15, [r3, #8]
 8001784:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8001908 <calibrate_encoder+0x2b8>
 8001788:	ee67 6a87 	vmul.f32	s13, s15, s14
 800178c:	4b56      	ldr	r3, [pc, #344]	; (80018e8 <calibrate_encoder+0x298>)
 800178e:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001792:	ed9f 7a56 	vldr	s14, [pc, #344]	; 80018ec <calibrate_encoder+0x29c>
 8001796:	ee27 7a87 	vmul.f32	s14, s15, s14
 800179a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017a2:	ee17 3a90 	vmov	r3, s15
 80017a6:	61bb      	str	r3, [r7, #24]
			int error = encoder->raw - count_ref;//- encoder->raw;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	617b      	str	r3, [r7, #20]
			cal->error_arr[cal->sample_count] = error + ENC_CPR*(error<0);
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	145b      	asrs	r3, r3, #17
 80017b6:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017be:	4618      	mov	r0, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	441a      	add	r2, r3
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f100 030a 	add.w	r3, r0, #10
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	440b      	add	r3, r1
 80017ce:	605a      	str	r2, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017d4:	461d      	mov	r5, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80017da:	687a      	ldr	r2, [r7, #4]
 80017dc:	330a      	adds	r3, #10
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	4413      	add	r3, r2
 80017e2:	685c      	ldr	r4, [r3, #4]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	689b      	ldr	r3, [r3, #8]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7fe fed5 	bl	8000598 <__aeabi_f2d>
 80017ee:	4602      	mov	r2, r0
 80017f0:	460b      	mov	r3, r1
 80017f2:	e9cd 2300 	strd	r2, r3, [sp]
 80017f6:	4623      	mov	r3, r4
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4629      	mov	r1, r5
 80017fc:	483e      	ldr	r0, [pc, #248]	; (80018f8 <calibrate_encoder+0x2a8>)
 80017fe:	f00b ff6b 	bl	800d6d8 <iprintf>
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001808:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018fc <calibrate_encoder+0x2ac>
 800180c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			if(cal->sample_count == PPAIRS*SAMPLES_PER_PPAIR-1){
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800181a:	ee07 3a90 	vmov	s15, r3
 800181e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001822:	4b31      	ldr	r3, [pc, #196]	; (80018e8 <calibrate_encoder+0x298>)
 8001824:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001828:	eddf 6a35 	vldr	s13, [pc, #212]	; 8001900 <calibrate_encoder+0x2b0>
 800182c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001830:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001834:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001838:	eeb4 7a67 	vcmp.f32	s14, s15
 800183c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001840:	f000 81b6 	beq.w	8001bb0 <calibrate_encoder+0x560>
			cal->sample_count++;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001848:	3301      	adds	r3, #1
 800184a:	b29a      	uxth	r2, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	849a      	strh	r2, [r3, #36]	; 0x24
		return;
 8001850:	e1b1      	b.n	8001bb6 <calibrate_encoder+0x566>
    }
	else if (cal->time < T1+4.0f*PI_F*PPAIRS/W_CAL){
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	ed93 7a05 	vldr	s14, [r3, #20]
 8001858:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <calibrate_encoder+0x298>)
 800185a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800185e:	eddf 6a29 	vldr	s13, [pc, #164]	; 8001904 <calibrate_encoder+0x2b4>
 8001862:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001866:	ed9f 6a22 	vldr	s12, [pc, #136]	; 80018f0 <calibrate_encoder+0x2a0>
 800186a:	eec6 7a86 	vdiv.f32	s15, s13, s12
 800186e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001876:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800187a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800187e:	f140 80ab 	bpl.w	80019d8 <calibrate_encoder+0x388>
		// rotate voltage vector through one mechanical rotation in the negative direction
		cal->theta_ref -= W_CAL*DT;//(cal->time-T1);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	edd3 7a02 	vldr	s15, [r3, #8]
 8001888:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80018f4 <calibrate_encoder+0x2a4>
 800188c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	edc3 7a02 	vstr	s15, [r3, #8]
		controller->i_d_des = I_CAL;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <calibrate_encoder+0x298>)
 8001898:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		controller->i_q_des = 0.0f;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
		cal->cal_position.elec_angle = cal->theta_ref;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 80018b4:	f8c2 3174 	str.w	r3, [r2, #372]	; 0x174
		commutate(controller, &cal->cal_position);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	f503 4382 	add.w	r3, r3, #16640	; 0x4100
 80018be:	332c      	adds	r3, #44	; 0x2c
 80018c0:	4619      	mov	r1, r3
 80018c2:	68b8      	ldr	r0, [r7, #8]
 80018c4:	f001 f99c 	bl	8002c00 <commutate>

		// sample SAMPLES_PER_PPAIR times per pole-pair
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	ed93 7a05 	vldr	s14, [r3, #20]
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80018d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018dc:	dc16      	bgt.n	800190c <calibrate_encoder+0x2bc>
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
			cal->sample_count--;
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
		}
		return;
 80018de:	e169      	b.n	8001bb4 <calibrate_encoder+0x564>
 80018e0:	0801179c 	.word	0x0801179c
 80018e4:	388bcf64 	.word	0x388bcf64
 80018e8:	20004c50 	.word	0x20004c50
 80018ec:	40c90fdb 	.word	0x40c90fdb
 80018f0:	42700000 	.word	0x42700000
 80018f4:	3b83126e 	.word	0x3b83126e
 80018f8:	080117c4 	.word	0x080117c4
 80018fc:	3ad67750 	.word	0x3ad67750
 8001900:	42800000 	.word	0x42800000
 8001904:	41490fdb 	.word	0x41490fdb
 8001908:	46800000 	.word	0x46800000
		if((cal->time > cal->next_sample_time)&&(cal->sample_count>0)){
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001910:	2b00      	cmp	r3, #0
 8001912:	f000 814f 	beq.w	8001bb4 <calibrate_encoder+0x564>
			int count_ref = cal->theta_ref * (float)ENC_CPR/(2.0f*PI_F*PPAIRS);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	edd3 7a02 	vldr	s15, [r3, #8]
 800191c:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 8001908 <calibrate_encoder+0x2b8>
 8001920:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001924:	4ba5      	ldr	r3, [pc, #660]	; (8001bbc <calibrate_encoder+0x56c>)
 8001926:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800192a:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8001bc0 <calibrate_encoder+0x570>
 800192e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001932:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001936:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800193a:	ee17 3a90 	vmov	r3, s15
 800193e:	623b      	str	r3, [r7, #32]
			int error = encoder->raw - count_ref;// - encoder->raw;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001944:	6a3b      	ldr	r3, [r7, #32]
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	61fb      	str	r3, [r7, #28]
			error = error + ENC_CPR*(error<0);
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	145b      	asrs	r3, r3, #17
 800194e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001952:	69fa      	ldr	r2, [r7, #28]
 8001954:	4413      	add	r3, r2
 8001956:	61fb      	str	r3, [r7, #28]
			cal->error_arr[cal->sample_count] = (cal->error_arr[cal->sample_count] + error)/2;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800195c:	687a      	ldr	r2, [r7, #4]
 800195e:	330a      	adds	r3, #10
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	685a      	ldr	r2, [r3, #4]
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	4413      	add	r3, r2
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800196e:	4610      	mov	r0, r2
 8001970:	0fda      	lsrs	r2, r3, #31
 8001972:	4413      	add	r3, r2
 8001974:	105b      	asrs	r3, r3, #1
 8001976:	4619      	mov	r1, r3
 8001978:	687a      	ldr	r2, [r7, #4]
 800197a:	f100 030a 	add.w	r3, r0, #10
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	6059      	str	r1, [r3, #4]
			printf("%d %d %d %.3f\r\n", cal->sample_count, count_ref, cal->error_arr[cal->sample_count], cal->theta_ref);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8001988:	461d      	mov	r5, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	330a      	adds	r3, #10
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	685c      	ldr	r4, [r3, #4]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	4618      	mov	r0, r3
 800199e:	f7fe fdfb 	bl	8000598 <__aeabi_f2d>
 80019a2:	4602      	mov	r2, r0
 80019a4:	460b      	mov	r3, r1
 80019a6:	e9cd 2300 	strd	r2, r3, [sp]
 80019aa:	4623      	mov	r3, r4
 80019ac:	6a3a      	ldr	r2, [r7, #32]
 80019ae:	4629      	mov	r1, r5
 80019b0:	4884      	ldr	r0, [pc, #528]	; (8001bc4 <calibrate_encoder+0x574>)
 80019b2:	f00b fe91 	bl	800d6d8 <iprintf>
			cal->sample_count--;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80019ba:	3b01      	subs	r3, #1
 80019bc:	b29a      	uxth	r2, r3
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	849a      	strh	r2, [r3, #36]	; 0x24
			cal->next_sample_time += 2.0f*PI_F/(W_CAL*SAMPLES_PER_PPAIR);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80019c8:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8001bc8 <calibrate_encoder+0x578>
 80019cc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
		return;
 80019d6:	e0ed      	b.n	8001bb4 <calibrate_encoder+0x564>
    }

    reset_foc(controller);
 80019d8:	68b8      	ldr	r0, [r7, #8]
 80019da:	f001 f89d 	bl	8002b18 <reset_foc>

    // Calculate average offset
    int ezero_mean = 0;
 80019de:	2300      	movs	r3, #0
 80019e0:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019e2:	2300      	movs	r3, #0
 80019e4:	643b      	str	r3, [r7, #64]	; 0x40
 80019e6:	e00b      	b.n	8001a00 <calibrate_encoder+0x3b0>
		ezero_mean += cal->error_arr[i];
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ec:	330a      	adds	r3, #10
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80019f6:	4413      	add	r3, r2
 80019f8:	647b      	str	r3, [r7, #68]	; 0x44
	for(int i = 0; i<((int)PPAIRS*SAMPLES_PER_PPAIR); i++){
 80019fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019fc:	3301      	adds	r3, #1
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
 8001a00:	4b6e      	ldr	r3, [pc, #440]	; (8001bbc <calibrate_encoder+0x56c>)
 8001a02:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a06:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a0a:	ee17 3a90 	vmov	r3, s15
 8001a0e:	019b      	lsls	r3, r3, #6
 8001a10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a12:	429a      	cmp	r2, r3
 8001a14:	dbe8      	blt.n	80019e8 <calibrate_encoder+0x398>
	}
	cal->ezero = ezero_mean/(SAMPLES_PER_PPAIR*PPAIRS);
 8001a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a18:	ee07 3a90 	vmov	s15, r3
 8001a1c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a20:	4b66      	ldr	r3, [pc, #408]	; (8001bbc <calibrate_encoder+0x56c>)
 8001a22:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a26:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8001bcc <calibrate_encoder+0x57c>
 8001a2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a32:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a36:	ee17 2a90 	vmov	r2, s15
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	61da      	str	r2, [r3, #28]

	// Moving average to filter out cogging ripple

	int window = SAMPLES_PER_PPAIR;
 8001a3e:	2340      	movs	r3, #64	; 0x40
 8001a40:	62bb      	str	r3, [r7, #40]	; 0x28
	int lut_offset = (cal->error_arr[0])*N_LUT/ENC_CPR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	da00      	bge.n	8001a4c <calibrate_encoder+0x3fc>
 8001a4a:	33ff      	adds	r3, #255	; 0xff
 8001a4c:	121b      	asrs	r3, r3, #8
 8001a4e:	627b      	str	r3, [r7, #36]	; 0x24
	for(int i = 0; i<N_LUT; i++){
 8001a50:	2300      	movs	r3, #0
 8001a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a54:	e0a0      	b.n	8001b98 <calibrate_encoder+0x548>
			int moving_avg = 0;
 8001a56:	2300      	movs	r3, #0
 8001a58:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a5c:	0fda      	lsrs	r2, r3, #31
 8001a5e:	4413      	add	r3, r2
 8001a60:	105b      	asrs	r3, r3, #1
 8001a62:	425b      	negs	r3, r3
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
 8001a66:	e068      	b.n	8001b3a <calibrate_encoder+0x4ea>
				int index = i*PPAIRS*SAMPLES_PER_PPAIR/N_LUT + j;
 8001a68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a6a:	ee07 3a90 	vmov	s15, r3
 8001a6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a72:	4b52      	ldr	r3, [pc, #328]	; (8001bbc <calibrate_encoder+0x56c>)
 8001a74:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001a78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a7c:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001bcc <calibrate_encoder+0x57c>
 8001a80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a84:	eddf 6a51 	vldr	s13, [pc, #324]	; 8001bcc <calibrate_encoder+0x57c>
 8001a88:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8e:	ee07 3a90 	vmov	s15, r3
 8001a92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a9e:	ee17 3a90 	vmov	r3, s15
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
				if(index<0){index += (SAMPLES_PER_PPAIR*PPAIRS);}
 8001aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da13      	bge.n	8001ad2 <calibrate_encoder+0x482>
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	ee07 3a90 	vmov	s15, r3
 8001ab0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab4:	4b41      	ldr	r3, [pc, #260]	; (8001bbc <calibrate_encoder+0x56c>)
 8001ab6:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001aba:	eddf 6a44 	vldr	s13, [pc, #272]	; 8001bcc <calibrate_encoder+0x57c>
 8001abe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ac6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aca:	ee17 3a90 	vmov	r3, s15
 8001ace:	633b      	str	r3, [r7, #48]	; 0x30
 8001ad0:	e027      	b.n	8001b22 <calibrate_encoder+0x4d2>
				else if(index>(SAMPLES_PER_PPAIR*PPAIRS-1)){index -= (SAMPLES_PER_PPAIR*PPAIRS);}
 8001ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ad4:	ee07 3a90 	vmov	s15, r3
 8001ad8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001adc:	4b37      	ldr	r3, [pc, #220]	; (8001bbc <calibrate_encoder+0x56c>)
 8001ade:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ae2:	eddf 6a3a 	vldr	s13, [pc, #232]	; 8001bcc <calibrate_encoder+0x57c>
 8001ae6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001aee:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001af2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afa:	dd12      	ble.n	8001b22 <calibrate_encoder+0x4d2>
 8001afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001afe:	ee07 3a90 	vmov	s15, r3
 8001b02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b06:	4b2d      	ldr	r3, [pc, #180]	; (8001bbc <calibrate_encoder+0x56c>)
 8001b08:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001b0c:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001bcc <calibrate_encoder+0x57c>
 8001b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b1c:	ee17 3a90 	vmov	r3, s15
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
				moving_avg += cal->error_arr[index];
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b26:	330a      	adds	r3, #10
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4413      	add	r3, r2
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b30:	4413      	add	r3, r2
 8001b32:	63bb      	str	r3, [r7, #56]	; 0x38
			for(int j = (-window)/2; j<(window)/2; j++){
 8001b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b36:	3301      	adds	r3, #1
 8001b38:	637b      	str	r3, [r7, #52]	; 0x34
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	0fda      	lsrs	r2, r3, #31
 8001b3e:	4413      	add	r3, r2
 8001b40:	105b      	asrs	r3, r3, #1
 8001b42:	461a      	mov	r2, r3
 8001b44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b46:	4293      	cmp	r3, r2
 8001b48:	db8e      	blt.n	8001a68 <calibrate_encoder+0x418>
			}
			moving_avg = moving_avg/window;
 8001b4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001b52:	63bb      	str	r3, [r7, #56]	; 0x38
			int lut_index = lut_offset + i;
 8001b54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b58:	4413      	add	r3, r2
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
			if(lut_index>(N_LUT-1)){lut_index -= N_LUT;}
 8001b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5e:	2b3f      	cmp	r3, #63	; 0x3f
 8001b60:	dd02      	ble.n	8001b68 <calibrate_encoder+0x518>
 8001b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b64:	3b40      	subs	r3, #64	; 0x40
 8001b66:	62fb      	str	r3, [r7, #44]	; 0x2c
			cal->lut_arr[lut_index] = moving_avg - cal->ezero;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69db      	ldr	r3, [r3, #28]
 8001b6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b6e:	1ad2      	subs	r2, r2, r3
 8001b70:	6879      	ldr	r1, [r7, #4]
 8001b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b78:	330a      	adds	r3, #10
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	605a      	str	r2, [r3, #4]
			printf("%d  %d\r\n", lut_index, moving_avg - cal->ezero);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	69db      	ldr	r3, [r3, #28]
 8001b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	461a      	mov	r2, r3
 8001b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b8c:	4810      	ldr	r0, [pc, #64]	; (8001bd0 <calibrate_encoder+0x580>)
 8001b8e:	f00b fda3 	bl	800d6d8 <iprintf>
	for(int i = 0; i<N_LUT; i++){
 8001b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b94:	3301      	adds	r3, #1
 8001b96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b9a:	2b3f      	cmp	r3, #63	; 0x3f
 8001b9c:	f77f af5b 	ble.w	8001a56 <calibrate_encoder+0x406>

		}

	cal->started = 0;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	741a      	strb	r2, [r3, #16]
	cal->done_cal = 1;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2201      	movs	r2, #1
 8001baa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8001bae:	e002      	b.n	8001bb6 <calibrate_encoder+0x566>
				return;
 8001bb0:	bf00      	nop
 8001bb2:	e000      	b.n	8001bb6 <calibrate_encoder+0x566>
		return;
 8001bb4:	bf00      	nop
}
 8001bb6:	3748      	adds	r7, #72	; 0x48
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bdb0      	pop	{r4, r5, r7, pc}
 8001bbc:	20004c50 	.word	0x20004c50
 8001bc0:	40c90fdb 	.word	0x40c90fdb
 8001bc4:	080117c4 	.word	0x080117c4
 8001bc8:	3ad67750 	.word	0x3ad67750
 8001bcc:	42800000 	.word	0x42800000
 8001bd0:	080117d4 	.word	0x080117d4

08001bd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001bda:	4b16      	ldr	r3, [pc, #88]	; (8001c34 <MX_DMA_Init+0x60>)
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	4a15      	ldr	r2, [pc, #84]	; (8001c34 <MX_DMA_Init+0x60>)
 8001be0:	f043 0304 	orr.w	r3, r3, #4
 8001be4:	6493      	str	r3, [r2, #72]	; 0x48
 8001be6:	4b13      	ldr	r3, [pc, #76]	; (8001c34 <MX_DMA_Init+0x60>)
 8001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <MX_DMA_Init+0x60>)
 8001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <MX_DMA_Init+0x60>)
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	6493      	str	r3, [r2, #72]	; 0x48
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <MX_DMA_Init+0x60>)
 8001c00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	603b      	str	r3, [r7, #0]
 8001c08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	200b      	movs	r0, #11
 8001c10:	f005 fae3 	bl	80071da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001c14:	200b      	movs	r0, #11
 8001c16:	f005 fafa 	bl	800720e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	2100      	movs	r1, #0
 8001c1e:	200c      	movs	r0, #12
 8001c20:	f005 fadb 	bl	80071da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001c24:	200c      	movs	r0, #12
 8001c26:	f005 faf2 	bl	800720e <HAL_NVIC_EnableIRQ>

}
 8001c2a:	bf00      	nop
 8001c2c:	3708      	adds	r7, #8
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	bd80      	pop	{r7, pc}
 8001c32:	bf00      	nop
 8001c34:	40021000 	.word	0x40021000

08001c38 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b090      	sub	sp, #64	; 0x40
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	60f8      	str	r0, [r7, #12]
 8001c40:	60b9      	str	r1, [r7, #8]
 8001c42:	607a      	str	r2, [r7, #4]
 8001c44:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8001c46:	a33b      	add	r3, pc, #236	; (adr r3, 8001d34 <eeprom_restore+0xfc>)
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001c50:	2300      	movs	r3, #0
 8001c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001c54:	e02c      	b.n	8001cb0 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8001c56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c58:	015b      	lsls	r3, r3, #5
 8001c5a:	4a35      	ldr	r2, [pc, #212]	; (8001d30 <eeprom_restore+0xf8>)
 8001c5c:	4413      	add	r3, r2
 8001c5e:	4619      	mov	r1, r3
 8001c60:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001c64:	2208      	movs	r2, #8
 8001c66:	4618      	mov	r0, r3
 8001c68:	f00b f89c 	bl	800cda4 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001c6c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001c70:	4613      	mov	r3, r2
 8001c72:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8001c74:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001c78:	f04f 0200 	mov.w	r2, #0
 8001c7c:	f04f 0300 	mov.w	r3, #0
 8001c80:	000a      	movs	r2, r1
 8001c82:	2300      	movs	r3, #0
 8001c84:	4613      	mov	r3, r2
 8001c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001c8e:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8001c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c92:	009b      	lsls	r3, r3, #2
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c9a:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8001c9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	6a3a      	ldr	r2, [r7, #32]
 8001ca8:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8001caa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001cac:	3302      	adds	r3, #2
 8001cae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001cb0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d3ce      	bcc.n	8001c56 <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001cb8:	2300      	movs	r3, #0
 8001cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cbc:	e02e      	b.n	8001d1c <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8001cbe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	015b      	lsls	r3, r3, #5
 8001cc6:	4a1a      	ldr	r2, [pc, #104]	; (8001d30 <eeprom_restore+0xf8>)
 8001cc8:	4413      	add	r3, r2
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001cd0:	2208      	movs	r2, #8
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f00b f866 	bl	800cda4 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8001cd8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001cdc:	4613      	mov	r3, r2
 8001cde:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8001ce0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	000a      	movs	r2, r1
 8001cee:	2300      	movs	r3, #0
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8001cf6:	617b      	str	r3, [r7, #20]
 8001cf8:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8001cfa:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8001cfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	697a      	ldr	r2, [r7, #20]
 8001d06:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8001d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	4413      	add	r3, r2
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8001d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d18:	3302      	adds	r3, #2
 8001d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8001d1c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d3cc      	bcc.n	8001cbe <eeprom_restore+0x86>
	}

	return HAL_OK;
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3740      	adds	r7, #64	; 0x40
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	0801d000 	.word	0x0801d000
 8001d34:	deadbeef 	.word	0xdeadbeef
	...

08001d40 <eeprom_store>:

HAL_StatusTypeDef eeprom_store(float const * float_regs, uint32_t float_size, int const * int_regs, uint32_t int_size)
{
 8001d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d44:	b0a2      	sub	sp, #136	; 0x88
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6278      	str	r0, [r7, #36]	; 0x24
 8001d4a:	6239      	str	r1, [r7, #32]
 8001d4c:	61fa      	str	r2, [r7, #28]
 8001d4e:	61bb      	str	r3, [r7, #24]
	HAL_FLASH_Unlock();
 8001d50:	f006 f9fe 	bl	8008150 <HAL_FLASH_Unlock>
	// erase the last page of bank1 (STM32G43x : 1 bank, 64 pages, 2kB per page, 64-bit data)
	{
		FLASH_EraseInitTypeDef erase ={FLASH_TYPEERASE_PAGES,FLASH_BANK_1,page_nb,5};
 8001d54:	2300      	movs	r3, #0
 8001d56:	643b      	str	r3, [r7, #64]	; 0x40
 8001d58:	2301      	movs	r3, #1
 8001d5a:	647b      	str	r3, [r7, #68]	; 0x44
 8001d5c:	233a      	movs	r3, #58	; 0x3a
 8001d5e:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d60:	2305      	movs	r3, #5
 8001d62:	64fb      	str	r3, [r7, #76]	; 0x4c
		uint32_t page_error = 0;
 8001d64:	2300      	movs	r3, #0
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
		HAL_StatusTypeDef result = HAL_FLASHEx_Erase(&erase, &page_error);
 8001d68:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001d6c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8001d70:	4619      	mov	r1, r3
 8001d72:	4610      	mov	r0, r2
 8001d74:	f006 fae4 	bl	8008340 <HAL_FLASHEx_Erase>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
		if(result!=HAL_OK)
 8001d7e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d004      	beq.n	8001d90 <eeprom_store+0x50>
		{
			HAL_FLASH_Lock();
 8001d86:	f006 fa05 	bl	8008194 <HAL_FLASH_Lock>
			return result;
 8001d8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8001d8e:	e0bd      	b.n	8001f0c <eeprom_store+0x1cc>
		}
	}
	// write the last page
	{
		uint64_t data = 0xDEADBEEF;
 8001d90:	a362      	add	r3, pc, #392	; (adr r3, 8001f1c <eeprom_store+0x1dc>)
 8001d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d96:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
		for(uint32_t index=0; index<float_size;index+=2)
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001da0:	e052      	b.n	8001e48 <eeprom_store+0x108>
		{
			union UN {float a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = float_regs[index];
 8001da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001daa:	4413      	add	r3, r2
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	63bb      	str	r3, [r7, #56]	; 0x38
			un2.a = float_regs[index+1];
 8001db0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001db4:	3301      	adds	r3, #1
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dba:	4413      	add	r3, r2
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	637b      	str	r3, [r7, #52]	; 0x34
			uint64_t temp = un2.b;
 8001dc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	613b      	str	r3, [r7, #16]
 8001dc6:	617a      	str	r2, [r7, #20]
 8001dc8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001dcc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
			data = (temp<<32)|un1.b;
 8001dd0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001dd4:	f04f 0000 	mov.w	r0, #0
 8001dd8:	f04f 0100 	mov.w	r1, #0
 8001ddc:	0011      	movs	r1, r2
 8001dde:	2000      	movs	r0, #0
 8001de0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001de2:	2200      	movs	r2, #0
 8001de4:	4698      	mov	r8, r3
 8001de6:	4691      	mov	r9, r2
 8001de8:	ea40 0308 	orr.w	r3, r0, r8
 8001dec:	60bb      	str	r3, [r7, #8]
 8001dee:	ea41 0309 	orr.w	r3, r1, r9
 8001df2:	60fb      	str	r3, [r7, #12]
 8001df4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001df8:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+index*32,data);
 8001dfc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e00:	015b      	lsls	r3, r3, #5
 8001e02:	4a45      	ldr	r2, [pc, #276]	; (8001f18 <eeprom_store+0x1d8>)
 8001e04:	1899      	adds	r1, r3, r2
 8001e06:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f006 f94a 	bl	80080a4 <HAL_FLASH_Program>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(result!=HAL_OK)
 8001e16:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00f      	beq.n	8001e3e <eeprom_store+0xfe>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001e1e:	f006 f9d3 	bl	80081c8 <HAL_FLASH_GetError>
 8001e22:	6538      	str	r0, [r7, #80]	; 0x50
				if(error)
 8001e24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d004      	beq.n	8001e34 <eeprom_store+0xf4>
				{
					HAL_FLASH_Lock();
 8001e2a:	f006 f9b3 	bl	8008194 <HAL_FLASH_Lock>
					return error;
 8001e2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	e06b      	b.n	8001f0c <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001e34:	f006 f9ae 	bl	8008194 <HAL_FLASH_Lock>
				return result;
 8001e38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001e3c:	e066      	b.n	8001f0c <eeprom_store+0x1cc>
		for(uint32_t index=0; index<float_size;index+=2)
 8001e3e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001e42:	3302      	adds	r3, #2
 8001e44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001e48:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8001e4c:	6a3b      	ldr	r3, [r7, #32]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d3a7      	bcc.n	8001da2 <eeprom_store+0x62>
			}
		}
		for(uint32_t index=0; index<int_size;index+=2)
 8001e52:	2300      	movs	r3, #0
 8001e54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001e58:	e050      	b.n	8001efc <eeprom_store+0x1bc>
		{
			union UN {int a; uint32_t b;};
			union UN un1;
			union UN un2;
			un1.a = int_regs[index];
 8001e5a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e5e:	009b      	lsls	r3, r3, #2
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	4413      	add	r3, r2
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	633b      	str	r3, [r7, #48]	; 0x30
			un2.a = int_regs[index+1];
 8001e68:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e6c:	3301      	adds	r3, #1
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	69fa      	ldr	r2, [r7, #28]
 8001e72:	4413      	add	r3, r2
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	62fb      	str	r3, [r7, #44]	; 0x2c
			uint64_t temp = un2.b;
 8001e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	603b      	str	r3, [r7, #0]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001e84:	e9c7 231a 	strd	r2, r3, [r7, #104]	; 0x68
			data = (temp<<32)|un1.b;
 8001e88:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	0003      	movs	r3, r0
 8001e96:	2200      	movs	r2, #0
 8001e98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001e9a:	2000      	movs	r0, #0
 8001e9c:	460c      	mov	r4, r1
 8001e9e:	4605      	mov	r5, r0
 8001ea0:	ea42 0a04 	orr.w	sl, r2, r4
 8001ea4:	ea43 0b05 	orr.w	fp, r3, r5
 8001ea8:	e9c7 ab1c 	strd	sl, fp, [r7, #112]	; 0x70
			HAL_StatusTypeDef result = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD,start_address+(float_size+index)*32,data);
 8001eac:	6a3a      	ldr	r2, [r7, #32]
 8001eae:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eb2:	4413      	add	r3, r2
 8001eb4:	015b      	lsls	r3, r3, #5
 8001eb6:	4a18      	ldr	r2, [pc, #96]	; (8001f18 <eeprom_store+0x1d8>)
 8001eb8:	1899      	adds	r1, r3, r2
 8001eba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001ebe:	2000      	movs	r0, #0
 8001ec0:	f006 f8f0 	bl	80080a4 <HAL_FLASH_Program>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			if(result!=HAL_OK)
 8001eca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d00f      	beq.n	8001ef2 <eeprom_store+0x1b2>
			{
				uint32_t error = HAL_FLASH_GetError();
 8001ed2:	f006 f979 	bl	80081c8 <HAL_FLASH_GetError>
 8001ed6:	6638      	str	r0, [r7, #96]	; 0x60
				if(error)
 8001ed8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d004      	beq.n	8001ee8 <eeprom_store+0x1a8>
				{
					HAL_FLASH_Lock();
 8001ede:	f006 f959 	bl	8008194 <HAL_FLASH_Lock>
					return error;
 8001ee2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	e011      	b.n	8001f0c <eeprom_store+0x1cc>
				}
				HAL_FLASH_Lock();
 8001ee8:	f006 f954 	bl	8008194 <HAL_FLASH_Lock>
				return result;
 8001eec:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ef0:	e00c      	b.n	8001f0c <eeprom_store+0x1cc>
		for(uint32_t index=0; index<int_size;index+=2)
 8001ef2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001ef6:	3302      	adds	r3, #2
 8001ef8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001efc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	429a      	cmp	r2, r3
 8001f04:	d3a9      	bcc.n	8001e5a <eeprom_store+0x11a>
			}
		}
	}
	HAL_FLASH_Lock();
 8001f06:	f006 f945 	bl	8008194 <HAL_FLASH_Lock>
	return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3788      	adds	r7, #136	; 0x88
 8001f10:	46bd      	mov	sp, r7
 8001f12:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f16:	bf00      	nop
 8001f18:	0801d000 	.word	0x0801d000
 8001f1c:	deadbeef 	.word	0xdeadbeef
 8001f20:	00000000 	.word	0x00000000

08001f24 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f2a:	4a20      	ldr	r2, [pc, #128]	; (8001fac <MX_FDCAN1_Init+0x88>)
 8001f2c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV4;
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f30:	2202      	movs	r2, #2
 8001f32:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f36:	2200      	movs	r2, #0
 8001f38:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f42:	2201      	movs	r2, #1
 8001f44:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = ENABLE;
 8001f46:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8001f4c:	4b16      	ldr	r3, [pc, #88]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 3;
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f54:	2203      	movs	r2, #3
 8001f56:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f5a:	2201      	movs	r2, #1
 8001f5c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 11;
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f60:	220b      	movs	r2, #11
 8001f62:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8001f64:	4b10      	ldr	r3, [pc, #64]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f66:	2202      	movs	r2, #2
 8001f68:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8001f6a:	4b0f      	ldr	r3, [pc, #60]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f6c:	2201      	movs	r2, #1
 8001f6e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8001f70:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f72:	2201      	movs	r2, #1
 8001f74:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8001f76:	4b0c      	ldr	r3, [pc, #48]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f78:	2201      	movs	r2, #1
 8001f7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8001f7c:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f7e:	2201      	movs	r2, #1
 8001f80:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 8001f82:	4b09      	ldr	r3, [pc, #36]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8001f88:	4b07      	ldr	r3, [pc, #28]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8001f8e:	4b06      	ldr	r3, [pc, #24]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8001f94:	4804      	ldr	r0, [pc, #16]	; (8001fa8 <MX_FDCAN1_Init+0x84>)
 8001f96:	f005 fc87 	bl	80078a8 <HAL_FDCAN_Init>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8001fa0:	f002 fbef 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8001fa4:	bf00      	nop
 8001fa6:	bd80      	pop	{r7, pc}
 8001fa8:	200003b8 	.word	0x200003b8
 8001fac:	40006400 	.word	0x40006400

08001fb0 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b08a      	sub	sp, #40	; 0x28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fb8:	f107 0314 	add.w	r3, r7, #20
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
  if(fdcanHandle->Instance==FDCAN1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a26      	ldr	r2, [pc, #152]	; (8002068 <HAL_FDCAN_MspInit+0xb8>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d146      	bne.n	8002060 <HAL_FDCAN_MspInit+0xb0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001fd2:	4b26      	ldr	r3, [pc, #152]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd6:	4a25      	ldr	r2, [pc, #148]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8001fde:	4b23      	ldr	r3, [pc, #140]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe6:	613b      	str	r3, [r7, #16]
 8001fe8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fea:	4b20      	ldr	r3, [pc, #128]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fee:	4a1f      	ldr	r2, [pc, #124]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002002:	4b1a      	ldr	r3, [pc, #104]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	4a19      	ldr	r2, [pc, #100]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8002008:	f043 0302 	orr.w	r3, r3, #2
 800200c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800200e:	4b17      	ldr	r3, [pc, #92]	; (800206c <HAL_FDCAN_MspInit+0xbc>)
 8002010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800201a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800201e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800202c:	2309      	movs	r3, #9
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002030:	f107 0314 	add.w	r3, r7, #20
 8002034:	4619      	mov	r1, r3
 8002036:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800203a:	f006 faa5 	bl	8008588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800203e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8002050:	2309      	movs	r3, #9
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	4805      	ldr	r0, [pc, #20]	; (8002070 <HAL_FDCAN_MspInit+0xc0>)
 800205c:	f006 fa94 	bl	8008588 <HAL_GPIO_Init>

  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8002060:	bf00      	nop
 8002062:	3728      	adds	r7, #40	; 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40006400 	.word	0x40006400
 800206c:	40021000 	.word	0x40021000
 8002070:	48000400 	.word	0x48000400

08002074 <can_rx_init>:
  /* USER CODE END FDCAN1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void can_rx_init(CANRxMessage *msg){
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af02      	add	r7, sp, #8
 800207a:	6078      	str	r0, [r7, #4]
	msg->filter.IdType = FDCAN_STANDARD_ID;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	635a      	str	r2, [r3, #52]	; 0x34
	msg->filter.FilterIndex = 0;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
	msg->filter.FilterType = FDCAN_FILTER_RANGE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	63da      	str	r2, [r3, #60]	; 0x3c
	msg->filter.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2201      	movs	r2, #1
 8002092:	641a      	str	r2, [r3, #64]	; 0x40
	msg->filter.FilterID1 = CAN_ID;
 8002094:	4b0d      	ldr	r3, [pc, #52]	; (80020cc <can_rx_init+0x58>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	461a      	mov	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	645a      	str	r2, [r3, #68]	; 0x44
	msg->filter.FilterID2 = CAN_ID;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <can_rx_init+0x58>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	461a      	mov	r2, r3
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	649a      	str	r2, [r3, #72]	; 0x48
	HAL_FDCAN_ConfigFilter(&CAN_H, &msg->filter);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	3334      	adds	r3, #52	; 0x34
 80020ac:	4619      	mov	r1, r3
 80020ae:	4808      	ldr	r0, [pc, #32]	; (80020d0 <can_rx_init+0x5c>)
 80020b0:	f005 fd54 	bl	8007b5c <HAL_FDCAN_ConfigFilter>
	HAL_FDCAN_ConfigGlobalFilter(&CAN_H,3,3,0,1);
 80020b4:	2301      	movs	r3, #1
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2203      	movs	r2, #3
 80020bc:	2103      	movs	r1, #3
 80020be:	4804      	ldr	r0, [pc, #16]	; (80020d0 <can_rx_init+0x5c>)
 80020c0:	f005 fda6 	bl	8007c10 <HAL_FDCAN_ConfigGlobalFilter>
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20004d50 	.word	0x20004d50
 80020d0:	200003b8 	.word	0x200003b8

080020d4 <can_tx_init>:

void can_tx_init(CANTxMessage *msg){
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
	msg->tx_header.Identifier = CAN_MASTER;
 80020dc:	4b11      	ldr	r3, [pc, #68]	; (8002124 <can_tx_init+0x50>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	461a      	mov	r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
	msg->tx_header.DataLength = FDCAN_DLC_BYTES_6;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 80020ec:	615a      	str	r2, [r3, #20]
	msg->tx_header.IdType = FDCAN_STANDARD_ID;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2200      	movs	r2, #0
 80020f2:	60da      	str	r2, [r3, #12]
	msg->tx_header.TxFrameType = FDCAN_DATA_FRAME;
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2200      	movs	r2, #0
 80020f8:	611a      	str	r2, [r3, #16]
	msg->tx_header.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	619a      	str	r2, [r3, #24]
	msg->tx_header.BitRateSwitch = FDCAN_BRS_OFF;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	61da      	str	r2, [r3, #28]
	msg->tx_header.FDFormat = FDCAN_CLASSIC_CAN;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	621a      	str	r2, [r3, #32]
	msg->tx_header.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	625a      	str	r2, [r3, #36]	; 0x24
	msg->tx_header.MessageMarker = 0;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	20004d50 	.word	0x20004d50

08002128 <pack_reply>:
/// 0: [position[15-8]]
/// 1: [position[7-0]]
/// 2: [velocity[11-4]]
/// 3: [velocity[3-0], current[11-8]]
/// 4: [current[7-0]]
void pack_reply(CANTxMessage *msg, uint8_t id, float p, float v, float t){
 8002128:	b580      	push	{r7, lr}
 800212a:	b08a      	sub	sp, #40	; 0x28
 800212c:	af00      	add	r7, sp, #0
 800212e:	6178      	str	r0, [r7, #20]
 8002130:	460b      	mov	r3, r1
 8002132:	ed87 0a03 	vstr	s0, [r7, #12]
 8002136:	edc7 0a02 	vstr	s1, [r7, #8]
 800213a:	ed87 1a01 	vstr	s2, [r7, #4]
 800213e:	74fb      	strb	r3, [r7, #19]
    int p_int = float_to_uint(p, P_MIN, P_MAX, 16);
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <pack_reply+0xc4>)
 8002142:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <pack_reply+0xc4>)
 8002148:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 800214c:	2010      	movs	r0, #16
 800214e:	eeb0 1a47 	vmov.f32	s2, s14
 8002152:	eef0 0a67 	vmov.f32	s1, s15
 8002156:	ed97 0a03 	vldr	s0, [r7, #12]
 800215a:	f002 fc00 	bl	800495e <float_to_uint>
 800215e:	6278      	str	r0, [r7, #36]	; 0x24
    int v_int = float_to_uint(v, V_MIN, V_MAX, 12);
 8002160:	4b22      	ldr	r3, [pc, #136]	; (80021ec <pack_reply+0xc4>)
 8002162:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002166:	4b21      	ldr	r3, [pc, #132]	; (80021ec <pack_reply+0xc4>)
 8002168:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 800216c:	200c      	movs	r0, #12
 800216e:	eeb0 1a47 	vmov.f32	s2, s14
 8002172:	eef0 0a67 	vmov.f32	s1, s15
 8002176:	ed97 0a02 	vldr	s0, [r7, #8]
 800217a:	f002 fbf0 	bl	800495e <float_to_uint>
 800217e:	6238      	str	r0, [r7, #32]
    int t_int = float_to_uint(t, -T_MAX, T_MAX, 12);
 8002180:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <pack_reply+0xc4>)
 8002182:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002186:	eef1 7a67 	vneg.f32	s15, s15
 800218a:	4b18      	ldr	r3, [pc, #96]	; (80021ec <pack_reply+0xc4>)
 800218c:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 8002190:	200c      	movs	r0, #12
 8002192:	eeb0 1a47 	vmov.f32	s2, s14
 8002196:	eef0 0a67 	vmov.f32	s1, s15
 800219a:	ed97 0a01 	vldr	s0, [r7, #4]
 800219e:	f002 fbde 	bl	800495e <float_to_uint>
 80021a2:	61f8      	str	r0, [r7, #28]
    msg->data[0] = id;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	7cfa      	ldrb	r2, [r7, #19]
 80021a8:	705a      	strb	r2, [r3, #1]
    msg->data[1] = p_int>>8;
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	121b      	asrs	r3, r3, #8
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	709a      	strb	r2, [r3, #2]
    msg->data[2] = p_int&0xFF;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	b2da      	uxtb	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	70da      	strb	r2, [r3, #3]
    msg->data[3] = v_int>>4;
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	111b      	asrs	r3, r3, #4
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	711a      	strb	r2, [r3, #4]
    msg->data[4] = ((v_int&0xF)<<4) + (t_int>>8);
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	011b      	lsls	r3, r3, #4
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	121b      	asrs	r3, r3, #8
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	4413      	add	r3, r2
 80021d4:	b2da      	uxtb	r2, r3
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	715a      	strb	r2, [r3, #5]
    msg->data[5] = t_int&0xFF;
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	b2da      	uxtb	r2, r3
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	719a      	strb	r2, [r3, #6]
    }
 80021e2:	bf00      	nop
 80021e4:	3728      	adds	r7, #40	; 0x28
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	20004c50 	.word	0x20004c50

080021f0 <unpack_cmd>:
/// 3: [velocity[3-0], kp[11-8]]
/// 4: [kp[7-0]]
/// 5: [kd[11-4]]
/// 6: [kd[3-0], torque[11-8]]
/// 7: [torque[7-0]]
void unpack_cmd(CANRxMessage msg, float *commands){// ControllerStruct * controller){
 80021f0:	b084      	sub	sp, #16
 80021f2:	b590      	push	{r4, r7, lr}
 80021f4:	b087      	sub	sp, #28
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	f107 0428 	add.w	r4, r7, #40	; 0x28
 80021fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        int p_int = (msg.data[0]<<8)|msg.data[1];
 8002200:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8002204:	021b      	lsls	r3, r3, #8
 8002206:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 800220a:	4313      	orrs	r3, r2
 800220c:	617b      	str	r3, [r7, #20]
        int v_int = (msg.data[2]<<4)|(msg.data[3]>>4);
 800220e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002212:	011b      	lsls	r3, r3, #4
 8002214:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002218:	0912      	lsrs	r2, r2, #4
 800221a:	b2d2      	uxtb	r2, r2
 800221c:	4313      	orrs	r3, r2
 800221e:	613b      	str	r3, [r7, #16]
        int kp_int = ((msg.data[3]&0xF)<<8)|msg.data[4];
 8002220:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002224:	021b      	lsls	r3, r3, #8
 8002226:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800222a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800222e:	4313      	orrs	r3, r2
 8002230:	60fb      	str	r3, [r7, #12]
        int kd_int = (msg.data[5]<<4)|(msg.data[6]>>4);
 8002232:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800223c:	0912      	lsrs	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	4313      	orrs	r3, r2
 8002242:	60bb      	str	r3, [r7, #8]
        int t_int = ((msg.data[6]&0xF)<<8)|msg.data[7];
 8002244:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002248:	021b      	lsls	r3, r3, #8
 800224a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800224e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8002252:	4313      	orrs	r3, r2
 8002254:	607b      	str	r3, [r7, #4]

        commands[0] = uint_to_float(p_int, P_MIN, P_MAX, 16);
 8002256:	4b34      	ldr	r3, [pc, #208]	; (8002328 <unpack_cmd+0x138>)
 8002258:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800225c:	4b32      	ldr	r3, [pc, #200]	; (8002328 <unpack_cmd+0x138>)
 800225e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8002262:	2110      	movs	r1, #16
 8002264:	eef0 0a47 	vmov.f32	s1, s14
 8002268:	eeb0 0a67 	vmov.f32	s0, s15
 800226c:	6978      	ldr	r0, [r7, #20]
 800226e:	f002 fba9 	bl	80049c4 <uint_to_float>
 8002272:	eef0 7a40 	vmov.f32	s15, s0
 8002276:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002278:	edc3 7a00 	vstr	s15, [r3]
        commands[1] = uint_to_float(v_int, V_MIN, V_MAX, 12);
 800227c:	4b2a      	ldr	r3, [pc, #168]	; (8002328 <unpack_cmd+0x138>)
 800227e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002282:	4b29      	ldr	r3, [pc, #164]	; (8002328 <unpack_cmd+0x138>)
 8002284:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002288:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800228a:	1d1c      	adds	r4, r3, #4
 800228c:	210c      	movs	r1, #12
 800228e:	eef0 0a47 	vmov.f32	s1, s14
 8002292:	eeb0 0a67 	vmov.f32	s0, s15
 8002296:	6938      	ldr	r0, [r7, #16]
 8002298:	f002 fb94 	bl	80049c4 <uint_to_float>
 800229c:	eef0 7a40 	vmov.f32	s15, s0
 80022a0:	edc4 7a00 	vstr	s15, [r4]
        commands[2] = uint_to_float(kp_int, KP_MIN, KP_MAX, 12);
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <unpack_cmd+0x138>)
 80022a6:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 80022aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022ac:	f103 0408 	add.w	r4, r3, #8
 80022b0:	210c      	movs	r1, #12
 80022b2:	eef0 0a67 	vmov.f32	s1, s15
 80022b6:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 800232c <unpack_cmd+0x13c>
 80022ba:	68f8      	ldr	r0, [r7, #12]
 80022bc:	f002 fb82 	bl	80049c4 <uint_to_float>
 80022c0:	eef0 7a40 	vmov.f32	s15, s0
 80022c4:	edc4 7a00 	vstr	s15, [r4]
        commands[3] = uint_to_float(kd_int, KD_MIN, KD_MAX, 12);
 80022c8:	4b17      	ldr	r3, [pc, #92]	; (8002328 <unpack_cmd+0x138>)
 80022ca:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80022ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022d0:	f103 040c 	add.w	r4, r3, #12
 80022d4:	210c      	movs	r1, #12
 80022d6:	eef0 0a67 	vmov.f32	s1, s15
 80022da:	ed9f 0a14 	vldr	s0, [pc, #80]	; 800232c <unpack_cmd+0x13c>
 80022de:	68b8      	ldr	r0, [r7, #8]
 80022e0:	f002 fb70 	bl	80049c4 <uint_to_float>
 80022e4:	eef0 7a40 	vmov.f32	s15, s0
 80022e8:	edc4 7a00 	vstr	s15, [r4]
        commands[4] = uint_to_float(t_int, -T_MAX, T_MAX, 12);
 80022ec:	4b0e      	ldr	r3, [pc, #56]	; (8002328 <unpack_cmd+0x138>)
 80022ee:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80022f2:	eef1 7a67 	vneg.f32	s15, s15
 80022f6:	4b0c      	ldr	r3, [pc, #48]	; (8002328 <unpack_cmd+0x138>)
 80022f8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80022fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022fe:	f103 0410 	add.w	r4, r3, #16
 8002302:	210c      	movs	r1, #12
 8002304:	eef0 0a47 	vmov.f32	s1, s14
 8002308:	eeb0 0a67 	vmov.f32	s0, s15
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f002 fb59 	bl	80049c4 <uint_to_float>
 8002312:	eef0 7a40 	vmov.f32	s15, s0
 8002316:	edc4 7a00 	vstr	s15, [r4]

//    printf("Received   ");
//    printf("%.3f  %.3f  %.3f  %.3f  %.3f",commands[0], commands[1], commands[2], commands[3], commands[4]);
//    printf("\n\r");
    }
 800231a:	bf00      	nop
 800231c:	371c      	adds	r7, #28
 800231e:	46bd      	mov	sp, r7
 8002320:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002324:	b004      	add	sp, #16
 8002326:	4770      	bx	lr
 8002328:	20004c50 	.word	0x20004c50
 800232c:	00000000 	.word	0x00000000

08002330 <set_dtc>:
#include "position_sensor.h"
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"

void set_dtc(ControllerStruct *controller){
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]

	/* Invert duty cycle if that's how hardware is configured */

	float dtc_u = controller->dtc_u;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233c:	617b      	str	r3, [r7, #20]
	float dtc_v = controller->dtc_v;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	613b      	str	r3, [r7, #16]
	float dtc_w = controller->dtc_w;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002348:	60fb      	str	r3, [r7, #12]

	if(INVERT_DTC){
		dtc_u = 1.0f - controller->dtc_u;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002350:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a05 	vstr	s15, [r7, #20]
		dtc_v = 1.0f - controller->dtc_v;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002362:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002366:	ee77 7a67 	vsub.f32	s15, s14, s15
 800236a:	edc7 7a04 	vstr	s15, [r7, #16]
		dtc_w = 1.0f - controller->dtc_w;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002374:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	edc7 7a03 	vstr	s15, [r7, #12]
	}
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002380:	4b3b      	ldr	r3, [pc, #236]	; (8002470 <set_dtc+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d136      	bne.n	80023f6 <set_dtc+0xc6>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_u);
 8002388:	4b3a      	ldr	r3, [pc, #232]	; (8002474 <set_dtc+0x144>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800238e:	ee07 3a90 	vmov	s15, r3
 8002392:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002396:	edd7 7a05 	vldr	s15, [r7, #20]
 800239a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <set_dtc+0x144>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023a6:	ee17 2a90 	vmov	r2, s15
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_v);
 80023ac:	4b31      	ldr	r3, [pc, #196]	; (8002474 <set_dtc+0x144>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023b2:	ee07 3a90 	vmov	s15, r3
 80023b6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80023be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023c2:	4b2c      	ldr	r3, [pc, #176]	; (8002474 <set_dtc+0x144>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ca:	ee17 2a90 	vmov	r2, s15
 80023ce:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 80023d0:	4b28      	ldr	r3, [pc, #160]	; (8002474 <set_dtc+0x144>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d6:	ee07 3a90 	vmov	s15, r3
 80023da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023de:	edd7 7a03 	vldr	s15, [r7, #12]
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	4b23      	ldr	r3, [pc, #140]	; (8002474 <set_dtc+0x144>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023ee:	ee17 2a90 	vmov	r2, s15
 80023f2:	63da      	str	r2, [r3, #60]	; 0x3c
	else{
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
	}
}
 80023f4:	e035      	b.n	8002462 <set_dtc+0x132>
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_V, ((TIM_PWM.Instance->ARR))*dtc_u);
 80023f6:	4b1f      	ldr	r3, [pc, #124]	; (8002474 <set_dtc+0x144>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	ee07 3a90 	vmov	s15, r3
 8002400:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002404:	edd7 7a05 	vldr	s15, [r7, #20]
 8002408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800240c:	4b19      	ldr	r3, [pc, #100]	; (8002474 <set_dtc+0x144>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 2a90 	vmov	r2, s15
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_U, ((TIM_PWM.Instance->ARR))*dtc_v);
 800241a:	4b16      	ldr	r3, [pc, #88]	; (8002474 <set_dtc+0x144>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002428:	edd7 7a04 	vldr	s15, [r7, #16]
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	4b10      	ldr	r3, [pc, #64]	; (8002474 <set_dtc+0x144>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002438:	ee17 2a90 	vmov	r2, s15
 800243c:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&TIM_PWM, TIM_CH_W, ((TIM_PWM.Instance->ARR))*dtc_w);
 800243e:	4b0d      	ldr	r3, [pc, #52]	; (8002474 <set_dtc+0x144>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	ee07 3a90 	vmov	s15, r3
 8002448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800244c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002450:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002454:	4b07      	ldr	r3, [pc, #28]	; (8002474 <set_dtc+0x144>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800245c:	ee17 2a90 	vmov	r2, s15
 8002460:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002462:	bf00      	nop
 8002464:	371c      	adds	r7, #28
 8002466:	46bd      	mov	sp, r7
 8002468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246c:	4770      	bx	lr
 800246e:	bf00      	nop
 8002470:	20004d50 	.word	0x20004d50
 8002474:	20005008 	.word	0x20005008

08002478 <analog_sample>:

void analog_sample (ControllerStruct *controller){
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
	/* Sample ADCs */
	/* Handle phase order swapping so that voltage/current/torque match encoder direction */
	if(!PHASE_ORDER){
 8002480:	4b41      	ldr	r3, [pc, #260]	; (8002588 <analog_sample+0x110>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d112      	bne.n	80024ae <analog_sample+0x36>
		controller->adc_a_raw = controller->ADC1_Val[0];
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 800248e:	461a      	mov	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC2_Val[0];
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800249a:	461a      	mov	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f8b3 3300 	ldrh.w	r3, [r3, #768]	; 0x300
 80024a6:	461a      	mov	r2, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	60da      	str	r2, [r3, #12]
 80024ac:	e011      	b.n	80024d2 <analog_sample+0x5a>
	}
	else{
		controller->adc_a_raw = controller->ADC2_Val[0];
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 80024b4:	461a      	mov	r2, r3
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	605a      	str	r2, [r3, #4]
		controller->adc_b_raw = controller->ADC1_Val[0];
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f8b3 32f8 	ldrh.w	r3, [r3, #760]	; 0x2f8
 80024c0:	461a      	mov	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	609a      	str	r2, [r3, #8]
		controller->adc_c_raw = controller->ADC2_Val[1];
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f8b3 3300 	ldrh.w	r3, [r3, #768]	; 0x300
 80024cc:	461a      	mov	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	60da      	str	r2, [r3, #12]
	}
    HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller->ADC1_Val, 3);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f503 733e 	add.w	r3, r3, #760	; 0x2f8
 80024d8:	2203      	movs	r2, #3
 80024da:	4619      	mov	r1, r3
 80024dc:	482b      	ldr	r0, [pc, #172]	; (800258c <analog_sample+0x114>)
 80024de:	f003 ff1f 	bl	8006320 <HAL_ADC_Start_DMA>
    HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller->ADC2_Val, 2);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f203 23fe 	addw	r3, r3, #766	; 0x2fe
 80024e8:	2202      	movs	r2, #2
 80024ea:	4619      	mov	r1, r3
 80024ec:	4828      	ldr	r0, [pc, #160]	; (8002590 <analog_sample+0x118>)
 80024ee:	f003 ff17 	bl	8006320 <HAL_ADC_Start_DMA>

	controller->adc_vbus_raw = controller->ADC1_Val[1];
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	f8b3 32fa 	ldrh.w	r3, [r3, #762]	; 0x2fa
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	611a      	str	r2, [r3, #16]
	controller->v_bus = (float)controller->adc_vbus_raw*V_SCALE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	ee07 3a90 	vmov	s15, r3
 8002506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800250a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002594 <analog_sample+0x11c>
 800250e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	edc3 7a08 	vstr	s15, [r3, #32]

	controller->i_a = I_SCALE*(float)(controller->adc_a_raw - controller->adc_a_offset);    // Calculate phase currents from ADC readings
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	685a      	ldr	r2, [r3, #4]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	ee07 3a90 	vmov	s15, r3
 8002528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800252c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 8002598 <analog_sample+0x120>
 8002530:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	edc3 7a05 	vstr	s15, [r3, #20]
	controller->i_b = I_SCALE*(float)(controller->adc_b_raw - controller->adc_b_offset);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	1ad3      	subs	r3, r2, r3
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800254e:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002598 <analog_sample+0x120>
 8002552:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	edc3 7a06 	vstr	s15, [r3, #24]
	controller->i_c = I_SCALE*(float)(controller->adc_c_raw - controller->adc_c_offset);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	ee07 3a90 	vmov	s15, r3
 800256c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002570:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002598 <analog_sample+0x120>
 8002574:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	edc3 7a07 	vstr	s15, [r3, #28]

}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	20004d50 	.word	0x20004d50
 800258c:	2000021c 	.word	0x2000021c
 8002590:	20000288 	.word	0x20000288
 8002594:	3c092822 	.word	0x3c092822
 8002598:	bcf0aa87 	.word	0xbcf0aa87

0800259c <abc>:

void abc( float theta, float d, float q, float *a, float *b, float *c){
 800259c:	b580      	push	{r7, lr}
 800259e:	b088      	sub	sp, #32
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	ed87 0a05 	vstr	s0, [r7, #20]
 80025a6:	edc7 0a04 	vstr	s1, [r7, #16]
 80025aa:	ed87 1a03 	vstr	s2, [r7, #12]
 80025ae:	60b8      	str	r0, [r7, #8]
 80025b0:	6079      	str	r1, [r7, #4]
 80025b2:	603a      	str	r2, [r7, #0]
    /* Inverse DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1 */

    float cf = cos_lut(theta);
 80025b4:	ed97 0a05 	vldr	s0, [r7, #20]
 80025b8:	f002 fa70 	bl	8004a9c <cos_lut>
 80025bc:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80025c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80025c4:	f002 fa30 	bl	8004a28 <sin_lut>
 80025c8:	ed87 0a06 	vstr	s0, [r7, #24]

    *a = cf*d - sf*q;
 80025cc:	ed97 7a07 	vldr	s14, [r7, #28]
 80025d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025d8:	edd7 6a06 	vldr	s13, [r7, #24]
 80025dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80025e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	edc3 7a00 	vstr	s15, [r3]
    *b = (SQRT3_2*sf-.5f*cf)*d - (-SQRT3_2*cf-.5f*sf)*q;
 80025ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80025f2:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800269c <abc+0x100>
 80025f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025fa:	edd7 7a07 	vldr	s15, [r7, #28]
 80025fe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002602:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800260a:	edd7 7a04 	vldr	s15, [r7, #16]
 800260e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002612:	edd7 7a07 	vldr	s15, [r7, #28]
 8002616:	eddf 6a22 	vldr	s13, [pc, #136]	; 80026a0 <abc+0x104>
 800261a:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800261e:	edd7 7a06 	vldr	s15, [r7, #24]
 8002622:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002626:	ee67 7a86 	vmul.f32	s15, s15, s12
 800262a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800262e:	edd7 7a03 	vldr	s15, [r7, #12]
 8002632:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	edc3 7a00 	vstr	s15, [r3]
    *c = (-SQRT3_2*sf-.5f*cf)*d - (SQRT3_2*cf-.5f*sf)*q;
 8002640:	edd7 7a06 	vldr	s15, [r7, #24]
 8002644:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80026a0 <abc+0x104>
 8002648:	ee27 7a87 	vmul.f32	s14, s15, s14
 800264c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002650:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8002654:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800265c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002660:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002664:	edd7 7a07 	vldr	s15, [r7, #28]
 8002668:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800269c <abc+0x100>
 800266c:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002670:	edd7 7a06 	vldr	s15, [r7, #24]
 8002674:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002678:	ee67 7a86 	vmul.f32	s15, s15, s12
 800267c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002680:	edd7 7a03 	vldr	s15, [r7, #12]
 8002684:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002688:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	edc3 7a00 	vstr	s15, [r3]
    }
 8002692:	bf00      	nop
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	3f5db3d7 	.word	0x3f5db3d7
 80026a0:	bf5db3d7 	.word	0xbf5db3d7

080026a4 <dq0>:


void dq0(float theta, float a, float b, float c, float *d, float *q){
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b088      	sub	sp, #32
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	ed87 0a05 	vstr	s0, [r7, #20]
 80026ae:	edc7 0a04 	vstr	s1, [r7, #16]
 80026b2:	ed87 1a03 	vstr	s2, [r7, #12]
 80026b6:	edc7 1a02 	vstr	s3, [r7, #8]
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
    /* DQ0 Transform
    Phase current amplitude = lengh of dq vector
    i.e. iq = 1, id = 0, peak phase current of 1*/

    float cf = cos_lut(theta);
 80026be:	ed97 0a05 	vldr	s0, [r7, #20]
 80026c2:	f002 f9eb 	bl	8004a9c <cos_lut>
 80026c6:	ed87 0a07 	vstr	s0, [r7, #28]
    float sf = sin_lut(theta);
 80026ca:	ed97 0a05 	vldr	s0, [r7, #20]
 80026ce:	f002 f9ab 	bl	8004a28 <sin_lut>
 80026d2:	ed87 0a06 	vstr	s0, [r7, #24]

    *d = 0.6666667f*(cf*a + (SQRT3_2*sf-.5f*cf)*b + (-SQRT3_2*sf-.5f*cf)*c);   ///Faster DQ0 Transform
 80026d6:	ed97 7a07 	vldr	s14, [r7, #28]
 80026da:	edd7 7a04 	vldr	s15, [r7, #16]
 80026de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80026e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80026e6:	eddf 6a34 	vldr	s13, [pc, #208]	; 80027b8 <dq0+0x114>
 80026ea:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80026ee:	edd7 7a07 	vldr	s15, [r7, #28]
 80026f2:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80026f6:	ee67 7a86 	vmul.f32	s15, s15, s12
 80026fa:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80026fe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002702:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800270a:	edd7 7a06 	vldr	s15, [r7, #24]
 800270e:	eddf 6a2b 	vldr	s13, [pc, #172]	; 80027bc <dq0+0x118>
 8002712:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002716:	edd7 7a07 	vldr	s15, [r7, #28]
 800271a:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800271e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002722:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002726:	edd7 7a02 	vldr	s15, [r7, #8]
 800272a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800272e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002732:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80027c0 <dq0+0x11c>
 8002736:	ee67 7a87 	vmul.f32	s15, s15, s14
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	edc3 7a00 	vstr	s15, [r3]
    *q = 0.6666667f*(-sf*a - (-SQRT3_2*cf-.5f*sf)*b - (SQRT3_2*cf-.5f*sf)*c);
 8002740:	edd7 7a06 	vldr	s15, [r7, #24]
 8002744:	eeb1 7a67 	vneg.f32	s14, s15
 8002748:	edd7 7a04 	vldr	s15, [r7, #16]
 800274c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002750:	edd7 7a07 	vldr	s15, [r7, #28]
 8002754:	eddf 6a19 	vldr	s13, [pc, #100]	; 80027bc <dq0+0x118>
 8002758:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800275c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002760:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8002764:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002768:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800276c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002770:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002774:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002778:	edd7 7a07 	vldr	s15, [r7, #28]
 800277c:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80027b8 <dq0+0x114>
 8002780:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002784:	edd7 7a06 	vldr	s15, [r7, #24]
 8002788:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800278c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8002790:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002794:	edd7 7a02 	vldr	s15, [r7, #8]
 8002798:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800279c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027a0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 80027c0 <dq0+0x11c>
 80027a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	edc3 7a00 	vstr	s15, [r3]

    }
 80027ae:	bf00      	nop
 80027b0:	3720      	adds	r7, #32
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}
 80027b6:	bf00      	nop
 80027b8:	3f5db3d7 	.word	0x3f5db3d7
 80027bc:	bf5db3d7 	.word	0xbf5db3d7
 80027c0:	3f2aaaab 	.word	0x3f2aaaab

080027c4 <svm>:

void svm(float v_max, float u, float v, float w, float *dtc_u, float *dtc_v, float *dtc_w){
 80027c4:	b580      	push	{r7, lr}
 80027c6:	ed2d 8b02 	vpush	{d8}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	ed87 0a07 	vstr	s0, [r7, #28]
 80027d2:	edc7 0a06 	vstr	s1, [r7, #24]
 80027d6:	ed87 1a05 	vstr	s2, [r7, #20]
 80027da:	edc7 1a04 	vstr	s3, [r7, #16]
 80027de:	60f8      	str	r0, [r7, #12]
 80027e0:	60b9      	str	r1, [r7, #8]
 80027e2:	607a      	str	r2, [r7, #4]
    /* Space Vector Modulation
     u,v,w amplitude = v_bus for full modulation depth */

    float v_offset = (fminf3(u, v, w) + fmaxf3(u, v, w))*0.5f;
 80027e4:	ed97 1a04 	vldr	s2, [r7, #16]
 80027e8:	edd7 0a05 	vldr	s1, [r7, #20]
 80027ec:	ed97 0a06 	vldr	s0, [r7, #24]
 80027f0:	f002 f838 	bl	8004864 <fminf3>
 80027f4:	eeb0 8a40 	vmov.f32	s16, s0
 80027f8:	ed97 1a04 	vldr	s2, [r7, #16]
 80027fc:	edd7 0a05 	vldr	s1, [r7, #20]
 8002800:	ed97 0a06 	vldr	s0, [r7, #24]
 8002804:	f001 fffa 	bl	80047fc <fmaxf3>
 8002808:	eef0 7a40 	vmov.f32	s15, s0
 800280c:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002810:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002814:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002818:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    float v_midpoint = .5f*(DTC_MAX+DTC_MIN);
 800281c:	4b41      	ldr	r3, [pc, #260]	; (8002924 <svm+0x160>)
 800281e:	623b      	str	r3, [r7, #32]

    *dtc_u = fast_fminf(fast_fmaxf((.5f*(u -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002820:	ed97 7a06 	vldr	s14, [r7, #24]
 8002824:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800282c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002830:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002834:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8002928 <svm+0x164>
 8002838:	ee67 6a87 	vmul.f32	s13, s15, s14
 800283c:	edd7 7a07 	vldr	s15, [r7, #28]
 8002840:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002844:	edd7 7a08 	vldr	s15, [r7, #32]
 8002848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800284c:	eddf 0a37 	vldr	s1, [pc, #220]	; 800292c <svm+0x168>
 8002850:	eeb0 0a67 	vmov.f32	s0, s15
 8002854:	f001 ff9a 	bl	800478c <fast_fmaxf>
 8002858:	eef0 7a40 	vmov.f32	s15, s0
 800285c:	eddf 0a34 	vldr	s1, [pc, #208]	; 8002930 <svm+0x16c>
 8002860:	eeb0 0a67 	vmov.f32	s0, s15
 8002864:	f001 ffae 	bl	80047c4 <fast_fminf>
 8002868:	eef0 7a40 	vmov.f32	s15, s0
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	edc3 7a00 	vstr	s15, [r3]
    *dtc_v = fast_fminf(fast_fmaxf((.5f*(v -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 8002872:	ed97 7a05 	vldr	s14, [r7, #20]
 8002876:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800287a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800287e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002882:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002886:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002928 <svm+0x164>
 800288a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800288e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002892:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002896:	edd7 7a08 	vldr	s15, [r7, #32]
 800289a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800289e:	eddf 0a23 	vldr	s1, [pc, #140]	; 800292c <svm+0x168>
 80028a2:	eeb0 0a67 	vmov.f32	s0, s15
 80028a6:	f001 ff71 	bl	800478c <fast_fmaxf>
 80028aa:	eef0 7a40 	vmov.f32	s15, s0
 80028ae:	eddf 0a20 	vldr	s1, [pc, #128]	; 8002930 <svm+0x16c>
 80028b2:	eeb0 0a67 	vmov.f32	s0, s15
 80028b6:	f001 ff85 	bl	80047c4 <fast_fminf>
 80028ba:	eef0 7a40 	vmov.f32	s15, s0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	edc3 7a00 	vstr	s15, [r3]
    *dtc_w = fast_fminf(fast_fmaxf((.5f*(w -v_offset)*OVERMODULATION/v_max + v_midpoint ), DTC_MIN), DTC_MAX);
 80028c4:	ed97 7a04 	vldr	s14, [r7, #16]
 80028c8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80028cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d8:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002928 <svm+0x164>
 80028dc:	ee67 6a87 	vmul.f32	s13, s15, s14
 80028e0:	edd7 7a07 	vldr	s15, [r7, #28]
 80028e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80028ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f0:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800292c <svm+0x168>
 80028f4:	eeb0 0a67 	vmov.f32	s0, s15
 80028f8:	f001 ff48 	bl	800478c <fast_fmaxf>
 80028fc:	eef0 7a40 	vmov.f32	s15, s0
 8002900:	eddf 0a0b 	vldr	s1, [pc, #44]	; 8002930 <svm+0x16c>
 8002904:	eeb0 0a67 	vmov.f32	s0, s15
 8002908:	f001 ff5c 	bl	80047c4 <fast_fminf>
 800290c:	eef0 7a40 	vmov.f32	s15, s0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	edc3 7a00 	vstr	s15, [r3]

    }
 8002916:	bf00      	nop
 8002918:	3728      	adds	r7, #40	; 0x28
 800291a:	46bd      	mov	sp, r7
 800291c:	ecbd 8b02 	vpop	{d8}
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	3ef0a3d7 	.word	0x3ef0a3d7
 8002928:	3f933333 	.word	0x3f933333
 800292c:	00000000 	.word	0x00000000
 8002930:	3f70a3d7 	.word	0x3f70a3d7

08002934 <zero_current>:

void zero_current(ControllerStruct *controller){
 8002934:	b580      	push	{r7, lr}
 8002936:	b088      	sub	sp, #32
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	/* Measure zero-current ADC offset */

    int adc_a_offset = 0;
 800293c:	2300      	movs	r3, #0
 800293e:	61fb      	str	r3, [r7, #28]
    int adc_b_offset = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
    int adc_c_offset = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
    int n = 1000;
 8002948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800294c:	60fb      	str	r3, [r7, #12]
    controller->dtc_u = 0.f;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	659a      	str	r2, [r3, #88]	; 0x58
    controller->dtc_v = 0.f;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f04f 0200 	mov.w	r2, #0
 800295c:	65da      	str	r2, [r3, #92]	; 0x5c
    controller->dtc_w = 0.f;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	f04f 0200 	mov.w	r2, #0
 8002964:	661a      	str	r2, [r3, #96]	; 0x60
    set_dtc(controller);
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f7ff fce2 	bl	8002330 <set_dtc>

    for (int i = 0; i<n; i++){               // Average n samples
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
 8002970:	e014      	b.n	800299c <zero_current+0x68>
    	analog_sample(controller);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff fd80 	bl	8002478 <analog_sample>
    	adc_a_offset += controller->adc_a_raw;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	69fa      	ldr	r2, [r7, #28]
 800297e:	4413      	add	r3, r2
 8002980:	61fb      	str	r3, [r7, #28]
    	adc_b_offset += controller->adc_b_raw;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	689b      	ldr	r3, [r3, #8]
 8002986:	69ba      	ldr	r2, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	61bb      	str	r3, [r7, #24]
    	adc_c_offset += controller->adc_c_raw;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	697a      	ldr	r2, [r7, #20]
 8002992:	4413      	add	r3, r2
 8002994:	617b      	str	r3, [r7, #20]
    for (int i = 0; i<n; i++){               // Average n samples
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	3301      	adds	r3, #1
 800299a:	613b      	str	r3, [r7, #16]
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	dbe6      	blt.n	8002972 <zero_current+0x3e>
     }
    controller->adc_a_offset = adc_a_offset/n;
 80029a4:	69fa      	ldr	r2, [r7, #28]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	fb92 f2f3 	sdiv	r2, r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    controller->adc_b_offset = adc_b_offset/n;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	fb92 f2f3 	sdiv	r2, r2, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    controller->adc_c_offset = adc_c_offset/n;
 80029c0:	697a      	ldr	r2, [r7, #20]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	fb92 f2f3 	sdiv	r2, r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98

    }
 80029ce:	bf00      	nop
 80029d0:	3720      	adds	r7, #32
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
	...

080029d8 <init_controller_params>:

void init_controller_params(ControllerStruct *controller){
 80029d8:	b580      	push	{r7, lr}
 80029da:	b084      	sub	sp, #16
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]

	controller->ki_d = KI_D;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a42      	ldr	r2, [pc, #264]	; (8002aec <init_controller_params+0x114>)
 80029e4:	679a      	str	r2, [r3, #120]	; 0x78
    controller->ki_q = KI_Q;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4a40      	ldr	r2, [pc, #256]	; (8002aec <init_controller_params+0x114>)
 80029ea:	67da      	str	r2, [r3, #124]	; 0x7c
    controller->k_d = K_SCALE*I_BW;
 80029ec:	4b40      	ldr	r3, [pc, #256]	; (8002af0 <init_controller_params+0x118>)
 80029ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80029f2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002af4 <init_controller_params+0x11c>
 80029f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	edc3 7a1c 	vstr	s15, [r3, #112]	; 0x70
    controller->k_q = K_SCALE*I_BW;
 8002a00:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <init_controller_params+0x118>)
 8002a02:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a06:	ed9f 7a3b 	vldr	s14, [pc, #236]	; 8002af4 <init_controller_params+0x11c>
 8002a0a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
    controller->alpha = 1.0f - 1.0f/(1.0f - DT*I_BW*TWO_PI_F);
 8002a14:	4b36      	ldr	r3, [pc, #216]	; (8002af0 <init_controller_params+0x118>)
 8002a16:	edd3 7a02 	vldr	s15, [r3, #8]
 8002a1a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8002af8 <init_controller_params+0x120>
 8002a1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a22:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002afc <init_controller_params+0x124>
 8002a26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a2a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a2e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a32:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a3a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002a3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	edc3 7a21 	vstr	s15, [r3, #132]	; 0x84
    controller->ki_fw = .1f*controller->ki_d;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002a4e:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002b00 <init_controller_params+0x128>
 8002a52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80
    controller->phase_order = PHASE_ORDER;
 8002a5c:	4b29      	ldr	r3, [pc, #164]	; (8002b04 <init_controller_params+0x12c>)
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002a66:	2300      	movs	r3, #0
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	e036      	b.n	8002ada <init_controller_params+0x102>
    {
        controller->inverter_tab[i] = 1.0f + 1.2f*exp(-0.0078125f*i/.032f);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	ee07 3a90 	vmov	s15, r3
 8002a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a76:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002b08 <init_controller_params+0x130>
 8002a7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a7e:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002b0c <init_controller_params+0x134>
 8002a82:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002a86:	ee16 0a90 	vmov	r0, s13
 8002a8a:	f7fd fd85 	bl	8000598 <__aeabi_f2d>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	460b      	mov	r3, r1
 8002a92:	ec43 2b10 	vmov	d0, r2, r3
 8002a96:	f00e fb67 	bl	8011168 <exp>
 8002a9a:	ec51 0b10 	vmov	r0, r1, d0
 8002a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002aa2:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <init_controller_params+0x138>)
 8002aa4:	f7fd fdd0 	bl	8000648 <__aeabi_dmul>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	460b      	mov	r3, r1
 8002aac:	4610      	mov	r0, r2
 8002aae:	4619      	mov	r1, r3
 8002ab0:	f04f 0200 	mov.w	r2, #0
 8002ab4:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <init_controller_params+0x13c>)
 8002ab6:	f7fd fc11 	bl	80002dc <__adddf3>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f7fe f8b9 	bl	8000c38 <__aeabi_d2f>
 8002ac6:	4601      	mov	r1, r0
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	333c      	adds	r3, #60	; 0x3c
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	6019      	str	r1, [r3, #0]
    for(int i = 0; i<128; i++)	// Approximate duty cycle linearization
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b7f      	cmp	r3, #127	; 0x7f
 8002ade:	ddc5      	ble.n	8002a6c <init_controller_params+0x94>
    }
}
 8002ae0:	bf00      	nop
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	3d3851ec 	.word	0x3d3851ec
 8002af0:	20004c50 	.word	0x20004c50
 8002af4:	38d1b717 	.word	0x38d1b717
 8002af8:	388bcf64 	.word	0x388bcf64
 8002afc:	40c90fdb 	.word	0x40c90fdb
 8002b00:	3dcccccd 	.word	0x3dcccccd
 8002b04:	20004d50 	.word	0x20004d50
 8002b08:	bc000000 	.word	0xbc000000
 8002b0c:	3d03126f 	.word	0x3d03126f
 8002b10:	3ff33333 	.word	0x3ff33333
 8002b14:	3ff00000 	.word	0x3ff00000

08002b18 <reset_foc>:

void reset_foc(ControllerStruct *controller){
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b20:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <reset_foc+0xe4>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b26:	ee07 3a90 	vmov	s15, r3
 8002b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b2e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <reset_foc+0xe4>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b3e:	ee17 2a90 	vmov	r2, s15
 8002b42:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b44:	4b2d      	ldr	r3, [pc, #180]	; (8002bfc <reset_foc+0xe4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b56:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <reset_foc+0xe4>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b62:	ee17 2a90 	vmov	r2, s15
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.5f);
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <reset_foc+0xe4>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b76:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	; (8002bfc <reset_foc+0xe4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b86:	ee17 2a90 	vmov	r2, s15
 8002b8a:	639a      	str	r2, [r3, #56]	; 0x38
    controller->i_d_des = 0;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    controller->i_q_des = 0;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f04f 0200 	mov.w	r2, #0
 8002b9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
    controller->i_d = 0;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	63da      	str	r2, [r3, #60]	; 0x3c
    controller->i_q = 0;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f04f 0200 	mov.w	r2, #0
 8002bae:	641a      	str	r2, [r3, #64]	; 0x40
    controller->i_q_filt = 0;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	f04f 0200 	mov.w	r2, #0
 8002bb6:	645a      	str	r2, [r3, #68]	; 0x44
    controller->q_int = 0;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    controller->d_int = 0;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f04f 0200 	mov.w	r2, #0
 8002bc8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    controller->v_q = 0;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f04f 0200 	mov.w	r2, #0
 8002bd2:	655a      	str	r2, [r3, #84]	; 0x54
    controller->v_d = 0;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	651a      	str	r2, [r3, #80]	; 0x50
    controller->fw_int = 0;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f04f 0200 	mov.w	r2, #0
 8002be2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    controller->otw_flag = 0;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2200      	movs	r2, #0
 8002bea:	f8c3 20e8 	str.w	r2, [r3, #232]	; 0xe8

    }
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
 8002bfa:	bf00      	nop
 8002bfc:	20005008 	.word	0x20005008

08002c00 <commutate>:


}

void commutate(ControllerStruct *controller, EncoderStruct *encoder)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	6039      	str	r1, [r7, #0]
	/* Do Field Oriented Control */

		controller->theta_elec = encoder->elec_angle;
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	62da      	str	r2, [r3, #44]	; 0x2c
		controller->dtheta_elec = encoder->elec_velocity;
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	635a      	str	r2, [r3, #52]	; 0x34
		controller->dtheta_mech = encoder->velocity/GR;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	edd3 6a13 	vldr	s13, [r3, #76]	; 0x4c
 8002c20:	4bd7      	ldr	r3, [pc, #860]	; (8002f80 <commutate+0x380>)
 8002c22:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
		controller->theta_mech = encoder->angle_multiturn[0]/GR;
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	edd3 6a03 	vldr	s13, [r3, #12]
 8002c36:	4bd2      	ldr	r3, [pc, #840]	; (8002f80 <commutate+0x380>)
 8002c38:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8002c3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

       /// Commutation  ///
       dq0(controller->theta_elec, controller->i_a, controller->i_b, controller->i_c, &controller->i_d, &controller->i_q);    //dq0 transform on currents - 3.8 us
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	edd3 6a06 	vldr	s13, [r3, #24]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	ed93 6a07 	vldr	s12, [r3, #28]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	f103 023c 	add.w	r2, r3, #60	; 0x3c
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	3340      	adds	r3, #64	; 0x40
 8002c68:	4619      	mov	r1, r3
 8002c6a:	4610      	mov	r0, r2
 8002c6c:	eef0 1a46 	vmov.f32	s3, s12
 8002c70:	eeb0 1a66 	vmov.f32	s2, s13
 8002c74:	eef0 0a47 	vmov.f32	s1, s14
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	f7ff fd12 	bl	80026a4 <dq0>

       controller->i_q_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_q_filt + CURRENT_FILT_ALPHA*controller->i_q;	// these aren't used for control but are sometimes nice for debugging
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8002c86:	ed9f 7abf 	vldr	s14, [pc, #764]	; 8002f84 <commutate+0x384>
 8002c8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002c94:	eddf 6abc 	vldr	s13, [pc, #752]	; 8002f88 <commutate+0x388>
 8002c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
       controller->i_d_filt = (1.0f-CURRENT_FILT_ALPHA)*controller->i_d_filt + CURRENT_FILT_ALPHA*controller->i_d;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002cac:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8002f84 <commutate+0x384>
 8002cb0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002cba:	eddf 6ab3 	vldr	s13, [pc, #716]	; 8002f88 <commutate+0x388>
 8002cbe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
       controller->v_bus_filt = (1.0f-VBUS_FILT_ALPHA)*controller->v_bus_filt + VBUS_FILT_ALPHA*controller->v_bus;	// used for voltage saturation
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cd2:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002f8c <commutate+0x38c>
 8002cd6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	edd3 7a08 	vldr	s15, [r3, #32]
 8002ce0:	eddf 6aab 	vldr	s13, [pc, #684]	; 8002f90 <commutate+0x390>
 8002ce4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

       controller->v_max = OVERMODULATION*controller->v_bus_filt*(DTC_MAX-DTC_MIN)*SQRT1_3;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8002cf8:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002f94 <commutate+0x394>
 8002cfc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d00:	ed9f 7aa5 	vldr	s14, [pc, #660]	; 8002f98 <commutate+0x398>
 8002d04:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d08:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002f9c <commutate+0x39c>
 8002d0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	edc3 7a37 	vstr	s15, [r3, #220]	; 0xdc
       controller->i_max = I_MAX; //I_MAX*(!controller->otw_flag) + I_MAX_CONT*controller->otw_flag;
 8002d16:	4b9a      	ldr	r3, [pc, #616]	; (8002f80 <commutate+0x380>)
 8002d18:	68da      	ldr	r2, [r3, #12]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec

       limit_norm(&controller->i_d_des, &controller->i_q_des, controller->i_max);	// 2.3 us
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f103 01a4 	add.w	r1, r3, #164	; 0xa4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	edd3 7a3b 	vldr	s15, [r3, #236]	; 0xec
 8002d32:	eeb0 0a67 	vmov.f32	s0, s15
 8002d36:	4610      	mov	r0, r2
 8002d38:	f001 fdc8 	bl	80048cc <limit_norm>

       /// PI Controller ///
       float i_d_error = controller->i_d_des - controller->i_d;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	ed93 7a28 	vldr	s14, [r3, #160]	; 0xa0
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d4c:	edc7 7a07 	vstr	s15, [r7, #28]
       float i_q_error = controller->i_q_des - controller->i_q;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	ed93 7a29 	vldr	s14, [r3, #164]	; 0xa4
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d60:	edc7 7a06 	vstr	s15, [r7, #24]


       // Calculate decoupling feed-forward voltages //
       float v_d_ff = 0.0f;//-controller->dtheta_elec*L_Q*controller->i_q;
 8002d64:	f04f 0300 	mov.w	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
       float v_q_ff = 0.0f;//controller->dtheta_elec*L_D*controller->i_d;
 8002d6a:	f04f 0300 	mov.w	r3, #0
 8002d6e:	613b      	str	r3, [r7, #16]

       controller->v_d = controller->k_d*i_d_error + controller->d_int + v_d_ff;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 8002d76:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d7a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002d84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d88:	edd7 7a05 	vldr	s15, [r7, #20]
 8002d8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->v_d = fast_fmaxf(fast_fminf(controller->v_d, controller->v_max), -controller->v_max);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002da2:	eef0 0a47 	vmov.f32	s1, s14
 8002da6:	eeb0 0a67 	vmov.f32	s0, s15
 8002daa:	f001 fd0b 	bl	80047c4 <fast_fminf>
 8002dae:	eeb0 7a40 	vmov.f32	s14, s0
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002db8:	eef1 7a67 	vneg.f32	s15, s15
 8002dbc:	eef0 0a67 	vmov.f32	s1, s15
 8002dc0:	eeb0 0a47 	vmov.f32	s0, s14
 8002dc4:	f001 fce2 	bl	800478c <fast_fmaxf>
 8002dc8:	eef0 7a40 	vmov.f32	s15, s0
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

       controller->d_int += controller->k_d*controller->ki_d*i_d_error;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	ed93 7a22 	vldr	s14, [r3, #136]	; 0x88
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	edd3 6a1c 	vldr	s13, [r3, #112]	; 0x70
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002de4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002de8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002df0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       controller->d_int = fast_fmaxf(fast_fminf(controller->d_int, controller->v_max), -controller->v_max);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	edd3 7a22 	vldr	s15, [r3, #136]	; 0x88
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002e06:	eef0 0a47 	vmov.f32	s1, s14
 8002e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e0e:	f001 fcd9 	bl	80047c4 <fast_fminf>
 8002e12:	eeb0 7a40 	vmov.f32	s14, s0
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002e1c:	eef1 7a67 	vneg.f32	s15, s15
 8002e20:	eef0 0a67 	vmov.f32	s1, s15
 8002e24:	eeb0 0a47 	vmov.f32	s0, s14
 8002e28:	f001 fcb0 	bl	800478c <fast_fmaxf>
 8002e2c:	eef0 7a40 	vmov.f32	s15, s0
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	edc3 7a22 	vstr	s15, [r3, #136]	; 0x88
       float vq_max = sqrtf(controller->v_max*controller->v_max - controller->v_d*controller->v_d);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002e42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	edd3 6a14 	vldr	s13, [r3, #80]	; 0x50
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002e52:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002e56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e5a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e5e:	f00e f9eb 	bl	8011238 <sqrtf>
 8002e62:	ed87 0a03 	vstr	s0, [r7, #12]

       controller->v_q = controller->k_q*i_q_error + controller->q_int + v_q_ff;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 8002e6c:	edd7 7a06 	vldr	s15, [r7, #24]
 8002e70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e7e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002e82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
       controller->q_int += controller->k_q*controller->ki_q*i_q_error;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	ed93 7a23 	vldr	s14, [r3, #140]	; 0x8c
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	edd3 6a1d 	vldr	s13, [r3, #116]	; 0x74
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 8002e9e:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8002ea2:	edd7 7a06 	vldr	s15, [r7, #24]
 8002ea6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002eaa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->q_int = fast_fmaxf(fast_fminf(controller->q_int, controller->v_max), -controller->v_max);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	edd3 7a23 	vldr	s15, [r3, #140]	; 0x8c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	ed93 7a37 	vldr	s14, [r3, #220]	; 0xdc
 8002ec0:	eef0 0a47 	vmov.f32	s1, s14
 8002ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8002ec8:	f001 fc7c 	bl	80047c4 <fast_fminf>
 8002ecc:	eeb0 7a40 	vmov.f32	s14, s0
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002ed6:	eef1 7a67 	vneg.f32	s15, s15
 8002eda:	eef0 0a67 	vmov.f32	s1, s15
 8002ede:	eeb0 0a47 	vmov.f32	s0, s14
 8002ee2:	f001 fc53 	bl	800478c <fast_fmaxf>
 8002ee6:	eef0 7a40 	vmov.f32	s15, s0
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	edc3 7a23 	vstr	s15, [r3, #140]	; 0x8c
       controller->v_ref = sqrtf(controller->v_d*controller->v_d + controller->v_q*controller->v_q);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002efc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002f0c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	f00e f98e 	bl	8011238 <sqrtf>
 8002f1c:	eef0 7a40 	vmov.f32	s15, s0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	edc3 7a38 	vstr	s15, [r3, #224]	; 0xe0
       controller->v_q = fast_fmaxf(fast_fminf(controller->v_q, vq_max), -vq_max);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002f2c:	edd7 0a03 	vldr	s1, [r7, #12]
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	f001 fc46 	bl	80047c4 <fast_fminf>
 8002f38:	eeb0 7a40 	vmov.f32	s14, s0
 8002f3c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f40:	eef1 7a67 	vneg.f32	s15, s15
 8002f44:	eef0 0a67 	vmov.f32	s1, s15
 8002f48:	eeb0 0a47 	vmov.f32	s0, s14
 8002f4c:	f001 fc1e 	bl	800478c <fast_fmaxf>
 8002f50:	eef0 7a40 	vmov.f32	s15, s0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

       limit_norm(&controller->v_d, &controller->v_q, controller->v_max);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002f6c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f70:	4610      	mov	r0, r2
 8002f72:	f001 fcab 	bl	80048cc <limit_norm>

       abc(controller->theta_elec + 1.5f*DT*controller->dtheta_elec, controller->v_d, controller->v_q, &controller->v_u, &controller->v_v, &controller->v_w); //inverse dq0 transform on voltages
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	e011      	b.n	8002fa4 <commutate+0x3a4>
 8002f80:	20004c50 	.word	0x20004c50
 8002f84:	3f7d70a4 	.word	0x3f7d70a4
 8002f88:	3c23d70a 	.word	0x3c23d70a
 8002f8c:	3f666666 	.word	0x3f666666
 8002f90:	3dcccccd 	.word	0x3dcccccd
 8002f94:	3f933333 	.word	0x3f933333
 8002f98:	3f70a3d7 	.word	0x3f70a3d7
 8002f9c:	3f13cd3a 	.word	0x3f13cd3a
 8002fa0:	38d1b716 	.word	0x38d1b716
 8002fa4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8002fa8:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8002fa0 <commutate+0x3a0>
 8002fac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	ed93 7a14 	vldr	s14, [r3, #80]	; 0x50
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	edd3 6a15 	vldr	s13, [r3, #84]	; 0x54
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	f103 0064 	add.w	r0, r3, #100	; 0x64
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f103 0168 	add.w	r1, r3, #104	; 0x68
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	336c      	adds	r3, #108	; 0x6c
 8002fd0:	461a      	mov	r2, r3
 8002fd2:	eeb0 1a66 	vmov.f32	s2, s13
 8002fd6:	eef0 0a47 	vmov.f32	s1, s14
 8002fda:	eeb0 0a67 	vmov.f32	s0, s15
 8002fde:	f7ff fadd 	bl	800259c <abc>
       svm(controller->v_max, controller->v_u, controller->v_v, controller->v_w, &controller->dtc_u, &controller->dtc_v, &controller->dtc_w); //space vector modulation
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	edd3 7a37 	vldr	s15, [r3, #220]	; 0xdc
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	ed93 7a19 	vldr	s14, [r3, #100]	; 0x64
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	edd3 6a1a 	vldr	s13, [r3, #104]	; 0x68
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	ed93 6a1b 	vldr	s12, [r3, #108]	; 0x6c
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	f103 0058 	add.w	r0, r3, #88	; 0x58
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f103 015c 	add.w	r1, r3, #92	; 0x5c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3360      	adds	r3, #96	; 0x60
 800300a:	461a      	mov	r2, r3
 800300c:	eef0 1a46 	vmov.f32	s3, s12
 8003010:	eeb0 1a66 	vmov.f32	s2, s13
 8003014:	eef0 0a47 	vmov.f32	s1, s14
 8003018:	eeb0 0a67 	vmov.f32	s0, s15
 800301c:	f7ff fbd2 	bl	80027c4 <svm>
       set_dtc(controller);
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f7ff f985 	bl	8002330 <set_dtc>

    }
 8003026:	bf00      	nop
 8003028:	3720      	adds	r7, #32
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop

08003030 <torque_control>:
void torque_control(ControllerStruct *controller){
 8003030:	b480      	push	{r7}
 8003032:	b085      	sub	sp, #20
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]

    float torque_des = controller->kp*(controller->p_des - controller->theta_mech) + controller->t_ff + controller->kd*(controller->v_des - controller->dtheta_mech);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	ed93 7a34 	vldr	s14, [r3, #208]	; 0xd0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	edd3 6a32 	vldr	s13, [r3, #200]	; 0xc8
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800304a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800304e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	edd3 7a36 	vldr	s15, [r3, #216]	; 0xd8
 8003058:	ee37 7a27 	vadd.f32	s14, s14, s15
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	edd3 6a35 	vldr	s13, [r3, #212]	; 0xd4
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	ed93 6a33 	vldr	s12, [r3, #204]	; 0xcc
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800306e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003072:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800307a:	edc7 7a03 	vstr	s15, [r7, #12]
    controller->i_q_des = torque_des/(KT*GR);
 800307e:	4b0d      	ldr	r3, [pc, #52]	; (80030b4 <torque_control+0x84>)
 8003080:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8003084:	4b0b      	ldr	r3, [pc, #44]	; (80030b4 <torque_control+0x84>)
 8003086:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 800308a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800308e:	edd7 6a03 	vldr	s13, [r7, #12]
 8003092:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	edc3 7a29 	vstr	s15, [r3, #164]	; 0xa4
    controller->i_d_des = 0.0f;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f04f 0200 	mov.w	r2, #0
 80030a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

}
 80030a6:	bf00      	nop
 80030a8:	3714      	adds	r7, #20
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20004c50 	.word	0x20004c50

080030b8 <zero_commands>:



void zero_commands(ControllerStruct * controller){
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
	controller->t_ff = 0;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	f04f 0200 	mov.w	r2, #0
 80030c6:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	controller->kp = 0;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f04f 0200 	mov.w	r2, #0
 80030d0:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
	controller->kd = 0;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f04f 0200 	mov.w	r2, #0
 80030da:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	controller->p_des = 0;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f04f 0200 	mov.w	r2, #0
 80030e4:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	controller->v_des = 0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f04f 0200 	mov.w	r2, #0
 80030ee:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
	controller->i_q_des = 0;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <run_fsm>:
#include "foc.h"
#include "math_ops.h"
#include "position_sensor.h"
#include "gatedrive.h"

 void run_fsm(FSMStruct * fsmstate){
 8003108:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310a:	b085      	sub	sp, #20
 800310c:	af02      	add	r7, sp, #8
 800310e:	6078      	str	r0, [r7, #4]
	 /* run_fsm is run every commutation interrupt cycle */
	 /* state transition management */
	 if(fsmstate->next_state != fsmstate->state){
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	785a      	ldrb	r2, [r3, #1]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d00d      	beq.n	8003138 <run_fsm+0x30>
//		 printf("trans %i %i \r\n",fsmstate->state, fsmstate->next_state);
		 fsm_exit_state(fsmstate);		// safely exit the old state
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f927 	bl	8003370 <fsm_exit_state>
		 if(fsmstate->ready){			// if the previous state is ready, enter the new state
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	78db      	ldrb	r3, [r3, #3]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d006      	beq.n	8003138 <run_fsm+0x30>
			 fsmstate->state = fsmstate->next_state;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	785a      	ldrb	r2, [r3, #1]
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	701a      	strb	r2, [r3, #0]
			 fsm_enter_state(fsmstate);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f8c2 	bl	80032bc <fsm_enter_state>
		 }

	 }

	 switch(fsmstate->state){
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b06      	cmp	r3, #6
 800313e:	f200 80a9 	bhi.w	8003294 <run_fsm+0x18c>
 8003142:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <run_fsm+0x40>)
 8003144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003148:	08003293 	.word	0x08003293
 800314c:	08003165 	.word	0x08003165
 8003150:	0800324d 	.word	0x0800324d
 8003154:	08003295 	.word	0x08003295
 8003158:	08003293 	.word	0x08003293
 800315c:	08003289 	.word	0x08003289
 8003160:	08003293 	.word	0x08003293
		 case MENU_MODE:
			 break;

		 case CALIBRATION_MODE:
			 if(!comm_encoder_cal.done_ordering){
 8003164:	4b4d      	ldr	r3, [pc, #308]	; (800329c <run_fsm+0x194>)
 8003166:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800316a:	2b00      	cmp	r3, #0
 800316c:	d108      	bne.n	8003180 <run_fsm+0x78>
				 order_phases(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800316e:	4b4c      	ldr	r3, [pc, #304]	; (80032a0 <run_fsm+0x198>)
 8003170:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003174:	4a49      	ldr	r2, [pc, #292]	; (800329c <run_fsm+0x194>)
 8003176:	494a      	ldr	r1, [pc, #296]	; (80032a0 <run_fsm+0x198>)
 8003178:	484a      	ldr	r0, [pc, #296]	; (80032a4 <run_fsm+0x19c>)
 800317a:	f7fe f951 	bl	8001420 <order_phases>
//				HAL_Delay(10);
//				zero_current(&controller);
//				HAL_Delay(100);
			 }

			 break;
 800317e:	e089      	b.n	8003294 <run_fsm+0x18c>
			 else if(!comm_encoder_cal.done_cal){
 8003180:	4b46      	ldr	r3, [pc, #280]	; (800329c <run_fsm+0x194>)
 8003182:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003186:	2b00      	cmp	r3, #0
 8003188:	d108      	bne.n	800319c <run_fsm+0x94>
				 calibrate_encoder(&comm_encoder, &controller, &comm_encoder_cal, controller.loop_count);
 800318a:	4b45      	ldr	r3, [pc, #276]	; (80032a0 <run_fsm+0x198>)
 800318c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003190:	4a42      	ldr	r2, [pc, #264]	; (800329c <run_fsm+0x194>)
 8003192:	4943      	ldr	r1, [pc, #268]	; (80032a0 <run_fsm+0x198>)
 8003194:	4843      	ldr	r0, [pc, #268]	; (80032a4 <run_fsm+0x19c>)
 8003196:	f7fe fa5b 	bl	8001650 <calibrate_encoder>
			 break;
 800319a:	e07b      	b.n	8003294 <run_fsm+0x18c>
				 E_ZERO = comm_encoder_cal.ezero;
 800319c:	4b3f      	ldr	r3, [pc, #252]	; (800329c <run_fsm+0x194>)
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	4a41      	ldr	r2, [pc, #260]	; (80032a8 <run_fsm+0x1a0>)
 80031a2:	6113      	str	r3, [r2, #16]
				 printf("E_ZERO: %d  PP: %.3f %f\r\n", E_ZERO, PPAIRS, TWO_PI_F*fmodf((PPAIRS*(float)(-E_ZERO))/((float)ENC_CPR), 1.0f));
 80031a4:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <run_fsm+0x1a0>)
 80031a6:	691e      	ldr	r6, [r3, #16]
 80031a8:	4b40      	ldr	r3, [pc, #256]	; (80032ac <run_fsm+0x1a4>)
 80031aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7fd f9f3 	bl	8000598 <__aeabi_f2d>
 80031b2:	4604      	mov	r4, r0
 80031b4:	460d      	mov	r5, r1
 80031b6:	4b3d      	ldr	r3, [pc, #244]	; (80032ac <run_fsm+0x1a4>)
 80031b8:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 80031bc:	4b3a      	ldr	r3, [pc, #232]	; (80032a8 <run_fsm+0x1a0>)
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	425b      	negs	r3, r3
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ce:	eddf 6a38 	vldr	s13, [pc, #224]	; 80032b0 <run_fsm+0x1a8>
 80031d2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031d6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80031da:	eeb0 0a47 	vmov.f32	s0, s14
 80031de:	f00e f80b 	bl	80111f8 <fmodf>
 80031e2:	eef0 7a40 	vmov.f32	s15, s0
 80031e6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80032b4 <run_fsm+0x1ac>
 80031ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031ee:	ee17 0a90 	vmov	r0, s15
 80031f2:	f7fd f9d1 	bl	8000598 <__aeabi_f2d>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	e9cd 2300 	strd	r2, r3, [sp]
 80031fe:	4622      	mov	r2, r4
 8003200:	462b      	mov	r3, r5
 8003202:	4631      	mov	r1, r6
 8003204:	482c      	ldr	r0, [pc, #176]	; (80032b8 <run_fsm+0x1b0>)
 8003206:	f00a fa67 	bl	800d6d8 <iprintf>
				 memcpy(&comm_encoder.offset_lut, comm_encoder_cal.lut_arr, sizeof(comm_encoder.offset_lut));
 800320a:	4b26      	ldr	r3, [pc, #152]	; (80032a4 <run_fsm+0x19c>)
 800320c:	4a23      	ldr	r2, [pc, #140]	; (800329c <run_fsm+0x194>)
 800320e:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 8003212:	33b0      	adds	r3, #176	; 0xb0
 8003214:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003218:	f44f 7280 	mov.w	r2, #256	; 0x100
 800321c:	4618      	mov	r0, r3
 800321e:	f009 fdc1 	bl	800cda4 <memcpy>
				 memcpy(&ENCODER_LUT, comm_encoder_cal.lut_arr, sizeof(comm_encoder_cal.lut_arr));
 8003222:	4b21      	ldr	r3, [pc, #132]	; (80032a8 <run_fsm+0x1a0>)
 8003224:	4a1d      	ldr	r2, [pc, #116]	; (800329c <run_fsm+0x194>)
 8003226:	f502 4280 	add.w	r2, r2, #16384	; 0x4000
 800322a:	3318      	adds	r3, #24
 800322c:	f102 012c 	add.w	r1, r2, #44	; 0x2c
 8003230:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003234:	4618      	mov	r0, r3
 8003236:	f009 fdb5 	bl	800cda4 <memcpy>
				 store_eeprom_regs();
 800323a:	f002 fbf1 	bl	8005a20 <store_eeprom_regs>
				 load_eeprom_regs();
 800323e:	f002 fbfd 	bl	8005a3c <load_eeprom_regs>
				 update_fsm(fsmstate, 27);
 8003242:	211b      	movs	r1, #27
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 f8d9 	bl	80033fc <update_fsm>
			 break;
 800324a:	e023      	b.n	8003294 <run_fsm+0x18c>

		 case MOTOR_MODE:
			 /* If CAN has timed out, reset all commands */
			 if((CAN_TIMEOUT > 0 ) && (controller.timeout > CAN_TIMEOUT)){
 800324c:	4b16      	ldr	r3, [pc, #88]	; (80032a8 <run_fsm+0x1a0>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	dd0a      	ble.n	800326a <run_fsm+0x162>
 8003254:	4b12      	ldr	r3, [pc, #72]	; (80032a0 <run_fsm+0x198>)
 8003256:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800325a:	4b13      	ldr	r3, [pc, #76]	; (80032a8 <run_fsm+0x1a0>)
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	429a      	cmp	r2, r3
 8003260:	dd03      	ble.n	800326a <run_fsm+0x162>
				 zero_commands(&controller);
 8003262:	480f      	ldr	r0, [pc, #60]	; (80032a0 <run_fsm+0x198>)
 8003264:	f7ff ff28 	bl	80030b8 <zero_commands>
 8003268:	e002      	b.n	8003270 <run_fsm+0x168>
			 }
			 /* Otherwise, commutate */
			 else{
				 torque_control(&controller);
 800326a:	480d      	ldr	r0, [pc, #52]	; (80032a0 <run_fsm+0x198>)
 800326c:	f7ff fee0 	bl	8003030 <torque_control>
//				 field_weaken(&controller);
			 }
			 commutate(&controller, &comm_encoder);
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <run_fsm+0x19c>)
 8003272:	480b      	ldr	r0, [pc, #44]	; (80032a0 <run_fsm+0x198>)
 8003274:	f7ff fcc4 	bl	8002c00 <commutate>
			 controller.timeout ++;
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <run_fsm+0x198>)
 800327a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800327e:	3301      	adds	r3, #1
 8003280:	4a07      	ldr	r2, [pc, #28]	; (80032a0 <run_fsm+0x198>)
 8003282:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
			 break;
 8003286:	e005      	b.n	8003294 <run_fsm+0x18c>

		 case SETUP_MODE:
			 break;

		 case ENCODER_MODE:
			 ps_print(&comm_encoder, 100);
 8003288:	2164      	movs	r1, #100	; 0x64
 800328a:	4806      	ldr	r0, [pc, #24]	; (80032a4 <run_fsm+0x19c>)
 800328c:	f001 fea0 	bl	8004fd0 <ps_print>
			 break;
 8003290:	e000      	b.n	8003294 <run_fsm+0x18c>
			 break;
 8003292:	bf00      	nop

		 case INIT_TEMP_MODE:
			 break;
	 }

 }
 8003294:	bf00      	nop
 8003296:	370c      	adds	r7, #12
 8003298:	46bd      	mov	sp, r7
 800329a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800329c:	200008ec 	.word	0x200008ec
 80032a0:	2000041c 	.word	0x2000041c
 80032a4:	20000734 	.word	0x20000734
 80032a8:	20004d50 	.word	0x20004d50
 80032ac:	20004c50 	.word	0x20004c50
 80032b0:	46800000 	.word	0x46800000
 80032b4:	40c90fdb 	.word	0x40c90fdb
 80032b8:	080117e0 	.word	0x080117e0

080032bc <fsm_enter_state>:

 void fsm_enter_state(FSMStruct * fsmstate){
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
	 /* Called when entering a new state
	  * Do necessary setup   */

		switch(fsmstate->state){
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b05      	cmp	r3, #5
 80032ca:	d841      	bhi.n	8003350 <fsm_enter_state+0x94>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <fsm_enter_state+0x18>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032ed 	.word	0x080032ed
 80032d8:	08003311 	.word	0x08003311
 80032dc:	080032f9 	.word	0x080032f9
 80032e0:	08003351 	.word	0x08003351
 80032e4:	080032f3 	.word	0x080032f3
 80032e8:	0800334f 	.word	0x0800334f
				case MENU_MODE:
//				printf("Entering Main Menu\r\n");
				enter_menu_state();
 80032ec:	f000 f94c 	bl	8003588 <enter_menu_state>
				break;
 80032f0:	e02e      	b.n	8003350 <fsm_enter_state+0x94>
			case SETUP_MODE:
//				printf("Entering Setup\r\n");
				enter_setup_state();
 80032f2:	f000 f975 	bl	80035e0 <enter_setup_state>
				break;
 80032f6:	e02b      	b.n	8003350 <fsm_enter_state+0x94>
			case ENCODER_MODE:
//				printf("Entering Encoder Mode\r\n");
				break;
			case MOTOR_MODE:
//				printf("Entering Motor Mode\r\n");
				HAL_GPIO_WritePin(LED, GPIO_PIN_SET );
 80032f8:	2201      	movs	r2, #1
 80032fa:	2140      	movs	r1, #64	; 0x40
 80032fc:	4816      	ldr	r0, [pc, #88]	; (8003358 <fsm_enter_state+0x9c>)
 80032fe:	f005 fadd 	bl	80088bc <HAL_GPIO_WritePin>
				reset_foc(&controller);
 8003302:	4816      	ldr	r0, [pc, #88]	; (800335c <fsm_enter_state+0xa0>)
 8003304:	f7ff fc08 	bl	8002b18 <reset_foc>
//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003308:	4814      	ldr	r0, [pc, #80]	; (800335c <fsm_enter_state+0xa0>)
 800330a:	f000 fd9d 	bl	8003e48 <enable_gd>

				break;
 800330e:	e01f      	b.n	8003350 <fsm_enter_state+0x94>
			case CALIBRATION_MODE:
//				printf("Entering Calibration Mode\r\n");
				/* zero out all calibrations before starting */

				comm_encoder_cal.done_cal = 0;
 8003310:	4b13      	ldr	r3, [pc, #76]	; (8003360 <fsm_enter_state+0xa4>)
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
				comm_encoder_cal.done_ordering = 0;
 8003318:	4b11      	ldr	r3, [pc, #68]	; (8003360 <fsm_enter_state+0xa4>)
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
				comm_encoder_cal.started = 0;
 8003320:	4b0f      	ldr	r3, [pc, #60]	; (8003360 <fsm_enter_state+0xa4>)
 8003322:	2200      	movs	r2, #0
 8003324:	741a      	strb	r2, [r3, #16]
				comm_encoder.e_zero = 0;
 8003326:	4b0f      	ldr	r3, [pc, #60]	; (8003364 <fsm_enter_state+0xa8>)
 8003328:	2200      	movs	r2, #0
 800332a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
				memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));
 800332e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003332:	2100      	movs	r1, #0
 8003334:	480c      	ldr	r0, [pc, #48]	; (8003368 <fsm_enter_state+0xac>)
 8003336:	f009 fd5d 	bl	800cdf4 <memset>
				PHASE_ORDER = 0;
 800333a:	4b0c      	ldr	r3, [pc, #48]	; (800336c <fsm_enter_state+0xb0>)
 800333c:	2200      	movs	r2, #0
 800333e:	601a      	str	r2, [r3, #0]
//			   disable_gd(&controller);
//			   HAL_Delay(10);
			   zero_current(&controller);
 8003340:	4806      	ldr	r0, [pc, #24]	; (800335c <fsm_enter_state+0xa0>)
 8003342:	f7ff faf7 	bl	8002934 <zero_current>
//			   HAL_Delay(100);

//				drv_enable_gd(drv);
				enable_gd(&controller);
 8003346:	4805      	ldr	r0, [pc, #20]	; (800335c <fsm_enter_state+0xa0>)
 8003348:	f000 fd7e 	bl	8003e48 <enable_gd>
				break;
 800334c:	e000      	b.n	8003350 <fsm_enter_state+0x94>
				break;
 800334e:	bf00      	nop

		}
 }
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	48000800 	.word	0x48000800
 800335c:	2000041c 	.word	0x2000041c
 8003360:	200008ec 	.word	0x200008ec
 8003364:	20000734 	.word	0x20000734
 8003368:	200007e4 	.word	0x200007e4
 800336c:	20004d50 	.word	0x20004d50

08003370 <fsm_exit_state>:

 void fsm_exit_state(FSMStruct * fsmstate){
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
	 /* Called when exiting the current state
	  * Do necessary cleanup  */

		switch(fsmstate->state){
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d834      	bhi.n	80033ea <fsm_exit_state+0x7a>
 8003380:	a201      	add	r2, pc, #4	; (adr r2, 8003388 <fsm_exit_state+0x18>)
 8003382:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003386:	bf00      	nop
 8003388:	080033a1 	.word	0x080033a1
 800338c:	080033dd 	.word	0x080033dd
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033eb 	.word	0x080033eb
 8003398:	080033a9 	.word	0x080033a9
 800339c:	080033b1 	.word	0x080033b1
			case MENU_MODE:
//				printf("Leaving Main Menu\r\n");
				fsmstate->ready = 1;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	70da      	strb	r2, [r3, #3]
				break;
 80033a6:	e020      	b.n	80033ea <fsm_exit_state+0x7a>
			case SETUP_MODE:
//				printf("Leaving Setup Menu\r\n");
				fsmstate->ready = 1;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	70da      	strb	r2, [r3, #3]
				break;
 80033ae:	e01c      	b.n	80033ea <fsm_exit_state+0x7a>
			case ENCODER_MODE:
//				printf("Leaving Encoder Mode\r\n");
				fsmstate->ready = 1;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	70da      	strb	r2, [r3, #3]
				break;
 80033b6:	e018      	b.n	80033ea <fsm_exit_state+0x7a>
			case MOTOR_MODE:
				/* Don't stop commutating if there are high currents or FW happening */
//				if( (fabs(controller.i_q_filt)<1.0f) && (fabs(controller.i_d_filt)<1.0f) ){
					fsmstate->ready = 1;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	70da      	strb	r2, [r3, #3]
//					drv_disable_gd(drv);
					reset_foc(&controller);
 80033be:	480d      	ldr	r0, [pc, #52]	; (80033f4 <fsm_exit_state+0x84>)
 80033c0:	f7ff fbaa 	bl	8002b18 <reset_foc>
					disable_gd(&controller);
 80033c4:	480b      	ldr	r0, [pc, #44]	; (80033f4 <fsm_exit_state+0x84>)
 80033c6:	f000 fd65 	bl	8003e94 <disable_gd>
					HAL_GPIO_WritePin(LED, GPIO_PIN_RESET );
 80033ca:	2200      	movs	r2, #0
 80033cc:	2140      	movs	r1, #64	; 0x40
 80033ce:	480a      	ldr	r0, [pc, #40]	; (80033f8 <fsm_exit_state+0x88>)
 80033d0:	f005 fa74 	bl	80088bc <HAL_GPIO_WritePin>
//				}
				zero_commands(&controller);		// Set commands to zero
 80033d4:	4807      	ldr	r0, [pc, #28]	; (80033f4 <fsm_exit_state+0x84>)
 80033d6:	f7ff fe6f 	bl	80030b8 <zero_commands>
//				printf("Exiting Motor Mode\r\n");

				break;
 80033da:	e006      	b.n	80033ea <fsm_exit_state+0x7a>
			case CALIBRATION_MODE:
//				printf("Exiting Calibration Mode\r\n");
//				drv_disable_gd(drv);
				disable_gd(&controller);
 80033dc:	4805      	ldr	r0, [pc, #20]	; (80033f4 <fsm_exit_state+0x84>)
 80033de:	f000 fd59 	bl	8003e94 <disable_gd>
				//free(error_array);
				//free(lut_array);
				fsmstate->ready = 1;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2201      	movs	r2, #1
 80033e6:	70da      	strb	r2, [r3, #3]
				break;
 80033e8:	bf00      	nop
		}

 }
 80033ea:	bf00      	nop
 80033ec:	3708      	adds	r7, #8
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000041c 	.word	0x2000041c
 80033f8:	48000800 	.word	0x48000800

080033fc <update_fsm>:

 void update_fsm(FSMStruct * fsmstate, char fsm_input){
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b082      	sub	sp, #8
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	70fb      	strb	r3, [r7, #3]
	 /*update_fsm is only run when new state-change information is received
	  * on serial terminal input or CAN input
	  */
//	 printf("%i %i %i\r\n",fsmstate->state, fsm_input, fsmstate->next_state);
	if(fsm_input == MENU_CMD){	// escape to exit do rest mode
 8003408:	78fb      	ldrb	r3, [r7, #3]
 800340a:	2b1b      	cmp	r3, #27
 800340c:	d106      	bne.n	800341c <update_fsm+0x20>
		fsmstate->next_state = MENU_MODE;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	705a      	strb	r2, [r3, #1]
		fsmstate->ready = 0;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	70da      	strb	r2, [r3, #3]
		return;
 800341a:	e0a9      	b.n	8003570 <update_fsm+0x174>
	}
	switch(fsmstate->state){
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b05      	cmp	r3, #5
 8003422:	f200 80a5 	bhi.w	8003570 <update_fsm+0x174>
 8003426:	a201      	add	r2, pc, #4	; (adr r2, 800342c <update_fsm+0x30>)
 8003428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800342c:	08003445 	.word	0x08003445
 8003430:	08003571 	.word	0x08003571
 8003434:	08003571 	.word	0x08003571
 8003438:	08003571 	.word	0x08003571
 800343c:	08003535 	.word	0x08003535
 8003440:	08003571 	.word	0x08003571
		case MENU_MODE:
			switch (fsm_input){
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	3b63      	subs	r3, #99	; 0x63
 8003448:	2b17      	cmp	r3, #23
 800344a:	f200 8090 	bhi.w	800356e <update_fsm+0x172>
 800344e:	a201      	add	r2, pc, #4	; (adr r2, 8003454 <update_fsm+0x58>)
 8003450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003454:	080034b5 	.word	0x080034b5
 8003458:	0800356f 	.word	0x0800356f
 800345c:	080034d1 	.word	0x080034d1
 8003460:	0800356f 	.word	0x0800356f
 8003464:	0800356f 	.word	0x0800356f
 8003468:	0800356f 	.word	0x0800356f
 800346c:	0800356f 	.word	0x0800356f
 8003470:	0800356f 	.word	0x0800356f
 8003474:	0800356f 	.word	0x0800356f
 8003478:	0800356f 	.word	0x0800356f
 800347c:	080034c3 	.word	0x080034c3
 8003480:	0800356f 	.word	0x0800356f
 8003484:	0800356f 	.word	0x0800356f
 8003488:	0800356f 	.word	0x0800356f
 800348c:	0800356f 	.word	0x0800356f
 8003490:	0800356f 	.word	0x0800356f
 8003494:	080034df 	.word	0x080034df
 8003498:	0800356f 	.word	0x0800356f
 800349c:	0800356f 	.word	0x0800356f
 80034a0:	0800356f 	.word	0x0800356f
 80034a4:	0800356f 	.word	0x0800356f
 80034a8:	0800356f 	.word	0x0800356f
 80034ac:	0800356f 	.word	0x0800356f
 80034b0:	080034ed 	.word	0x080034ed
				case CAL_CMD:
					fsmstate->next_state = CALIBRATION_MODE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	70da      	strb	r2, [r3, #3]
					break;
 80034c0:	e037      	b.n	8003532 <update_fsm+0x136>
				case MOTOR_CMD:
					fsmstate->next_state = MOTOR_MODE;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2202      	movs	r2, #2
 80034c6:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	70da      	strb	r2, [r3, #3]
					break;
 80034ce:	e030      	b.n	8003532 <update_fsm+0x136>
				case ENCODER_CMD:
					fsmstate->next_state = ENCODER_MODE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2205      	movs	r2, #5
 80034d4:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2200      	movs	r2, #0
 80034da:	70da      	strb	r2, [r3, #3]
					break;
 80034dc:	e029      	b.n	8003532 <update_fsm+0x136>
				case SETUP_CMD:
					fsmstate->next_state = SETUP_MODE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	705a      	strb	r2, [r3, #1]
					fsmstate->ready = 0;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	70da      	strb	r2, [r3, #3]
					break;
 80034ea:	e022      	b.n	8003532 <update_fsm+0x136>
				case ZERO_CMD:
					comm_encoder.mech_zero = 0.0f;
 80034ec:	4b22      	ldr	r3, [pc, #136]	; (8003578 <update_fsm+0x17c>)
 80034ee:	f04f 0200 	mov.w	r2, #0
 80034f2:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
					ps_sample(&comm_encoder, DT);
 80034f6:	ed9f 0a21 	vldr	s0, [pc, #132]	; 800357c <update_fsm+0x180>
 80034fa:	481f      	ldr	r0, [pc, #124]	; (8003578 <update_fsm+0x17c>)
 80034fc:	f001 fbf2 	bl	8004ce4 <ps_sample>
					MECH_ZERO = comm_encoder.angle_multiturn[0];
 8003500:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <update_fsm+0x17c>)
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	4a1e      	ldr	r2, [pc, #120]	; (8003580 <update_fsm+0x184>)
 8003506:	65d3      	str	r3, [r2, #92]	; 0x5c
					comm_encoder.mech_zero = MECH_ZERO;
 8003508:	4b1d      	ldr	r3, [pc, #116]	; (8003580 <update_fsm+0x184>)
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <update_fsm+0x17c>)
 800350e:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
					store_eeprom_regs();
 8003512:	f002 fa85 	bl	8005a20 <store_eeprom_regs>
					load_eeprom_regs();
 8003516:	f002 fa91 	bl	8005a3c <load_eeprom_regs>
					printf("\n\r  Saved new zero position:  %.3f\n\r\n\r", comm_encoder.mech_zero);
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <update_fsm+0x17c>)
 800351c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8003520:	4618      	mov	r0, r3
 8003522:	f7fd f839 	bl	8000598 <__aeabi_f2d>
 8003526:	4602      	mov	r2, r0
 8003528:	460b      	mov	r3, r1
 800352a:	4816      	ldr	r0, [pc, #88]	; (8003584 <update_fsm+0x188>)
 800352c:	f00a f8d4 	bl	800d6d8 <iprintf>
					break;
 8003530:	bf00      	nop
				}
			break;
 8003532:	e01c      	b.n	800356e <update_fsm+0x172>
		case SETUP_MODE:
			if(fsm_input == ENTER_CMD){
 8003534:	78fb      	ldrb	r3, [r7, #3]
 8003536:	2b0d      	cmp	r3, #13
 8003538:	d103      	bne.n	8003542 <update_fsm+0x146>
				process_user_input(fsmstate);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f9c4 	bl	80038c8 <process_user_input>
				break;
 8003540:	e016      	b.n	8003570 <update_fsm+0x174>
			}
			if(fsmstate->bytecount == 0){fsmstate->cmd_id = fsm_input;}
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	7b1b      	ldrb	r3, [r3, #12]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d103      	bne.n	8003552 <update_fsm+0x156>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	735a      	strb	r2, [r3, #13]
 8003550:	e006      	b.n	8003560 <update_fsm+0x164>
			else{
				fsmstate->cmd_buff[fsmstate->bytecount-1] = fsm_input;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	7b1b      	ldrb	r3, [r3, #12]
 8003556:	3b01      	subs	r3, #1
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	711a      	strb	r2, [r3, #4]
				//fsmstate->bytecount = fsmstate->bytecount%(sizeof(fsmstate->cmd_buff)/sizeof(fsmstate->cmd_buff[0])); // reset when buffer is full
			}
			fsmstate->bytecount++;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	7b1b      	ldrb	r3, [r3, #12]
 8003564:	3301      	adds	r3, #1
 8003566:	b2da      	uxtb	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	731a      	strb	r2, [r3, #12]
			/* If enter is typed, process user input */

			break;
 800356c:	e000      	b.n	8003570 <update_fsm+0x174>
			break;
 800356e:	bf00      	nop
			break;
		case MOTOR_MODE:
			break;
	}
	//printf("FSM State: %d  %d\r\n", fsmstate.state, fsmstate.state_change);
 }
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20000734 	.word	0x20000734
 800357c:	388bcf64 	.word	0x388bcf64
 8003580:	20004c50 	.word	0x20004c50
 8003584:	080117fc 	.word	0x080117fc

08003588 <enter_menu_state>:


 void enter_menu_state(void){
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
	    //drv.disable_gd();
	    //reset_foc(&controller);
	    //gpio.enable->write(0);
	    printf("\n\r\n\r");
 800358c:	480c      	ldr	r0, [pc, #48]	; (80035c0 <enter_menu_state+0x38>)
 800358e:	f00a f8a3 	bl	800d6d8 <iprintf>
	    printf(" Commands:\n\r");
 8003592:	480c      	ldr	r0, [pc, #48]	; (80035c4 <enter_menu_state+0x3c>)
 8003594:	f00a f8a0 	bl	800d6d8 <iprintf>
	    printf(" m - Motor Mode\n\r");
 8003598:	480b      	ldr	r0, [pc, #44]	; (80035c8 <enter_menu_state+0x40>)
 800359a:	f00a f89d 	bl	800d6d8 <iprintf>
	    printf(" c - Calibrate Encoder\n\r");
 800359e:	480b      	ldr	r0, [pc, #44]	; (80035cc <enter_menu_state+0x44>)
 80035a0:	f00a f89a 	bl	800d6d8 <iprintf>
	    printf(" s - Setup\n\r");
 80035a4:	480a      	ldr	r0, [pc, #40]	; (80035d0 <enter_menu_state+0x48>)
 80035a6:	f00a f897 	bl	800d6d8 <iprintf>
	    printf(" e - Display Encoder\n\r");
 80035aa:	480a      	ldr	r0, [pc, #40]	; (80035d4 <enter_menu_state+0x4c>)
 80035ac:	f00a f894 	bl	800d6d8 <iprintf>
	    printf(" z - Set Zero Position\n\r");
 80035b0:	4809      	ldr	r0, [pc, #36]	; (80035d8 <enter_menu_state+0x50>)
 80035b2:	f00a f891 	bl	800d6d8 <iprintf>
	    printf(" esc - Exit to Menu\n\r");
 80035b6:	4809      	ldr	r0, [pc, #36]	; (80035dc <enter_menu_state+0x54>)
 80035b8:	f00a f88e 	bl	800d6d8 <iprintf>

	    //gpio.led->write(0);
 }
 80035bc:	bf00      	nop
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	08011824 	.word	0x08011824
 80035c4:	0801182c 	.word	0x0801182c
 80035c8:	0801183c 	.word	0x0801183c
 80035cc:	08011850 	.word	0x08011850
 80035d0:	0801186c 	.word	0x0801186c
 80035d4:	0801187c 	.word	0x0801187c
 80035d8:	08011894 	.word	0x08011894
 80035dc:	080118b0 	.word	0x080118b0

080035e0 <enter_setup_state>:

 void enter_setup_state(void){
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af04      	add	r7, sp, #16
	    printf("\r\n Configuration Options \n\r");
 80035e6:	487d      	ldr	r0, [pc, #500]	; (80037dc <enter_setup_state+0x1fc>)
 80035e8:	f00a f876 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-2s\r\n", "prefix", "parameter", "min", "max", "current value");
 80035ec:	4b7c      	ldr	r3, [pc, #496]	; (80037e0 <enter_setup_state+0x200>)
 80035ee:	9301      	str	r3, [sp, #4]
 80035f0:	4b7c      	ldr	r3, [pc, #496]	; (80037e4 <enter_setup_state+0x204>)
 80035f2:	9300      	str	r3, [sp, #0]
 80035f4:	4b7c      	ldr	r3, [pc, #496]	; (80037e8 <enter_setup_state+0x208>)
 80035f6:	4a7d      	ldr	r2, [pc, #500]	; (80037ec <enter_setup_state+0x20c>)
 80035f8:	497d      	ldr	r1, [pc, #500]	; (80037f0 <enter_setup_state+0x210>)
 80035fa:	487e      	ldr	r0, [pc, #504]	; (80037f4 <enter_setup_state+0x214>)
 80035fc:	f00a f86c 	bl	800d6d8 <iprintf>
	    printf("\r\n Motor:\r\n");
 8003600:	487d      	ldr	r0, [pc, #500]	; (80037f8 <enter_setup_state+0x218>)
 8003602:	f00a f8ef 	bl	800d7e4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.3f\n\r", "g", "Gear Ratio", "0", "-", GR);
 8003606:	4b7d      	ldr	r3, [pc, #500]	; (80037fc <enter_setup_state+0x21c>)
 8003608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800360a:	4618      	mov	r0, r3
 800360c:	f7fc ffc4 	bl	8000598 <__aeabi_f2d>
 8003610:	4602      	mov	r2, r0
 8003612:	460b      	mov	r3, r1
 8003614:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003618:	4b79      	ldr	r3, [pc, #484]	; (8003800 <enter_setup_state+0x220>)
 800361a:	9300      	str	r3, [sp, #0]
 800361c:	4b79      	ldr	r3, [pc, #484]	; (8003804 <enter_setup_state+0x224>)
 800361e:	4a7a      	ldr	r2, [pc, #488]	; (8003808 <enter_setup_state+0x228>)
 8003620:	497a      	ldr	r1, [pc, #488]	; (800380c <enter_setup_state+0x22c>)
 8003622:	487b      	ldr	r0, [pc, #492]	; (8003810 <enter_setup_state+0x230>)
 8003624:	f00a f858 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.5f\n\r", "k", "Torque Constant (N-m/A)", "0", "-", KT);
 8003628:	4b74      	ldr	r3, [pc, #464]	; (80037fc <enter_setup_state+0x21c>)
 800362a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800362c:	4618      	mov	r0, r3
 800362e:	f7fc ffb3 	bl	8000598 <__aeabi_f2d>
 8003632:	4602      	mov	r2, r0
 8003634:	460b      	mov	r3, r1
 8003636:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800363a:	4b71      	ldr	r3, [pc, #452]	; (8003800 <enter_setup_state+0x220>)
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	4b71      	ldr	r3, [pc, #452]	; (8003804 <enter_setup_state+0x224>)
 8003640:	4a74      	ldr	r2, [pc, #464]	; (8003814 <enter_setup_state+0x234>)
 8003642:	4975      	ldr	r1, [pc, #468]	; (8003818 <enter_setup_state+0x238>)
 8003644:	4875      	ldr	r0, [pc, #468]	; (800381c <enter_setup_state+0x23c>)
 8003646:	f00a f847 	bl	800d6d8 <iprintf>
	    printf("\r\n Control:\r\n");
 800364a:	4875      	ldr	r0, [pc, #468]	; (8003820 <enter_setup_state+0x240>)
 800364c:	f00a f8ca 	bl	800d7e4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "b", "Current Bandwidth (Hz)", "100", "2000", I_BW);
 8003650:	4b6a      	ldr	r3, [pc, #424]	; (80037fc <enter_setup_state+0x21c>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fc ff9f 	bl	8000598 <__aeabi_f2d>
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003662:	4b70      	ldr	r3, [pc, #448]	; (8003824 <enter_setup_state+0x244>)
 8003664:	9300      	str	r3, [sp, #0]
 8003666:	4b70      	ldr	r3, [pc, #448]	; (8003828 <enter_setup_state+0x248>)
 8003668:	4a70      	ldr	r2, [pc, #448]	; (800382c <enter_setup_state+0x24c>)
 800366a:	4971      	ldr	r1, [pc, #452]	; (8003830 <enter_setup_state+0x250>)
 800366c:	4871      	ldr	r0, [pc, #452]	; (8003834 <enter_setup_state+0x254>)
 800366e:	f00a f833 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "l", "Current Limit (A)", "0.0", "60.0", I_MAX);
 8003672:	4b62      	ldr	r3, [pc, #392]	; (80037fc <enter_setup_state+0x21c>)
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff8e 	bl	8000598 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003684:	4b6c      	ldr	r3, [pc, #432]	; (8003838 <enter_setup_state+0x258>)
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <enter_setup_state+0x25c>)
 800368a:	4a6d      	ldr	r2, [pc, #436]	; (8003840 <enter_setup_state+0x260>)
 800368c:	496d      	ldr	r1, [pc, #436]	; (8003844 <enter_setup_state+0x264>)
 800368e:	4869      	ldr	r0, [pc, #420]	; (8003834 <enter_setup_state+0x254>)
 8003690:	f00a f822 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "p", "Max Position Setpoint (rad)", "-", "-", P_MAX);
 8003694:	4b59      	ldr	r3, [pc, #356]	; (80037fc <enter_setup_state+0x21c>)
 8003696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003698:	4618      	mov	r0, r3
 800369a:	f7fc ff7d 	bl	8000598 <__aeabi_f2d>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036a6:	4b56      	ldr	r3, [pc, #344]	; (8003800 <enter_setup_state+0x220>)
 80036a8:	9300      	str	r3, [sp, #0]
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <enter_setup_state+0x220>)
 80036ac:	4a66      	ldr	r2, [pc, #408]	; (8003848 <enter_setup_state+0x268>)
 80036ae:	4967      	ldr	r1, [pc, #412]	; (800384c <enter_setup_state+0x26c>)
 80036b0:	4860      	ldr	r0, [pc, #384]	; (8003834 <enter_setup_state+0x254>)
 80036b2:	f00a f811 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "v", "Max Velocity Setpoint (rad)/s", "-", "-", V_MAX);
 80036b6:	4b51      	ldr	r3, [pc, #324]	; (80037fc <enter_setup_state+0x21c>)
 80036b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7fc ff6c 	bl	8000598 <__aeabi_f2d>
 80036c0:	4602      	mov	r2, r0
 80036c2:	460b      	mov	r3, r1
 80036c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036c8:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <enter_setup_state+0x220>)
 80036ca:	9300      	str	r3, [sp, #0]
 80036cc:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <enter_setup_state+0x220>)
 80036ce:	4a60      	ldr	r2, [pc, #384]	; (8003850 <enter_setup_state+0x270>)
 80036d0:	4960      	ldr	r1, [pc, #384]	; (8003854 <enter_setup_state+0x274>)
 80036d2:	4858      	ldr	r0, [pc, #352]	; (8003834 <enter_setup_state+0x254>)
 80036d4:	f00a f800 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "x", "Max Position Gain (N-m/rad)", "0.0", "1000.0", KP_MAX);
 80036d8:	4b48      	ldr	r3, [pc, #288]	; (80037fc <enter_setup_state+0x21c>)
 80036da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036dc:	4618      	mov	r0, r3
 80036de:	f7fc ff5b 	bl	8000598 <__aeabi_f2d>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80036ea:	4b5b      	ldr	r3, [pc, #364]	; (8003858 <enter_setup_state+0x278>)
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	4b53      	ldr	r3, [pc, #332]	; (800383c <enter_setup_state+0x25c>)
 80036f0:	4a5a      	ldr	r2, [pc, #360]	; (800385c <enter_setup_state+0x27c>)
 80036f2:	495b      	ldr	r1, [pc, #364]	; (8003860 <enter_setup_state+0x280>)
 80036f4:	484f      	ldr	r0, [pc, #316]	; (8003834 <enter_setup_state+0x254>)
 80036f6:	f009 ffef 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "d", "Max Velocity Gain (N-m/rad/s)", "0.0", "5.0", KD_MAX);
 80036fa:	4b40      	ldr	r3, [pc, #256]	; (80037fc <enter_setup_state+0x21c>)
 80036fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc ff4a 	bl	8000598 <__aeabi_f2d>
 8003704:	4602      	mov	r2, r0
 8003706:	460b      	mov	r3, r1
 8003708:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800370c:	4b55      	ldr	r3, [pc, #340]	; (8003864 <enter_setup_state+0x284>)
 800370e:	9300      	str	r3, [sp, #0]
 8003710:	4b4a      	ldr	r3, [pc, #296]	; (800383c <enter_setup_state+0x25c>)
 8003712:	4a55      	ldr	r2, [pc, #340]	; (8003868 <enter_setup_state+0x288>)
 8003714:	4955      	ldr	r1, [pc, #340]	; (800386c <enter_setup_state+0x28c>)
 8003716:	4847      	ldr	r0, [pc, #284]	; (8003834 <enter_setup_state+0x254>)
 8003718:	f009 ffde 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "f", "FW Current Limit (A)", "0.0", "33.0", I_FW_MAX);
 800371c:	4b37      	ldr	r3, [pc, #220]	; (80037fc <enter_setup_state+0x21c>)
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	4618      	mov	r0, r3
 8003722:	f7fc ff39 	bl	8000598 <__aeabi_f2d>
 8003726:	4602      	mov	r2, r0
 8003728:	460b      	mov	r3, r1
 800372a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800372e:	4b50      	ldr	r3, [pc, #320]	; (8003870 <enter_setup_state+0x290>)
 8003730:	9300      	str	r3, [sp, #0]
 8003732:	4b42      	ldr	r3, [pc, #264]	; (800383c <enter_setup_state+0x25c>)
 8003734:	4a4f      	ldr	r2, [pc, #316]	; (8003874 <enter_setup_state+0x294>)
 8003736:	4950      	ldr	r1, [pc, #320]	; (8003878 <enter_setup_state+0x298>)
 8003738:	483e      	ldr	r0, [pc, #248]	; (8003834 <enter_setup_state+0x254>)
 800373a:	f009 ffcd 	bl	800d6d8 <iprintf>
	    //printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "h", "Temp Cutoff (C) (0 = none)", "0", "150", TEMP_MAX);
//	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "c", "Continuous Current (A)", "0.0", "40.0", I_MAX_CONT);
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "a", "Calibration Current (A)", "0.0", "20.0", I_CAL);
 800373e:	4b2f      	ldr	r3, [pc, #188]	; (80037fc <enter_setup_state+0x21c>)
 8003740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003742:	4618      	mov	r0, r3
 8003744:	f7fc ff28 	bl	8000598 <__aeabi_f2d>
 8003748:	4602      	mov	r2, r0
 800374a:	460b      	mov	r3, r1
 800374c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003750:	4b4a      	ldr	r3, [pc, #296]	; (800387c <enter_setup_state+0x29c>)
 8003752:	9300      	str	r3, [sp, #0]
 8003754:	4b39      	ldr	r3, [pc, #228]	; (800383c <enter_setup_state+0x25c>)
 8003756:	4a4a      	ldr	r2, [pc, #296]	; (8003880 <enter_setup_state+0x2a0>)
 8003758:	494a      	ldr	r1, [pc, #296]	; (8003884 <enter_setup_state+0x2a4>)
 800375a:	4836      	ldr	r0, [pc, #216]	; (8003834 <enter_setup_state+0x254>)
 800375c:	f009 ffbc 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %.1f\n\r", "o", "Max Torque Setpoint (N-m)", "0.0", "-", T_MAX);
 8003760:	4b26      	ldr	r3, [pc, #152]	; (80037fc <enter_setup_state+0x21c>)
 8003762:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003764:	4618      	mov	r0, r3
 8003766:	f7fc ff17 	bl	8000598 <__aeabi_f2d>
 800376a:	4602      	mov	r2, r0
 800376c:	460b      	mov	r3, r1
 800376e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003772:	4b23      	ldr	r3, [pc, #140]	; (8003800 <enter_setup_state+0x220>)
 8003774:	9300      	str	r3, [sp, #0]
 8003776:	4b31      	ldr	r3, [pc, #196]	; (800383c <enter_setup_state+0x25c>)
 8003778:	4a43      	ldr	r2, [pc, #268]	; (8003888 <enter_setup_state+0x2a8>)
 800377a:	4944      	ldr	r1, [pc, #272]	; (800388c <enter_setup_state+0x2ac>)
 800377c:	482d      	ldr	r0, [pc, #180]	; (8003834 <enter_setup_state+0x254>)
 800377e:	f009 ffab 	bl	800d6d8 <iprintf>
	    printf("\r\n CAN:\r\n");
 8003782:	4843      	ldr	r0, [pc, #268]	; (8003890 <enter_setup_state+0x2b0>)
 8003784:	f00a f82e 	bl	800d7e4 <puts>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "i", "CAN ID", "0", "127", CAN_ID);
 8003788:	4b42      	ldr	r3, [pc, #264]	; (8003894 <enter_setup_state+0x2b4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	9301      	str	r3, [sp, #4]
 800378e:	4b42      	ldr	r3, [pc, #264]	; (8003898 <enter_setup_state+0x2b8>)
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	4b1c      	ldr	r3, [pc, #112]	; (8003804 <enter_setup_state+0x224>)
 8003794:	4a41      	ldr	r2, [pc, #260]	; (800389c <enter_setup_state+0x2bc>)
 8003796:	4942      	ldr	r1, [pc, #264]	; (80038a0 <enter_setup_state+0x2c0>)
 8003798:	4842      	ldr	r0, [pc, #264]	; (80038a4 <enter_setup_state+0x2c4>)
 800379a:	f009 ff9d 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %-5i\n\r", "m", "CAN Master ID", "0", "127", CAN_MASTER);
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <enter_setup_state+0x2b4>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	4b3c      	ldr	r3, [pc, #240]	; (8003898 <enter_setup_state+0x2b8>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	4b16      	ldr	r3, [pc, #88]	; (8003804 <enter_setup_state+0x224>)
 80037aa:	4a3f      	ldr	r2, [pc, #252]	; (80038a8 <enter_setup_state+0x2c8>)
 80037ac:	493f      	ldr	r1, [pc, #252]	; (80038ac <enter_setup_state+0x2cc>)
 80037ae:	483d      	ldr	r0, [pc, #244]	; (80038a4 <enter_setup_state+0x2c4>)
 80037b0:	f009 ff92 	bl	800d6d8 <iprintf>
	    printf(" %-4s %-31s %-5s %-6s %d\n\r", "t", "CAN Timeout (cycles)(0 = none)", "0", "100000", CAN_TIMEOUT);
 80037b4:	4b37      	ldr	r3, [pc, #220]	; (8003894 <enter_setup_state+0x2b4>)
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	9301      	str	r3, [sp, #4]
 80037ba:	4b3d      	ldr	r3, [pc, #244]	; (80038b0 <enter_setup_state+0x2d0>)
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	4b11      	ldr	r3, [pc, #68]	; (8003804 <enter_setup_state+0x224>)
 80037c0:	4a3c      	ldr	r2, [pc, #240]	; (80038b4 <enter_setup_state+0x2d4>)
 80037c2:	493d      	ldr	r1, [pc, #244]	; (80038b8 <enter_setup_state+0x2d8>)
 80037c4:	483d      	ldr	r0, [pc, #244]	; (80038bc <enter_setup_state+0x2dc>)
 80037c6:	f009 ff87 	bl	800d6d8 <iprintf>
	    printf(" \n\r To change a value, type 'prefix''value''ENTER'\n\r e.g. 'b1000''ENTER'\r\n ");
 80037ca:	483d      	ldr	r0, [pc, #244]	; (80038c0 <enter_setup_state+0x2e0>)
 80037cc:	f009 ff84 	bl	800d6d8 <iprintf>
	    printf("VALUES NOT ACTIVE UNTIL POWER CYCLE! \n\r\n\r");
 80037d0:	483c      	ldr	r0, [pc, #240]	; (80038c4 <enter_setup_state+0x2e4>)
 80037d2:	f009 ff81 	bl	800d6d8 <iprintf>
 }
 80037d6:	bf00      	nop
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	080118c8 	.word	0x080118c8
 80037e0:	0801191c 	.word	0x0801191c
 80037e4:	0801192c 	.word	0x0801192c
 80037e8:	080118e4 	.word	0x080118e4
 80037ec:	080118e8 	.word	0x080118e8
 80037f0:	080118f4 	.word	0x080118f4
 80037f4:	080118fc 	.word	0x080118fc
 80037f8:	08011930 	.word	0x08011930
 80037fc:	20004c50 	.word	0x20004c50
 8003800:	08011970 	.word	0x08011970
 8003804:	0801193c 	.word	0x0801193c
 8003808:	08011940 	.word	0x08011940
 800380c:	0801194c 	.word	0x0801194c
 8003810:	08011950 	.word	0x08011950
 8003814:	08011974 	.word	0x08011974
 8003818:	0801198c 	.word	0x0801198c
 800381c:	08011990 	.word	0x08011990
 8003820:	080119b0 	.word	0x080119b0
 8003824:	08011a00 	.word	0x08011a00
 8003828:	080119c0 	.word	0x080119c0
 800382c:	080119c4 	.word	0x080119c4
 8003830:	080119dc 	.word	0x080119dc
 8003834:	080119e0 	.word	0x080119e0
 8003838:	08011a24 	.word	0x08011a24
 800383c:	08011a08 	.word	0x08011a08
 8003840:	08011a0c 	.word	0x08011a0c
 8003844:	08011a20 	.word	0x08011a20
 8003848:	08011a2c 	.word	0x08011a2c
 800384c:	08011a48 	.word	0x08011a48
 8003850:	08011a4c 	.word	0x08011a4c
 8003854:	08011a6c 	.word	0x08011a6c
 8003858:	08011a90 	.word	0x08011a90
 800385c:	08011a70 	.word	0x08011a70
 8003860:	08011a8c 	.word	0x08011a8c
 8003864:	08011abc 	.word	0x08011abc
 8003868:	08011a98 	.word	0x08011a98
 800386c:	08011ab8 	.word	0x08011ab8
 8003870:	08011adc 	.word	0x08011adc
 8003874:	08011ac0 	.word	0x08011ac0
 8003878:	08011ad8 	.word	0x08011ad8
 800387c:	08011b00 	.word	0x08011b00
 8003880:	08011ae4 	.word	0x08011ae4
 8003884:	08011afc 	.word	0x08011afc
 8003888:	08011b08 	.word	0x08011b08
 800388c:	08011b24 	.word	0x08011b24
 8003890:	08011b28 	.word	0x08011b28
 8003894:	20004d50 	.word	0x20004d50
 8003898:	08011b60 	.word	0x08011b60
 800389c:	08011b34 	.word	0x08011b34
 80038a0:	08011b3c 	.word	0x08011b3c
 80038a4:	08011b40 	.word	0x08011b40
 80038a8:	08011b64 	.word	0x08011b64
 80038ac:	08011b74 	.word	0x08011b74
 80038b0:	08011bb8 	.word	0x08011bb8
 80038b4:	08011b78 	.word	0x08011b78
 80038b8:	08011b98 	.word	0x08011b98
 80038bc:	08011b9c 	.word	0x08011b9c
 80038c0:	08011bc0 	.word	0x08011bc0
 80038c4:	08011c0c 	.word	0x08011c0c

080038c8 <process_user_input>:

 void process_user_input(FSMStruct * fsmstate){
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
	 /* Collects user input from serial (maybe eventually CAN) and updates settings */

	 switch (fsmstate->cmd_id){
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	7b5b      	ldrb	r3, [r3, #13]
 80038d4:	3b61      	subs	r3, #97	; 0x61
 80038d6:	2b17      	cmp	r3, #23
 80038d8:	f200 828a 	bhi.w	8003df0 <process_user_input+0x528>
 80038dc:	a201      	add	r2, pc, #4	; (adr r2, 80038e4 <process_user_input+0x1c>)
 80038de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e2:	bf00      	nop
 80038e4:	08003b43 	.word	0x08003b43
 80038e8:	08003945 	.word	0x08003945
 80038ec:	08003aef 	.word	0x08003aef
 80038f0:	08003cc1 	.word	0x08003cc1
 80038f4:	08003df1 	.word	0x08003df1
 80038f8:	08003a29 	.word	0x08003a29
 80038fc:	08003b97 	.word	0x08003b97
 8003900:	08003a9b 	.word	0x08003a9b
 8003904:	08003999 	.word	0x08003999
 8003908:	08003df1 	.word	0x08003df1
 800390c:	08003bdb 	.word	0x08003bdb
 8003910:	080039d5 	.word	0x080039d5
 8003914:	080039b7 	.word	0x080039b7
 8003918:	08003df1 	.word	0x08003df1
 800391c:	08003dad 	.word	0x08003dad
 8003920:	08003d05 	.word	0x08003d05
 8003924:	08003df1 	.word	0x08003df1
 8003928:	08003df1 	.word	0x08003df1
 800392c:	08003df1 	.word	0x08003df1
 8003930:	08003a7d 	.word	0x08003a7d
 8003934:	08003df1 	.word	0x08003df1
 8003938:	08003d59 	.word	0x08003d59
 800393c:	08003df1 	.word	0x08003df1
 8003940:	08003c1f 	.word	0x08003c1f
		 case 'b':
			 I_BW = fmaxf(fminf(atof(fsmstate->cmd_buff), 2000.0f), 100.0f);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	3304      	adds	r3, #4
 8003948:	4618      	mov	r0, r3
 800394a:	f009 f9f9 	bl	800cd40 <atof>
 800394e:	ec53 2b10 	vmov	r2, r3, d0
 8003952:	4610      	mov	r0, r2
 8003954:	4619      	mov	r1, r3
 8003956:	f7fd f96f 	bl	8000c38 <__aeabi_d2f>
 800395a:	4603      	mov	r3, r0
 800395c:	eddf 0ac1 	vldr	s1, [pc, #772]	; 8003c64 <process_user_input+0x39c>
 8003960:	ee00 3a10 	vmov	s0, r3
 8003964:	f00d fbc9 	bl	80110fa <fminf>
 8003968:	eef0 7a40 	vmov.f32	s15, s0
 800396c:	eddf 0abe 	vldr	s1, [pc, #760]	; 8003c68 <process_user_input+0x3a0>
 8003970:	eeb0 0a67 	vmov.f32	s0, s15
 8003974:	f00d fba6 	bl	80110c4 <fmaxf>
 8003978:	eef0 7a40 	vmov.f32	s15, s0
 800397c:	4bbb      	ldr	r3, [pc, #748]	; (8003c6c <process_user_input+0x3a4>)
 800397e:	edc3 7a02 	vstr	s15, [r3, #8]
			 printf("I_BW set to %f\r\n", I_BW);
 8003982:	4bba      	ldr	r3, [pc, #744]	; (8003c6c <process_user_input+0x3a4>)
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	4618      	mov	r0, r3
 8003988:	f7fc fe06 	bl	8000598 <__aeabi_f2d>
 800398c:	4602      	mov	r2, r0
 800398e:	460b      	mov	r3, r1
 8003990:	48b7      	ldr	r0, [pc, #732]	; (8003c70 <process_user_input+0x3a8>)
 8003992:	f009 fea1 	bl	800d6d8 <iprintf>
			 break;
 8003996:	e232      	b.n	8003dfe <process_user_input+0x536>
		 case 'i':
			 CAN_ID = atoi(fsmstate->cmd_buff);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	3304      	adds	r3, #4
 800399c:	4618      	mov	r0, r3
 800399e:	f009 f9d2 	bl	800cd46 <atoi>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4ab3      	ldr	r2, [pc, #716]	; (8003c74 <process_user_input+0x3ac>)
 80039a6:	6053      	str	r3, [r2, #4]
			 printf("CAN_ID set to %d\r\n", CAN_ID);
 80039a8:	4bb2      	ldr	r3, [pc, #712]	; (8003c74 <process_user_input+0x3ac>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4619      	mov	r1, r3
 80039ae:	48b2      	ldr	r0, [pc, #712]	; (8003c78 <process_user_input+0x3b0>)
 80039b0:	f009 fe92 	bl	800d6d8 <iprintf>
			 break;
 80039b4:	e223      	b.n	8003dfe <process_user_input+0x536>
		 case 'm':
			 CAN_MASTER = atoi(fsmstate->cmd_buff);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	3304      	adds	r3, #4
 80039ba:	4618      	mov	r0, r3
 80039bc:	f009 f9c3 	bl	800cd46 <atoi>
 80039c0:	4603      	mov	r3, r0
 80039c2:	4aac      	ldr	r2, [pc, #688]	; (8003c74 <process_user_input+0x3ac>)
 80039c4:	6093      	str	r3, [r2, #8]
			 printf("CAN_MASTER set to %d\r\n", CAN_MASTER);
 80039c6:	4bab      	ldr	r3, [pc, #684]	; (8003c74 <process_user_input+0x3ac>)
 80039c8:	689b      	ldr	r3, [r3, #8]
 80039ca:	4619      	mov	r1, r3
 80039cc:	48ab      	ldr	r0, [pc, #684]	; (8003c7c <process_user_input+0x3b4>)
 80039ce:	f009 fe83 	bl	800d6d8 <iprintf>
			 break;
 80039d2:	e214      	b.n	8003dfe <process_user_input+0x536>
		 case 'l':
			 I_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 60.0f), 0.0f);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	3304      	adds	r3, #4
 80039d8:	4618      	mov	r0, r3
 80039da:	f009 f9b1 	bl	800cd40 <atof>
 80039de:	ec53 2b10 	vmov	r2, r3, d0
 80039e2:	4610      	mov	r0, r2
 80039e4:	4619      	mov	r1, r3
 80039e6:	f7fd f927 	bl	8000c38 <__aeabi_d2f>
 80039ea:	4603      	mov	r3, r0
 80039ec:	eddf 0aa4 	vldr	s1, [pc, #656]	; 8003c80 <process_user_input+0x3b8>
 80039f0:	ee00 3a10 	vmov	s0, r3
 80039f4:	f00d fb81 	bl	80110fa <fminf>
 80039f8:	eef0 7a40 	vmov.f32	s15, s0
 80039fc:	eddf 0aaf 	vldr	s1, [pc, #700]	; 8003cbc <process_user_input+0x3f4>
 8003a00:	eeb0 0a67 	vmov.f32	s0, s15
 8003a04:	f00d fb5e 	bl	80110c4 <fmaxf>
 8003a08:	eef0 7a40 	vmov.f32	s15, s0
 8003a0c:	4b97      	ldr	r3, [pc, #604]	; (8003c6c <process_user_input+0x3a4>)
 8003a0e:	edc3 7a03 	vstr	s15, [r3, #12]
			 printf("I_MAX set to %f\r\n", I_MAX);
 8003a12:	4b96      	ldr	r3, [pc, #600]	; (8003c6c <process_user_input+0x3a4>)
 8003a14:	68db      	ldr	r3, [r3, #12]
 8003a16:	4618      	mov	r0, r3
 8003a18:	f7fc fdbe 	bl	8000598 <__aeabi_f2d>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	460b      	mov	r3, r1
 8003a20:	4898      	ldr	r0, [pc, #608]	; (8003c84 <process_user_input+0x3bc>)
 8003a22:	f009 fe59 	bl	800d6d8 <iprintf>
			 break;
 8003a26:	e1ea      	b.n	8003dfe <process_user_input+0x536>
		 case 'f':
			 I_FW_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 33.0f), 0.0f);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3304      	adds	r3, #4
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f009 f987 	bl	800cd40 <atof>
 8003a32:	ec53 2b10 	vmov	r2, r3, d0
 8003a36:	4610      	mov	r0, r2
 8003a38:	4619      	mov	r1, r3
 8003a3a:	f7fd f8fd 	bl	8000c38 <__aeabi_d2f>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	eddf 0a91 	vldr	s1, [pc, #580]	; 8003c88 <process_user_input+0x3c0>
 8003a44:	ee00 3a10 	vmov	s0, r3
 8003a48:	f00d fb57 	bl	80110fa <fminf>
 8003a4c:	eef0 7a40 	vmov.f32	s15, s0
 8003a50:	eddf 0a9a 	vldr	s1, [pc, #616]	; 8003cbc <process_user_input+0x3f4>
 8003a54:	eeb0 0a67 	vmov.f32	s0, s15
 8003a58:	f00d fb34 	bl	80110c4 <fmaxf>
 8003a5c:	eef0 7a40 	vmov.f32	s15, s0
 8003a60:	4b82      	ldr	r3, [pc, #520]	; (8003c6c <process_user_input+0x3a4>)
 8003a62:	edc3 7a06 	vstr	s15, [r3, #24]
			 printf("I_FW_MAX set to %f\r\n", I_FW_MAX);
 8003a66:	4b81      	ldr	r3, [pc, #516]	; (8003c6c <process_user_input+0x3a4>)
 8003a68:	699b      	ldr	r3, [r3, #24]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f7fc fd94 	bl	8000598 <__aeabi_f2d>
 8003a70:	4602      	mov	r2, r0
 8003a72:	460b      	mov	r3, r1
 8003a74:	4885      	ldr	r0, [pc, #532]	; (8003c8c <process_user_input+0x3c4>)
 8003a76:	f009 fe2f 	bl	800d6d8 <iprintf>
			 break;
 8003a7a:	e1c0      	b.n	8003dfe <process_user_input+0x536>
		 case 't':
			 CAN_TIMEOUT = atoi(fsmstate->cmd_buff);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3304      	adds	r3, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f009 f960 	bl	800cd46 <atoi>
 8003a86:	4603      	mov	r3, r0
 8003a88:	4a7a      	ldr	r2, [pc, #488]	; (8003c74 <process_user_input+0x3ac>)
 8003a8a:	60d3      	str	r3, [r2, #12]
			 printf("CAN_TIMEOUT set to %d\r\n", CAN_TIMEOUT);
 8003a8c:	4b79      	ldr	r3, [pc, #484]	; (8003c74 <process_user_input+0x3ac>)
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4619      	mov	r1, r3
 8003a92:	487f      	ldr	r0, [pc, #508]	; (8003c90 <process_user_input+0x3c8>)
 8003a94:	f009 fe20 	bl	800d6d8 <iprintf>
			 break;
 8003a98:	e1b1      	b.n	8003dfe <process_user_input+0x536>
		 case 'h':
			 TEMP_MAX = fmaxf(fminf(atof(fsmstate->cmd_buff), 150.0f), 0.0f);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	3304      	adds	r3, #4
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f009 f94e 	bl	800cd40 <atof>
 8003aa4:	ec53 2b10 	vmov	r2, r3, d0
 8003aa8:	4610      	mov	r0, r2
 8003aaa:	4619      	mov	r1, r3
 8003aac:	f7fd f8c4 	bl	8000c38 <__aeabi_d2f>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	eddf 0a78 	vldr	s1, [pc, #480]	; 8003c94 <process_user_input+0x3cc>
 8003ab6:	ee00 3a10 	vmov	s0, r3
 8003aba:	f00d fb1e 	bl	80110fa <fminf>
 8003abe:	eef0 7a40 	vmov.f32	s15, s0
 8003ac2:	eddf 0a7e 	vldr	s1, [pc, #504]	; 8003cbc <process_user_input+0x3f4>
 8003ac6:	eeb0 0a67 	vmov.f32	s0, s15
 8003aca:	f00d fafb 	bl	80110c4 <fmaxf>
 8003ace:	eef0 7a40 	vmov.f32	s15, s0
 8003ad2:	4b66      	ldr	r3, [pc, #408]	; (8003c6c <process_user_input+0x3a4>)
 8003ad4:	edc3 7a08 	vstr	s15, [r3, #32]
			 printf("TEMP_MAX set to %f\r\n", TEMP_MAX);
 8003ad8:	4b64      	ldr	r3, [pc, #400]	; (8003c6c <process_user_input+0x3a4>)
 8003ada:	6a1b      	ldr	r3, [r3, #32]
 8003adc:	4618      	mov	r0, r3
 8003ade:	f7fc fd5b 	bl	8000598 <__aeabi_f2d>
 8003ae2:	4602      	mov	r2, r0
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	486c      	ldr	r0, [pc, #432]	; (8003c98 <process_user_input+0x3d0>)
 8003ae8:	f009 fdf6 	bl	800d6d8 <iprintf>
			 break;
 8003aec:	e187      	b.n	8003dfe <process_user_input+0x536>
		 case 'c':
			 I_MAX_CONT = fmaxf(fminf(atof(fsmstate->cmd_buff), 40.0f), 0.0f);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	3304      	adds	r3, #4
 8003af2:	4618      	mov	r0, r3
 8003af4:	f009 f924 	bl	800cd40 <atof>
 8003af8:	ec53 2b10 	vmov	r2, r3, d0
 8003afc:	4610      	mov	r0, r2
 8003afe:	4619      	mov	r1, r3
 8003b00:	f7fd f89a 	bl	8000c38 <__aeabi_d2f>
 8003b04:	4603      	mov	r3, r0
 8003b06:	eddf 0a65 	vldr	s1, [pc, #404]	; 8003c9c <process_user_input+0x3d4>
 8003b0a:	ee00 3a10 	vmov	s0, r3
 8003b0e:	f00d faf4 	bl	80110fa <fminf>
 8003b12:	eef0 7a40 	vmov.f32	s15, s0
 8003b16:	eddf 0a69 	vldr	s1, [pc, #420]	; 8003cbc <process_user_input+0x3f4>
 8003b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b1e:	f00d fad1 	bl	80110c4 <fmaxf>
 8003b22:	eef0 7a40 	vmov.f32	s15, s0
 8003b26:	4b51      	ldr	r3, [pc, #324]	; (8003c6c <process_user_input+0x3a4>)
 8003b28:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			 printf("I_MAX_CONT set to %f\r\n", I_MAX_CONT);
 8003b2c:	4b4f      	ldr	r3, [pc, #316]	; (8003c6c <process_user_input+0x3a4>)
 8003b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b30:	4618      	mov	r0, r3
 8003b32:	f7fc fd31 	bl	8000598 <__aeabi_f2d>
 8003b36:	4602      	mov	r2, r0
 8003b38:	460b      	mov	r3, r1
 8003b3a:	4859      	ldr	r0, [pc, #356]	; (8003ca0 <process_user_input+0x3d8>)
 8003b3c:	f009 fdcc 	bl	800d6d8 <iprintf>
			 break;
 8003b40:	e15d      	b.n	8003dfe <process_user_input+0x536>
		 case 'a':
			 I_CAL = fmaxf(fminf(atof(fsmstate->cmd_buff), 20.0f), 0.0f);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	3304      	adds	r3, #4
 8003b46:	4618      	mov	r0, r3
 8003b48:	f009 f8fa 	bl	800cd40 <atof>
 8003b4c:	ec53 2b10 	vmov	r2, r3, d0
 8003b50:	4610      	mov	r0, r2
 8003b52:	4619      	mov	r1, r3
 8003b54:	f7fd f870 	bl	8000c38 <__aeabi_d2f>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8003b5e:	ee00 3a10 	vmov	s0, r3
 8003b62:	f00d faca 	bl	80110fa <fminf>
 8003b66:	eef0 7a40 	vmov.f32	s15, s0
 8003b6a:	eddf 0a54 	vldr	s1, [pc, #336]	; 8003cbc <process_user_input+0x3f4>
 8003b6e:	eeb0 0a67 	vmov.f32	s0, s15
 8003b72:	f00d faa7 	bl	80110c4 <fmaxf>
 8003b76:	eef0 7a40 	vmov.f32	s15, s0
 8003b7a:	4b3c      	ldr	r3, [pc, #240]	; (8003c6c <process_user_input+0x3a4>)
 8003b7c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			 printf("I_CAL set to %f\r\n", I_CAL);
 8003b80:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <process_user_input+0x3a4>)
 8003b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7fc fd07 	bl	8000598 <__aeabi_f2d>
 8003b8a:	4602      	mov	r2, r0
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4845      	ldr	r0, [pc, #276]	; (8003ca4 <process_user_input+0x3dc>)
 8003b90:	f009 fda2 	bl	800d6d8 <iprintf>
			 break;
 8003b94:	e133      	b.n	8003dfe <process_user_input+0x536>
		 case 'g':
			 GR = fmaxf(atof(fsmstate->cmd_buff), .001f);	// Limit prevents divide by zero if user tries to enter zero
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	3304      	adds	r3, #4
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f009 f8d0 	bl	800cd40 <atof>
 8003ba0:	ec53 2b10 	vmov	r2, r3, d0
 8003ba4:	4610      	mov	r0, r2
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	f7fd f846 	bl	8000c38 <__aeabi_d2f>
 8003bac:	4603      	mov	r3, r0
 8003bae:	eddf 0a3e 	vldr	s1, [pc, #248]	; 8003ca8 <process_user_input+0x3e0>
 8003bb2:	ee00 3a10 	vmov	s0, r3
 8003bb6:	f00d fa85 	bl	80110c4 <fmaxf>
 8003bba:	eef0 7a40 	vmov.f32	s15, s0
 8003bbe:	4b2b      	ldr	r3, [pc, #172]	; (8003c6c <process_user_input+0x3a4>)
 8003bc0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c
			 printf("GR set to %f\r\n", GR);
 8003bc4:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <process_user_input+0x3a4>)
 8003bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc8:	4618      	mov	r0, r3
 8003bca:	f7fc fce5 	bl	8000598 <__aeabi_f2d>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	4836      	ldr	r0, [pc, #216]	; (8003cac <process_user_input+0x3e4>)
 8003bd4:	f009 fd80 	bl	800d6d8 <iprintf>
			 break;
 8003bd8:	e111      	b.n	8003dfe <process_user_input+0x536>
		 case 'k':
			 KT = fmaxf(atof(fsmstate->cmd_buff), 0.0001f);	// Limit prevents divide by zero.  Seems like a reasonable LB?
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4618      	mov	r0, r3
 8003be0:	f009 f8ae 	bl	800cd40 <atof>
 8003be4:	ec53 2b10 	vmov	r2, r3, d0
 8003be8:	4610      	mov	r0, r2
 8003bea:	4619      	mov	r1, r3
 8003bec:	f7fd f824 	bl	8000c38 <__aeabi_d2f>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8003cb0 <process_user_input+0x3e8>
 8003bf6:	ee00 3a10 	vmov	s0, r3
 8003bfa:	f00d fa63 	bl	80110c4 <fmaxf>
 8003bfe:	eef0 7a40 	vmov.f32	s15, s0
 8003c02:	4b1a      	ldr	r3, [pc, #104]	; (8003c6c <process_user_input+0x3a4>)
 8003c04:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			 printf("KT set to %f\r\n", KT);
 8003c08:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <process_user_input+0x3a4>)
 8003c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f7fc fcc3 	bl	8000598 <__aeabi_f2d>
 8003c12:	4602      	mov	r2, r0
 8003c14:	460b      	mov	r3, r1
 8003c16:	4827      	ldr	r0, [pc, #156]	; (8003cb4 <process_user_input+0x3ec>)
 8003c18:	f009 fd5e 	bl	800d6d8 <iprintf>
			 break;
 8003c1c:	e0ef      	b.n	8003dfe <process_user_input+0x536>
		 case 'x':
			 KP_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	3304      	adds	r3, #4
 8003c22:	4618      	mov	r0, r3
 8003c24:	f009 f88c 	bl	800cd40 <atof>
 8003c28:	ec53 2b10 	vmov	r2, r3, d0
 8003c2c:	4610      	mov	r0, r2
 8003c2e:	4619      	mov	r1, r3
 8003c30:	f7fd f802 	bl	8000c38 <__aeabi_d2f>
 8003c34:	4603      	mov	r3, r0
 8003c36:	eddf 0a21 	vldr	s1, [pc, #132]	; 8003cbc <process_user_input+0x3f4>
 8003c3a:	ee00 3a10 	vmov	s0, r3
 8003c3e:	f00d fa41 	bl	80110c4 <fmaxf>
 8003c42:	eef0 7a40 	vmov.f32	s15, s0
 8003c46:	4b09      	ldr	r3, [pc, #36]	; (8003c6c <process_user_input+0x3a4>)
 8003c48:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			 printf("KP_MAX set to %f\r\n", KP_MAX);
 8003c4c:	4b07      	ldr	r3, [pc, #28]	; (8003c6c <process_user_input+0x3a4>)
 8003c4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c50:	4618      	mov	r0, r3
 8003c52:	f7fc fca1 	bl	8000598 <__aeabi_f2d>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4817      	ldr	r0, [pc, #92]	; (8003cb8 <process_user_input+0x3f0>)
 8003c5c:	f009 fd3c 	bl	800d6d8 <iprintf>
			 break;
 8003c60:	e0cd      	b.n	8003dfe <process_user_input+0x536>
 8003c62:	bf00      	nop
 8003c64:	44fa0000 	.word	0x44fa0000
 8003c68:	42c80000 	.word	0x42c80000
 8003c6c:	20004c50 	.word	0x20004c50
 8003c70:	08011c38 	.word	0x08011c38
 8003c74:	20004d50 	.word	0x20004d50
 8003c78:	08011c4c 	.word	0x08011c4c
 8003c7c:	08011c60 	.word	0x08011c60
 8003c80:	42700000 	.word	0x42700000
 8003c84:	08011c78 	.word	0x08011c78
 8003c88:	42040000 	.word	0x42040000
 8003c8c:	08011c8c 	.word	0x08011c8c
 8003c90:	08011ca4 	.word	0x08011ca4
 8003c94:	43160000 	.word	0x43160000
 8003c98:	08011cbc 	.word	0x08011cbc
 8003c9c:	42200000 	.word	0x42200000
 8003ca0:	08011cd4 	.word	0x08011cd4
 8003ca4:	08011cec 	.word	0x08011cec
 8003ca8:	3a83126f 	.word	0x3a83126f
 8003cac:	08011d00 	.word	0x08011d00
 8003cb0:	38d1b717 	.word	0x38d1b717
 8003cb4:	08011d10 	.word	0x08011d10
 8003cb8:	08011d20 	.word	0x08011d20
 8003cbc:	00000000 	.word	0x00000000
		 case 'd':
			 KD_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	3304      	adds	r3, #4
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f009 f83b 	bl	800cd40 <atof>
 8003cca:	ec53 2b10 	vmov	r2, r3, d0
 8003cce:	4610      	mov	r0, r2
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f7fc ffb1 	bl	8000c38 <__aeabi_d2f>
 8003cd6:	4603      	mov	r3, r0
 8003cd8:	ed5f 0a08 	vldr	s1, [pc, #-32]	; 8003cbc <process_user_input+0x3f4>
 8003cdc:	ee00 3a10 	vmov	s0, r3
 8003ce0:	f00d f9f0 	bl	80110c4 <fmaxf>
 8003ce4:	eef0 7a40 	vmov.f32	s15, s0
 8003ce8:	4b50      	ldr	r3, [pc, #320]	; (8003e2c <process_user_input+0x564>)
 8003cea:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			 printf("KD_MAX set to %f\r\n", KD_MAX);
 8003cee:	4b4f      	ldr	r3, [pc, #316]	; (8003e2c <process_user_input+0x564>)
 8003cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fc fc50 	bl	8000598 <__aeabi_f2d>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	484c      	ldr	r0, [pc, #304]	; (8003e30 <process_user_input+0x568>)
 8003cfe:	f009 fceb 	bl	800d6d8 <iprintf>
			 break;
 8003d02:	e07c      	b.n	8003dfe <process_user_input+0x536>
		 case 'p':
			 P_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3304      	adds	r3, #4
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f009 f819 	bl	800cd40 <atof>
 8003d0e:	ec53 2b10 	vmov	r2, r3, d0
 8003d12:	4610      	mov	r0, r2
 8003d14:	4619      	mov	r1, r3
 8003d16:	f7fc ff8f 	bl	8000c38 <__aeabi_d2f>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	eddf 0a45 	vldr	s1, [pc, #276]	; 8003e34 <process_user_input+0x56c>
 8003d20:	ee00 3a10 	vmov	s0, r3
 8003d24:	f00d f9ce 	bl	80110c4 <fmaxf>
 8003d28:	eef0 7a40 	vmov.f32	s15, s0
 8003d2c:	4b3f      	ldr	r3, [pc, #252]	; (8003e2c <process_user_input+0x564>)
 8003d2e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			 P_MIN = -P_MAX;
 8003d32:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <process_user_input+0x564>)
 8003d34:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8003d38:	eef1 7a67 	vneg.f32	s15, s15
 8003d3c:	4b3b      	ldr	r3, [pc, #236]	; (8003e2c <process_user_input+0x564>)
 8003d3e:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
			 printf("P_MAX set to %f\r\n", P_MAX);
 8003d42:	4b3a      	ldr	r3, [pc, #232]	; (8003e2c <process_user_input+0x564>)
 8003d44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fc fc26 	bl	8000598 <__aeabi_f2d>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	460b      	mov	r3, r1
 8003d50:	4839      	ldr	r0, [pc, #228]	; (8003e38 <process_user_input+0x570>)
 8003d52:	f009 fcc1 	bl	800d6d8 <iprintf>
			 break;
 8003d56:	e052      	b.n	8003dfe <process_user_input+0x536>
		 case 'v':
			 V_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f008 ffef 	bl	800cd40 <atof>
 8003d62:	ec53 2b10 	vmov	r2, r3, d0
 8003d66:	4610      	mov	r0, r2
 8003d68:	4619      	mov	r1, r3
 8003d6a:	f7fc ff65 	bl	8000c38 <__aeabi_d2f>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	eddf 0a30 	vldr	s1, [pc, #192]	; 8003e34 <process_user_input+0x56c>
 8003d74:	ee00 3a10 	vmov	s0, r3
 8003d78:	f00d f9a4 	bl	80110c4 <fmaxf>
 8003d7c:	eef0 7a40 	vmov.f32	s15, s0
 8003d80:	4b2a      	ldr	r3, [pc, #168]	; (8003e2c <process_user_input+0x564>)
 8003d82:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			 V_MIN = -V_MAX;
 8003d86:	4b29      	ldr	r3, [pc, #164]	; (8003e2c <process_user_input+0x564>)
 8003d88:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003d8c:	eef1 7a67 	vneg.f32	s15, s15
 8003d90:	4b26      	ldr	r3, [pc, #152]	; (8003e2c <process_user_input+0x564>)
 8003d92:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
			 printf("V_MAX set to %f\r\n", V_MAX);
 8003d96:	4b25      	ldr	r3, [pc, #148]	; (8003e2c <process_user_input+0x564>)
 8003d98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7fc fbfc 	bl	8000598 <__aeabi_f2d>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4825      	ldr	r0, [pc, #148]	; (8003e3c <process_user_input+0x574>)
 8003da6:	f009 fc97 	bl	800d6d8 <iprintf>
			 break;
 8003daa:	e028      	b.n	8003dfe <process_user_input+0x536>
		 case 'o':
			 T_MAX = fmaxf(atof(fsmstate->cmd_buff), 0.0f);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	3304      	adds	r3, #4
 8003db0:	4618      	mov	r0, r3
 8003db2:	f008 ffc5 	bl	800cd40 <atof>
 8003db6:	ec53 2b10 	vmov	r2, r3, d0
 8003dba:	4610      	mov	r0, r2
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f7fc ff3b 	bl	8000c38 <__aeabi_d2f>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	eddf 0a1b 	vldr	s1, [pc, #108]	; 8003e34 <process_user_input+0x56c>
 8003dc8:	ee00 3a10 	vmov	s0, r3
 8003dcc:	f00d f97a 	bl	80110c4 <fmaxf>
 8003dd0:	eef0 7a40 	vmov.f32	s15, s0
 8003dd4:	4b15      	ldr	r3, [pc, #84]	; (8003e2c <process_user_input+0x564>)
 8003dd6:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
			 printf("T_MAX set to %f\r\n", T_MAX);
 8003dda:	4b14      	ldr	r3, [pc, #80]	; (8003e2c <process_user_input+0x564>)
 8003ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fbda 	bl	8000598 <__aeabi_f2d>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4815      	ldr	r0, [pc, #84]	; (8003e40 <process_user_input+0x578>)
 8003dea:	f009 fc75 	bl	800d6d8 <iprintf>
			 break;
 8003dee:	e006      	b.n	8003dfe <process_user_input+0x536>
		 default:
			 printf("\n\r '%c' Not a valid command prefix\n\r\n\r", fsmstate->cmd_buff);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4813      	ldr	r0, [pc, #76]	; (8003e44 <process_user_input+0x57c>)
 8003df8:	f009 fc6e 	bl	800d6d8 <iprintf>
			 break;
 8003dfc:	bf00      	nop

		 }

	 /* Write new settings to flash */
	 store_eeprom_regs();
 8003dfe:	f001 fe0f 	bl	8005a20 <store_eeprom_regs>
	 load_eeprom_regs();
 8003e02:	f001 fe1b 	bl	8005a3c <load_eeprom_regs>

	 enter_setup_state();
 8003e06:	f7ff fbeb 	bl	80035e0 <enter_setup_state>

	 fsmstate->bytecount = 0;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	731a      	strb	r2, [r3, #12]
	 fsmstate->cmd_id = 0;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	735a      	strb	r2, [r3, #13]
	 memset(&fsmstate->cmd_buff, 0, sizeof(fsmstate->cmd_buff));
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	3304      	adds	r3, #4
 8003e1a:	2208      	movs	r2, #8
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f008 ffe8 	bl	800cdf4 <memset>
 }
 8003e24:	bf00      	nop
 8003e26:	3708      	adds	r7, #8
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	20004c50 	.word	0x20004c50
 8003e30:	08011d34 	.word	0x08011d34
 8003e34:	00000000 	.word	0x00000000
 8003e38:	08011d48 	.word	0x08011d48
 8003e3c:	08011d5c 	.word	0x08011d5c
 8003e40:	08011d70 	.word	0x08011d70
 8003e44:	08011d84 	.word	0x08011d84

08003e48 <enable_gd>:
 */
#include "gatedrive.h"
#include <stdio.h>


void enable_gd(ControllerStruct *controller){
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b082      	sub	sp, #8
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
	//Restart PWM
	controller->isEnabled = 1;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003e58:	2100      	movs	r1, #0
 8003e5a:	480d      	ldr	r0, [pc, #52]	; (8003e90 <enable_gd+0x48>)
 8003e5c:	f005 ff44 	bl	8009ce8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003e60:	2104      	movs	r1, #4
 8003e62:	480b      	ldr	r0, [pc, #44]	; (8003e90 <enable_gd+0x48>)
 8003e64:	f005 ff40 	bl	8009ce8 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003e68:	2108      	movs	r1, #8
 8003e6a:	4809      	ldr	r0, [pc, #36]	; (8003e90 <enable_gd+0x48>)
 8003e6c:	f005 ff3c 	bl	8009ce8 <HAL_TIM_PWM_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_1);
 8003e70:	2100      	movs	r1, #0
 8003e72:	4807      	ldr	r0, [pc, #28]	; (8003e90 <enable_gd+0x48>)
 8003e74:	f007 f838 	bl	800aee8 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_2);
 8003e78:	2104      	movs	r1, #4
 8003e7a:	4805      	ldr	r0, [pc, #20]	; (8003e90 <enable_gd+0x48>)
 8003e7c:	f007 f834 	bl	800aee8 <HAL_TIMEx_PWMN_Start>
    HAL_TIMEx_PWMN_Start(&TIM_PWM, TIM_CHANNEL_3);
 8003e80:	2108      	movs	r1, #8
 8003e82:	4803      	ldr	r0, [pc, #12]	; (8003e90 <enable_gd+0x48>)
 8003e84:	f007 f830 	bl	800aee8 <HAL_TIMEx_PWMN_Start>
}
 8003e88:	bf00      	nop
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	20005008 	.word	0x20005008

08003e94 <disable_gd>:
void disable_gd(ControllerStruct *controller){
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	//Drive all gates low
	controller->isEnabled = 0;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f883 22f1 	strb.w	r2, [r3, #753]	; 0x2f1
	TIM_PWM.Instance->CCR3 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003ea4:	4b30      	ldr	r3, [pc, #192]	; (8003f68 <disable_gd+0xd4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	ee07 3a90 	vmov	s15, r3
 8003eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eb2:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003f6c <disable_gd+0xd8>
 8003eb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003eba:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <disable_gd+0xd4>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ec2:	ee17 2a90 	vmov	r2, s15
 8003ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM_PWM.Instance->CCR1 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003ec8:	4b27      	ldr	r3, [pc, #156]	; (8003f68 <disable_gd+0xd4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ece:	ee07 3a90 	vmov	s15, r3
 8003ed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ed6:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8003f6c <disable_gd+0xd8>
 8003eda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003ede:	4b22      	ldr	r3, [pc, #136]	; (8003f68 <disable_gd+0xd4>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ee6:	ee17 2a90 	vmov	r2, s15
 8003eea:	635a      	str	r2, [r3, #52]	; 0x34
	TIM_PWM.Instance->CCR2 = ((TIM_PWM.Instance->ARR))*(0.0f);
 8003eec:	4b1e      	ldr	r3, [pc, #120]	; (8003f68 <disable_gd+0xd4>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 8003f6c <disable_gd+0xd8>
 8003efe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f02:	4b19      	ldr	r3, [pc, #100]	; (8003f68 <disable_gd+0xd4>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f0a:	ee17 2a90 	vmov	r2, s15
 8003f0e:	639a      	str	r2, [r3, #56]	; 0x38
	HAL_GPIO_WritePin(DRV_HA, GPIO_PIN_RESET );
 8003f10:	2200      	movs	r2, #0
 8003f12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f1a:	f004 fccf 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HB, GPIO_PIN_RESET );
 8003f1e:	2200      	movs	r2, #0
 8003f20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f28:	f004 fcc8 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_HC, GPIO_PIN_RESET );
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003f32:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f36:	f004 fcc1 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LA, GPIO_PIN_RESET );
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003f40:	480b      	ldr	r0, [pc, #44]	; (8003f70 <disable_gd+0xdc>)
 8003f42:	f004 fcbb 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LB, GPIO_PIN_RESET );
 8003f46:	2200      	movs	r2, #0
 8003f48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003f4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f50:	f004 fcb4 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(DRV_LC, GPIO_PIN_RESET );
 8003f54:	2200      	movs	r2, #0
 8003f56:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003f5a:	4806      	ldr	r0, [pc, #24]	; (8003f74 <disable_gd+0xe0>)
 8003f5c:	f004 fcae 	bl	80088bc <HAL_GPIO_WritePin>

}
 8003f60:	bf00      	nop
 8003f62:	3708      	adds	r7, #8
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20005008 	.word	0x20005008
 8003f6c:	00000000 	.word	0x00000000
 8003f70:	48000800 	.word	0x48000800
 8003f74:	48000400 	.word	0x48000400

08003f78 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	b08a      	sub	sp, #40	; 0x28
 8003f7c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f7e:	f107 0314 	add.w	r3, r7, #20
 8003f82:	2200      	movs	r2, #0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	605a      	str	r2, [r3, #4]
 8003f88:	609a      	str	r2, [r3, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
 8003f8c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f8e:	4b40      	ldr	r3, [pc, #256]	; (8004090 <MX_GPIO_Init+0x118>)
 8003f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f92:	4a3f      	ldr	r2, [pc, #252]	; (8004090 <MX_GPIO_Init+0x118>)
 8003f94:	f043 0304 	orr.w	r3, r3, #4
 8003f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f9a:	4b3d      	ldr	r3, [pc, #244]	; (8004090 <MX_GPIO_Init+0x118>)
 8003f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fa6:	4b3a      	ldr	r3, [pc, #232]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003faa:	4a39      	ldr	r2, [pc, #228]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fac:	f043 0320 	orr.w	r3, r3, #32
 8003fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fb2:	4b37      	ldr	r3, [pc, #220]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fb6:	f003 0320 	and.w	r3, r3, #32
 8003fba:	60fb      	str	r3, [r7, #12]
 8003fbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fbe:	4b34      	ldr	r3, [pc, #208]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	4a33      	ldr	r2, [pc, #204]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fca:	4b31      	ldr	r3, [pc, #196]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	60bb      	str	r3, [r7, #8]
 8003fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fd6:	4b2e      	ldr	r3, [pc, #184]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	4a2d      	ldr	r2, [pc, #180]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fdc:	f043 0302 	orr.w	r3, r3, #2
 8003fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <MX_GPIO_Init+0x118>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	607b      	str	r3, [r7, #4]
 8003fec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11, GPIO_PIN_RESET);
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f644 0140 	movw	r1, #18496	; 0x4840
 8003ff4:	4827      	ldr	r0, [pc, #156]	; (8004094 <MX_GPIO_Init+0x11c>)
 8003ff6:	f004 fc61 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004004:	f004 fc5a 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8004008:	2200      	movs	r2, #0
 800400a:	21c0      	movs	r1, #192	; 0xc0
 800400c:	4822      	ldr	r0, [pc, #136]	; (8004098 <MX_GPIO_Init+0x120>)
 800400e:	f004 fc55 	bl	80088bc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC14 PC6 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_6|GPIO_PIN_11;
 8004012:	f644 0340 	movw	r3, #18496	; 0x4840
 8004016:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004018:	2301      	movs	r3, #1
 800401a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800401c:	2300      	movs	r3, #0
 800401e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004020:	2300      	movs	r3, #0
 8004022:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004024:	f107 0314 	add.w	r3, r7, #20
 8004028:	4619      	mov	r1, r3
 800402a:	481a      	ldr	r0, [pc, #104]	; (8004094 <MX_GPIO_Init+0x11c>)
 800402c:	f004 faac 	bl	8008588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004034:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004036:	2301      	movs	r3, #1
 8004038:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800403e:	2300      	movs	r3, #0
 8004040:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004042:	f107 0314 	add.w	r3, r7, #20
 8004046:	4619      	mov	r1, r3
 8004048:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800404c:	f004 fa9c 	bl	8008588 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004050:	23c0      	movs	r3, #192	; 0xc0
 8004052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004054:	2301      	movs	r3, #1
 8004056:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004058:	2300      	movs	r3, #0
 800405a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800405c:	2300      	movs	r3, #0
 800405e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4619      	mov	r1, r3
 8004066:	480c      	ldr	r0, [pc, #48]	; (8004098 <MX_GPIO_Init+0x120>)
 8004068:	f004 fa8e 	bl	8008588 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800406c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004070:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004072:	2300      	movs	r3, #0
 8004074:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004076:	2300      	movs	r3, #0
 8004078:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800407a:	f107 0314 	add.w	r3, r7, #20
 800407e:	4619      	mov	r1, r3
 8004080:	4805      	ldr	r0, [pc, #20]	; (8004098 <MX_GPIO_Init+0x120>)
 8004082:	f004 fa81 	bl	8008588 <HAL_GPIO_Init>

}
 8004086:	bf00      	nop
 8004088:	3728      	adds	r7, #40	; 0x28
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	40021000 	.word	0x40021000
 8004094:	48000800 	.word	0x48000800
 8004098:	48000400 	.word	0x48000400

0800409c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	6039      	str	r1, [r7, #0]
 80040a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	db0a      	blt.n	80040c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	b2da      	uxtb	r2, r3
 80040b4:	490c      	ldr	r1, [pc, #48]	; (80040e8 <__NVIC_SetPriority+0x4c>)
 80040b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ba:	0112      	lsls	r2, r2, #4
 80040bc:	b2d2      	uxtb	r2, r2
 80040be:	440b      	add	r3, r1
 80040c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040c4:	e00a      	b.n	80040dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	b2da      	uxtb	r2, r3
 80040ca:	4908      	ldr	r1, [pc, #32]	; (80040ec <__NVIC_SetPriority+0x50>)
 80040cc:	79fb      	ldrb	r3, [r7, #7]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	3b04      	subs	r3, #4
 80040d4:	0112      	lsls	r2, r2, #4
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	440b      	add	r3, r1
 80040da:	761a      	strb	r2, [r3, #24]
}
 80040dc:	bf00      	nop
 80040de:	370c      	adds	r7, #12
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr
 80040e8:	e000e100 	.word	0xe000e100
 80040ec:	e000ed00 	.word	0xe000ed00

080040f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80040f4:	f001 fcd9 	bl	8005aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80040f8:	f000 fada 	bl	80046b0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
	HAL_Delay(100);
 80040fc:	2064      	movs	r0, #100	; 0x64
 80040fe:	f001 fd45 	bl	8005b8c <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004102:	f7ff ff39 	bl	8003f78 <MX_GPIO_Init>
  MX_DMA_Init();
 8004106:	f7fd fd65 	bl	8001bd4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800410a:	f001 fbcd 	bl	80058a8 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800410e:	f001 fa61 	bl	80055d4 <MX_TIM1_Init>
  MX_OPAMP1_Init();
 8004112:	f000 fcdb 	bl	8004acc <MX_OPAMP1_Init>
  MX_OPAMP2_Init();
 8004116:	f000 fd07 	bl	8004b28 <MX_OPAMP2_Init>
  MX_OPAMP3_Init();
 800411a:	f000 fd33 	bl	8004b84 <MX_OPAMP3_Init>
  MX_ADC1_Init();
 800411e:	f7fc ff93 	bl	8001048 <MX_ADC1_Init>
  MX_ADC2_Init();
 8004122:	f7fd f829 	bl	8001178 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 8004126:	f7fd fefd 	bl	8001f24 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
	load_eeprom_regs();
 800412a:	f001 fc87 	bl	8005a3c <load_eeprom_regs>
	/* Sanitize configs in case flash is empty*/
	if(E_ZERO==-1){E_ZERO = 0;}
 800412e:	4baf      	ldr	r3, [pc, #700]	; (80043ec <main+0x2fc>)
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004136:	d102      	bne.n	800413e <main+0x4e>
 8004138:	4bac      	ldr	r3, [pc, #688]	; (80043ec <main+0x2fc>)
 800413a:	2200      	movs	r2, #0
 800413c:	611a      	str	r2, [r3, #16]
	if(isnan(I_BW) || I_BW==-1){I_BW = 1000;}
 800413e:	4bac      	ldr	r3, [pc, #688]	; (80043f0 <main+0x300>)
 8004140:	edd3 7a02 	vldr	s15, [r3, #8]
 8004144:	eef4 7a67 	vcmp.f32	s15, s15
 8004148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800414c:	d609      	bvs.n	8004162 <main+0x72>
 800414e:	4ba8      	ldr	r3, [pc, #672]	; (80043f0 <main+0x300>)
 8004150:	edd3 7a02 	vldr	s15, [r3, #8]
 8004154:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004158:	eef4 7a47 	vcmp.f32	s15, s14
 800415c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004160:	d102      	bne.n	8004168 <main+0x78>
 8004162:	4ba3      	ldr	r3, [pc, #652]	; (80043f0 <main+0x300>)
 8004164:	4aa3      	ldr	r2, [pc, #652]	; (80043f4 <main+0x304>)
 8004166:	609a      	str	r2, [r3, #8]
	if(isnan(I_MAX) || I_MAX ==-1){I_MAX=40;}
 8004168:	4ba1      	ldr	r3, [pc, #644]	; (80043f0 <main+0x300>)
 800416a:	edd3 7a03 	vldr	s15, [r3, #12]
 800416e:	eef4 7a67 	vcmp.f32	s15, s15
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	d609      	bvs.n	800418c <main+0x9c>
 8004178:	4b9d      	ldr	r3, [pc, #628]	; (80043f0 <main+0x300>)
 800417a:	edd3 7a03 	vldr	s15, [r3, #12]
 800417e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004182:	eef4 7a47 	vcmp.f32	s15, s14
 8004186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418a:	d102      	bne.n	8004192 <main+0xa2>
 800418c:	4b98      	ldr	r3, [pc, #608]	; (80043f0 <main+0x300>)
 800418e:	4a9a      	ldr	r2, [pc, #616]	; (80043f8 <main+0x308>)
 8004190:	60da      	str	r2, [r3, #12]
	if(isnan(I_FW_MAX) || I_FW_MAX ==-1){I_FW_MAX=0;}
 8004192:	4b97      	ldr	r3, [pc, #604]	; (80043f0 <main+0x300>)
 8004194:	edd3 7a06 	vldr	s15, [r3, #24]
 8004198:	eef4 7a67 	vcmp.f32	s15, s15
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	d609      	bvs.n	80041b6 <main+0xc6>
 80041a2:	4b93      	ldr	r3, [pc, #588]	; (80043f0 <main+0x300>)
 80041a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80041a8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80041ac:	eef4 7a47 	vcmp.f32	s15, s14
 80041b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b4:	d103      	bne.n	80041be <main+0xce>
 80041b6:	4b8e      	ldr	r3, [pc, #568]	; (80043f0 <main+0x300>)
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	619a      	str	r2, [r3, #24]
	if(CAN_ID==-1){CAN_ID = 1;}
 80041be:	4b8b      	ldr	r3, [pc, #556]	; (80043ec <main+0x2fc>)
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c6:	d102      	bne.n	80041ce <main+0xde>
 80041c8:	4b88      	ldr	r3, [pc, #544]	; (80043ec <main+0x2fc>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	605a      	str	r2, [r3, #4]
	if(CAN_MASTER==-1){CAN_MASTER = 0;}
 80041ce:	4b87      	ldr	r3, [pc, #540]	; (80043ec <main+0x2fc>)
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d6:	d102      	bne.n	80041de <main+0xee>
 80041d8:	4b84      	ldr	r3, [pc, #528]	; (80043ec <main+0x2fc>)
 80041da:	2200      	movs	r2, #0
 80041dc:	609a      	str	r2, [r3, #8]
	if(CAN_TIMEOUT==-1){CAN_TIMEOUT = 0;}
 80041de:	4b83      	ldr	r3, [pc, #524]	; (80043ec <main+0x2fc>)
 80041e0:	68db      	ldr	r3, [r3, #12]
 80041e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e6:	d102      	bne.n	80041ee <main+0xfe>
 80041e8:	4b80      	ldr	r3, [pc, #512]	; (80043ec <main+0x2fc>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	60da      	str	r2, [r3, #12]
	if(isnan(R_NOMINAL) || R_NOMINAL==-1){R_NOMINAL = 0.0f;}
 80041ee:	4b80      	ldr	r3, [pc, #512]	; (80043f0 <main+0x300>)
 80041f0:	edd3 7a07 	vldr	s15, [r3, #28]
 80041f4:	eef4 7a67 	vcmp.f32	s15, s15
 80041f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041fc:	d609      	bvs.n	8004212 <main+0x122>
 80041fe:	4b7c      	ldr	r3, [pc, #496]	; (80043f0 <main+0x300>)
 8004200:	edd3 7a07 	vldr	s15, [r3, #28]
 8004204:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004208:	eef4 7a47 	vcmp.f32	s15, s14
 800420c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004210:	d103      	bne.n	800421a <main+0x12a>
 8004212:	4b77      	ldr	r3, [pc, #476]	; (80043f0 <main+0x300>)
 8004214:	f04f 0200 	mov.w	r2, #0
 8004218:	61da      	str	r2, [r3, #28]
	if(isnan(TEMP_MAX) || TEMP_MAX==-1){TEMP_MAX = 125.0f;}
 800421a:	4b75      	ldr	r3, [pc, #468]	; (80043f0 <main+0x300>)
 800421c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004220:	eef4 7a67 	vcmp.f32	s15, s15
 8004224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004228:	d609      	bvs.n	800423e <main+0x14e>
 800422a:	4b71      	ldr	r3, [pc, #452]	; (80043f0 <main+0x300>)
 800422c:	edd3 7a08 	vldr	s15, [r3, #32]
 8004230:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004234:	eef4 7a47 	vcmp.f32	s15, s14
 8004238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800423c:	d102      	bne.n	8004244 <main+0x154>
 800423e:	4b6c      	ldr	r3, [pc, #432]	; (80043f0 <main+0x300>)
 8004240:	4a6e      	ldr	r2, [pc, #440]	; (80043fc <main+0x30c>)
 8004242:	621a      	str	r2, [r3, #32]
	if(isnan(I_MAX_CONT) || I_MAX_CONT==-1){I_MAX_CONT = 14.0f;}
 8004244:	4b6a      	ldr	r3, [pc, #424]	; (80043f0 <main+0x300>)
 8004246:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800424a:	eef4 7a67 	vcmp.f32	s15, s15
 800424e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004252:	d609      	bvs.n	8004268 <main+0x178>
 8004254:	4b66      	ldr	r3, [pc, #408]	; (80043f0 <main+0x300>)
 8004256:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800425a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800425e:	eef4 7a47 	vcmp.f32	s15, s14
 8004262:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004266:	d102      	bne.n	800426e <main+0x17e>
 8004268:	4b61      	ldr	r3, [pc, #388]	; (80043f0 <main+0x300>)
 800426a:	4a65      	ldr	r2, [pc, #404]	; (8004400 <main+0x310>)
 800426c:	625a      	str	r2, [r3, #36]	; 0x24
	if(isnan(I_CAL)||I_CAL==-1){I_CAL = 5.0f;}
 800426e:	4b60      	ldr	r3, [pc, #384]	; (80043f0 <main+0x300>)
 8004270:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004274:	eef4 7a67 	vcmp.f32	s15, s15
 8004278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427c:	d609      	bvs.n	8004292 <main+0x1a2>
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <main+0x300>)
 8004280:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8004284:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004288:	eef4 7a47 	vcmp.f32	s15, s14
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	d102      	bne.n	8004298 <main+0x1a8>
 8004292:	4b57      	ldr	r3, [pc, #348]	; (80043f0 <main+0x300>)
 8004294:	4a5b      	ldr	r2, [pc, #364]	; (8004404 <main+0x314>)
 8004296:	641a      	str	r2, [r3, #64]	; 0x40
	if(isnan(PPAIRS) || PPAIRS==-1){PPAIRS = 21.0f;}
 8004298:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <main+0x300>)
 800429a:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 800429e:	eef4 7a67 	vcmp.f32	s15, s15
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d609      	bvs.n	80042bc <main+0x1cc>
 80042a8:	4b51      	ldr	r3, [pc, #324]	; (80043f0 <main+0x300>)
 80042aa:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80042ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042b2:	eef4 7a47 	vcmp.f32	s15, s14
 80042b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ba:	d102      	bne.n	80042c2 <main+0x1d2>
 80042bc:	4b4c      	ldr	r3, [pc, #304]	; (80043f0 <main+0x300>)
 80042be:	4a52      	ldr	r2, [pc, #328]	; (8004408 <main+0x318>)
 80042c0:	629a      	str	r2, [r3, #40]	; 0x28
	if(isnan(GR) || GR==-1){GR = 1.0f;}
 80042c2:	4b4b      	ldr	r3, [pc, #300]	; (80043f0 <main+0x300>)
 80042c4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80042c8:	eef4 7a67 	vcmp.f32	s15, s15
 80042cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d0:	d609      	bvs.n	80042e6 <main+0x1f6>
 80042d2:	4b47      	ldr	r3, [pc, #284]	; (80043f0 <main+0x300>)
 80042d4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80042d8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80042dc:	eef4 7a47 	vcmp.f32	s15, s14
 80042e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e4:	d103      	bne.n	80042ee <main+0x1fe>
 80042e6:	4b42      	ldr	r3, [pc, #264]	; (80043f0 <main+0x300>)
 80042e8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80042ec:	63da      	str	r2, [r3, #60]	; 0x3c
	if(isnan(KT) || KT==-1){KT = 1.0f;}
 80042ee:	4b40      	ldr	r3, [pc, #256]	; (80043f0 <main+0x300>)
 80042f0:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80042f4:	eef4 7a67 	vcmp.f32	s15, s15
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	d609      	bvs.n	8004312 <main+0x222>
 80042fe:	4b3c      	ldr	r3, [pc, #240]	; (80043f0 <main+0x300>)
 8004300:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8004304:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004308:	eef4 7a47 	vcmp.f32	s15, s14
 800430c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004310:	d103      	bne.n	800431a <main+0x22a>
 8004312:	4b37      	ldr	r3, [pc, #220]	; (80043f0 <main+0x300>)
 8004314:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8004318:	631a      	str	r2, [r3, #48]	; 0x30
	if(isnan(KP_MAX) || KP_MAX==-1){KP_MAX = 500.0f;}
 800431a:	4b35      	ldr	r3, [pc, #212]	; (80043f0 <main+0x300>)
 800431c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004320:	eef4 7a67 	vcmp.f32	s15, s15
 8004324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004328:	d609      	bvs.n	800433e <main+0x24e>
 800432a:	4b31      	ldr	r3, [pc, #196]	; (80043f0 <main+0x300>)
 800432c:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8004330:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8004334:	eef4 7a47 	vcmp.f32	s15, s14
 8004338:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800433c:	d102      	bne.n	8004344 <main+0x254>
 800433e:	4b2c      	ldr	r3, [pc, #176]	; (80043f0 <main+0x300>)
 8004340:	4a32      	ldr	r2, [pc, #200]	; (800440c <main+0x31c>)
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
	if(isnan(KD_MAX) || KD_MAX==-1){KD_MAX = 5.0f;}
 8004344:	4b2a      	ldr	r3, [pc, #168]	; (80043f0 <main+0x300>)
 8004346:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800434a:	eef4 7a67 	vcmp.f32	s15, s15
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	d609      	bvs.n	8004368 <main+0x278>
 8004354:	4b26      	ldr	r3, [pc, #152]	; (80043f0 <main+0x300>)
 8004356:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 800435a:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800435e:	eef4 7a47 	vcmp.f32	s15, s14
 8004362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004366:	d102      	bne.n	800436e <main+0x27e>
 8004368:	4b21      	ldr	r3, [pc, #132]	; (80043f0 <main+0x300>)
 800436a:	4a26      	ldr	r2, [pc, #152]	; (8004404 <main+0x314>)
 800436c:	659a      	str	r2, [r3, #88]	; 0x58
	if(isnan(P_MAX)){P_MAX = 12.5f;}
 800436e:	4b20      	ldr	r3, [pc, #128]	; (80043f0 <main+0x300>)
 8004370:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004374:	eef4 7a67 	vcmp.f32	s15, s15
 8004378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437c:	d702      	bvc.n	8004384 <main+0x294>
 800437e:	4b1c      	ldr	r3, [pc, #112]	; (80043f0 <main+0x300>)
 8004380:	4a23      	ldr	r2, [pc, #140]	; (8004410 <main+0x320>)
 8004382:	649a      	str	r2, [r3, #72]	; 0x48
	if(isnan(P_MIN)){P_MIN = -12.5f;}
 8004384:	4b1a      	ldr	r3, [pc, #104]	; (80043f0 <main+0x300>)
 8004386:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 800438a:	eef4 7a67 	vcmp.f32	s15, s15
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	d702      	bvc.n	800439a <main+0x2aa>
 8004394:	4b16      	ldr	r3, [pc, #88]	; (80043f0 <main+0x300>)
 8004396:	4a1f      	ldr	r2, [pc, #124]	; (8004414 <main+0x324>)
 8004398:	645a      	str	r2, [r3, #68]	; 0x44
	if(isnan(V_MAX)){V_MAX = 200.0f;}
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <main+0x300>)
 800439c:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80043a0:	eef4 7a67 	vcmp.f32	s15, s15
 80043a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043a8:	d702      	bvc.n	80043b0 <main+0x2c0>
 80043aa:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <main+0x300>)
 80043ac:	4a1a      	ldr	r2, [pc, #104]	; (8004418 <main+0x328>)
 80043ae:	651a      	str	r2, [r3, #80]	; 0x50
	if(isnan(V_MIN)){V_MIN = -200.0f;}
 80043b0:	4b0f      	ldr	r3, [pc, #60]	; (80043f0 <main+0x300>)
 80043b2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80043b6:	eef4 7a67 	vcmp.f32	s15, s15
 80043ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043be:	d702      	bvc.n	80043c6 <main+0x2d6>
 80043c0:	4b0b      	ldr	r3, [pc, #44]	; (80043f0 <main+0x300>)
 80043c2:	4a16      	ldr	r2, [pc, #88]	; (800441c <main+0x32c>)
 80043c4:	64da      	str	r2, [r3, #76]	; 0x4c
	if(isnan(MECH_ZERO)){MECH_ZERO = 0.0f;}
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <main+0x300>)
 80043c8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80043cc:	eef4 7a67 	vcmp.f32	s15, s15
 80043d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043d4:	d703      	bvc.n	80043de <main+0x2ee>
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <main+0x300>)
 80043d8:	f04f 0200 	mov.w	r2, #0
 80043dc:	65da      	str	r2, [r3, #92]	; 0x5c
	if(isnan(T_MAX)){T_MAX = 10.0f;}
 80043de:	4b04      	ldr	r3, [pc, #16]	; (80043f0 <main+0x300>)
 80043e0:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 80043e4:	eef4 7a67 	vcmp.f32	s15, s15
 80043e8:	e01a      	b.n	8004420 <main+0x330>
 80043ea:	bf00      	nop
 80043ec:	20004d50 	.word	0x20004d50
 80043f0:	20004c50 	.word	0x20004c50
 80043f4:	447a0000 	.word	0x447a0000
 80043f8:	42200000 	.word	0x42200000
 80043fc:	42fa0000 	.word	0x42fa0000
 8004400:	41600000 	.word	0x41600000
 8004404:	40a00000 	.word	0x40a00000
 8004408:	41a80000 	.word	0x41a80000
 800440c:	43fa0000 	.word	0x43fa0000
 8004410:	41480000 	.word	0x41480000
 8004414:	c1480000 	.word	0xc1480000
 8004418:	43480000 	.word	0x43480000
 800441c:	c3480000 	.word	0xc3480000
 8004420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004424:	d702      	bvc.n	800442c <main+0x33c>
 8004426:	4b80      	ldr	r3, [pc, #512]	; (8004628 <main+0x538>)
 8004428:	4a80      	ldr	r2, [pc, #512]	; (800462c <main+0x53c>)
 800442a:	661a      	str	r2, [r3, #96]	; 0x60

	printf("\r\nFirmware Version Number: %.2f\r\n", VERSION_NUM);
 800442c:	f04f 0200 	mov.w	r2, #0
 8004430:	4b7f      	ldr	r3, [pc, #508]	; (8004630 <main+0x540>)
 8004432:	4880      	ldr	r0, [pc, #512]	; (8004634 <main+0x544>)
 8004434:	f009 f950 	bl	800d6d8 <iprintf>
	/* Controller Setup */
	init_controller_params(&controller);
 8004438:	487f      	ldr	r0, [pc, #508]	; (8004638 <main+0x548>)
 800443a:	f7fe facd 	bl	80029d8 <init_controller_params>

	/* calibration "encoder" zeroing */
	memset(&comm_encoder_cal.cal_position, 0, sizeof(EncoderStruct));
 800443e:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8004442:	2100      	movs	r1, #0
 8004444:	487d      	ldr	r0, [pc, #500]	; (800463c <main+0x54c>)
 8004446:	f008 fcd5 	bl	800cdf4 <memset>

	/* commutation encoder setup */
	comm_encoder.e_zero = E_ZERO;
 800444a:	4b7d      	ldr	r3, [pc, #500]	; (8004640 <main+0x550>)
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	4a7d      	ldr	r2, [pc, #500]	; (8004644 <main+0x554>)
 8004450:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac
	comm_encoder.ppairs = PPAIRS;
 8004454:	4b74      	ldr	r3, [pc, #464]	; (8004628 <main+0x538>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	4a7a      	ldr	r2, [pc, #488]	; (8004644 <main+0x554>)
 800445a:	6553      	str	r3, [r2, #84]	; 0x54
	comm_encoder.mech_zero = MECH_ZERO;
 800445c:	4b72      	ldr	r3, [pc, #456]	; (8004628 <main+0x538>)
 800445e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004460:	4a78      	ldr	r2, [pc, #480]	; (8004644 <main+0x554>)
 8004462:	f8c2 31b4 	str.w	r3, [r2, #436]	; 0x1b4
	ps_warmup(&comm_encoder, 100);			// clear the noisy data when the encoder first turns on
 8004466:	2164      	movs	r1, #100	; 0x64
 8004468:	4876      	ldr	r0, [pc, #472]	; (8004644 <main+0x554>)
 800446a:	f000 fc2f 	bl	8004ccc <ps_warmup>
	ps_sample(&comm_encoder, DT);
 800446e:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8004648 <main+0x558>
 8004472:	4874      	ldr	r0, [pc, #464]	; (8004644 <main+0x554>)
 8004474:	f000 fc36 	bl	8004ce4 <ps_sample>
	ps_sample(&comm_encoder, DT);
 8004478:	ed9f 0a73 	vldr	s0, [pc, #460]	; 8004648 <main+0x558>
 800447c:	4871      	ldr	r0, [pc, #452]	; (8004644 <main+0x554>)
 800447e:	f000 fc31 	bl	8004ce4 <ps_sample>
	ps_sample(&comm_encoder, DT);
 8004482:	ed9f 0a71 	vldr	s0, [pc, #452]	; 8004648 <main+0x558>
 8004486:	486f      	ldr	r0, [pc, #444]	; (8004644 <main+0x554>)
 8004488:	f000 fc2c 	bl	8004ce4 <ps_sample>
	if(comm_encoder.angle_multiturn[0]>PI_F){
 800448c:	4b6d      	ldr	r3, [pc, #436]	; (8004644 <main+0x554>)
 800448e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004492:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 800464c <main+0x55c>
 8004496:	eef4 7ac7 	vcmpe.f32	s15, s14
 800449a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800449e:	dd12      	ble.n	80044c6 <main+0x3d6>
	comm_encoder.angle_multiturn[0]-=TWO_PI_F;
 80044a0:	4b68      	ldr	r3, [pc, #416]	; (8004644 <main+0x554>)
 80044a2:	edd3 7a03 	vldr	s15, [r3, #12]
 80044a6:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8004650 <main+0x560>
 80044aa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80044ae:	4b65      	ldr	r3, [pc, #404]	; (8004644 <main+0x554>)
 80044b0:	edc3 7a03 	vstr	s15, [r3, #12]
	comm_encoder.turns--;
 80044b4:	4b63      	ldr	r3, [pc, #396]	; (8004644 <main+0x554>)
 80044b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044b8:	3b01      	subs	r3, #1
 80044ba:	4a62      	ldr	r2, [pc, #392]	; (8004644 <main+0x554>)
 80044bc:	66d3      	str	r3, [r2, #108]	; 0x6c
	printf("Added\r\n");
 80044be:	4865      	ldr	r0, [pc, #404]	; (8004654 <main+0x564>)
 80044c0:	f009 f990 	bl	800d7e4 <puts>
 80044c4:	e01b      	b.n	80044fe <main+0x40e>
	}
	else if(comm_encoder.angle_multiturn[0]<-PI_F){
 80044c6:	4b5f      	ldr	r3, [pc, #380]	; (8004644 <main+0x554>)
 80044c8:	edd3 7a03 	vldr	s15, [r3, #12]
 80044cc:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8004658 <main+0x568>
 80044d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80044d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d8:	d511      	bpl.n	80044fe <main+0x40e>
	comm_encoder.angle_multiturn[0] += TWO_PI_F;
 80044da:	4b5a      	ldr	r3, [pc, #360]	; (8004644 <main+0x554>)
 80044dc:	edd3 7a03 	vldr	s15, [r3, #12]
 80044e0:	ed9f 7a5b 	vldr	s14, [pc, #364]	; 8004650 <main+0x560>
 80044e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80044e8:	4b56      	ldr	r3, [pc, #344]	; (8004644 <main+0x554>)
 80044ea:	edc3 7a03 	vstr	s15, [r3, #12]
	comm_encoder.turns++;
 80044ee:	4b55      	ldr	r3, [pc, #340]	; (8004644 <main+0x554>)
 80044f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044f2:	3301      	adds	r3, #1
 80044f4:	4a53      	ldr	r2, [pc, #332]	; (8004644 <main+0x554>)
 80044f6:	66d3      	str	r3, [r2, #108]	; 0x6c
	printf("Subtracted\r\n");
 80044f8:	4858      	ldr	r0, [pc, #352]	; (800465c <main+0x56c>)
 80044fa:	f009 f973 	bl	800d7e4 <puts>
	}


	if(EN_ENC_LINEARIZATION){memcpy(&comm_encoder.offset_lut, &ENCODER_LUT, sizeof(comm_encoder.offset_lut));}	// Copy the linearization lookup table
	else{memset(&comm_encoder.offset_lut, 0, sizeof(comm_encoder.offset_lut));}
 80044fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004502:	2100      	movs	r1, #0
 8004504:	4856      	ldr	r0, [pc, #344]	; (8004660 <main+0x570>)
 8004506:	f008 fc75 	bl	800cdf4 <memset>

	/* Turn on ADCs */
	HAL_OPAMP_Start(&hopamp1);
 800450a:	4856      	ldr	r0, [pc, #344]	; (8004664 <main+0x574>)
 800450c:	f004 fabe 	bl	8008a8c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp2);
 8004510:	4855      	ldr	r0, [pc, #340]	; (8004668 <main+0x578>)
 8004512:	f004 fabb 	bl	8008a8c <HAL_OPAMP_Start>
	HAL_OPAMP_Start(&hopamp3);
 8004516:	4855      	ldr	r0, [pc, #340]	; (800466c <main+0x57c>)
 8004518:	f004 fab8 	bl	8008a8c <HAL_OPAMP_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t *)controller.ADC1_Val, 2);
 800451c:	2202      	movs	r2, #2
 800451e:	4954      	ldr	r1, [pc, #336]	; (8004670 <main+0x580>)
 8004520:	4854      	ldr	r0, [pc, #336]	; (8004674 <main+0x584>)
 8004522:	f001 fefd 	bl	8006320 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_DMA(&hadc2, (uint32_t *)controller.ADC2_Val, 2);
 8004526:	2202      	movs	r2, #2
 8004528:	4953      	ldr	r1, [pc, #332]	; (8004678 <main+0x588>)
 800452a:	4854      	ldr	r0, [pc, #336]	; (800467c <main+0x58c>)
 800452c:	f001 fef8 	bl	8006320 <HAL_ADC_Start_DMA>

	disable_gd(&controller);
 8004530:	4841      	ldr	r0, [pc, #260]	; (8004638 <main+0x548>)
 8004532:	f7ff fcaf 	bl	8003e94 <disable_gd>
	HAL_Delay(10);
 8004536:	200a      	movs	r0, #10
 8004538:	f001 fb28 	bl	8005b8c <HAL_Delay>

	zero_current(&controller);
 800453c:	483e      	ldr	r0, [pc, #248]	; (8004638 <main+0x548>)
 800453e:	f7fe f9f9 	bl	8002934 <zero_current>
	HAL_Delay(100);
 8004542:	2064      	movs	r0, #100	; 0x64
 8004544:	f001 fb22 	bl	8005b8c <HAL_Delay>
	printf("ADC A OFFSET: %d     ADC B OFFSET: %d     ADC C OFFSET: %d\r\n", controller.adc_a_offset, controller.adc_b_offset, controller.adc_c_offset);
 8004548:	4b3b      	ldr	r3, [pc, #236]	; (8004638 <main+0x548>)
 800454a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800454e:	4b3a      	ldr	r3, [pc, #232]	; (8004638 <main+0x548>)
 8004550:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8004554:	4b38      	ldr	r3, [pc, #224]	; (8004638 <main+0x548>)
 8004556:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800455a:	4849      	ldr	r0, [pc, #292]	; (8004680 <main+0x590>)
 800455c:	f009 f8bc 	bl	800d6d8 <iprintf>
	printf("Vbus: %f\r\n",controller.v_bus);
 8004560:	4b35      	ldr	r3, [pc, #212]	; (8004638 <main+0x548>)
 8004562:	6a1b      	ldr	r3, [r3, #32]
 8004564:	4618      	mov	r0, r3
 8004566:	f7fc f817 	bl	8000598 <__aeabi_f2d>
 800456a:	4602      	mov	r2, r0
 800456c:	460b      	mov	r3, r1
 800456e:	4845      	ldr	r0, [pc, #276]	; (8004684 <main+0x594>)
 8004570:	f009 f8b2 	bl	800d6d8 <iprintf>
	/* Turn on PWM */
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004574:	2100      	movs	r1, #0
 8004576:	4844      	ldr	r0, [pc, #272]	; (8004688 <main+0x598>)
 8004578:	f005 fbb6 	bl	8009ce8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800457c:	2104      	movs	r1, #4
 800457e:	4842      	ldr	r0, [pc, #264]	; (8004688 <main+0x598>)
 8004580:	f005 fbb2 	bl	8009ce8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004584:	2108      	movs	r1, #8
 8004586:	4840      	ldr	r0, [pc, #256]	; (8004688 <main+0x598>)
 8004588:	f005 fbae 	bl	8009ce8 <HAL_TIM_PWM_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 800458c:	2100      	movs	r1, #0
 800458e:	483e      	ldr	r0, [pc, #248]	; (8004688 <main+0x598>)
 8004590:	f006 fcaa 	bl	800aee8 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004594:	2104      	movs	r1, #4
 8004596:	483c      	ldr	r0, [pc, #240]	; (8004688 <main+0x598>)
 8004598:	f006 fca6 	bl	800aee8 <HAL_TIMEx_PWMN_Start>
	HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 800459c:	2108      	movs	r1, #8
 800459e:	483a      	ldr	r0, [pc, #232]	; (8004688 <main+0x598>)
 80045a0:	f006 fca2 	bl	800aee8 <HAL_TIMEx_PWMN_Start>

//	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
//	htim4.Instance->CCR1 = ((htim4.Instance->ARR))*(0.5f);
	HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_SET); //CS High
 80045a4:	2201      	movs	r2, #1
 80045a6:	2140      	movs	r1, #64	; 0x40
 80045a8:	4838      	ldr	r0, [pc, #224]	; (800468c <main+0x59c>)
 80045aa:	f004 f987 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_SET); //CS High
 80045ae:	2201      	movs	r2, #1
 80045b0:	2180      	movs	r1, #128	; 0x80
 80045b2:	4836      	ldr	r0, [pc, #216]	; (800468c <main+0x59c>)
 80045b4:	f004 f982 	bl	80088bc <HAL_GPIO_WritePin>

	disable_gd(&controller);
 80045b8:	481f      	ldr	r0, [pc, #124]	; (8004638 <main+0x548>)
 80045ba:	f7ff fc6b 	bl	8003e94 <disable_gd>

	/* CAN setup */
	HAL_GPIO_WritePin(CAN_SHDWN, GPIO_PIN_RESET); //Enable CAN
 80045be:	2200      	movs	r2, #0
 80045c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80045c4:	4832      	ldr	r0, [pc, #200]	; (8004690 <main+0x5a0>)
 80045c6:	f004 f979 	bl	80088bc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(CAN_TERM, GPIO_PIN_RESET ); //Disable CAN termination resistor
 80045ca:	2200      	movs	r2, #0
 80045cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045d0:	482f      	ldr	r0, [pc, #188]	; (8004690 <main+0x5a0>)
 80045d2:	f004 f973 	bl	80088bc <HAL_GPIO_WritePin>


	can_rx_init(&can_rx);
 80045d6:	482f      	ldr	r0, [pc, #188]	; (8004694 <main+0x5a4>)
 80045d8:	f7fd fd4c 	bl	8002074 <can_rx_init>
	can_tx_init(&can_tx);
 80045dc:	482e      	ldr	r0, [pc, #184]	; (8004698 <main+0x5a8>)
 80045de:	f7fd fd79 	bl	80020d4 <can_tx_init>

	HAL_FDCAN_Start(&CAN_H); //start CAN
 80045e2:	482e      	ldr	r0, [pc, #184]	; (800469c <main+0x5ac>)
 80045e4:	f003 fb45 	bl	8007c72 <HAL_FDCAN_Start>

	/* Set Interrupt Priorities */
	NVIC_SetPriority(PWM_ISR, 1);
 80045e8:	2101      	movs	r1, #1
 80045ea:	2019      	movs	r0, #25
 80045ec:	f7ff fd56 	bl	800409c <__NVIC_SetPriority>

	/* Start the FSM */
	state.state = MENU_MODE;
 80045f0:	4b2b      	ldr	r3, [pc, #172]	; (80046a0 <main+0x5b0>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
	state.next_state = MENU_MODE;
 80045f6:	4b2a      	ldr	r3, [pc, #168]	; (80046a0 <main+0x5b0>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	705a      	strb	r2, [r3, #1]
	state.ready = 1;
 80045fc:	4b28      	ldr	r3, [pc, #160]	; (80046a0 <main+0x5b0>)
 80045fe:	2201      	movs	r2, #1
 8004600:	70da      	strb	r2, [r3, #3]

	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8004602:	2201      	movs	r2, #1
 8004604:	4927      	ldr	r1, [pc, #156]	; (80046a4 <main+0x5b4>)
 8004606:	4828      	ldr	r0, [pc, #160]	; (80046a8 <main+0x5b8>)
 8004608:	f006 ffa8 	bl	800b55c <HAL_UART_Receive_IT>
	HAL_TIM_Base_Start_IT(&htim1);
 800460c:	481e      	ldr	r0, [pc, #120]	; (8004688 <main+0x598>)
 800460e:	f005 fa9f 	bl	8009b50 <HAL_TIM_Base_Start_IT>
//		controller.fet_temp_C = present_temperature_K-Kelvin;
//		printf("%f\r\n",controller.fet_temp_C);
//	  if(controller.isEnabled){
//	  printf("%.3f %.3f %.3f %.3f %.3f\r\n", controller.p_des, controller.theta_mech, controller.dtheta_mech, controller.i_q_des, controller.i_q);
//	  }
	  HAL_Delay(10);
 8004612:	200a      	movs	r0, #10
 8004614:	f001 faba 	bl	8005b8c <HAL_Delay>
	  printf("%d\r\n",comm_encoder.raw);
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <main+0x554>)
 800461a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800461c:	4619      	mov	r1, r3
 800461e:	4823      	ldr	r0, [pc, #140]	; (80046ac <main+0x5bc>)
 8004620:	f009 f85a 	bl	800d6d8 <iprintf>
	  HAL_Delay(10);
 8004624:	e7f5      	b.n	8004612 <main+0x522>
 8004626:	bf00      	nop
 8004628:	20004c50 	.word	0x20004c50
 800462c:	41200000 	.word	0x41200000
 8004630:	3ff00000 	.word	0x3ff00000
 8004634:	08011dac 	.word	0x08011dac
 8004638:	2000041c 	.word	0x2000041c
 800463c:	20004a18 	.word	0x20004a18
 8004640:	20004d50 	.word	0x20004d50
 8004644:	20000734 	.word	0x20000734
 8004648:	388bcf64 	.word	0x388bcf64
 800464c:	40490fdb 	.word	0x40490fdb
 8004650:	40c90fdb 	.word	0x40c90fdb
 8004654:	08011dd0 	.word	0x08011dd0
 8004658:	c0490fdb 	.word	0xc0490fdb
 800465c:	08011dd8 	.word	0x08011dd8
 8004660:	200007e4 	.word	0x200007e4
 8004664:	20004f50 	.word	0x20004f50
 8004668:	20004f8c 	.word	0x20004f8c
 800466c:	20004fc8 	.word	0x20004fc8
 8004670:	20000714 	.word	0x20000714
 8004674:	2000021c 	.word	0x2000021c
 8004678:	2000071a 	.word	0x2000071a
 800467c:	20000288 	.word	0x20000288
 8004680:	08011de4 	.word	0x08011de4
 8004684:	08011e24 	.word	0x08011e24
 8004688:	20005008 	.word	0x20005008
 800468c:	48000400 	.word	0x48000400
 8004690:	48000800 	.word	0x48000800
 8004694:	20004c00 	.word	0x20004c00
 8004698:	20004bd4 	.word	0x20004bd4
 800469c:	200003b8 	.word	0x200003b8
 80046a0:	20000724 	.word	0x20000724
 80046a4:	20004c4c 	.word	0x20004c4c
 80046a8:	20005054 	.word	0x20005054
 80046ac:	08011e30 	.word	0x08011e30

080046b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b0a4      	sub	sp, #144	; 0x90
 80046b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046b6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80046ba:	2238      	movs	r2, #56	; 0x38
 80046bc:	2100      	movs	r1, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	f008 fb98 	bl	800cdf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046c4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80046c8:	2200      	movs	r2, #0
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	605a      	str	r2, [r3, #4]
 80046ce:	609a      	str	r2, [r3, #8]
 80046d0:	60da      	str	r2, [r3, #12]
 80046d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80046d4:	463b      	mov	r3, r7
 80046d6:	2244      	movs	r2, #68	; 0x44
 80046d8:	2100      	movs	r1, #0
 80046da:	4618      	mov	r0, r3
 80046dc:	f008 fb8a 	bl	800cdf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80046e0:	2000      	movs	r0, #0
 80046e2:	f004 fa05 	bl	8008af0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80046e6:	2301      	movs	r3, #1
 80046e8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80046ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80046ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80046f0:	2302      	movs	r3, #2
 80046f2:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80046f4:	2303      	movs	r3, #3
 80046f6:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80046f8:	2302      	movs	r3, #2
 80046fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 80046fc:	2354      	movs	r3, #84	; 0x54
 80046fe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004702:	2302      	movs	r3, #2
 8004704:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8004708:	2302      	movs	r3, #2
 800470a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800470e:	2302      	movs	r3, #2
 8004710:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004714:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8004718:	4618      	mov	r0, r3
 800471a:	f004 fa9d 	bl	8008c58 <HAL_RCC_OscConfig>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d001      	beq.n	8004728 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8004724:	f000 f82d 	bl	8004782 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004728:	230f      	movs	r3, #15
 800472a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800472c:	2303      	movs	r3, #3
 800472e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004730:	2300      	movs	r3, #0
 8004732:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004734:	2300      	movs	r3, #0
 8004736:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004738:	2300      	movs	r3, #0
 800473a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800473c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8004740:	2104      	movs	r1, #4
 8004742:	4618      	mov	r0, r3
 8004744:	f004 fda0 	bl	8009288 <HAL_RCC_ClockConfig>
 8004748:	4603      	mov	r3, r0
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800474e:	f000 f818 	bl	8004782 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_ADC12
 8004752:	f249 0302 	movw	r3, #36866	; 0x9002
 8004756:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_FDCAN;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004758:	2300      	movs	r3, #0
 800475a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 800475c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004760:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004762:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004766:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004768:	463b      	mov	r3, r7
 800476a:	4618      	mov	r0, r3
 800476c:	f004 ffa8 	bl	80096c0 <HAL_RCCEx_PeriphCLKConfig>
 8004770:	4603      	mov	r3, r0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8004776:	f000 f804 	bl	8004782 <Error_Handler>
  }
}
 800477a:	bf00      	nop
 800477c:	3790      	adds	r7, #144	; 0x90
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004782:	b480      	push	{r7}
 8004784:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004786:	b672      	cpsid	i
}
 8004788:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800478a:	e7fe      	b.n	800478a <Error_Handler+0x8>

0800478c <fast_fmaxf>:

#include "math_ops.h"
#include "lookup.h"


float fast_fmaxf(float x, float y){
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	ed87 0a01 	vstr	s0, [r7, #4]
 8004796:	edc7 0a00 	vstr	s1, [r7]
    /// Returns maximum of x, y ///
    return (((x)>(y))?(x):(y));
 800479a:	ed97 7a01 	vldr	s14, [r7, #4]
 800479e:	edd7 7a00 	vldr	s15, [r7]
 80047a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047aa:	dd01      	ble.n	80047b0 <fast_fmaxf+0x24>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	e000      	b.n	80047b2 <fast_fmaxf+0x26>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	ee07 3a90 	vmov	s15, r3
    }
 80047b6:	eeb0 0a67 	vmov.f32	s0, s15
 80047ba:	370c      	adds	r7, #12
 80047bc:	46bd      	mov	sp, r7
 80047be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c2:	4770      	bx	lr

080047c4 <fast_fminf>:

float fast_fminf(float x, float y){
 80047c4:	b480      	push	{r7}
 80047c6:	b083      	sub	sp, #12
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80047ce:	edc7 0a00 	vstr	s1, [r7]
    /// Returns minimum of x, y ///
    return (((x)<(y))?(x):(y));
 80047d2:	ed97 7a01 	vldr	s14, [r7, #4]
 80047d6:	edd7 7a00 	vldr	s15, [r7]
 80047da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047e2:	d501      	bpl.n	80047e8 <fast_fminf+0x24>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	e000      	b.n	80047ea <fast_fminf+0x26>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	ee07 3a90 	vmov	s15, r3
    }
 80047ee:	eeb0 0a67 	vmov.f32	s0, s15
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <fmaxf3>:

float fmaxf3(float x, float y, float z){
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	ed87 0a03 	vstr	s0, [r7, #12]
 8004806:	edc7 0a02 	vstr	s1, [r7, #8]
 800480a:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns maximum of x, y, z ///
    return (x > y ? (x > z ? x : z) : (y > z ? y : z));
 800480e:	ed97 7a03 	vldr	s14, [r7, #12]
 8004812:	edd7 7a02 	vldr	s15, [r7, #8]
 8004816:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800481a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800481e:	dd0c      	ble.n	800483a <fmaxf3+0x3e>
 8004820:	ed97 7a03 	vldr	s14, [r7, #12]
 8004824:	edd7 7a01 	vldr	s15, [r7, #4]
 8004828:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800482c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004830:	dd01      	ble.n	8004836 <fmaxf3+0x3a>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	e00d      	b.n	8004852 <fmaxf3+0x56>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	e00b      	b.n	8004852 <fmaxf3+0x56>
 800483a:	ed97 7a02 	vldr	s14, [r7, #8]
 800483e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004842:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	dd01      	ble.n	8004850 <fmaxf3+0x54>
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	e000      	b.n	8004852 <fmaxf3+0x56>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	ee07 3a90 	vmov	s15, r3
    }
 8004856:	eeb0 0a67 	vmov.f32	s0, s15
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <fminf3>:

float fminf3(float x, float y, float z){
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	ed87 0a03 	vstr	s0, [r7, #12]
 800486e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004872:	ed87 1a01 	vstr	s2, [r7, #4]
    /// Returns minimum of x, y, z ///
    return (x < y ? (x < z ? x : z) : (y < z ? y : z));
 8004876:	ed97 7a03 	vldr	s14, [r7, #12]
 800487a:	edd7 7a02 	vldr	s15, [r7, #8]
 800487e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004882:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004886:	d50c      	bpl.n	80048a2 <fminf3+0x3e>
 8004888:	ed97 7a03 	vldr	s14, [r7, #12]
 800488c:	edd7 7a01 	vldr	s15, [r7, #4]
 8004890:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004898:	d501      	bpl.n	800489e <fminf3+0x3a>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	e00d      	b.n	80048ba <fminf3+0x56>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	e00b      	b.n	80048ba <fminf3+0x56>
 80048a2:	ed97 7a02 	vldr	s14, [r7, #8]
 80048a6:	edd7 7a01 	vldr	s15, [r7, #4]
 80048aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048b2:	d501      	bpl.n	80048b8 <fminf3+0x54>
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	e000      	b.n	80048ba <fminf3+0x56>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	ee07 3a90 	vmov	s15, r3
    }
 80048be:	eeb0 0a67 	vmov.f32	s0, s15
 80048c2:	3714      	adds	r7, #20
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <limit_norm>:
float roundf(float x){
    /// Returns nearest integer ///
    return x < 0.0f ? ceilf(x - 0.5f) : floorf(x + 0.5f);
    }
  */
void limit_norm(float *x, float *y, float limit){
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	ed87 0a01 	vstr	s0, [r7, #4]
    /// Scales the lenght of vector (x, y) to be <= limit ///
    float norm = sqrtf(*x * *x + *y * *y);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	ed93 7a00 	vldr	s14, [r3]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	edd3 7a00 	vldr	s15, [r3]
 80048e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	edd3 6a00 	vldr	s13, [r3]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	edd3 7a00 	vldr	s15, [r3]
 80048f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004902:	f00c fc99 	bl	8011238 <sqrtf>
 8004906:	ed87 0a05 	vstr	s0, [r7, #20]
    if(norm > limit){
 800490a:	ed97 7a05 	vldr	s14, [r7, #20]
 800490e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004912:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491a:	dc00      	bgt.n	800491e <limit_norm+0x52>
        *x = *x * limit/norm;
        *y = *y * limit/norm;
        }
    }
 800491c:	e01b      	b.n	8004956 <limit_norm+0x8a>
        *x = *x * limit/norm;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	ed93 7a00 	vldr	s14, [r3]
 8004924:	edd7 7a01 	vldr	s15, [r7, #4]
 8004928:	ee67 6a27 	vmul.f32	s13, s14, s15
 800492c:	ed97 7a05 	vldr	s14, [r7, #20]
 8004930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	edc3 7a00 	vstr	s15, [r3]
        *y = *y * limit/norm;
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	ed93 7a00 	vldr	s14, [r3]
 8004940:	edd7 7a01 	vldr	s15, [r7, #4]
 8004944:	ee67 6a27 	vmul.f32	s13, s14, s15
 8004948:	ed97 7a05 	vldr	s14, [r7, #20]
 800494c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	edc3 7a00 	vstr	s15, [r3]
    }
 8004956:	bf00      	nop
 8004958:	3718      	adds	r7, #24
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <float_to_uint>:
    
void limit(float *x, float min, float max){
    *x = fast_fmaxf(fast_fminf(*x, max), min);
    }

int float_to_uint(float x, float x_min, float x_max, int bits){
 800495e:	b480      	push	{r7}
 8004960:	b087      	sub	sp, #28
 8004962:	af00      	add	r7, sp, #0
 8004964:	ed87 0a03 	vstr	s0, [r7, #12]
 8004968:	edc7 0a02 	vstr	s1, [r7, #8]
 800496c:	ed87 1a01 	vstr	s2, [r7, #4]
 8004970:	6038      	str	r0, [r7, #0]
    /// Converts a float to an unsigned int, given range and number of bits ///
    float span = x_max - x_min;
 8004972:	ed97 7a01 	vldr	s14, [r7, #4]
 8004976:	edd7 7a02 	vldr	s15, [r7, #8]
 800497a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800497e:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	613b      	str	r3, [r7, #16]
    return (int) ((x-offset)*((float)((1<<bits)-1))/span);
 8004986:	ed97 7a03 	vldr	s14, [r7, #12]
 800498a:	edd7 7a04 	vldr	s15, [r7, #16]
 800498e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004992:	2201      	movs	r2, #1
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	fa02 f303 	lsl.w	r3, r2, r3
 800499a:	3b01      	subs	r3, #1
 800499c:	ee07 3a90 	vmov	s15, r3
 80049a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80049a4:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80049ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049b4:	ee17 3a90 	vmov	r3, s15
    }
 80049b8:	4618      	mov	r0, r3
 80049ba:	371c      	adds	r7, #28
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <uint_to_float>:
    
    
float uint_to_float(int x_int, float x_min, float x_max, int bits){
 80049c4:	b480      	push	{r7}
 80049c6:	b087      	sub	sp, #28
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80049d0:	edc7 0a01 	vstr	s1, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]
    /// converts unsigned int to float, given range and number of bits ///
    float span = x_max - x_min;
 80049d6:	ed97 7a01 	vldr	s14, [r7, #4]
 80049da:	edd7 7a02 	vldr	s15, [r7, #8]
 80049de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80049e2:	edc7 7a05 	vstr	s15, [r7, #20]
    float offset = x_min;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	613b      	str	r3, [r7, #16]
    return ((float)x_int)*span/((float)((1<<bits)-1)) + offset;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	ee07 3a90 	vmov	s15, r3
 80049f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80049f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80049f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80049fc:	2201      	movs	r2, #1
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	fa02 f303 	lsl.w	r3, r2, r3
 8004a04:	3b01      	subs	r3, #1
 8004a06:	ee07 3a90 	vmov	s15, r3
 8004a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004a0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a12:	edd7 7a04 	vldr	s15, [r7, #16]
 8004a16:	ee77 7a27 	vadd.f32	s15, s14, s15
    }
 8004a1a:	eeb0 0a67 	vmov.f32	s0, s15
 8004a1e:	371c      	adds	r7, #28
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <sin_lut>:

float sin_lut(float theta){
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = fmodf(theta, TWO_PI_F);
 8004a32:	eddf 0a17 	vldr	s1, [pc, #92]	; 8004a90 <sin_lut+0x68>
 8004a36:	ed97 0a01 	vldr	s0, [r7, #4]
 8004a3a:	f00c fbdd 	bl	80111f8 <fmodf>
 8004a3e:	ed87 0a01 	vstr	s0, [r7, #4]
	theta = theta<0 ? theta + TWO_PI_F : theta;
 8004a42:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a46:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004a4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a4e:	d506      	bpl.n	8004a5e <sin_lut+0x36>
 8004a50:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a54:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8004a90 <sin_lut+0x68>
 8004a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004a5c:	e001      	b.n	8004a62 <sin_lut+0x3a>
 8004a5e:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a62:	edc7 7a01 	vstr	s15, [r7, #4]

	return sin_tab[(int) (LUT_MULT*theta)];
 8004a66:	edd7 7a01 	vldr	s15, [r7, #4]
 8004a6a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8004a94 <sin_lut+0x6c>
 8004a6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004a72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a76:	ee17 3a90 	vmov	r3, s15
 8004a7a:	4a07      	ldr	r2, [pc, #28]	; (8004a98 <sin_lut+0x70>)
 8004a7c:	009b      	lsls	r3, r3, #2
 8004a7e:	4413      	add	r3, r2
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	ee07 3a90 	vmov	s15, r3
}
 8004a86:	eeb0 0a67 	vmov.f32	s0, s15
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	40c90fdb 	.word	0x40c90fdb
 8004a94:	42a2f983 	.word	0x42a2f983
 8004a98:	08011eb4 	.word	0x08011eb4

08004a9c <cos_lut>:

float cos_lut(float theta){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lut(PI_OVER_2_F - theta);
 8004aa6:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8004ac8 <cos_lut+0x2c>
 8004aaa:	edd7 7a01 	vldr	s15, [r7, #4]
 8004aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8004ab6:	f7ff ffb7 	bl	8004a28 <sin_lut>
 8004aba:	eef0 7a40 	vmov.f32	s15, s0
}
 8004abe:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	3fc90fdb 	.word	0x3fc90fdb

08004acc <MX_OPAMP1_Init>:
OPAMP_HandleTypeDef hopamp2;
OPAMP_HandleTypeDef hopamp3;

/* OPAMP1 init function */
void MX_OPAMP1_Init(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP1_Init 0 */

  /* USER CODE BEGIN OPAMP1_Init 1 */

  /* USER CODE END OPAMP1_Init 1 */
  hopamp1.Instance = OPAMP1;
 8004ad0:	4b13      	ldr	r3, [pc, #76]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004ad2:	4a14      	ldr	r2, [pc, #80]	; (8004b24 <MX_OPAMP1_Init+0x58>)
 8004ad4:	601a      	str	r2, [r3, #0]
  hopamp1.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004ad6:	4b12      	ldr	r3, [pc, #72]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004ad8:	2280      	movs	r2, #128	; 0x80
 8004ada:	605a      	str	r2, [r3, #4]
  hopamp1.Init.Mode = OPAMP_PGA_MODE;
 8004adc:	4b10      	ldr	r3, [pc, #64]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004ade:	2240      	movs	r2, #64	; 0x40
 8004ae0:	609a      	str	r2, [r3, #8]
  hopamp1.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004ae2:	4b0f      	ldr	r3, [pc, #60]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	611a      	str	r2, [r3, #16]
  hopamp1.Init.InternalOutput = ENABLE;
 8004ae8:	4b0d      	ldr	r3, [pc, #52]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	751a      	strb	r2, [r3, #20]
  hopamp1.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004aee:	4b0c      	ldr	r3, [pc, #48]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	619a      	str	r2, [r3, #24]
  hopamp1.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004af4:	4b0a      	ldr	r3, [pc, #40]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004af6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004afa:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp1.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004afc:	4b08      	ldr	r3, [pc, #32]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004afe:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b02:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp1.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b04:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004b06:	2200      	movs	r2, #0
 8004b08:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp1) != HAL_OK)
 8004b0a:	4805      	ldr	r0, [pc, #20]	; (8004b20 <MX_OPAMP1_Init+0x54>)
 8004b0c:	f003 feee 	bl	80088ec <HAL_OPAMP_Init>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <MX_OPAMP1_Init+0x4e>
  {
    Error_Handler();
 8004b16:	f7ff fe34 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP1_Init 2 */

  /* USER CODE END OPAMP1_Init 2 */

}
 8004b1a:	bf00      	nop
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20004f50 	.word	0x20004f50
 8004b24:	40010300 	.word	0x40010300

08004b28 <MX_OPAMP2_Init>:
/* OPAMP2 init function */
void MX_OPAMP2_Init(void)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP2_Init 0 */

  /* USER CODE BEGIN OPAMP2_Init 1 */

  /* USER CODE END OPAMP2_Init 1 */
  hopamp2.Instance = OPAMP2;
 8004b2c:	4b13      	ldr	r3, [pc, #76]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b2e:	4a14      	ldr	r2, [pc, #80]	; (8004b80 <MX_OPAMP2_Init+0x58>)
 8004b30:	601a      	str	r2, [r3, #0]
  hopamp2.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004b32:	4b12      	ldr	r3, [pc, #72]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	605a      	str	r2, [r3, #4]
  hopamp2.Init.Mode = OPAMP_PGA_MODE;
 8004b38:	4b10      	ldr	r3, [pc, #64]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	609a      	str	r2, [r3, #8]
  hopamp2.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b3e:	4b0f      	ldr	r3, [pc, #60]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	611a      	str	r2, [r3, #16]
  hopamp2.Init.InternalOutput = ENABLE;
 8004b44:	4b0d      	ldr	r3, [pc, #52]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b46:	2201      	movs	r2, #1
 8004b48:	751a      	strb	r2, [r3, #20]
  hopamp2.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004b4a:	4b0c      	ldr	r3, [pc, #48]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	619a      	str	r2, [r3, #24]
  hopamp2.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004b50:	4b0a      	ldr	r3, [pc, #40]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004b56:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp2.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004b58:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b5a:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004b5e:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp2.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004b60:	4b06      	ldr	r3, [pc, #24]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp2) != HAL_OK)
 8004b66:	4805      	ldr	r0, [pc, #20]	; (8004b7c <MX_OPAMP2_Init+0x54>)
 8004b68:	f003 fec0 	bl	80088ec <HAL_OPAMP_Init>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <MX_OPAMP2_Init+0x4e>
  {
    Error_Handler();
 8004b72:	f7ff fe06 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP2_Init 2 */

  /* USER CODE END OPAMP2_Init 2 */

}
 8004b76:	bf00      	nop
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	20004f8c 	.word	0x20004f8c
 8004b80:	40010304 	.word	0x40010304

08004b84 <MX_OPAMP3_Init>:
/* OPAMP3 init function */
void MX_OPAMP3_Init(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* USER CODE END OPAMP3_Init 0 */

  /* USER CODE BEGIN OPAMP3_Init 1 */

  /* USER CODE END OPAMP3_Init 1 */
  hopamp3.Instance = OPAMP3;
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004b8a:	4a14      	ldr	r2, [pc, #80]	; (8004bdc <MX_OPAMP3_Init+0x58>)
 8004b8c:	601a      	str	r2, [r3, #0]
  hopamp3.Init.PowerMode = OPAMP_POWERMODE_HIGHSPEED;
 8004b8e:	4b12      	ldr	r3, [pc, #72]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004b90:	2280      	movs	r2, #128	; 0x80
 8004b92:	605a      	str	r2, [r3, #4]
  hopamp3.Init.Mode = OPAMP_PGA_MODE;
 8004b94:	4b10      	ldr	r3, [pc, #64]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004b96:	2240      	movs	r2, #64	; 0x40
 8004b98:	609a      	str	r2, [r3, #8]
  hopamp3.Init.NonInvertingInput = OPAMP_NONINVERTINGINPUT_IO0;
 8004b9a:	4b0f      	ldr	r3, [pc, #60]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	611a      	str	r2, [r3, #16]
  hopamp3.Init.InternalOutput = ENABLE;
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	751a      	strb	r2, [r3, #20]
  hopamp3.Init.TimerControlledMuxmode = OPAMP_TIMERCONTROLLEDMUXMODE_DISABLE;
 8004ba6:	4b0c      	ldr	r3, [pc, #48]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	619a      	str	r2, [r3, #24]
  hopamp3.Init.PgaConnect = OPAMP_PGA_CONNECT_INVERTINGINPUT_IO0_BIAS;
 8004bac:	4b0a      	ldr	r3, [pc, #40]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004bae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24
  hopamp3.Init.PgaGain = OPAMP_PGA_GAIN_16_OR_MINUS_15;
 8004bb4:	4b08      	ldr	r3, [pc, #32]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004bb6:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8004bba:	629a      	str	r2, [r3, #40]	; 0x28
  hopamp3.Init.UserTrimming = OPAMP_TRIMMING_FACTORY;
 8004bbc:	4b06      	ldr	r3, [pc, #24]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_OPAMP_Init(&hopamp3) != HAL_OK)
 8004bc2:	4805      	ldr	r0, [pc, #20]	; (8004bd8 <MX_OPAMP3_Init+0x54>)
 8004bc4:	f003 fe92 	bl	80088ec <HAL_OPAMP_Init>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d001      	beq.n	8004bd2 <MX_OPAMP3_Init+0x4e>
  {
    Error_Handler();
 8004bce:	f7ff fdd8 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN OPAMP3_Init 2 */

  /* USER CODE END OPAMP3_Init 2 */

}
 8004bd2:	bf00      	nop
 8004bd4:	bd80      	pop	{r7, pc}
 8004bd6:	bf00      	nop
 8004bd8:	20004fc8 	.word	0x20004fc8
 8004bdc:	40010308 	.word	0x40010308

08004be0 <HAL_OPAMP_MspInit>:

void HAL_OPAMP_MspInit(OPAMP_HandleTypeDef* opampHandle)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b08a      	sub	sp, #40	; 0x28
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004be8:	f107 0314 	add.w	r3, r7, #20
 8004bec:	2200      	movs	r2, #0
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	60da      	str	r2, [r3, #12]
 8004bf6:	611a      	str	r2, [r3, #16]
  if(opampHandle->Instance==OPAMP1)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a2e      	ldr	r2, [pc, #184]	; (8004cb8 <HAL_OPAMP_MspInit+0xd8>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d119      	bne.n	8004c36 <HAL_OPAMP_MspInit+0x56>
  {
  /* USER CODE BEGIN OPAMP1_MspInit 0 */

  /* USER CODE END OPAMP1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c02:	4b2e      	ldr	r3, [pc, #184]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c06:	4a2d      	ldr	r2, [pc, #180]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c0e:	4b2b      	ldr	r3, [pc, #172]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	613b      	str	r3, [r7, #16]
 8004c18:	693b      	ldr	r3, [r7, #16]
    /**OPAMP1 GPIO Configuration
    PA1     ------> OPAMP1_VINP
    PA3     ------> OPAMP1_VINM0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8004c1a:	230a      	movs	r3, #10
 8004c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c22:	2300      	movs	r3, #0
 8004c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c26:	f107 0314 	add.w	r3, r7, #20
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c30:	f003 fcaa 	bl	8008588 <HAL_GPIO_Init>

  /* USER CODE BEGIN OPAMP3_MspInit 1 */

  /* USER CODE END OPAMP3_MspInit 1 */
  }
}
 8004c34:	e03b      	b.n	8004cae <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP2)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a21      	ldr	r2, [pc, #132]	; (8004cc0 <HAL_OPAMP_MspInit+0xe0>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d119      	bne.n	8004c74 <HAL_OPAMP_MspInit+0x94>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c40:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c44:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c4c:	4b1b      	ldr	r3, [pc, #108]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	60fb      	str	r3, [r7, #12]
 8004c56:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8004c58:	23a0      	movs	r3, #160	; 0xa0
 8004c5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c5c:	2303      	movs	r3, #3
 8004c5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c64:	f107 0314 	add.w	r3, r7, #20
 8004c68:	4619      	mov	r1, r3
 8004c6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c6e:	f003 fc8b 	bl	8008588 <HAL_GPIO_Init>
}
 8004c72:	e01c      	b.n	8004cae <HAL_OPAMP_MspInit+0xce>
  else if(opampHandle->Instance==OPAMP3)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a12      	ldr	r2, [pc, #72]	; (8004cc4 <HAL_OPAMP_MspInit+0xe4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d117      	bne.n	8004cae <HAL_OPAMP_MspInit+0xce>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c7e:	4b0f      	ldr	r3, [pc, #60]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c82:	4a0e      	ldr	r2, [pc, #56]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c84:	f043 0302 	orr.w	r3, r3, #2
 8004c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004c8a:	4b0c      	ldr	r3, [pc, #48]	; (8004cbc <HAL_OPAMP_MspInit+0xdc>)
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	60bb      	str	r3, [r7, #8]
 8004c94:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8004c96:	2305      	movs	r3, #5
 8004c98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004c9a:	2303      	movs	r3, #3
 8004c9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ca2:	f107 0314 	add.w	r3, r7, #20
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	4807      	ldr	r0, [pc, #28]	; (8004cc8 <HAL_OPAMP_MspInit+0xe8>)
 8004caa:	f003 fc6d 	bl	8008588 <HAL_GPIO_Init>
}
 8004cae:	bf00      	nop
 8004cb0:	3728      	adds	r7, #40	; 0x28
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	40010300 	.word	0x40010300
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	40010304 	.word	0x40010304
 8004cc4:	40010308 	.word	0x40010308
 8004cc8:	48000400 	.word	0x48000400

08004ccc <ps_warmup>:
#include "math_ops.h"
#include "hw_config.h"
#include "user_config.h"
#include "gpio.h"

void ps_warmup(EncoderStruct * encoder, int n){
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	6039      	str	r1, [r7, #0]
//	/* Hall position sensors noisy on startup.  Take a bunch of samples to clear this data */
//	for(int i = 0; i<n; i++){
//		encoder->data.raw = 0;
//		HAL_I2C_Mem_Read(&ENC_I2C, ENC_ADDRESS,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&encoder->data.raw, 2,2);
//	}
}
 8004cd6:	bf00      	nop
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr
	...

08004ce4 <ps_sample>:

void ps_sample(EncoderStruct * encoder, float dt){
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08c      	sub	sp, #48	; 0x30
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	ed87 0a00 	vstr	s0, [r7]
	/* updates EncoderStruct encoder with the latest sample
	 * after elapsed time dt */

	/* Shift around previous samples */
	encoder->old_angle = encoder->angle_singleturn;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	609a      	str	r2, [r3, #8]
//	for(int i = N_POS_SAMPLES-1; i>0; i--){encoder->angle_multiturn[i] = encoder->angle_multiturn[i-1];}
	memmove(&encoder->angle_multiturn[1], &encoder->angle_multiturn[0], (N_POS_SAMPLES-1)*sizeof(float));
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f103 0010 	add.w	r0, r3, #16
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	330c      	adds	r3, #12
 8004d02:	2238      	movs	r2, #56	; 0x38
 8004d04:	4619      	mov	r1, r3
 8004d06:	f008 f85b 	bl	800cdc0 <memmove>

	/* SPI read */
	HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_RESET); //CS Low
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	2180      	movs	r1, #128	; 0x80
 8004d0e:	48aa      	ldr	r0, [pc, #680]	; (8004fb8 <ps_sample+0x2d4>)
 8004d10:	f003 fdd4 	bl	80088bc <HAL_GPIO_WritePin>
	for(int i = 0; i<5; i++){
 8004d14:	2300      	movs	r3, #0
 8004d16:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d18:	e002      	b.n	8004d20 <ps_sample+0x3c>
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	2b04      	cmp	r3, #4
 8004d24:	ddf9      	ble.n	8004d1a <ps_sample+0x36>
		//delay for CS falling edge -> clk rising edge requirement
	}
	uint16_t spi_val;
	int index = 16;
 8004d26:	2310      	movs	r3, #16
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
	//MSB first
	//Read on rising edge
	//Takes 50ns
	while(index>=0){
 8004d2a:	e01e      	b.n	8004d6a <ps_sample+0x86>
		HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_SET);
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	2140      	movs	r1, #64	; 0x40
 8004d30:	48a1      	ldr	r0, [pc, #644]	; (8004fb8 <ps_sample+0x2d4>)
 8004d32:	f003 fdc3 	bl	80088bc <HAL_GPIO_WritePin>
		if(HAL_GPIO_ReadPin(ENC_SPI_MISO)){
 8004d36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d3a:	489f      	ldr	r0, [pc, #636]	; (8004fb8 <ps_sample+0x2d4>)
 8004d3c:	f003 fda6 	bl	800888c <HAL_GPIO_ReadPin>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d009      	beq.n	8004d5a <ps_sample+0x76>
			spi_val |= 1<<index;
 8004d46:	2201      	movs	r2, #1
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	b21a      	sxth	r2, r3
 8004d50:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8004d54:	4313      	orrs	r3, r2
 8004d56:	b21b      	sxth	r3, r3
 8004d58:	857b      	strh	r3, [r7, #42]	; 0x2a
		}
		index--;
 8004d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
		HAL_GPIO_WritePin(ENC_SPI_CLK, GPIO_PIN_RESET);
 8004d60:	2200      	movs	r2, #0
 8004d62:	2140      	movs	r1, #64	; 0x40
 8004d64:	4894      	ldr	r0, [pc, #592]	; (8004fb8 <ps_sample+0x2d4>)
 8004d66:	f003 fda9 	bl	80088bc <HAL_GPIO_WritePin>
	while(index>=0){
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	dadd      	bge.n	8004d2c <ps_sample+0x48>
	}
	HAL_GPIO_WritePin(ENC_SPI_CS, GPIO_PIN_SET); //CS High
 8004d70:	2201      	movs	r2, #1
 8004d72:	2180      	movs	r1, #128	; 0x80
 8004d74:	4890      	ldr	r0, [pc, #576]	; (8004fb8 <ps_sample+0x2d4>)
 8004d76:	f003 fda1 	bl	80088bc <HAL_GPIO_WritePin>

	encoder->raw = spi_val&0x3FFF; //angle;
 8004d7a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004d7c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	661a      	str	r2, [r3, #96]	; 0x60

	/* Linearization */
	int off_1 = encoder->offset_lut[(encoder->raw)>>7];				// lookup table lower entry
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d88:	11da      	asrs	r2, r3, #7
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	322c      	adds	r2, #44	; 0x2c
 8004d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d92:	61fb      	str	r3, [r7, #28]
	int off_2 = encoder->offset_lut[((encoder->raw>>7)+1)%128];		// lookup table higher entry
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d98:	11db      	asrs	r3, r3, #7
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	425a      	negs	r2, r3
 8004d9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004da2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004da6:	bf58      	it	pl
 8004da8:	4253      	negpl	r3, r2
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	332c      	adds	r3, #44	; 0x2c
 8004dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004db2:	61bb      	str	r3, [r7, #24]
	int off_interp = off_1 + ((off_2 - off_1)*(encoder->raw - ((encoder->raw>>7)<<7))>>7);     // Interpolate between lookup table entries
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8004dbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004dc2:	fb02 f303 	mul.w	r3, r2, r3
 8004dc6:	11db      	asrs	r3, r3, #7
 8004dc8:	69fa      	ldr	r2, [r7, #28]
 8004dca:	4413      	add	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
	encoder->count = encoder->raw - off_interp;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	1ad2      	subs	r2, r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	665a      	str	r2, [r3, #100]	; 0x64


	/* Real angles in radians */
	encoder->angle_singleturn = ((float)(encoder->count))/((float)ENC_CPR);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dde:	ee07 3a90 	vmov	s15, r3
 8004de2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004de6:	eddf 6a75 	vldr	s13, [pc, #468]	; 8004fbc <ps_sample+0x2d8>
 8004dea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	edc3 7a01 	vstr	s15, [r3, #4]
	int int_angle = encoder->angle_singleturn;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004dfa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004dfe:	ee17 3a90 	vmov	r3, s15
 8004e02:	613b      	str	r3, [r7, #16]
	encoder->angle_singleturn = TWO_PI_F*(encoder->angle_singleturn - (float)int_angle);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	ed93 7a01 	vldr	s14, [r3, #4]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	ee07 3a90 	vmov	s15, r3
 8004e10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004e18:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8004fc0 <ps_sample+0x2dc>
 8004e1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	edc3 7a01 	vstr	s15, [r3, #4]
	//encoder->angle_singleturn = TWO_PI_F*fmodf(((float)(encoder->count-M_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->angle_singleturn = encoder->angle_singleturn<0 ? encoder->angle_singleturn + TWO_PI_F : encoder->angle_singleturn;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004e30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e34:	d507      	bpl.n	8004e46 <ps_sample+0x162>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e3c:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8004fc0 <ps_sample+0x2dc>
 8004e40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004e44:	e002      	b.n	8004e4c <ps_sample+0x168>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	edc3 7a01 	vstr	s15, [r3, #4]

	encoder->elec_angle = (encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004e5c:	4b59      	ldr	r3, [pc, #356]	; (8004fc4 <ps_sample+0x2e0>)
 8004e5e:	691b      	ldr	r3, [r3, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	ee07 3a90 	vmov	s15, r3
 8004e66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004e6e:	eddf 6a53 	vldr	s13, [pc, #332]	; 8004fbc <ps_sample+0x2d8>
 8004e72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	int_angle = (int)encoder->elec_angle;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004e82:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004e86:	ee17 3a90 	vmov	r3, s15
 8004e8a:	613b      	str	r3, [r7, #16]
	encoder->elec_angle = TWO_PI_F*(encoder->elec_angle - (float)int_angle);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	ee07 3a90 	vmov	s15, r3
 8004e98:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004e9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ea0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8004fc0 <ps_sample+0x2dc>
 8004ea4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	//encoder->elec_angle = TWO_PI_F*fmodf((encoder->ppairs*(float)(encoder->count-E_ZERO))/((float)ENC_CPR), 1.0f);
	encoder->elec_angle = encoder->elec_angle<0 ? encoder->elec_angle + TWO_PI_F : encoder->elec_angle;	// Add 2*pi to negative numbers
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004eb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ebc:	d507      	bpl.n	8004ece <ps_sample+0x1ea>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004ec4:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8004fc0 <ps_sample+0x2dc>
 8004ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004ecc:	e002      	b.n	8004ed4 <ps_sample+0x1f0>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	/* Rollover */
	int rollover = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	623b      	str	r3, [r7, #32]
	float angle_diff = encoder->angle_singleturn - encoder->old_angle;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	ed93 7a01 	vldr	s14, [r3, #4]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	edd3 7a02 	vldr	s15, [r3, #8]
 8004eea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004eee:	edc7 7a03 	vstr	s15, [r7, #12]
	if(angle_diff > PI_F){rollover = -1;}
 8004ef2:	edd7 7a03 	vldr	s15, [r7, #12]
 8004ef6:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8004fc8 <ps_sample+0x2e4>
 8004efa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f02:	dd03      	ble.n	8004f0c <ps_sample+0x228>
 8004f04:	f04f 33ff 	mov.w	r3, #4294967295
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	e00a      	b.n	8004f22 <ps_sample+0x23e>
	else if(angle_diff < -PI_F){rollover = 1;}
 8004f0c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f10:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8004fcc <ps_sample+0x2e8>
 8004f14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f1c:	d501      	bpl.n	8004f22 <ps_sample+0x23e>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	623b      	str	r3, [r7, #32]
	encoder->turns += rollover;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	441a      	add	r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	66da      	str	r2, [r3, #108]	; 0x6c
	if(!encoder->first_sample){
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	f893 31b0 	ldrb.w	r3, [r3, #432]	; 0x1b0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d106      	bne.n	8004f46 <ps_sample+0x262>
		encoder->turns = 0;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	66da      	str	r2, [r3, #108]	; 0x6c
		encoder->first_sample = 1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 21b0 	strb.w	r2, [r3, #432]	; 0x1b0
	}

	/* Multi-turn position */
	encoder->angle_multiturn[0] = encoder->angle_singleturn + TWO_PI_F*(float)encoder->turns-encoder->mech_zero;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	ed93 7a01 	vldr	s14, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f50:	ee07 3a90 	vmov	s15, r3
 8004f54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004f58:	eddf 6a19 	vldr	s13, [pc, #100]	; 8004fc0 <ps_sample+0x2dc>
 8004f5c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004f60:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	edd3 7a6d 	vldr	s15, [r3, #436]	; 0x1b4
 8004f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	edc3 7a03 	vstr	s15, [r3, #12]

	encoder->velocity = (encoder->angle_multiturn[0] - encoder->angle_multiturn[N_POS_SAMPLES-1])/(dt*(float)(N_POS_SAMPLES-1));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	ed93 7a03 	vldr	s14, [r3, #12]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8004f80:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004f84:	edd7 7a00 	vldr	s15, [r7]
 8004f88:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 8004f8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8004f90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	encoder->elec_velocity = encoder->ppairs*encoder->velocity;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	ed93 7a15 	vldr	s14, [r3, #84]	; 0x54
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8004fa6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

}
 8004fb0:	bf00      	nop
 8004fb2:	3730      	adds	r7, #48	; 0x30
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}
 8004fb8:	48000400 	.word	0x48000400
 8004fbc:	46800000 	.word	0x46800000
 8004fc0:	40c90fdb 	.word	0x40c90fdb
 8004fc4:	20004d50 	.word	0x20004d50
 8004fc8:	40490fdb 	.word	0x40490fdb
 8004fcc:	c0490fdb 	.word	0xc0490fdb

08004fd0 <ps_print>:

void ps_print(EncoderStruct * encoder, int dt_ms){
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b082      	sub	sp, #8
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
//	printf("Raw: %d\r\n", encoder->raw);
	printf("Raw: %d", encoder->raw);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fde:	4619      	mov	r1, r3
 8004fe0:	481d      	ldr	r0, [pc, #116]	; (8005058 <ps_print+0x88>)
 8004fe2:	f008 fb79 	bl	800d6d8 <iprintf>
	printf("   Linearized Count: %d", encoder->count);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fea:	4619      	mov	r1, r3
 8004fec:	481b      	ldr	r0, [pc, #108]	; (800505c <ps_print+0x8c>)
 8004fee:	f008 fb73 	bl	800d6d8 <iprintf>
	printf("   Single Turn: %f", encoder->angle_singleturn);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	f7fb face 	bl	8000598 <__aeabi_f2d>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4817      	ldr	r0, [pc, #92]	; (8005060 <ps_print+0x90>)
 8005002:	f008 fb69 	bl	800d6d8 <iprintf>
	printf("   Multiturn: %f", encoder->angle_multiturn[0]);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	4618      	mov	r0, r3
 800500c:	f7fb fac4 	bl	8000598 <__aeabi_f2d>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4813      	ldr	r0, [pc, #76]	; (8005064 <ps_print+0x94>)
 8005016:	f008 fb5f 	bl	800d6d8 <iprintf>
	printf("   Electrical: %f", encoder->elec_angle);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800501e:	4618      	mov	r0, r3
 8005020:	f7fb faba 	bl	8000598 <__aeabi_f2d>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	480f      	ldr	r0, [pc, #60]	; (8005068 <ps_print+0x98>)
 800502a:	f008 fb55 	bl	800d6d8 <iprintf>
	printf("   Turns:  %d", encoder->turns);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005032:	4619      	mov	r1, r3
 8005034:	480d      	ldr	r0, [pc, #52]	; (800506c <ps_print+0x9c>)
 8005036:	f008 fb4f 	bl	800d6d8 <iprintf>
	printf("   CAN:   %f\r\n", encoder->angle_multiturn[0]);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fb faaa 	bl	8000598 <__aeabi_f2d>
 8005044:	4602      	mov	r2, r0
 8005046:	460b      	mov	r3, r1
 8005048:	4809      	ldr	r0, [pc, #36]	; (8005070 <ps_print+0xa0>)
 800504a:	f008 fb45 	bl	800d6d8 <iprintf>
	//HAL_Delay(dt_ms);
}
 800504e:	bf00      	nop
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	08011e38 	.word	0x08011e38
 800505c:	08011e40 	.word	0x08011e40
 8005060:	08011e58 	.word	0x08011e58
 8005064:	08011e6c 	.word	0x08011e6c
 8005068:	08011e80 	.word	0x08011e80
 800506c:	08011e94 	.word	0x08011e94
 8005070:	08011ea4 	.word	0x08011ea4

08005074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800507a:	4b0f      	ldr	r3, [pc, #60]	; (80050b8 <HAL_MspInit+0x44>)
 800507c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800507e:	4a0e      	ldr	r2, [pc, #56]	; (80050b8 <HAL_MspInit+0x44>)
 8005080:	f043 0301 	orr.w	r3, r3, #1
 8005084:	6613      	str	r3, [r2, #96]	; 0x60
 8005086:	4b0c      	ldr	r3, [pc, #48]	; (80050b8 <HAL_MspInit+0x44>)
 8005088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800508a:	f003 0301 	and.w	r3, r3, #1
 800508e:	607b      	str	r3, [r7, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005092:	4b09      	ldr	r3, [pc, #36]	; (80050b8 <HAL_MspInit+0x44>)
 8005094:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005096:	4a08      	ldr	r2, [pc, #32]	; (80050b8 <HAL_MspInit+0x44>)
 8005098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800509c:	6593      	str	r3, [r2, #88]	; 0x58
 800509e:	4b06      	ldr	r3, [pc, #24]	; (80050b8 <HAL_MspInit+0x44>)
 80050a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80050aa:	f003 fdc5 	bl	8008c38 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80050ae:	bf00      	nop
 80050b0:	3708      	adds	r7, #8
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
 80050b6:	bf00      	nop
 80050b8:	40021000 	.word	0x40021000

080050bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050c0:	e7fe      	b.n	80050c0 <NMI_Handler+0x4>

080050c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050c2:	b480      	push	{r7}
 80050c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050c6:	e7fe      	b.n	80050c6 <HardFault_Handler+0x4>

080050c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050cc:	e7fe      	b.n	80050cc <MemManage_Handler+0x4>

080050ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050d2:	e7fe      	b.n	80050d2 <BusFault_Handler+0x4>

080050d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050d8:	e7fe      	b.n	80050d8 <UsageFault_Handler+0x4>

080050da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e6:	4770      	bx	lr

080050e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ec:	bf00      	nop
 80050ee:	46bd      	mov	sp, r7
 80050f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f4:	4770      	bx	lr

080050f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80050f6:	b480      	push	{r7}
 80050f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80050fa:	bf00      	nop
 80050fc:	46bd      	mov	sp, r7
 80050fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005102:	4770      	bx	lr

08005104 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005108:	f000 fd22 	bl	8005b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800510c:	bf00      	nop
 800510e:	bd80      	pop	{r7, pc}

08005110 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005114:	4802      	ldr	r0, [pc, #8]	; (8005120 <DMA1_Channel1_IRQHandler+0x10>)
 8005116:	f002 fa78 	bl	800760a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800511a:	bf00      	nop
 800511c:	bd80      	pop	{r7, pc}
 800511e:	bf00      	nop
 8005120:	200002f4 	.word	0x200002f4

08005124 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8005128:	4802      	ldr	r0, [pc, #8]	; (8005134 <DMA1_Channel2_IRQHandler+0x10>)
 800512a:	f002 fa6e 	bl	800760a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800512e:	bf00      	nop
 8005130:	bd80      	pop	{r7, pc}
 8005132:	bf00      	nop
 8005134:	20000354 	.word	0x20000354

08005138 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_SET );	// Useful for timing
 800513c:	2201      	movs	r2, #1
 800513e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005142:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005146:	f003 fbb9 	bl	80088bc <HAL_GPIO_WritePin>
	analog_sample(&controller); //19us
 800514a:	4810      	ldr	r0, [pc, #64]	; (800518c <TIM1_UP_TIM16_IRQHandler+0x54>)
 800514c:	f7fd f994 	bl	8002478 <analog_sample>
	/* Sample position sensor */
	ps_sample(&comm_encoder, DT);
 8005150:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8005190 <TIM1_UP_TIM16_IRQHandler+0x58>
 8005154:	480f      	ldr	r0, [pc, #60]	; (8005194 <TIM1_UP_TIM16_IRQHandler+0x5c>)
 8005156:	f7ff fdc5 	bl	8004ce4 <ps_sample>
	/* Run Finite State Machine */
	run_fsm(&state);
 800515a:	480f      	ldr	r0, [pc, #60]	; (8005198 <TIM1_UP_TIM16_IRQHandler+0x60>)
 800515c:	f7fd ffd4 	bl	8003108 <run_fsm>
	can_tx_rx();
 8005160:	f000 f83a 	bl	80051d8 <can_tx_rx>
	/* increment loop count */
	controller.loop_count++;
 8005164:	4b09      	ldr	r3, [pc, #36]	; (800518c <TIM1_UP_TIM16_IRQHandler+0x54>)
 8005166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800516a:	3301      	adds	r3, #1
 800516c:	4a07      	ldr	r2, [pc, #28]	; (800518c <TIM1_UP_TIM16_IRQHandler+0x54>)
 800516e:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005172:	480a      	ldr	r0, [pc, #40]	; (800519c <TIM1_UP_TIM16_IRQHandler+0x64>)
 8005174:	f004 feb8 	bl	8009ee8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(PWM_PIN, GPIO_PIN_RESET );	// Useful for timing
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800517e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005182:	f003 fb9b 	bl	80088bc <HAL_GPIO_WritePin>
  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005186:	bf00      	nop
 8005188:	bd80      	pop	{r7, pc}
 800518a:	bf00      	nop
 800518c:	2000041c 	.word	0x2000041c
 8005190:	388bcf64 	.word	0x388bcf64
 8005194:	20000734 	.word	0x20000734
 8005198:	20000724 	.word	0x20000724
 800519c:	20005008 	.word	0x20005008

080051a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051a6:	4809      	ldr	r0, [pc, #36]	; (80051cc <USART2_IRQHandler+0x2c>)
 80051a8:	f006 fa1e 	bl	800b5e8 <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 80051ac:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <USART2_IRQHandler+0x30>)
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	71fb      	strb	r3, [r7, #7]
  update_fsm(&state, c);
 80051b2:	79fb      	ldrb	r3, [r7, #7]
 80051b4:	4619      	mov	r1, r3
 80051b6:	4807      	ldr	r0, [pc, #28]	; (80051d4 <USART2_IRQHandler+0x34>)
 80051b8:	f7fe f920 	bl	80033fc <update_fsm>
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80051bc:	4803      	ldr	r0, [pc, #12]	; (80051cc <USART2_IRQHandler+0x2c>)
 80051be:	f006 fa13 	bl	800b5e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80051c2:	bf00      	nop
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	20005054 	.word	0x20005054
 80051d0:	20004c4c 	.word	0x20004c4c
 80051d4:	20000724 	.word	0x20000724

080051d8 <can_tx_rx>:

/* USER CODE BEGIN 1 */
void can_tx_rx(void){
 80051d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051da:	b093      	sub	sp, #76	; 0x4c
 80051dc:	af10      	add	r7, sp, #64	; 0x40
	int no_message = HAL_FDCAN_GetRxMessage(&CAN_H, FDCAN_RX_FIFO0, &can_rx.rx_header, can_rx.data);
 80051de:	4b84      	ldr	r3, [pc, #528]	; (80053f0 <can_tx_rx+0x218>)
 80051e0:	4a84      	ldr	r2, [pc, #528]	; (80053f4 <can_tx_rx+0x21c>)
 80051e2:	2140      	movs	r1, #64	; 0x40
 80051e4:	4884      	ldr	r0, [pc, #528]	; (80053f8 <can_tx_rx+0x220>)
 80051e6:	f002 fdb1 	bl	8007d4c <HAL_FDCAN_GetRxMessage>
 80051ea:	4603      	mov	r3, r0
 80051ec:	607b      	str	r3, [r7, #4]
	if(!no_message){
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	f040 80f8 	bne.w	80053e6 <can_tx_rx+0x20e>
//		printf("%d\r\n",can_rx.rx_header.Identifier);
		pack_reply(&can_tx, CAN_ID,  comm_encoder.angle_multiturn[0]/GR, comm_encoder.velocity/GR, controller.i_q_filt*KT*GR);	// Pack response
 80051f6:	4b81      	ldr	r3, [pc, #516]	; (80053fc <can_tx_rx+0x224>)
 80051f8:	685b      	ldr	r3, [r3, #4]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	4a80      	ldr	r2, [pc, #512]	; (8005400 <can_tx_rx+0x228>)
 80051fe:	ed92 7a03 	vldr	s14, [r2, #12]
 8005202:	4a80      	ldr	r2, [pc, #512]	; (8005404 <can_tx_rx+0x22c>)
 8005204:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005208:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800520c:	4a7c      	ldr	r2, [pc, #496]	; (8005400 <can_tx_rx+0x228>)
 800520e:	ed92 7a13 	vldr	s14, [r2, #76]	; 0x4c
 8005212:	4a7c      	ldr	r2, [pc, #496]	; (8005404 <can_tx_rx+0x22c>)
 8005214:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005218:	ee87 6a27 	vdiv.f32	s12, s14, s15
 800521c:	4a7a      	ldr	r2, [pc, #488]	; (8005408 <can_tx_rx+0x230>)
 800521e:	ed92 7a11 	vldr	s14, [r2, #68]	; 0x44
 8005222:	4a78      	ldr	r2, [pc, #480]	; (8005404 <can_tx_rx+0x22c>)
 8005224:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8005228:	ee27 7a27 	vmul.f32	s14, s14, s15
 800522c:	4a75      	ldr	r2, [pc, #468]	; (8005404 <can_tx_rx+0x22c>)
 800522e:	edd2 7a0f 	vldr	s15, [r2, #60]	; 0x3c
 8005232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005236:	eeb0 1a67 	vmov.f32	s2, s15
 800523a:	eef0 0a46 	vmov.f32	s1, s12
 800523e:	eeb0 0a66 	vmov.f32	s0, s13
 8005242:	4619      	mov	r1, r3
 8005244:	4871      	ldr	r0, [pc, #452]	; (800540c <can_tx_rx+0x234>)
 8005246:	f7fc ff6f 	bl	8002128 <pack_reply>
		HAL_FDCAN_AddMessageToTxFifoQ(&CAN_H, &can_tx.tx_header, can_tx.data);	// Send response
 800524a:	4a71      	ldr	r2, [pc, #452]	; (8005410 <can_tx_rx+0x238>)
 800524c:	4971      	ldr	r1, [pc, #452]	; (8005414 <can_tx_rx+0x23c>)
 800524e:	486a      	ldr	r0, [pc, #424]	; (80053f8 <can_tx_rx+0x220>)
 8005250:	f002 fd37 	bl	8007cc2 <HAL_FDCAN_AddMessageToTxFifoQ>
	  if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) & (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFC))){
 8005254:	4b70      	ldr	r3, [pc, #448]	; (8005418 <can_tx_rx+0x240>)
 8005256:	785a      	ldrb	r2, [r3, #1]
 8005258:	4b6f      	ldr	r3, [pc, #444]	; (8005418 <can_tx_rx+0x240>)
 800525a:	789b      	ldrb	r3, [r3, #2]
 800525c:	4013      	ands	r3, r2
 800525e:	b2da      	uxtb	r2, r3
 8005260:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <can_tx_rx+0x240>)
 8005262:	78db      	ldrb	r3, [r3, #3]
 8005264:	4013      	ands	r3, r2
 8005266:	b2da      	uxtb	r2, r3
 8005268:	4b6b      	ldr	r3, [pc, #428]	; (8005418 <can_tx_rx+0x240>)
 800526a:	791b      	ldrb	r3, [r3, #4]
 800526c:	4013      	ands	r3, r2
 800526e:	b2da      	uxtb	r2, r3
 8005270:	4b69      	ldr	r3, [pc, #420]	; (8005418 <can_tx_rx+0x240>)
 8005272:	795b      	ldrb	r3, [r3, #5]
 8005274:	4013      	ands	r3, r2
 8005276:	b2da      	uxtb	r2, r3
 8005278:	4b67      	ldr	r3, [pc, #412]	; (8005418 <can_tx_rx+0x240>)
 800527a:	799b      	ldrb	r3, [r3, #6]
 800527c:	4013      	ands	r3, r2
 800527e:	b2da      	uxtb	r2, r3
 8005280:	4b65      	ldr	r3, [pc, #404]	; (8005418 <can_tx_rx+0x240>)
 8005282:	79db      	ldrb	r3, [r3, #7]
 8005284:	4013      	ands	r3, r2
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2bff      	cmp	r3, #255	; 0xff
 800528a:	bf0c      	ite	eq
 800528c:	2301      	moveq	r3, #1
 800528e:	2300      	movne	r3, #0
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b61      	ldr	r3, [pc, #388]	; (8005418 <can_tx_rx+0x240>)
 8005294:	7a1b      	ldrb	r3, [r3, #8]
 8005296:	2bfc      	cmp	r3, #252	; 0xfc
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	4013      	ands	r3, r2
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <can_tx_rx+0xda>
		  update_fsm(&state, MOTOR_CMD);
 80052a8:	216d      	movs	r1, #109	; 0x6d
 80052aa:	485c      	ldr	r0, [pc, #368]	; (800541c <can_tx_rx+0x244>)
 80052ac:	f7fe f8a6 	bl	80033fc <update_fsm>
	  else{
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
		  controller.timeout = 0;					// Reset timeout counter
	  }
	}
}
 80052b0:	e099      	b.n	80053e6 <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFD))){
 80052b2:	4b59      	ldr	r3, [pc, #356]	; (8005418 <can_tx_rx+0x240>)
 80052b4:	785a      	ldrb	r2, [r3, #1]
 80052b6:	4b58      	ldr	r3, [pc, #352]	; (8005418 <can_tx_rx+0x240>)
 80052b8:	789b      	ldrb	r3, [r3, #2]
 80052ba:	4013      	ands	r3, r2
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	4b56      	ldr	r3, [pc, #344]	; (8005418 <can_tx_rx+0x240>)
 80052c0:	78db      	ldrb	r3, [r3, #3]
 80052c2:	4013      	ands	r3, r2
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2bff      	cmp	r3, #255	; 0xff
 80052c8:	bf0c      	ite	eq
 80052ca:	2301      	moveq	r3, #1
 80052cc:	2300      	movne	r3, #0
 80052ce:	b2db      	uxtb	r3, r3
 80052d0:	461a      	mov	r2, r3
 80052d2:	4b51      	ldr	r3, [pc, #324]	; (8005418 <can_tx_rx+0x240>)
 80052d4:	791b      	ldrb	r3, [r3, #4]
 80052d6:	2bff      	cmp	r3, #255	; 0xff
 80052d8:	bf0c      	ite	eq
 80052da:	2301      	moveq	r3, #1
 80052dc:	2300      	movne	r3, #0
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	4619      	mov	r1, r3
 80052e2:	4b4d      	ldr	r3, [pc, #308]	; (8005418 <can_tx_rx+0x240>)
 80052e4:	795b      	ldrb	r3, [r3, #5]
 80052e6:	2bff      	cmp	r3, #255	; 0xff
 80052e8:	bf0c      	ite	eq
 80052ea:	2301      	moveq	r3, #1
 80052ec:	2300      	movne	r3, #0
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	fb01 f303 	mul.w	r3, r1, r3
 80052f4:	4013      	ands	r3, r2
 80052f6:	4a48      	ldr	r2, [pc, #288]	; (8005418 <can_tx_rx+0x240>)
 80052f8:	7992      	ldrb	r2, [r2, #6]
 80052fa:	2aff      	cmp	r2, #255	; 0xff
 80052fc:	bf0c      	ite	eq
 80052fe:	2201      	moveq	r2, #1
 8005300:	2200      	movne	r2, #0
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	4013      	ands	r3, r2
 8005306:	4a44      	ldr	r2, [pc, #272]	; (8005418 <can_tx_rx+0x240>)
 8005308:	79d2      	ldrb	r2, [r2, #7]
 800530a:	2aff      	cmp	r2, #255	; 0xff
 800530c:	bf0c      	ite	eq
 800530e:	2201      	moveq	r2, #1
 8005310:	2200      	movne	r2, #0
 8005312:	b2d2      	uxtb	r2, r2
 8005314:	4013      	ands	r3, r2
 8005316:	4a40      	ldr	r2, [pc, #256]	; (8005418 <can_tx_rx+0x240>)
 8005318:	7a12      	ldrb	r2, [r2, #8]
 800531a:	2afd      	cmp	r2, #253	; 0xfd
 800531c:	bf0c      	ite	eq
 800531e:	2201      	moveq	r2, #1
 8005320:	2200      	movne	r2, #0
 8005322:	b2d2      	uxtb	r2, r2
 8005324:	4013      	ands	r3, r2
 8005326:	2b00      	cmp	r3, #0
 8005328:	d004      	beq.n	8005334 <can_tx_rx+0x15c>
		  update_fsm(&state, MENU_CMD);
 800532a:	211b      	movs	r1, #27
 800532c:	483b      	ldr	r0, [pc, #236]	; (800541c <can_tx_rx+0x244>)
 800532e:	f7fe f865 	bl	80033fc <update_fsm>
}
 8005332:	e058      	b.n	80053e6 <can_tx_rx+0x20e>
	  else if(((can_rx.data[0]==0xFF) & (can_rx.data[1]==0xFF) & (can_rx.data[2]==0xFF) & (can_rx.data[3]==0xFF) * (can_rx.data[4]==0xFF) & (can_rx.data[5]==0xFF) & (can_rx.data[6]==0xFF) & (can_rx.data[7]==0xFE))){
 8005334:	4b38      	ldr	r3, [pc, #224]	; (8005418 <can_tx_rx+0x240>)
 8005336:	785a      	ldrb	r2, [r3, #1]
 8005338:	4b37      	ldr	r3, [pc, #220]	; (8005418 <can_tx_rx+0x240>)
 800533a:	789b      	ldrb	r3, [r3, #2]
 800533c:	4013      	ands	r3, r2
 800533e:	b2da      	uxtb	r2, r3
 8005340:	4b35      	ldr	r3, [pc, #212]	; (8005418 <can_tx_rx+0x240>)
 8005342:	78db      	ldrb	r3, [r3, #3]
 8005344:	4013      	ands	r3, r2
 8005346:	b2db      	uxtb	r3, r3
 8005348:	2bff      	cmp	r3, #255	; 0xff
 800534a:	bf0c      	ite	eq
 800534c:	2301      	moveq	r3, #1
 800534e:	2300      	movne	r3, #0
 8005350:	b2db      	uxtb	r3, r3
 8005352:	461a      	mov	r2, r3
 8005354:	4b30      	ldr	r3, [pc, #192]	; (8005418 <can_tx_rx+0x240>)
 8005356:	791b      	ldrb	r3, [r3, #4]
 8005358:	2bff      	cmp	r3, #255	; 0xff
 800535a:	bf0c      	ite	eq
 800535c:	2301      	moveq	r3, #1
 800535e:	2300      	movne	r3, #0
 8005360:	b2db      	uxtb	r3, r3
 8005362:	4619      	mov	r1, r3
 8005364:	4b2c      	ldr	r3, [pc, #176]	; (8005418 <can_tx_rx+0x240>)
 8005366:	795b      	ldrb	r3, [r3, #5]
 8005368:	2bff      	cmp	r3, #255	; 0xff
 800536a:	bf0c      	ite	eq
 800536c:	2301      	moveq	r3, #1
 800536e:	2300      	movne	r3, #0
 8005370:	b2db      	uxtb	r3, r3
 8005372:	fb01 f303 	mul.w	r3, r1, r3
 8005376:	4013      	ands	r3, r2
 8005378:	4a27      	ldr	r2, [pc, #156]	; (8005418 <can_tx_rx+0x240>)
 800537a:	7992      	ldrb	r2, [r2, #6]
 800537c:	2aff      	cmp	r2, #255	; 0xff
 800537e:	bf0c      	ite	eq
 8005380:	2201      	moveq	r2, #1
 8005382:	2200      	movne	r2, #0
 8005384:	b2d2      	uxtb	r2, r2
 8005386:	4013      	ands	r3, r2
 8005388:	4a23      	ldr	r2, [pc, #140]	; (8005418 <can_tx_rx+0x240>)
 800538a:	79d2      	ldrb	r2, [r2, #7]
 800538c:	2aff      	cmp	r2, #255	; 0xff
 800538e:	bf0c      	ite	eq
 8005390:	2201      	moveq	r2, #1
 8005392:	2200      	movne	r2, #0
 8005394:	b2d2      	uxtb	r2, r2
 8005396:	4013      	ands	r3, r2
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <can_tx_rx+0x240>)
 800539a:	7a12      	ldrb	r2, [r2, #8]
 800539c:	2afe      	cmp	r2, #254	; 0xfe
 800539e:	bf0c      	ite	eq
 80053a0:	2201      	moveq	r2, #1
 80053a2:	2200      	movne	r2, #0
 80053a4:	b2d2      	uxtb	r2, r2
 80053a6:	4013      	ands	r3, r2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d004      	beq.n	80053b6 <can_tx_rx+0x1de>
		  update_fsm(&state, ZERO_CMD);
 80053ac:	217a      	movs	r1, #122	; 0x7a
 80053ae:	481b      	ldr	r0, [pc, #108]	; (800541c <can_tx_rx+0x244>)
 80053b0:	f7fe f824 	bl	80033fc <update_fsm>
}
 80053b4:	e017      	b.n	80053e6 <can_tx_rx+0x20e>
		  unpack_cmd(can_rx, controller.commands);	// Unpack commands
 80053b6:	4e18      	ldr	r6, [pc, #96]	; (8005418 <can_tx_rx+0x240>)
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <can_tx_rx+0x248>)
 80053ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80053bc:	466d      	mov	r5, sp
 80053be:	f106 0410 	add.w	r4, r6, #16
 80053c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80053cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80053ce:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80053d2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80053d6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80053da:	f7fc ff09 	bl	80021f0 <unpack_cmd>
		  controller.timeout = 0;					// Reset timeout counter
 80053de:	4b0a      	ldr	r3, [pc, #40]	; (8005408 <can_tx_rx+0x230>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
}
 80053e6:	bf00      	nop
 80053e8:	370c      	adds	r7, #12
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ee:	bf00      	nop
 80053f0:	20004c01 	.word	0x20004c01
 80053f4:	20004c0c 	.word	0x20004c0c
 80053f8:	200003b8 	.word	0x200003b8
 80053fc:	20004d50 	.word	0x20004d50
 8005400:	20000734 	.word	0x20000734
 8005404:	20004c50 	.word	0x20004c50
 8005408:	2000041c 	.word	0x2000041c
 800540c:	20004bd4 	.word	0x20004bd4
 8005410:	20004bd5 	.word	0x20004bd5
 8005414:	20004bdc 	.word	0x20004bdc
 8005418:	20004c00 	.word	0x20004c00
 800541c:	20000724 	.word	0x20000724
 8005420:	200004e4 	.word	0x200004e4

08005424 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
	return 1;
 8005428:	2301      	movs	r3, #1
}
 800542a:	4618      	mov	r0, r3
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <_kill>:

int _kill(int pid, int sig)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
 800543c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800543e:	f007 fc87 	bl	800cd50 <__errno>
 8005442:	4603      	mov	r3, r0
 8005444:	2216      	movs	r2, #22
 8005446:	601a      	str	r2, [r3, #0]
	return -1;
 8005448:	f04f 33ff 	mov.w	r3, #4294967295
}
 800544c:	4618      	mov	r0, r3
 800544e:	3708      	adds	r7, #8
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <_exit>:

void _exit (int status)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800545c:	f04f 31ff 	mov.w	r1, #4294967295
 8005460:	6878      	ldr	r0, [r7, #4]
 8005462:	f7ff ffe7 	bl	8005434 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005466:	e7fe      	b.n	8005466 <_exit+0x12>

08005468 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b086      	sub	sp, #24
 800546c:	af00      	add	r7, sp, #0
 800546e:	60f8      	str	r0, [r7, #12]
 8005470:	60b9      	str	r1, [r7, #8]
 8005472:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005474:	2300      	movs	r3, #0
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	e00a      	b.n	8005490 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800547a:	f3af 8000 	nop.w
 800547e:	4601      	mov	r1, r0
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	1c5a      	adds	r2, r3, #1
 8005484:	60ba      	str	r2, [r7, #8]
 8005486:	b2ca      	uxtb	r2, r1
 8005488:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	3301      	adds	r3, #1
 800548e:	617b      	str	r3, [r7, #20]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	429a      	cmp	r2, r3
 8005496:	dbf0      	blt.n	800547a <_read+0x12>
	}

return len;
 8005498:	687b      	ldr	r3, [r7, #4]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3718      	adds	r7, #24
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b086      	sub	sp, #24
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	60f8      	str	r0, [r7, #12]
 80054aa:	60b9      	str	r1, [r7, #8]
 80054ac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	617b      	str	r3, [r7, #20]
 80054b2:	e009      	b.n	80054c8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	1c5a      	adds	r2, r3, #1
 80054b8:	60ba      	str	r2, [r7, #8]
 80054ba:	781b      	ldrb	r3, [r3, #0]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 fa8b 	bl	80059d8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	3301      	adds	r3, #1
 80054c6:	617b      	str	r3, [r7, #20]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	dbf1      	blt.n	80054b4 <_write+0x12>
	}
	return len;
 80054d0:	687b      	ldr	r3, [r7, #4]
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3718      	adds	r7, #24
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <_close>:

int _close(int file)
{
 80054da:	b480      	push	{r7}
 80054dc:	b083      	sub	sp, #12
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
	return -1;
 80054e2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	370c      	adds	r7, #12
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b083      	sub	sp, #12
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
 80054fa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005502:	605a      	str	r2, [r3, #4]
	return 0;
 8005504:	2300      	movs	r3, #0
}
 8005506:	4618      	mov	r0, r3
 8005508:	370c      	adds	r7, #12
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <_isatty>:

int _isatty(int file)
{
 8005512:	b480      	push	{r7}
 8005514:	b083      	sub	sp, #12
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
	return 1;
 800551a:	2301      	movs	r3, #1
}
 800551c:	4618      	mov	r0, r3
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005528:	b480      	push	{r7}
 800552a:	b085      	sub	sp, #20
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
	return 0;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr
	...

08005544 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b086      	sub	sp, #24
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800554c:	4a14      	ldr	r2, [pc, #80]	; (80055a0 <_sbrk+0x5c>)
 800554e:	4b15      	ldr	r3, [pc, #84]	; (80055a4 <_sbrk+0x60>)
 8005550:	1ad3      	subs	r3, r2, r3
 8005552:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005558:	4b13      	ldr	r3, [pc, #76]	; (80055a8 <_sbrk+0x64>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005560:	4b11      	ldr	r3, [pc, #68]	; (80055a8 <_sbrk+0x64>)
 8005562:	4a12      	ldr	r2, [pc, #72]	; (80055ac <_sbrk+0x68>)
 8005564:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005566:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <_sbrk+0x64>)
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4413      	add	r3, r2
 800556e:	693a      	ldr	r2, [r7, #16]
 8005570:	429a      	cmp	r2, r3
 8005572:	d207      	bcs.n	8005584 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005574:	f007 fbec 	bl	800cd50 <__errno>
 8005578:	4603      	mov	r3, r0
 800557a:	220c      	movs	r2, #12
 800557c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800557e:	f04f 33ff 	mov.w	r3, #4294967295
 8005582:	e009      	b.n	8005598 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005584:	4b08      	ldr	r3, [pc, #32]	; (80055a8 <_sbrk+0x64>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800558a:	4b07      	ldr	r3, [pc, #28]	; (80055a8 <_sbrk+0x64>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4413      	add	r3, r2
 8005592:	4a05      	ldr	r2, [pc, #20]	; (80055a8 <_sbrk+0x64>)
 8005594:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005596:	68fb      	ldr	r3, [r7, #12]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3718      	adds	r7, #24
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}
 80055a0:	20008000 	.word	0x20008000
 80055a4:	00000400 	.word	0x00000400
 80055a8:	20005004 	.word	0x20005004
 80055ac:	200050f8 	.word	0x200050f8

080055b0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80055b0:	b480      	push	{r7}
 80055b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <SystemInit+0x20>)
 80055b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055ba:	4a05      	ldr	r2, [pc, #20]	; (80055d0 <SystemInit+0x20>)
 80055bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80055c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055c4:	bf00      	nop
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	e000ed00 	.word	0xe000ed00

080055d4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b09c      	sub	sp, #112	; 0x70
 80055d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80055da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80055de:	2200      	movs	r2, #0
 80055e0:	601a      	str	r2, [r3, #0]
 80055e2:	605a      	str	r2, [r3, #4]
 80055e4:	609a      	str	r2, [r3, #8]
 80055e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80055e8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055ec:	2200      	movs	r2, #0
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	605a      	str	r2, [r3, #4]
 80055f2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80055f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80055f8:	2200      	movs	r2, #0
 80055fa:	601a      	str	r2, [r3, #0]
 80055fc:	605a      	str	r2, [r3, #4]
 80055fe:	609a      	str	r2, [r3, #8]
 8005600:	60da      	str	r2, [r3, #12]
 8005602:	611a      	str	r2, [r3, #16]
 8005604:	615a      	str	r2, [r3, #20]
 8005606:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005608:	1d3b      	adds	r3, r7, #4
 800560a:	2234      	movs	r2, #52	; 0x34
 800560c:	2100      	movs	r1, #0
 800560e:	4618      	mov	r0, r3
 8005610:	f007 fbf0 	bl	800cdf4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8005614:	4b54      	ldr	r3, [pc, #336]	; (8005768 <MX_TIM1_Init+0x194>)
 8005616:	4a55      	ldr	r2, [pc, #340]	; (800576c <MX_TIM1_Init+0x198>)
 8005618:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800561a:	4b53      	ldr	r3, [pc, #332]	; (8005768 <MX_TIM1_Init+0x194>)
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8005620:	4b51      	ldr	r3, [pc, #324]	; (8005768 <MX_TIM1_Init+0x194>)
 8005622:	2220      	movs	r2, #32
 8005624:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 5600;
 8005626:	4b50      	ldr	r3, [pc, #320]	; (8005768 <MX_TIM1_Init+0x194>)
 8005628:	f44f 52af 	mov.w	r2, #5600	; 0x15e0
 800562c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800562e:	4b4e      	ldr	r3, [pc, #312]	; (8005768 <MX_TIM1_Init+0x194>)
 8005630:	2200      	movs	r2, #0
 8005632:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8005634:	4b4c      	ldr	r3, [pc, #304]	; (8005768 <MX_TIM1_Init+0x194>)
 8005636:	2201      	movs	r2, #1
 8005638:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800563a:	4b4b      	ldr	r3, [pc, #300]	; (8005768 <MX_TIM1_Init+0x194>)
 800563c:	2280      	movs	r2, #128	; 0x80
 800563e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8005640:	4849      	ldr	r0, [pc, #292]	; (8005768 <MX_TIM1_Init+0x194>)
 8005642:	f004 fa2d 	bl	8009aa0 <HAL_TIM_Base_Init>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d001      	beq.n	8005650 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800564c:	f7ff f899 	bl	8004782 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005650:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005654:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8005656:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800565a:	4619      	mov	r1, r3
 800565c:	4842      	ldr	r0, [pc, #264]	; (8005768 <MX_TIM1_Init+0x194>)
 800565e:	f004 fed3 	bl	800a408 <HAL_TIM_ConfigClockSource>
 8005662:	4603      	mov	r3, r0
 8005664:	2b00      	cmp	r3, #0
 8005666:	d001      	beq.n	800566c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8005668:	f7ff f88b 	bl	8004782 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800566c:	483e      	ldr	r0, [pc, #248]	; (8005768 <MX_TIM1_Init+0x194>)
 800566e:	f004 fad9 	bl	8009c24 <HAL_TIM_PWM_Init>
 8005672:	4603      	mov	r3, r0
 8005674:	2b00      	cmp	r3, #0
 8005676:	d001      	beq.n	800567c <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8005678:	f7ff f883 	bl	8004782 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800567c:	2300      	movs	r3, #0
 800567e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005680:	2300      	movs	r3, #0
 8005682:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005684:	2300      	movs	r3, #0
 8005686:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005688:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800568c:	4619      	mov	r1, r3
 800568e:	4836      	ldr	r0, [pc, #216]	; (8005768 <MX_TIM1_Init+0x194>)
 8005690:	f005 fcde 	bl	800b050 <HAL_TIMEx_MasterConfigSynchronization>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800569a:	f7ff f872 	bl	8004782 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800569e:	2360      	movs	r3, #96	; 0x60
 80056a0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80056a2:	2300      	movs	r3, #0
 80056a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80056a6:	2302      	movs	r3, #2
 80056a8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 80056aa:	2308      	movs	r3, #8
 80056ac:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80056ae:	2304      	movs	r3, #4
 80056b0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80056b2:	2300      	movs	r3, #0
 80056b4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80056b6:	2300      	movs	r3, #0
 80056b8:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80056ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056be:	2200      	movs	r2, #0
 80056c0:	4619      	mov	r1, r3
 80056c2:	4829      	ldr	r0, [pc, #164]	; (8005768 <MX_TIM1_Init+0x194>)
 80056c4:	f004 fd90 	bl	800a1e8 <HAL_TIM_PWM_ConfigChannel>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80056ce:	f7ff f858 	bl	8004782 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80056d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056d6:	2204      	movs	r2, #4
 80056d8:	4619      	mov	r1, r3
 80056da:	4823      	ldr	r0, [pc, #140]	; (8005768 <MX_TIM1_Init+0x194>)
 80056dc:	f004 fd84 	bl	800a1e8 <HAL_TIM_PWM_ConfigChannel>
 80056e0:	4603      	mov	r3, r0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80056e6:	f7ff f84c 	bl	8004782 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80056ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80056ee:	2208      	movs	r2, #8
 80056f0:	4619      	mov	r1, r3
 80056f2:	481d      	ldr	r0, [pc, #116]	; (8005768 <MX_TIM1_Init+0x194>)
 80056f4:	f004 fd78 	bl	800a1e8 <HAL_TIM_PWM_ConfigChannel>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d001      	beq.n	8005702 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80056fe:	f7ff f840 	bl	8004782 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 8005702:	4819      	ldr	r0, [pc, #100]	; (8005768 <MX_TIM1_Init+0x194>)
 8005704:	f005 fdc6 	bl	800b294 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8005708:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800570c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800570e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005712:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8005714:	2300      	movs	r3, #0
 8005716:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 8005718:	2364      	movs	r3, #100	; 0x64
 800571a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800571c:	2300      	movs	r3, #0
 800571e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8005720:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005724:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8005726:	2300      	movs	r3, #0
 8005728:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800572a:	2300      	movs	r3, #0
 800572c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800572e:	2300      	movs	r3, #0
 8005730:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8005732:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005736:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8005738:	2300      	movs	r3, #0
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800573c:	2300      	movs	r3, #0
 800573e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8005740:	2300      	movs	r3, #0
 8005742:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	4619      	mov	r1, r3
 8005748:	4807      	ldr	r0, [pc, #28]	; (8005768 <MX_TIM1_Init+0x194>)
 800574a:	f005 fd03 	bl	800b154 <HAL_TIMEx_ConfigBreakDeadTime>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d001      	beq.n	8005758 <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8005754:	f7ff f815 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8005758:	4803      	ldr	r0, [pc, #12]	; (8005768 <MX_TIM1_Init+0x194>)
 800575a:	f000 f82f 	bl	80057bc <HAL_TIM_MspPostInit>

}
 800575e:	bf00      	nop
 8005760:	3770      	adds	r7, #112	; 0x70
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20005008 	.word	0x20005008
 800576c:	40012c00 	.word	0x40012c00

08005770 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4a0d      	ldr	r2, [pc, #52]	; (80057b4 <HAL_TIM_Base_MspInit+0x44>)
 800577e:	4293      	cmp	r3, r2
 8005780:	d113      	bne.n	80057aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <HAL_TIM_Base_MspInit+0x48>)
 8005784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005786:	4a0c      	ldr	r2, [pc, #48]	; (80057b8 <HAL_TIM_Base_MspInit+0x48>)
 8005788:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800578c:	6613      	str	r3, [r2, #96]	; 0x60
 800578e:	4b0a      	ldr	r3, [pc, #40]	; (80057b8 <HAL_TIM_Base_MspInit+0x48>)
 8005790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005796:	60fb      	str	r3, [r7, #12]
 8005798:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800579a:	2200      	movs	r2, #0
 800579c:	2100      	movs	r1, #0
 800579e:	2019      	movs	r0, #25
 80057a0:	f001 fd1b 	bl	80071da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80057a4:	2019      	movs	r0, #25
 80057a6:	f001 fd32 	bl	800720e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80057aa:	bf00      	nop
 80057ac:	3710      	adds	r7, #16
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	40012c00 	.word	0x40012c00
 80057b8:	40021000 	.word	0x40021000

080057bc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b08a      	sub	sp, #40	; 0x28
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80057c4:	f107 0314 	add.w	r3, r7, #20
 80057c8:	2200      	movs	r2, #0
 80057ca:	601a      	str	r2, [r3, #0]
 80057cc:	605a      	str	r2, [r3, #4]
 80057ce:	609a      	str	r2, [r3, #8]
 80057d0:	60da      	str	r2, [r3, #12]
 80057d2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a2f      	ldr	r2, [pc, #188]	; (8005898 <HAL_TIM_MspPostInit+0xdc>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d157      	bne.n	800588e <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80057de:	4b2f      	ldr	r3, [pc, #188]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 80057e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057e2:	4a2e      	ldr	r2, [pc, #184]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 80057e4:	f043 0304 	orr.w	r3, r3, #4
 80057e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80057ea:	4b2c      	ldr	r3, [pc, #176]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 80057ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057ee:	f003 0304 	and.w	r3, r3, #4
 80057f2:	613b      	str	r3, [r7, #16]
 80057f4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057f6:	4b29      	ldr	r3, [pc, #164]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 80057f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057fa:	4a28      	ldr	r2, [pc, #160]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 80057fc:	f043 0302 	orr.w	r3, r3, #2
 8005800:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005802:	4b26      	ldr	r3, [pc, #152]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	f003 0302 	and.w	r3, r3, #2
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800580e:	4b23      	ldr	r3, [pc, #140]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 8005810:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005812:	4a22      	ldr	r2, [pc, #136]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 8005814:	f043 0301 	orr.w	r3, r3, #1
 8005818:	64d3      	str	r3, [r2, #76]	; 0x4c
 800581a:	4b20      	ldr	r3, [pc, #128]	; (800589c <HAL_TIM_MspPostInit+0xe0>)
 800581c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800581e:	f003 0301 	and.w	r3, r3, #1
 8005822:	60bb      	str	r3, [r7, #8]
 8005824:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800582a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800582c:	2302      	movs	r3, #2
 800582e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005830:	2300      	movs	r3, #0
 8005832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005834:	2300      	movs	r3, #0
 8005836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8005838:	2304      	movs	r3, #4
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800583c:	f107 0314 	add.w	r3, r7, #20
 8005840:	4619      	mov	r1, r3
 8005842:	4817      	ldr	r0, [pc, #92]	; (80058a0 <HAL_TIM_MspPostInit+0xe4>)
 8005844:	f002 fea0 	bl	8008588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005848:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800584c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800584e:	2302      	movs	r3, #2
 8005850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005852:	2300      	movs	r3, #0
 8005854:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005856:	2300      	movs	r3, #0
 8005858:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800585a:	2304      	movs	r3, #4
 800585c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800585e:	f107 0314 	add.w	r3, r7, #20
 8005862:	4619      	mov	r1, r3
 8005864:	480f      	ldr	r0, [pc, #60]	; (80058a4 <HAL_TIM_MspPostInit+0xe8>)
 8005866:	f002 fe8f 	bl	8008588 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 800586a:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 800586e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005870:	2302      	movs	r3, #2
 8005872:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005874:	2300      	movs	r3, #0
 8005876:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005878:	2300      	movs	r3, #0
 800587a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800587c:	2306      	movs	r3, #6
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005880:	f107 0314 	add.w	r3, r7, #20
 8005884:	4619      	mov	r1, r3
 8005886:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800588a:	f002 fe7d 	bl	8008588 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800588e:	bf00      	nop
 8005890:	3728      	adds	r7, #40	; 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	40012c00 	.word	0x40012c00
 800589c:	40021000 	.word	0x40021000
 80058a0:	48000800 	.word	0x48000800
 80058a4:	48000400 	.word	0x48000400

080058a8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80058ac:	4b22      	ldr	r3, [pc, #136]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058ae:	4a23      	ldr	r2, [pc, #140]	; (800593c <MX_USART2_UART_Init+0x94>)
 80058b0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 80058b2:	4b21      	ldr	r3, [pc, #132]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058b4:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 80058b8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80058ba:	4b1f      	ldr	r3, [pc, #124]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058bc:	2200      	movs	r2, #0
 80058be:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80058c0:	4b1d      	ldr	r3, [pc, #116]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058c2:	2200      	movs	r2, #0
 80058c4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80058cc:	4b1a      	ldr	r3, [pc, #104]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058ce:	220c      	movs	r2, #12
 80058d0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058d2:	4b19      	ldr	r3, [pc, #100]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058d8:	4b17      	ldr	r3, [pc, #92]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058da:	2200      	movs	r2, #0
 80058dc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058de:	4b16      	ldr	r3, [pc, #88]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058e0:	2200      	movs	r2, #0
 80058e2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058e4:	4b14      	ldr	r3, [pc, #80]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058ea:	4b13      	ldr	r3, [pc, #76]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058f0:	4811      	ldr	r0, [pc, #68]	; (8005938 <MX_USART2_UART_Init+0x90>)
 80058f2:	f005 fd4d 	bl	800b390 <HAL_UART_Init>
 80058f6:	4603      	mov	r3, r0
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d001      	beq.n	8005900 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80058fc:	f7fe ff41 	bl	8004782 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005900:	2100      	movs	r1, #0
 8005902:	480d      	ldr	r0, [pc, #52]	; (8005938 <MX_USART2_UART_Init+0x90>)
 8005904:	f007 f951 	bl	800cbaa <HAL_UARTEx_SetTxFifoThreshold>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800590e:	f7fe ff38 	bl	8004782 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8005912:	2100      	movs	r1, #0
 8005914:	4808      	ldr	r0, [pc, #32]	; (8005938 <MX_USART2_UART_Init+0x90>)
 8005916:	f007 f986 	bl	800cc26 <HAL_UARTEx_SetRxFifoThreshold>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8005920:	f7fe ff2f 	bl	8004782 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8005924:	4804      	ldr	r0, [pc, #16]	; (8005938 <MX_USART2_UART_Init+0x90>)
 8005926:	f007 f907 	bl	800cb38 <HAL_UARTEx_DisableFifoMode>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d001      	beq.n	8005934 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005930:	f7fe ff27 	bl	8004782 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8005934:	bf00      	nop
 8005936:	bd80      	pop	{r7, pc}
 8005938:	20005054 	.word	0x20005054
 800593c:	40004400 	.word	0x40004400

08005940 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b08a      	sub	sp, #40	; 0x28
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005948:	f107 0314 	add.w	r3, r7, #20
 800594c:	2200      	movs	r2, #0
 800594e:	601a      	str	r2, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
 8005952:	609a      	str	r2, [r3, #8]
 8005954:	60da      	str	r2, [r3, #12]
 8005956:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a1b      	ldr	r2, [pc, #108]	; (80059cc <HAL_UART_MspInit+0x8c>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d12f      	bne.n	80059c2 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8005962:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_UART_MspInit+0x90>)
 8005964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005966:	4a1a      	ldr	r2, [pc, #104]	; (80059d0 <HAL_UART_MspInit+0x90>)
 8005968:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800596c:	6593      	str	r3, [r2, #88]	; 0x58
 800596e:	4b18      	ldr	r3, [pc, #96]	; (80059d0 <HAL_UART_MspInit+0x90>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005976:	613b      	str	r3, [r7, #16]
 8005978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800597a:	4b15      	ldr	r3, [pc, #84]	; (80059d0 <HAL_UART_MspInit+0x90>)
 800597c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800597e:	4a14      	ldr	r2, [pc, #80]	; (80059d0 <HAL_UART_MspInit+0x90>)
 8005980:	f043 0302 	orr.w	r3, r3, #2
 8005984:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005986:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_UART_MspInit+0x90>)
 8005988:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800598a:	f003 0302 	and.w	r3, r3, #2
 800598e:	60fb      	str	r3, [r7, #12]
 8005990:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8005992:	2318      	movs	r3, #24
 8005994:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005996:	2302      	movs	r3, #2
 8005998:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800599e:	2300      	movs	r3, #0
 80059a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80059a2:	2307      	movs	r3, #7
 80059a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059a6:	f107 0314 	add.w	r3, r7, #20
 80059aa:	4619      	mov	r1, r3
 80059ac:	4809      	ldr	r0, [pc, #36]	; (80059d4 <HAL_UART_MspInit+0x94>)
 80059ae:	f002 fdeb 	bl	8008588 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80059b2:	2200      	movs	r2, #0
 80059b4:	2100      	movs	r1, #0
 80059b6:	2026      	movs	r0, #38	; 0x26
 80059b8:	f001 fc0f 	bl	80071da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80059bc:	2026      	movs	r0, #38	; 0x26
 80059be:	f001 fc26 	bl	800720e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80059c2:	bf00      	nop
 80059c4:	3728      	adds	r7, #40	; 0x28
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	40004400 	.word	0x40004400
 80059d0:	40021000 	.word	0x40021000
 80059d4:	48000400 	.word	0x48000400

080059d8 <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 80059e0:	1d39      	adds	r1, r7, #4
 80059e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80059e6:	2201      	movs	r2, #1
 80059e8:	4803      	ldr	r0, [pc, #12]	; (80059f8 <__io_putchar+0x20>)
 80059ea:	f005 fd21 	bl	800b430 <HAL_UART_Transmit>
return 0;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3708      	adds	r7, #8
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	20005054 	.word	0x20005054

080059fc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8005a04:	2201      	movs	r2, #1
 8005a06:	4904      	ldr	r1, [pc, #16]	; (8005a18 <HAL_UART_RxCpltCallback+0x1c>)
 8005a08:	4804      	ldr	r0, [pc, #16]	; (8005a1c <HAL_UART_RxCpltCallback+0x20>)
 8005a0a:	f005 fda7 	bl	800b55c <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20004c4c 	.word	0x20004c4c
 8005a1c:	20005054 	.word	0x20005054

08005a20 <store_eeprom_regs>:

#include "user_config.h"
#include "eeprom.h"

void store_eeprom_regs()
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	af00      	add	r7, sp, #0
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005a24:	2380      	movs	r3, #128	; 0x80
 8005a26:	4a03      	ldr	r2, [pc, #12]	; (8005a34 <store_eeprom_regs+0x14>)
 8005a28:	2140      	movs	r1, #64	; 0x40
 8005a2a:	4803      	ldr	r0, [pc, #12]	; (8005a38 <store_eeprom_regs+0x18>)
 8005a2c:	f7fc f988 	bl	8001d40 <eeprom_store>
}
 8005a30:	bf00      	nop
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	20004d50 	.word	0x20004d50
 8005a38:	20004c50 	.word	0x20004c50

08005a3c <load_eeprom_regs>:

void load_eeprom_regs()
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8005a40:	2380      	movs	r3, #128	; 0x80
 8005a42:	4a03      	ldr	r2, [pc, #12]	; (8005a50 <load_eeprom_regs+0x14>)
 8005a44:	2140      	movs	r1, #64	; 0x40
 8005a46:	4803      	ldr	r0, [pc, #12]	; (8005a54 <load_eeprom_regs+0x18>)
 8005a48:	f7fc f8f6 	bl	8001c38 <eeprom_restore>
}
 8005a4c:	bf00      	nop
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	20004d50 	.word	0x20004d50
 8005a54:	20004c50 	.word	0x20004c50

08005a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005a58:	480d      	ldr	r0, [pc, #52]	; (8005a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005a5a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005a5c:	480d      	ldr	r0, [pc, #52]	; (8005a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8005a5e:	490e      	ldr	r1, [pc, #56]	; (8005a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8005a60:	4a0e      	ldr	r2, [pc, #56]	; (8005a9c <LoopForever+0xe>)
  movs r3, #0
 8005a62:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005a64:	e002      	b.n	8005a6c <LoopCopyDataInit>

08005a66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005a66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005a68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005a6a:	3304      	adds	r3, #4

08005a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005a6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005a6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005a70:	d3f9      	bcc.n	8005a66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005a72:	4a0b      	ldr	r2, [pc, #44]	; (8005aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005a74:	4c0b      	ldr	r4, [pc, #44]	; (8005aa4 <LoopForever+0x16>)
  movs r3, #0
 8005a76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005a78:	e001      	b.n	8005a7e <LoopFillZerobss>

08005a7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005a7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a7c:	3204      	adds	r2, #4

08005a7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005a7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005a80:	d3fb      	bcc.n	8005a7a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8005a82:	f7ff fd95 	bl	80055b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a86:	f007 f969 	bl	800cd5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005a8a:	f7fe fb31 	bl	80040f0 <main>

08005a8e <LoopForever>:

LoopForever:
    b LoopForever
 8005a8e:	e7fe      	b.n	8005a8e <LoopForever>
  ldr   r0, =_estack
 8005a90:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8005a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005a98:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8005a9c:	08012bf8 	.word	0x08012bf8
  ldr r2, =_sbss
 8005aa0:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8005aa4:	200050f8 	.word	0x200050f8

08005aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005aa8:	e7fe      	b.n	8005aa8 <ADC1_2_IRQHandler>

08005aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005aaa:	b580      	push	{r7, lr}
 8005aac:	b082      	sub	sp, #8
 8005aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005ab4:	2003      	movs	r0, #3
 8005ab6:	f001 fb85 	bl	80071c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005aba:	2000      	movs	r0, #0
 8005abc:	f000 f80e 	bl	8005adc <HAL_InitTick>
 8005ac0:	4603      	mov	r3, r0
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d002      	beq.n	8005acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	71fb      	strb	r3, [r7, #7]
 8005aca:	e001      	b.n	8005ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005acc:	f7ff fad2 	bl	8005074 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005ad0:	79fb      	ldrb	r3, [r7, #7]

}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}
	...

08005adc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005ae8:	4b16      	ldr	r3, [pc, #88]	; (8005b44 <HAL_InitTick+0x68>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d022      	beq.n	8005b36 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8005af0:	4b15      	ldr	r3, [pc, #84]	; (8005b48 <HAL_InitTick+0x6c>)
 8005af2:	681a      	ldr	r2, [r3, #0]
 8005af4:	4b13      	ldr	r3, [pc, #76]	; (8005b44 <HAL_InitTick+0x68>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005afc:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fb90 	bl	800722a <HAL_SYSTICK_Config>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10f      	bne.n	8005b30 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b0f      	cmp	r3, #15
 8005b14:	d809      	bhi.n	8005b2a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005b16:	2200      	movs	r2, #0
 8005b18:	6879      	ldr	r1, [r7, #4]
 8005b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1e:	f001 fb5c 	bl	80071da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005b22:	4a0a      	ldr	r2, [pc, #40]	; (8005b4c <HAL_InitTick+0x70>)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6013      	str	r3, [r2, #0]
 8005b28:	e007      	b.n	8005b3a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	73fb      	strb	r3, [r7, #15]
 8005b2e:	e004      	b.n	8005b3a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e001      	b.n	8005b3a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8005b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}
 8005b44:	20000008 	.word	0x20000008
 8005b48:	20000000 	.word	0x20000000
 8005b4c:	20000004 	.word	0x20000004

08005b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b54:	4b05      	ldr	r3, [pc, #20]	; (8005b6c <HAL_IncTick+0x1c>)
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <HAL_IncTick+0x20>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	4a03      	ldr	r2, [pc, #12]	; (8005b6c <HAL_IncTick+0x1c>)
 8005b60:	6013      	str	r3, [r2, #0]
}
 8005b62:	bf00      	nop
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr
 8005b6c:	200050e4 	.word	0x200050e4
 8005b70:	20000008 	.word	0x20000008

08005b74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b74:	b480      	push	{r7}
 8005b76:	af00      	add	r7, sp, #0
  return uwTick;
 8005b78:	4b03      	ldr	r3, [pc, #12]	; (8005b88 <HAL_GetTick+0x14>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr
 8005b86:	bf00      	nop
 8005b88:	200050e4 	.word	0x200050e4

08005b8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b94:	f7ff ffee 	bl	8005b74 <HAL_GetTick>
 8005b98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d004      	beq.n	8005bb0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005ba6:	4b09      	ldr	r3, [pc, #36]	; (8005bcc <HAL_Delay+0x40>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4413      	add	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005bb0:	bf00      	nop
 8005bb2:	f7ff ffdf 	bl	8005b74 <HAL_GetTick>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	1ad3      	subs	r3, r2, r3
 8005bbc:	68fa      	ldr	r2, [r7, #12]
 8005bbe:	429a      	cmp	r2, r3
 8005bc0:	d8f7      	bhi.n	8005bb2 <HAL_Delay+0x26>
  {
  }
}
 8005bc2:	bf00      	nop
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20000008 	.word	0x20000008

08005bd0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	609a      	str	r2, [r3, #8]
}
 8005bea:	bf00      	nop
 8005bec:	370c      	adds	r7, #12
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr

08005bf6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005bf6:	b480      	push	{r7}
 8005bf8:	b083      	sub	sp, #12
 8005bfa:	af00      	add	r7, sp, #0
 8005bfc:	6078      	str	r0, [r7, #4]
 8005bfe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	431a      	orrs	r2, r3
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	609a      	str	r2, [r3, #8]
}
 8005c10:	bf00      	nop
 8005c12:	370c      	adds	r7, #12
 8005c14:	46bd      	mov	sp, r7
 8005c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1a:	4770      	bx	lr

08005c1c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	689b      	ldr	r3, [r3, #8]
 8005c28:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
 8005c44:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	3360      	adds	r3, #96	; 0x60
 8005c4a:	461a      	mov	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	681a      	ldr	r2, [r3, #0]
 8005c58:	4b08      	ldr	r3, [pc, #32]	; (8005c7c <LL_ADC_SetOffset+0x44>)
 8005c5a:	4013      	ands	r3, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	4313      	orrs	r3, r2
 8005c68:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	03fff000 	.word	0x03fff000

08005c80 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b085      	sub	sp, #20
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3360      	adds	r3, #96	; 0x60
 8005c8e:	461a      	mov	r2, r3
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3714      	adds	r7, #20
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005cac:	b480      	push	{r7}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3360      	adds	r3, #96	; 0x60
 8005cbc:	461a      	mov	r2, r3
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cc6:	697b      	ldr	r3, [r7, #20]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	431a      	orrs	r2, r3
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005cd6:	bf00      	nop
 8005cd8:	371c      	adds	r7, #28
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr

08005ce2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005ce2:	b480      	push	{r7}
 8005ce4:	b087      	sub	sp, #28
 8005ce6:	af00      	add	r7, sp, #0
 8005ce8:	60f8      	str	r0, [r7, #12]
 8005cea:	60b9      	str	r1, [r7, #8]
 8005cec:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	3360      	adds	r3, #96	; 0x60
 8005cf2:	461a      	mov	r2, r3
 8005cf4:	68bb      	ldr	r3, [r7, #8]
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4413      	add	r3, r2
 8005cfa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005cfc:	697b      	ldr	r3, [r7, #20]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	431a      	orrs	r2, r3
 8005d08:	697b      	ldr	r3, [r7, #20]
 8005d0a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	3360      	adds	r3, #96	; 0x60
 8005d28:	461a      	mov	r2, r3
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	431a      	orrs	r2, r3
 8005d3e:	697b      	ldr	r3, [r7, #20]
 8005d40:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8005d42:	bf00      	nop
 8005d44:	371c      	adds	r7, #28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr

08005d4e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8005d4e:	b480      	push	{r7}
 8005d50:	b083      	sub	sp, #12
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	695b      	ldr	r3, [r3, #20]
 8005d5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	615a      	str	r2, [r3, #20]
}
 8005d68:	bf00      	nop
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr

08005d74 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b083      	sub	sp, #12
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d101      	bne.n	8005d8c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e000      	b.n	8005d8e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8005d8c:	2300      	movs	r3, #0
}
 8005d8e:	4618      	mov	r0, r3
 8005d90:	370c      	adds	r7, #12
 8005d92:	46bd      	mov	sp, r7
 8005d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d98:	4770      	bx	lr

08005d9a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8005d9a:	b480      	push	{r7}
 8005d9c:	b087      	sub	sp, #28
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	3330      	adds	r3, #48	; 0x30
 8005daa:	461a      	mov	r2, r3
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	0a1b      	lsrs	r3, r3, #8
 8005db0:	009b      	lsls	r3, r3, #2
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	4413      	add	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	f003 031f 	and.w	r3, r3, #31
 8005dc4:	211f      	movs	r1, #31
 8005dc6:	fa01 f303 	lsl.w	r3, r1, r3
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	401a      	ands	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	0e9b      	lsrs	r3, r3, #26
 8005dd2:	f003 011f 	and.w	r1, r3, #31
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 031f 	and.w	r3, r3, #31
 8005ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8005de0:	431a      	orrs	r2, r3
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005de6:	bf00      	nop
 8005de8:	371c      	adds	r7, #28
 8005dea:	46bd      	mov	sp, r7
 8005dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df0:	4770      	bx	lr

08005df2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005df2:	b480      	push	{r7}
 8005df4:	b087      	sub	sp, #28
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	60f8      	str	r0, [r7, #12]
 8005dfa:	60b9      	str	r1, [r7, #8]
 8005dfc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	3314      	adds	r3, #20
 8005e02:	461a      	mov	r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	0e5b      	lsrs	r3, r3, #25
 8005e08:	009b      	lsls	r3, r3, #2
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	4413      	add	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	0d1b      	lsrs	r3, r3, #20
 8005e1a:	f003 031f 	and.w	r3, r3, #31
 8005e1e:	2107      	movs	r1, #7
 8005e20:	fa01 f303 	lsl.w	r3, r1, r3
 8005e24:	43db      	mvns	r3, r3
 8005e26:	401a      	ands	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	0d1b      	lsrs	r3, r3, #20
 8005e2c:	f003 031f 	and.w	r3, r3, #31
 8005e30:	6879      	ldr	r1, [r7, #4]
 8005e32:	fa01 f303 	lsl.w	r3, r1, r3
 8005e36:	431a      	orrs	r2, r3
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005e3c:	bf00      	nop
 8005e3e:	371c      	adds	r7, #28
 8005e40:	46bd      	mov	sp, r7
 8005e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e46:	4770      	bx	lr

08005e48 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005e48:	b480      	push	{r7}
 8005e4a:	b085      	sub	sp, #20
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005e5a:	68bb      	ldr	r3, [r7, #8]
 8005e5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e60:	43db      	mvns	r3, r3
 8005e62:	401a      	ands	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f003 0318 	and.w	r3, r3, #24
 8005e6a:	4908      	ldr	r1, [pc, #32]	; (8005e8c <LL_ADC_SetChannelSingleDiff+0x44>)
 8005e6c:	40d9      	lsrs	r1, r3
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	400b      	ands	r3, r1
 8005e72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e76:	431a      	orrs	r2, r3
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005e7e:	bf00      	nop
 8005e80:	3714      	adds	r7, #20
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr
 8005e8a:	bf00      	nop
 8005e8c:	0007ffff 	.word	0x0007ffff

08005e90 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	689b      	ldr	r3, [r3, #8]
 8005e9c:	f003 031f 	and.w	r3, r3, #31
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b083      	sub	sp, #12
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005ebc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6093      	str	r3, [r2, #8]
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005ed0:	b480      	push	{r7}
 8005ed2:	b083      	sub	sp, #12
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005ee0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ee4:	d101      	bne.n	8005eea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e000      	b.n	8005eec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	370c      	adds	r7, #12
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef6:	4770      	bx	lr

08005ef8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005f08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f0c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f30:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f34:	d101      	bne.n	8005f3a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005f36:	2301      	movs	r3, #1
 8005f38:	e000      	b.n	8005f3c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005f3a:	2300      	movs	r3, #0
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005f5c:	f043 0201 	orr.w	r2, r3, #1
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	689b      	ldr	r3, [r3, #8]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d101      	bne.n	8005f88 <LL_ADC_IsEnabled+0x18>
 8005f84:	2301      	movs	r3, #1
 8005f86:	e000      	b.n	8005f8a <LL_ADC_IsEnabled+0x1a>
 8005f88:	2300      	movs	r3, #0
}
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	370c      	adds	r7, #12
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr

08005f96 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8005f96:	b480      	push	{r7}
 8005f98:	b083      	sub	sp, #12
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005faa:	f043 0204 	orr.w	r2, r3, #4
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8005fb2:	bf00      	nop
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	689b      	ldr	r3, [r3, #8]
 8005fca:	f003 0304 	and.w	r3, r3, #4
 8005fce:	2b04      	cmp	r3, #4
 8005fd0:	d101      	bne.n	8005fd6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005fd6:	2300      	movs	r3, #0
}
 8005fd8:	4618      	mov	r0, r3
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe2:	4770      	bx	lr

08005fe4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b083      	sub	sp, #12
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	f003 0308 	and.w	r3, r3, #8
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d101      	bne.n	8005ffc <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	e000      	b.n	8005ffe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800600c:	b590      	push	{r4, r7, lr}
 800600e:	b089      	sub	sp, #36	; 0x24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006014:	2300      	movs	r3, #0
 8006016:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006018:	2300      	movs	r3, #0
 800601a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e177      	b.n	8006316 <HAL_ADC_Init+0x30a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	695b      	ldr	r3, [r3, #20]
 800602a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006030:	2b00      	cmp	r3, #0
 8006032:	d109      	bne.n	8006048 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f7fb f915 	bl	8001264 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2200      	movs	r2, #0
 8006044:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7ff ff3f 	bl	8005ed0 <LL_ADC_IsDeepPowerDownEnabled>
 8006052:	4603      	mov	r3, r0
 8006054:	2b00      	cmp	r3, #0
 8006056:	d004      	beq.n	8006062 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4618      	mov	r0, r3
 800605e:	f7ff ff25 	bl	8005eac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4618      	mov	r0, r3
 8006068:	f7ff ff5a 	bl	8005f20 <LL_ADC_IsInternalRegulatorEnabled>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d115      	bne.n	800609e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4618      	mov	r0, r3
 8006078:	f7ff ff3e 	bl	8005ef8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800607c:	4b9c      	ldr	r3, [pc, #624]	; (80062f0 <HAL_ADC_Init+0x2e4>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	099b      	lsrs	r3, r3, #6
 8006082:	4a9c      	ldr	r2, [pc, #624]	; (80062f4 <HAL_ADC_Init+0x2e8>)
 8006084:	fba2 2303 	umull	r2, r3, r2, r3
 8006088:	099b      	lsrs	r3, r3, #6
 800608a:	3301      	adds	r3, #1
 800608c:	005b      	lsls	r3, r3, #1
 800608e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006090:	e002      	b.n	8006098 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8006092:	68bb      	ldr	r3, [r7, #8]
 8006094:	3b01      	subs	r3, #1
 8006096:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f9      	bne.n	8006092 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7ff ff3c 	bl	8005f20 <LL_ADC_IsInternalRegulatorEnabled>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d10d      	bne.n	80060ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	f043 0210 	orr.w	r2, r3, #16
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060be:	f043 0201 	orr.w	r2, r3, #1
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7ff ff75 	bl	8005fbe <LL_ADC_REG_IsConversionOngoing>
 80060d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060da:	f003 0310 	and.w	r3, r3, #16
 80060de:	2b00      	cmp	r3, #0
 80060e0:	f040 8110 	bne.w	8006304 <HAL_ADC_Init+0x2f8>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80060e4:	697b      	ldr	r3, [r7, #20]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 810c 	bne.w	8006304 <HAL_ADC_Init+0x2f8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80060f4:	f043 0202 	orr.w	r2, r3, #2
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff ff35 	bl	8005f70 <LL_ADC_IsEnabled>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d111      	bne.n	8006130 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800610c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006110:	f7ff ff2e 	bl	8005f70 <LL_ADC_IsEnabled>
 8006114:	4604      	mov	r4, r0
 8006116:	4878      	ldr	r0, [pc, #480]	; (80062f8 <HAL_ADC_Init+0x2ec>)
 8006118:	f7ff ff2a 	bl	8005f70 <LL_ADC_IsEnabled>
 800611c:	4603      	mov	r3, r0
 800611e:	4323      	orrs	r3, r4
 8006120:	2b00      	cmp	r3, #0
 8006122:	d105      	bne.n	8006130 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	4619      	mov	r1, r3
 800612a:	4874      	ldr	r0, [pc, #464]	; (80062fc <HAL_ADC_Init+0x2f0>)
 800612c:	f7ff fd50 	bl	8005bd0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	7f5b      	ldrb	r3, [r3, #29]
 8006134:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800613a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8006140:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8006146:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800614e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006150:	4313      	orrs	r3, r2
 8006152:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800615a:	2b01      	cmp	r3, #1
 800615c:	d106      	bne.n	800616c <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006162:	3b01      	subs	r3, #1
 8006164:	045b      	lsls	r3, r3, #17
 8006166:	69ba      	ldr	r2, [r7, #24]
 8006168:	4313      	orrs	r3, r2
 800616a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006180:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006182:	69ba      	ldr	r2, [r7, #24]
 8006184:	4313      	orrs	r3, r2
 8006186:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68da      	ldr	r2, [r3, #12]
 800618e:	4b5c      	ldr	r3, [pc, #368]	; (8006300 <HAL_ADC_Init+0x2f4>)
 8006190:	4013      	ands	r3, r2
 8006192:	687a      	ldr	r2, [r7, #4]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	69b9      	ldr	r1, [r7, #24]
 8006198:	430b      	orrs	r3, r1
 800619a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	691b      	ldr	r3, [r3, #16]
 80061a2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7ff ff01 	bl	8005fbe <LL_ADC_REG_IsConversionOngoing>
 80061bc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7ff ff0e 	bl	8005fe4 <LL_ADC_INJ_IsConversionOngoing>
 80061c8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d16d      	bne.n	80062ac <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d16a      	bne.n	80062ac <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061da:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80061e2:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 80061e4:	4313      	orrs	r3, r2
 80061e6:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80061f2:	f023 0302 	bic.w	r3, r3, #2
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	6812      	ldr	r2, [r2, #0]
 80061fa:	69b9      	ldr	r1, [r7, #24]
 80061fc:	430b      	orrs	r3, r1
 80061fe:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	691b      	ldr	r3, [r3, #16]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d017      	beq.n	8006238 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	691a      	ldr	r2, [r3, #16]
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006216:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006220:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006224:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6911      	ldr	r1, [r2, #16]
 800622c:	687a      	ldr	r2, [r7, #4]
 800622e:	6812      	ldr	r2, [r2, #0]
 8006230:	430b      	orrs	r3, r1
 8006232:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8006236:	e013      	b.n	8006260 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	691a      	ldr	r2, [r3, #16]
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006246:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	6812      	ldr	r2, [r2, #0]
 8006254:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8006258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800625c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006266:	2b01      	cmp	r3, #1
 8006268:	d118      	bne.n	800629c <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006274:	f023 0304 	bic.w	r3, r3, #4
 8006278:	687a      	ldr	r2, [r7, #4]
 800627a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 800627c:	687a      	ldr	r2, [r7, #4]
 800627e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006280:	4311      	orrs	r1, r2
 8006282:	687a      	ldr	r2, [r7, #4]
 8006284:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006286:	4311      	orrs	r1, r2
 8006288:	687a      	ldr	r2, [r7, #4]
 800628a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800628c:	430a      	orrs	r2, r1
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f042 0201 	orr.w	r2, r2, #1
 8006298:	611a      	str	r2, [r3, #16]
 800629a:	e007      	b.n	80062ac <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691a      	ldr	r2, [r3, #16]
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f022 0201 	bic.w	r2, r2, #1
 80062aa:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d10c      	bne.n	80062ce <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ba:	f023 010f 	bic.w	r1, r3, #15
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	1e5a      	subs	r2, r3, #1
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	430a      	orrs	r2, r1
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
 80062cc:	e007      	b.n	80062de <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f022 020f 	bic.w	r2, r2, #15
 80062dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062e2:	f023 0303 	bic.w	r3, r3, #3
 80062e6:	f043 0201 	orr.w	r2, r3, #1
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80062ee:	e011      	b.n	8006314 <HAL_ADC_Init+0x308>
 80062f0:	20000000 	.word	0x20000000
 80062f4:	053e2d63 	.word	0x053e2d63
 80062f8:	50000100 	.word	0x50000100
 80062fc:	50000300 	.word	0x50000300
 8006300:	fff04007 	.word	0xfff04007
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006308:	f043 0210 	orr.w	r2, r3, #16
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006310:	2301      	movs	r3, #1
 8006312:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006314:	7ffb      	ldrb	r3, [r7, #31]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3724      	adds	r7, #36	; 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	bd90      	pop	{r4, r7, pc}
 800631e:	bf00      	nop

08006320 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b086      	sub	sp, #24
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800632c:	4851      	ldr	r0, [pc, #324]	; (8006474 <HAL_ADC_Start_DMA+0x154>)
 800632e:	f7ff fdaf 	bl	8005e90 <LL_ADC_GetMultimode>
 8006332:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4618      	mov	r0, r3
 800633a:	f7ff fe40 	bl	8005fbe <LL_ADC_REG_IsConversionOngoing>
 800633e:	4603      	mov	r3, r0
 8006340:	2b00      	cmp	r3, #0
 8006342:	f040 808f 	bne.w	8006464 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800634c:	2b01      	cmp	r3, #1
 800634e:	d101      	bne.n	8006354 <HAL_ADC_Start_DMA+0x34>
 8006350:	2302      	movs	r3, #2
 8006352:	e08a      	b.n	800646a <HAL_ADC_Start_DMA+0x14a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d005      	beq.n	800636e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	2b05      	cmp	r3, #5
 8006366:	d002      	beq.n	800636e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8006368:	693b      	ldr	r3, [r7, #16]
 800636a:	2b09      	cmp	r3, #9
 800636c:	d173      	bne.n	8006456 <HAL_ADC_Start_DMA+0x136>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f000 fc98 	bl	8006ca4 <ADC_Enable>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d166      	bne.n	800644c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006382:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006386:	f023 0301 	bic.w	r3, r3, #1
 800638a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a38      	ldr	r2, [pc, #224]	; (8006478 <HAL_ADC_Start_DMA+0x158>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d002      	beq.n	80063a2 <HAL_ADC_Start_DMA+0x82>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	e001      	b.n	80063a6 <HAL_ADC_Start_DMA+0x86>
 80063a2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80063a6:	68fa      	ldr	r2, [r7, #12]
 80063a8:	6812      	ldr	r2, [r2, #0]
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d002      	beq.n	80063b4 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d105      	bne.n	80063c0 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063c4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d006      	beq.n	80063da <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063d0:	f023 0206 	bic.w	r2, r3, #6
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	661a      	str	r2, [r3, #96]	; 0x60
 80063d8:	e002      	b.n	80063e0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	2200      	movs	r2, #0
 80063de:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e4:	4a25      	ldr	r2, [pc, #148]	; (800647c <HAL_ADC_Start_DMA+0x15c>)
 80063e6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063ec:	4a24      	ldr	r2, [pc, #144]	; (8006480 <HAL_ADC_Start_DMA+0x160>)
 80063ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f4:	4a23      	ldr	r2, [pc, #140]	; (8006484 <HAL_ADC_Start_DMA+0x164>)
 80063f6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	221c      	movs	r2, #28
 80063fe:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	2200      	movs	r2, #0
 8006404:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	685a      	ldr	r2, [r3, #4]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0210 	orr.w	r2, r2, #16
 8006416:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68da      	ldr	r2, [r3, #12]
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	3340      	adds	r3, #64	; 0x40
 8006432:	4619      	mov	r1, r3
 8006434:	68ba      	ldr	r2, [r7, #8]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	f000 ffac 	bl	8007394 <HAL_DMA_Start_IT>
 800643c:	4603      	mov	r3, r0
 800643e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f7ff fda6 	bl	8005f96 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800644a:	e00d      	b.n	8006468 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8006454:	e008      	b.n	8006468 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8006462:	e001      	b.n	8006468 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8006464:	2302      	movs	r3, #2
 8006466:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8006468:	7dfb      	ldrb	r3, [r7, #23]
}
 800646a:	4618      	mov	r0, r3
 800646c:	3718      	adds	r7, #24
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}
 8006472:	bf00      	nop
 8006474:	50000300 	.word	0x50000300
 8006478:	50000100 	.word	0x50000100
 800647c:	08006d69 	.word	0x08006d69
 8006480:	08006e41 	.word	0x08006e41
 8006484:	08006e5d 	.word	0x08006e5d

08006488 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b0b6      	sub	sp, #216	; 0xd8
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80064ce:	2300      	movs	r3, #0
 80064d0:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80064de:	2b01      	cmp	r3, #1
 80064e0:	d101      	bne.n	80064e6 <HAL_ADC_ConfigChannel+0x22>
 80064e2:	2302      	movs	r3, #2
 80064e4:	e3c8      	b.n	8006c78 <HAL_ADC_ConfigChannel+0x7b4>
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2201      	movs	r2, #1
 80064ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fd63 	bl	8005fbe <LL_ADC_REG_IsConversionOngoing>
 80064f8:	4603      	mov	r3, r0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 83ad 	bne.w	8006c5a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6818      	ldr	r0, [r3, #0]
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	6859      	ldr	r1, [r3, #4]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	461a      	mov	r2, r3
 800650e:	f7ff fc44 	bl	8005d9a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f7ff fd51 	bl	8005fbe <LL_ADC_REG_IsConversionOngoing>
 800651c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	4618      	mov	r0, r3
 8006526:	f7ff fd5d 	bl	8005fe4 <LL_ADC_INJ_IsConversionOngoing>
 800652a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800652e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006532:	2b00      	cmp	r3, #0
 8006534:	f040 81d9 	bne.w	80068ea <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006538:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800653c:	2b00      	cmp	r3, #0
 800653e:	f040 81d4 	bne.w	80068ea <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800654a:	d10f      	bne.n	800656c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6818      	ldr	r0, [r3, #0]
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	2200      	movs	r2, #0
 8006556:	4619      	mov	r1, r3
 8006558:	f7ff fc4b 	bl	8005df2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006564:	4618      	mov	r0, r3
 8006566:	f7ff fbf2 	bl	8005d4e <LL_ADC_SetSamplingTimeCommonConfig>
 800656a:	e00e      	b.n	800658a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6818      	ldr	r0, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	6819      	ldr	r1, [r3, #0]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	689b      	ldr	r3, [r3, #8]
 8006578:	461a      	mov	r2, r3
 800657a:	f7ff fc3a 	bl	8005df2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	2100      	movs	r1, #0
 8006584:	4618      	mov	r0, r3
 8006586:	f7ff fbe2 	bl	8005d4e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695a      	ldr	r2, [r3, #20]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	68db      	ldr	r3, [r3, #12]
 8006594:	08db      	lsrs	r3, r3, #3
 8006596:	f003 0303 	and.w	r3, r3, #3
 800659a:	005b      	lsls	r3, r3, #1
 800659c:	fa02 f303 	lsl.w	r3, r2, r3
 80065a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b04      	cmp	r3, #4
 80065aa:	d022      	beq.n	80065f2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6818      	ldr	r0, [r3, #0]
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	6919      	ldr	r1, [r3, #16]
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	681a      	ldr	r2, [r3, #0]
 80065b8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065bc:	f7ff fb3c 	bl	8005c38 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6818      	ldr	r0, [r3, #0]
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	6919      	ldr	r1, [r3, #16]
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	699b      	ldr	r3, [r3, #24]
 80065cc:	461a      	mov	r2, r3
 80065ce:	f7ff fb88 	bl	8005ce2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	6919      	ldr	r1, [r3, #16]
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	7f1b      	ldrb	r3, [r3, #28]
 80065de:	2b01      	cmp	r3, #1
 80065e0:	d102      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x124>
 80065e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065e6:	e000      	b.n	80065ea <HAL_ADC_ConfigChannel+0x126>
 80065e8:	2300      	movs	r3, #0
 80065ea:	461a      	mov	r2, r3
 80065ec:	f7ff fb94 	bl	8005d18 <LL_ADC_SetOffsetSaturation>
 80065f0:	e17b      	b.n	80068ea <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	2100      	movs	r1, #0
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff fb41 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 80065fe:	4603      	mov	r3, r0
 8006600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006604:	2b00      	cmp	r3, #0
 8006606:	d10a      	bne.n	800661e <HAL_ADC_ConfigChannel+0x15a>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2100      	movs	r1, #0
 800660e:	4618      	mov	r0, r3
 8006610:	f7ff fb36 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 8006614:	4603      	mov	r3, r0
 8006616:	0e9b      	lsrs	r3, r3, #26
 8006618:	f003 021f 	and.w	r2, r3, #31
 800661c:	e01e      	b.n	800665c <HAL_ADC_ConfigChannel+0x198>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2100      	movs	r1, #0
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff fb2b 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 800662a:	4603      	mov	r3, r0
 800662c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006630:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006634:	fa93 f3a3 	rbit	r3, r3
 8006638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800663c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006640:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006644:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006648:	2b00      	cmp	r3, #0
 800664a:	d101      	bne.n	8006650 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 800664c:	2320      	movs	r3, #32
 800664e:	e004      	b.n	800665a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8006650:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006654:	fab3 f383 	clz	r3, r3
 8006658:	b2db      	uxtb	r3, r3
 800665a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006664:	2b00      	cmp	r3, #0
 8006666:	d105      	bne.n	8006674 <HAL_ADC_ConfigChannel+0x1b0>
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	0e9b      	lsrs	r3, r3, #26
 800666e:	f003 031f 	and.w	r3, r3, #31
 8006672:	e018      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x1e2>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800667c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006680:	fa93 f3a3 	rbit	r3, r3
 8006684:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006688:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800668c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006690:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8006698:	2320      	movs	r3, #32
 800669a:	e004      	b.n	80066a6 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 800669c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80066a0:	fab3 f383 	clz	r3, r3
 80066a4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d106      	bne.n	80066b8 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	2100      	movs	r1, #0
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7ff fafa 	bl	8005cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	2101      	movs	r1, #1
 80066be:	4618      	mov	r0, r3
 80066c0:	f7ff fade 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 80066c4:	4603      	mov	r3, r0
 80066c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d10a      	bne.n	80066e4 <HAL_ADC_ConfigChannel+0x220>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2101      	movs	r1, #1
 80066d4:	4618      	mov	r0, r3
 80066d6:	f7ff fad3 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 80066da:	4603      	mov	r3, r0
 80066dc:	0e9b      	lsrs	r3, r3, #26
 80066de:	f003 021f 	and.w	r2, r3, #31
 80066e2:	e01e      	b.n	8006722 <HAL_ADC_ConfigChannel+0x25e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	2101      	movs	r1, #1
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7ff fac8 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 80066f0:	4603      	mov	r3, r0
 80066f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80066f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066fa:	fa93 f3a3 	rbit	r3, r3
 80066fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006706:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800670a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800670e:	2b00      	cmp	r3, #0
 8006710:	d101      	bne.n	8006716 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8006712:	2320      	movs	r3, #32
 8006714:	e004      	b.n	8006720 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8006716:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800671a:	fab3 f383 	clz	r3, r3
 800671e:	b2db      	uxtb	r3, r3
 8006720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800672a:	2b00      	cmp	r3, #0
 800672c:	d105      	bne.n	800673a <HAL_ADC_ConfigChannel+0x276>
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	0e9b      	lsrs	r3, r3, #26
 8006734:	f003 031f 	and.w	r3, r3, #31
 8006738:	e018      	b.n	800676c <HAL_ADC_ConfigChannel+0x2a8>
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006742:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006746:	fa93 f3a3 	rbit	r3, r3
 800674a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800674e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006752:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006756:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d101      	bne.n	8006762 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800675e:	2320      	movs	r3, #32
 8006760:	e004      	b.n	800676c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8006762:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006766:	fab3 f383 	clz	r3, r3
 800676a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800676c:	429a      	cmp	r2, r3
 800676e:	d106      	bne.n	800677e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	2101      	movs	r1, #1
 8006778:	4618      	mov	r0, r3
 800677a:	f7ff fa97 	bl	8005cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	2102      	movs	r1, #2
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff fa7b 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 800678a:	4603      	mov	r3, r0
 800678c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10a      	bne.n	80067aa <HAL_ADC_ConfigChannel+0x2e6>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2102      	movs	r1, #2
 800679a:	4618      	mov	r0, r3
 800679c:	f7ff fa70 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 80067a0:	4603      	mov	r3, r0
 80067a2:	0e9b      	lsrs	r3, r3, #26
 80067a4:	f003 021f 	and.w	r2, r3, #31
 80067a8:	e01e      	b.n	80067e8 <HAL_ADC_ConfigChannel+0x324>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	2102      	movs	r1, #2
 80067b0:	4618      	mov	r0, r3
 80067b2:	f7ff fa65 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 80067b6:	4603      	mov	r3, r0
 80067b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80067bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80067c0:	fa93 f3a3 	rbit	r3, r3
 80067c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80067c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80067cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80067d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d101      	bne.n	80067dc <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80067d8:	2320      	movs	r3, #32
 80067da:	e004      	b.n	80067e6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80067dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80067e0:	fab3 f383 	clz	r3, r3
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d105      	bne.n	8006800 <HAL_ADC_ConfigChannel+0x33c>
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	0e9b      	lsrs	r3, r3, #26
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	e016      	b.n	800682e <HAL_ADC_ConfigChannel+0x36a>
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006808:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800680c:	fa93 f3a3 	rbit	r3, r3
 8006810:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006814:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800681c:	2b00      	cmp	r3, #0
 800681e:	d101      	bne.n	8006824 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8006820:	2320      	movs	r3, #32
 8006822:	e004      	b.n	800682e <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8006824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006828:	fab3 f383 	clz	r3, r3
 800682c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800682e:	429a      	cmp	r2, r3
 8006830:	d106      	bne.n	8006840 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	2200      	movs	r2, #0
 8006838:	2102      	movs	r1, #2
 800683a:	4618      	mov	r0, r3
 800683c:	f7ff fa36 	bl	8005cac <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2103      	movs	r1, #3
 8006846:	4618      	mov	r0, r3
 8006848:	f7ff fa1a 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 800684c:	4603      	mov	r3, r0
 800684e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006852:	2b00      	cmp	r3, #0
 8006854:	d10a      	bne.n	800686c <HAL_ADC_ConfigChannel+0x3a8>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2103      	movs	r1, #3
 800685c:	4618      	mov	r0, r3
 800685e:	f7ff fa0f 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 8006862:	4603      	mov	r3, r0
 8006864:	0e9b      	lsrs	r3, r3, #26
 8006866:	f003 021f 	and.w	r2, r3, #31
 800686a:	e017      	b.n	800689c <HAL_ADC_ConfigChannel+0x3d8>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	2103      	movs	r1, #3
 8006872:	4618      	mov	r0, r3
 8006874:	f7ff fa04 	bl	8005c80 <LL_ADC_GetOffsetChannel>
 8006878:	4603      	mov	r3, r0
 800687a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800687c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800687e:	fa93 f3a3 	rbit	r3, r3
 8006882:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006884:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006886:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006888:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800688e:	2320      	movs	r3, #32
 8006890:	e003      	b.n	800689a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8006892:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006894:	fab3 f383 	clz	r3, r3
 8006898:	b2db      	uxtb	r3, r3
 800689a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d105      	bne.n	80068b4 <HAL_ADC_ConfigChannel+0x3f0>
 80068a8:	683b      	ldr	r3, [r7, #0]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	0e9b      	lsrs	r3, r3, #26
 80068ae:	f003 031f 	and.w	r3, r3, #31
 80068b2:	e011      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x414>
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80068ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80068bc:	fa93 f3a3 	rbit	r3, r3
 80068c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80068c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80068c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80068cc:	2320      	movs	r3, #32
 80068ce:	e003      	b.n	80068d8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80068d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80068d2:	fab3 f383 	clz	r3, r3
 80068d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80068d8:	429a      	cmp	r2, r3
 80068da:	d106      	bne.n	80068ea <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2103      	movs	r1, #3
 80068e4:	4618      	mov	r0, r3
 80068e6:	f7ff f9e1 	bl	8005cac <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	4618      	mov	r0, r3
 80068f0:	f7ff fb3e 	bl	8005f70 <LL_ADC_IsEnabled>
 80068f4:	4603      	mov	r3, r0
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f040 8140 	bne.w	8006b7c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	6818      	ldr	r0, [r3, #0]
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	6819      	ldr	r1, [r3, #0]
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	461a      	mov	r2, r3
 800690a:	f7ff fa9d 	bl	8005e48 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	4a8f      	ldr	r2, [pc, #572]	; (8006b50 <HAL_ADC_ConfigChannel+0x68c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	f040 8131 	bne.w	8006b7c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006926:	2b00      	cmp	r3, #0
 8006928:	d10b      	bne.n	8006942 <HAL_ADC_ConfigChannel+0x47e>
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	0e9b      	lsrs	r3, r3, #26
 8006930:	3301      	adds	r3, #1
 8006932:	f003 031f 	and.w	r3, r3, #31
 8006936:	2b09      	cmp	r3, #9
 8006938:	bf94      	ite	ls
 800693a:	2301      	movls	r3, #1
 800693c:	2300      	movhi	r3, #0
 800693e:	b2db      	uxtb	r3, r3
 8006940:	e019      	b.n	8006976 <HAL_ADC_ConfigChannel+0x4b2>
 8006942:	683b      	ldr	r3, [r7, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006948:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800694a:	fa93 f3a3 	rbit	r3, r3
 800694e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006950:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006952:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006954:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006956:	2b00      	cmp	r3, #0
 8006958:	d101      	bne.n	800695e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800695a:	2320      	movs	r3, #32
 800695c:	e003      	b.n	8006966 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800695e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006960:	fab3 f383 	clz	r3, r3
 8006964:	b2db      	uxtb	r3, r3
 8006966:	3301      	adds	r3, #1
 8006968:	f003 031f 	and.w	r3, r3, #31
 800696c:	2b09      	cmp	r3, #9
 800696e:	bf94      	ite	ls
 8006970:	2301      	movls	r3, #1
 8006972:	2300      	movhi	r3, #0
 8006974:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006976:	2b00      	cmp	r3, #0
 8006978:	d079      	beq.n	8006a6e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006982:	2b00      	cmp	r3, #0
 8006984:	d107      	bne.n	8006996 <HAL_ADC_ConfigChannel+0x4d2>
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	0e9b      	lsrs	r3, r3, #26
 800698c:	3301      	adds	r3, #1
 800698e:	069b      	lsls	r3, r3, #26
 8006990:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006994:	e015      	b.n	80069c2 <HAL_ADC_ConfigChannel+0x4fe>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800699c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800699e:	fa93 f3a3 	rbit	r3, r3
 80069a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80069a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80069a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d101      	bne.n	80069b2 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80069ae:	2320      	movs	r3, #32
 80069b0:	e003      	b.n	80069ba <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80069b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069b4:	fab3 f383 	clz	r3, r3
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	3301      	adds	r3, #1
 80069bc:	069b      	lsls	r3, r3, #26
 80069be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d109      	bne.n	80069e2 <HAL_ADC_ConfigChannel+0x51e>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	0e9b      	lsrs	r3, r3, #26
 80069d4:	3301      	adds	r3, #1
 80069d6:	f003 031f 	and.w	r3, r3, #31
 80069da:	2101      	movs	r1, #1
 80069dc:	fa01 f303 	lsl.w	r3, r1, r3
 80069e0:	e017      	b.n	8006a12 <HAL_ADC_ConfigChannel+0x54e>
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80069e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ea:	fa93 f3a3 	rbit	r3, r3
 80069ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80069f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80069f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80069f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d101      	bne.n	80069fe <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80069fa:	2320      	movs	r3, #32
 80069fc:	e003      	b.n	8006a06 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80069fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006a00:	fab3 f383 	clz	r3, r3
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	3301      	adds	r3, #1
 8006a08:	f003 031f 	and.w	r3, r3, #31
 8006a0c:	2101      	movs	r1, #1
 8006a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006a12:	ea42 0103 	orr.w	r1, r2, r3
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d10a      	bne.n	8006a38 <HAL_ADC_ConfigChannel+0x574>
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	0e9b      	lsrs	r3, r3, #26
 8006a28:	3301      	adds	r3, #1
 8006a2a:	f003 021f 	and.w	r2, r3, #31
 8006a2e:	4613      	mov	r3, r2
 8006a30:	005b      	lsls	r3, r3, #1
 8006a32:	4413      	add	r3, r2
 8006a34:	051b      	lsls	r3, r3, #20
 8006a36:	e018      	b.n	8006a6a <HAL_ADC_ConfigChannel+0x5a6>
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a40:	fa93 f3a3 	rbit	r3, r3
 8006a44:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a48:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d101      	bne.n	8006a54 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8006a50:	2320      	movs	r3, #32
 8006a52:	e003      	b.n	8006a5c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	fab3 f383 	clz	r3, r3
 8006a5a:	b2db      	uxtb	r3, r3
 8006a5c:	3301      	adds	r3, #1
 8006a5e:	f003 021f 	and.w	r2, r3, #31
 8006a62:	4613      	mov	r3, r2
 8006a64:	005b      	lsls	r3, r3, #1
 8006a66:	4413      	add	r3, r2
 8006a68:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006a6a:	430b      	orrs	r3, r1
 8006a6c:	e081      	b.n	8006b72 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d107      	bne.n	8006a8a <HAL_ADC_ConfigChannel+0x5c6>
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	0e9b      	lsrs	r3, r3, #26
 8006a80:	3301      	adds	r3, #1
 8006a82:	069b      	lsls	r3, r3, #26
 8006a84:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006a88:	e015      	b.n	8006ab6 <HAL_ADC_ConfigChannel+0x5f2>
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	fa93 f3a3 	rbit	r3, r3
 8006a96:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a9a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8006aa2:	2320      	movs	r3, #32
 8006aa4:	e003      	b.n	8006aae <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8006aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006aa8:	fab3 f383 	clz	r3, r3
 8006aac:	b2db      	uxtb	r3, r3
 8006aae:	3301      	adds	r3, #1
 8006ab0:	069b      	lsls	r3, r3, #26
 8006ab2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d109      	bne.n	8006ad6 <HAL_ADC_ConfigChannel+0x612>
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	0e9b      	lsrs	r3, r3, #26
 8006ac8:	3301      	adds	r3, #1
 8006aca:	f003 031f 	and.w	r3, r3, #31
 8006ace:	2101      	movs	r1, #1
 8006ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ad4:	e017      	b.n	8006b06 <HAL_ADC_ConfigChannel+0x642>
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006adc:	6a3b      	ldr	r3, [r7, #32]
 8006ade:	fa93 f3a3 	rbit	r3, r3
 8006ae2:	61fb      	str	r3, [r7, #28]
  return result;
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d101      	bne.n	8006af2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8006aee:	2320      	movs	r3, #32
 8006af0:	e003      	b.n	8006afa <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8006af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af4:	fab3 f383 	clz	r3, r3
 8006af8:	b2db      	uxtb	r3, r3
 8006afa:	3301      	adds	r3, #1
 8006afc:	f003 031f 	and.w	r3, r3, #31
 8006b00:	2101      	movs	r1, #1
 8006b02:	fa01 f303 	lsl.w	r3, r1, r3
 8006b06:	ea42 0103 	orr.w	r1, r2, r3
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d10d      	bne.n	8006b32 <HAL_ADC_ConfigChannel+0x66e>
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	0e9b      	lsrs	r3, r3, #26
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	f003 021f 	and.w	r2, r3, #31
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	3b1e      	subs	r3, #30
 8006b2a:	051b      	lsls	r3, r3, #20
 8006b2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006b30:	e01e      	b.n	8006b70 <HAL_ADC_ConfigChannel+0x6ac>
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	fa93 f3a3 	rbit	r3, r3
 8006b3e:	613b      	str	r3, [r7, #16]
  return result;
 8006b40:	693b      	ldr	r3, [r7, #16]
 8006b42:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d104      	bne.n	8006b54 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8006b4a:	2320      	movs	r3, #32
 8006b4c:	e006      	b.n	8006b5c <HAL_ADC_ConfigChannel+0x698>
 8006b4e:	bf00      	nop
 8006b50:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006b54:	69bb      	ldr	r3, [r7, #24]
 8006b56:	fab3 f383 	clz	r3, r3
 8006b5a:	b2db      	uxtb	r3, r3
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	f003 021f 	and.w	r2, r3, #31
 8006b62:	4613      	mov	r3, r2
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	4413      	add	r3, r2
 8006b68:	3b1e      	subs	r3, #30
 8006b6a:	051b      	lsls	r3, r3, #20
 8006b6c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006b70:	430b      	orrs	r3, r1
 8006b72:	683a      	ldr	r2, [r7, #0]
 8006b74:	6892      	ldr	r2, [r2, #8]
 8006b76:	4619      	mov	r1, r3
 8006b78:	f7ff f93b 	bl	8005df2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b3f      	ldr	r3, [pc, #252]	; (8006c80 <HAL_ADC_ConfigChannel+0x7bc>)
 8006b82:	4013      	ands	r3, r2
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d071      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006b88:	483e      	ldr	r0, [pc, #248]	; (8006c84 <HAL_ADC_ConfigChannel+0x7c0>)
 8006b8a:	f7ff f847 	bl	8005c1c <LL_ADC_GetCommonPathInternalCh>
 8006b8e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006b92:	683b      	ldr	r3, [r7, #0]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	4a3c      	ldr	r2, [pc, #240]	; (8006c88 <HAL_ADC_ConfigChannel+0x7c4>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d004      	beq.n	8006ba6 <HAL_ADC_ConfigChannel+0x6e2>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a3a      	ldr	r2, [pc, #232]	; (8006c8c <HAL_ADC_ConfigChannel+0x7c8>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d127      	bne.n	8006bf6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006ba6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006baa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d121      	bne.n	8006bf6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006bba:	d157      	bne.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006bbc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006bc0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	482f      	ldr	r0, [pc, #188]	; (8006c84 <HAL_ADC_ConfigChannel+0x7c0>)
 8006bc8:	f7ff f815 	bl	8005bf6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006bcc:	4b30      	ldr	r3, [pc, #192]	; (8006c90 <HAL_ADC_ConfigChannel+0x7cc>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	099b      	lsrs	r3, r3, #6
 8006bd2:	4a30      	ldr	r2, [pc, #192]	; (8006c94 <HAL_ADC_ConfigChannel+0x7d0>)
 8006bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd8:	099b      	lsrs	r3, r3, #6
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	4613      	mov	r3, r2
 8006bde:	005b      	lsls	r3, r3, #1
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006be6:	e002      	b.n	8006bee <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f9      	bne.n	8006be8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006bf4:	e03a      	b.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a27      	ldr	r2, [pc, #156]	; (8006c98 <HAL_ADC_ConfigChannel+0x7d4>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d113      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x764>
 8006c00:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10d      	bne.n	8006c28 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <HAL_ADC_ConfigChannel+0x7d8>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d02a      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006c1e:	4619      	mov	r1, r3
 8006c20:	4818      	ldr	r0, [pc, #96]	; (8006c84 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c22:	f7fe ffe8 	bl	8005bf6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006c26:	e021      	b.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a1c      	ldr	r2, [pc, #112]	; (8006ca0 <HAL_ADC_ConfigChannel+0x7dc>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d11c      	bne.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d116      	bne.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	4a16      	ldr	r2, [pc, #88]	; (8006c9c <HAL_ADC_ConfigChannel+0x7d8>)
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d011      	beq.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006c4c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006c50:	4619      	mov	r1, r3
 8006c52:	480c      	ldr	r0, [pc, #48]	; (8006c84 <HAL_ADC_ConfigChannel+0x7c0>)
 8006c54:	f7fe ffcf 	bl	8005bf6 <LL_ADC_SetCommonPathInternalCh>
 8006c58:	e008      	b.n	8006c6c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c5e:	f043 0220 	orr.w	r2, r3, #32
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8006c74:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8006c78:	4618      	mov	r0, r3
 8006c7a:	37d8      	adds	r7, #216	; 0xd8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	80080000 	.word	0x80080000
 8006c84:	50000300 	.word	0x50000300
 8006c88:	c3210000 	.word	0xc3210000
 8006c8c:	90c00010 	.word	0x90c00010
 8006c90:	20000000 	.word	0x20000000
 8006c94:	053e2d63 	.word	0x053e2d63
 8006c98:	c7520000 	.word	0xc7520000
 8006c9c:	50000100 	.word	0x50000100
 8006ca0:	cb840000 	.word	0xcb840000

08006ca4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	f7ff f95d 	bl	8005f70 <LL_ADC_IsEnabled>
 8006cb6:	4603      	mov	r3, r0
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d14d      	bne.n	8006d58 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	4b28      	ldr	r3, [pc, #160]	; (8006d64 <ADC_Enable+0xc0>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d00d      	beq.n	8006ce6 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cce:	f043 0210 	orr.w	r2, r3, #16
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006cda:	f043 0201 	orr.w	r2, r3, #1
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e039      	b.n	8006d5a <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4618      	mov	r0, r3
 8006cec:	f7ff f92c 	bl	8005f48 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8006cf0:	f7fe ff40 	bl	8005b74 <HAL_GetTick>
 8006cf4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006cf6:	e028      	b.n	8006d4a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f7ff f937 	bl	8005f70 <LL_ADC_IsEnabled>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d104      	bne.n	8006d12 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff f91b 	bl	8005f48 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8006d12:	f7fe ff2f 	bl	8005b74 <HAL_GetTick>
 8006d16:	4602      	mov	r2, r0
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	1ad3      	subs	r3, r2, r3
 8006d1c:	2b02      	cmp	r3, #2
 8006d1e:	d914      	bls.n	8006d4a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d00d      	beq.n	8006d4a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d32:	f043 0210 	orr.w	r2, r3, #16
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3e:	f043 0201 	orr.w	r2, r3, #1
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e007      	b.n	8006d5a <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f003 0301 	and.w	r3, r3, #1
 8006d54:	2b01      	cmp	r3, #1
 8006d56:	d1cf      	bne.n	8006cf8 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	8000003f 	.word	0x8000003f

08006d68 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b084      	sub	sp, #16
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d74:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d7a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d14b      	bne.n	8006e1a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d86:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0308 	and.w	r3, r3, #8
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d021      	beq.n	8006de0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	4618      	mov	r0, r3
 8006da2:	f7fe ffe7 	bl	8005d74 <LL_ADC_REG_IsTriggerSourceSWStart>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d032      	beq.n	8006e12 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d12b      	bne.n	8006e12 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d11f      	bne.n	8006e12 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd6:	f043 0201 	orr.w	r2, r3, #1
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	65da      	str	r2, [r3, #92]	; 0x5c
 8006dde:	e018      	b.n	8006e12 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	f003 0302 	and.w	r3, r3, #2
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d111      	bne.n	8006e12 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d105      	bne.n	8006e12 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e0a:	f043 0201 	orr.w	r2, r3, #1
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8006e12:	68f8      	ldr	r0, [r7, #12]
 8006e14:	f7ff fb38 	bl	8006488 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8006e18:	e00e      	b.n	8006e38 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e1e:	f003 0310 	and.w	r3, r3, #16
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d003      	beq.n	8006e2e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8006e26:	68f8      	ldr	r0, [r7, #12]
 8006e28:	f7ff fb42 	bl	80064b0 <HAL_ADC_ErrorCallback>
}
 8006e2c:	e004      	b.n	8006e38 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	4798      	blx	r3
}
 8006e38:	bf00      	nop
 8006e3a:	3710      	adds	r7, #16
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}

08006e40 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e4c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fb24 	bl	800649c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e54:	bf00      	nop
 8006e56:	3710      	adds	r7, #16
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	bd80      	pop	{r7, pc}

08006e5c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b084      	sub	sp, #16
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e68:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e6e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006e7a:	f043 0204 	orr.w	r2, r3, #4
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8006e82:	68f8      	ldr	r0, [r7, #12]
 8006e84:	f7ff fb14 	bl	80064b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8006e88:	bf00      	nop
 8006e8a:	3710      	adds	r7, #16
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}

08006e90 <LL_ADC_IsEnabled>:
{
 8006e90:	b480      	push	{r7}
 8006e92:	b083      	sub	sp, #12
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	689b      	ldr	r3, [r3, #8]
 8006e9c:	f003 0301 	and.w	r3, r3, #1
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d101      	bne.n	8006ea8 <LL_ADC_IsEnabled+0x18>
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	e000      	b.n	8006eaa <LL_ADC_IsEnabled+0x1a>
 8006ea8:	2300      	movs	r3, #0
}
 8006eaa:	4618      	mov	r0, r3
 8006eac:	370c      	adds	r7, #12
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <LL_ADC_REG_IsConversionOngoing>:
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b083      	sub	sp, #12
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0304 	and.w	r3, r3, #4
 8006ec6:	2b04      	cmp	r3, #4
 8006ec8:	d101      	bne.n	8006ece <LL_ADC_REG_IsConversionOngoing+0x18>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	e000      	b.n	8006ed0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006ece:	2300      	movs	r3, #0
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	370c      	adds	r7, #12
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8006edc:	b590      	push	{r4, r7, lr}
 8006ede:	b0a1      	sub	sp, #132	; 0x84
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	6078      	str	r0, [r7, #4]
 8006ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d101      	bne.n	8006efa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e08b      	b.n	8007012 <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2201      	movs	r2, #1
 8006efe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8006f02:	2300      	movs	r3, #0
 8006f04:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8006f06:	2300      	movs	r3, #0
 8006f08:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006f12:	d102      	bne.n	8006f1a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8006f14:	4b41      	ldr	r3, [pc, #260]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006f16:	60bb      	str	r3, [r7, #8]
 8006f18:	e001      	b.n	8006f1e <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d10b      	bne.n	8006f3c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f28:	f043 0220 	orr.w	r2, r3, #32
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e06a      	b.n	8007012 <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7ff ffb9 	bl	8006eb6 <LL_ADC_REG_IsConversionOngoing>
 8006f44:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7ff ffb3 	bl	8006eb6 <LL_ADC_REG_IsConversionOngoing>
 8006f50:	4603      	mov	r3, r0
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d14c      	bne.n	8006ff0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8006f56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d149      	bne.n	8006ff0 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8006f5c:	4b30      	ldr	r3, [pc, #192]	; (8007020 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8006f5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d028      	beq.n	8006fba <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8006f68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006f7a:	035b      	lsls	r3, r3, #13
 8006f7c:	430b      	orrs	r3, r1
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006f84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006f88:	f7ff ff82 	bl	8006e90 <LL_ADC_IsEnabled>
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	4823      	ldr	r0, [pc, #140]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006f90:	f7ff ff7e 	bl	8006e90 <LL_ADC_IsEnabled>
 8006f94:	4603      	mov	r3, r0
 8006f96:	4323      	orrs	r3, r4
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d133      	bne.n	8007004 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006fa4:	f023 030f 	bic.w	r3, r3, #15
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	6811      	ldr	r1, [r2, #0]
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	6892      	ldr	r2, [r2, #8]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	431a      	orrs	r2, r3
 8006fb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fb8:	e024      	b.n	8007004 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006fba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006fc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fc4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006fc6:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006fca:	f7ff ff61 	bl	8006e90 <LL_ADC_IsEnabled>
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4812      	ldr	r0, [pc, #72]	; (800701c <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8006fd2:	f7ff ff5d 	bl	8006e90 <LL_ADC_IsEnabled>
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	4323      	orrs	r3, r4
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d112      	bne.n	8007004 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8006fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8006fe6:	f023 030f 	bic.w	r3, r3, #15
 8006fea:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006fec:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006fee:	e009      	b.n	8007004 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff4:	f043 0220 	orr.w	r2, r3, #32
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007002:	e000      	b.n	8007006 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007004:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2200      	movs	r2, #0
 800700a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800700e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007012:	4618      	mov	r0, r3
 8007014:	3784      	adds	r7, #132	; 0x84
 8007016:	46bd      	mov	sp, r7
 8007018:	bd90      	pop	{r4, r7, pc}
 800701a:	bf00      	nop
 800701c:	50000100 	.word	0x50000100
 8007020:	50000300 	.word	0x50000300

08007024 <__NVIC_SetPriorityGrouping>:
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f003 0307 	and.w	r3, r3, #7
 8007032:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007034:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <__NVIC_SetPriorityGrouping+0x44>)
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800703a:	68ba      	ldr	r2, [r7, #8]
 800703c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007040:	4013      	ands	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800704c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007050:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007054:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007056:	4a04      	ldr	r2, [pc, #16]	; (8007068 <__NVIC_SetPriorityGrouping+0x44>)
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	60d3      	str	r3, [r2, #12]
}
 800705c:	bf00      	nop
 800705e:	3714      	adds	r7, #20
 8007060:	46bd      	mov	sp, r7
 8007062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007066:	4770      	bx	lr
 8007068:	e000ed00 	.word	0xe000ed00

0800706c <__NVIC_GetPriorityGrouping>:
{
 800706c:	b480      	push	{r7}
 800706e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007070:	4b04      	ldr	r3, [pc, #16]	; (8007084 <__NVIC_GetPriorityGrouping+0x18>)
 8007072:	68db      	ldr	r3, [r3, #12]
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	f003 0307 	and.w	r3, r3, #7
}
 800707a:	4618      	mov	r0, r3
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr
 8007084:	e000ed00 	.word	0xe000ed00

08007088 <__NVIC_EnableIRQ>:
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	4603      	mov	r3, r0
 8007090:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007092:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007096:	2b00      	cmp	r3, #0
 8007098:	db0b      	blt.n	80070b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800709a:	79fb      	ldrb	r3, [r7, #7]
 800709c:	f003 021f 	and.w	r2, r3, #31
 80070a0:	4907      	ldr	r1, [pc, #28]	; (80070c0 <__NVIC_EnableIRQ+0x38>)
 80070a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070a6:	095b      	lsrs	r3, r3, #5
 80070a8:	2001      	movs	r0, #1
 80070aa:	fa00 f202 	lsl.w	r2, r0, r2
 80070ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80070b2:	bf00      	nop
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
 80070be:	bf00      	nop
 80070c0:	e000e100 	.word	0xe000e100

080070c4 <__NVIC_SetPriority>:
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	4603      	mov	r3, r0
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	db0a      	blt.n	80070ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	b2da      	uxtb	r2, r3
 80070dc:	490c      	ldr	r1, [pc, #48]	; (8007110 <__NVIC_SetPriority+0x4c>)
 80070de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e2:	0112      	lsls	r2, r2, #4
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	440b      	add	r3, r1
 80070e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80070ec:	e00a      	b.n	8007104 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	b2da      	uxtb	r2, r3
 80070f2:	4908      	ldr	r1, [pc, #32]	; (8007114 <__NVIC_SetPriority+0x50>)
 80070f4:	79fb      	ldrb	r3, [r7, #7]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	3b04      	subs	r3, #4
 80070fc:	0112      	lsls	r2, r2, #4
 80070fe:	b2d2      	uxtb	r2, r2
 8007100:	440b      	add	r3, r1
 8007102:	761a      	strb	r2, [r3, #24]
}
 8007104:	bf00      	nop
 8007106:	370c      	adds	r7, #12
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr
 8007110:	e000e100 	.word	0xe000e100
 8007114:	e000ed00 	.word	0xe000ed00

08007118 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007118:	b480      	push	{r7}
 800711a:	b089      	sub	sp, #36	; 0x24
 800711c:	af00      	add	r7, sp, #0
 800711e:	60f8      	str	r0, [r7, #12]
 8007120:	60b9      	str	r1, [r7, #8]
 8007122:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f003 0307 	and.w	r3, r3, #7
 800712a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	f1c3 0307 	rsb	r3, r3, #7
 8007132:	2b04      	cmp	r3, #4
 8007134:	bf28      	it	cs
 8007136:	2304      	movcs	r3, #4
 8007138:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800713a:	69fb      	ldr	r3, [r7, #28]
 800713c:	3304      	adds	r3, #4
 800713e:	2b06      	cmp	r3, #6
 8007140:	d902      	bls.n	8007148 <NVIC_EncodePriority+0x30>
 8007142:	69fb      	ldr	r3, [r7, #28]
 8007144:	3b03      	subs	r3, #3
 8007146:	e000      	b.n	800714a <NVIC_EncodePriority+0x32>
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800714c:	f04f 32ff 	mov.w	r2, #4294967295
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	fa02 f303 	lsl.w	r3, r2, r3
 8007156:	43da      	mvns	r2, r3
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	401a      	ands	r2, r3
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007160:	f04f 31ff 	mov.w	r1, #4294967295
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	fa01 f303 	lsl.w	r3, r1, r3
 800716a:	43d9      	mvns	r1, r3
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007170:	4313      	orrs	r3, r2
         );
}
 8007172:	4618      	mov	r0, r3
 8007174:	3724      	adds	r7, #36	; 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
	...

08007180 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	b082      	sub	sp, #8
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	3b01      	subs	r3, #1
 800718c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007190:	d301      	bcc.n	8007196 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007192:	2301      	movs	r3, #1
 8007194:	e00f      	b.n	80071b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007196:	4a0a      	ldr	r2, [pc, #40]	; (80071c0 <SysTick_Config+0x40>)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	3b01      	subs	r3, #1
 800719c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800719e:	210f      	movs	r1, #15
 80071a0:	f04f 30ff 	mov.w	r0, #4294967295
 80071a4:	f7ff ff8e 	bl	80070c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80071a8:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <SysTick_Config+0x40>)
 80071aa:	2200      	movs	r2, #0
 80071ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80071ae:	4b04      	ldr	r3, [pc, #16]	; (80071c0 <SysTick_Config+0x40>)
 80071b0:	2207      	movs	r2, #7
 80071b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80071b4:	2300      	movs	r3, #0
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	3708      	adds	r7, #8
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd80      	pop	{r7, pc}
 80071be:	bf00      	nop
 80071c0:	e000e010 	.word	0xe000e010

080071c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7ff ff29 	bl	8007024 <__NVIC_SetPriorityGrouping>
}
 80071d2:	bf00      	nop
 80071d4:	3708      	adds	r7, #8
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b086      	sub	sp, #24
 80071de:	af00      	add	r7, sp, #0
 80071e0:	4603      	mov	r3, r0
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	607a      	str	r2, [r7, #4]
 80071e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80071e8:	f7ff ff40 	bl	800706c <__NVIC_GetPriorityGrouping>
 80071ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80071ee:	687a      	ldr	r2, [r7, #4]
 80071f0:	68b9      	ldr	r1, [r7, #8]
 80071f2:	6978      	ldr	r0, [r7, #20]
 80071f4:	f7ff ff90 	bl	8007118 <NVIC_EncodePriority>
 80071f8:	4602      	mov	r2, r0
 80071fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80071fe:	4611      	mov	r1, r2
 8007200:	4618      	mov	r0, r3
 8007202:	f7ff ff5f 	bl	80070c4 <__NVIC_SetPriority>
}
 8007206:	bf00      	nop
 8007208:	3718      	adds	r7, #24
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}

0800720e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800720e:	b580      	push	{r7, lr}
 8007210:	b082      	sub	sp, #8
 8007212:	af00      	add	r7, sp, #0
 8007214:	4603      	mov	r3, r0
 8007216:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800721c:	4618      	mov	r0, r3
 800721e:	f7ff ff33 	bl	8007088 <__NVIC_EnableIRQ>
}
 8007222:	bf00      	nop
 8007224:	3708      	adds	r7, #8
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}

0800722a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800722a:	b580      	push	{r7, lr}
 800722c:	b082      	sub	sp, #8
 800722e:	af00      	add	r7, sp, #0
 8007230:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007232:	6878      	ldr	r0, [r7, #4]
 8007234:	f7ff ffa4 	bl	8007180 <SysTick_Config>
 8007238:	4603      	mov	r3, r0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}
	...

08007244 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007252:	2301      	movs	r3, #1
 8007254:	e08d      	b.n	8007372 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	4b47      	ldr	r3, [pc, #284]	; (800737c <HAL_DMA_Init+0x138>)
 800725e:	429a      	cmp	r2, r3
 8007260:	d80f      	bhi.n	8007282 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	461a      	mov	r2, r3
 8007268:	4b45      	ldr	r3, [pc, #276]	; (8007380 <HAL_DMA_Init+0x13c>)
 800726a:	4413      	add	r3, r2
 800726c:	4a45      	ldr	r2, [pc, #276]	; (8007384 <HAL_DMA_Init+0x140>)
 800726e:	fba2 2303 	umull	r2, r3, r2, r3
 8007272:	091b      	lsrs	r3, r3, #4
 8007274:	009a      	lsls	r2, r3, #2
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4a42      	ldr	r2, [pc, #264]	; (8007388 <HAL_DMA_Init+0x144>)
 800727e:	641a      	str	r2, [r3, #64]	; 0x40
 8007280:	e00e      	b.n	80072a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	461a      	mov	r2, r3
 8007288:	4b40      	ldr	r3, [pc, #256]	; (800738c <HAL_DMA_Init+0x148>)
 800728a:	4413      	add	r3, r2
 800728c:	4a3d      	ldr	r2, [pc, #244]	; (8007384 <HAL_DMA_Init+0x140>)
 800728e:	fba2 2303 	umull	r2, r3, r2, r3
 8007292:	091b      	lsrs	r3, r3, #4
 8007294:	009a      	lsls	r2, r3, #2
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	4a3c      	ldr	r2, [pc, #240]	; (8007390 <HAL_DMA_Init+0x14c>)
 800729e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80072b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80072c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	691b      	ldr	r3, [r3, #16]
 80072ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80072d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	699b      	ldr	r3, [r3, #24]
 80072d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80072dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	6a1b      	ldr	r3, [r3, #32]
 80072e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	4313      	orrs	r3, r2
 80072e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	68fa      	ldr	r2, [r7, #12]
 80072f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f000 fa76 	bl	80077e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007300:	d102      	bne.n	8007308 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2200      	movs	r2, #0
 8007306:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007310:	b2d2      	uxtb	r2, r2
 8007312:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800731c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d010      	beq.n	8007348 <HAL_DMA_Init+0x104>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b04      	cmp	r3, #4
 800732c:	d80c      	bhi.n	8007348 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fa96 	bl	8007860 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007340:	687a      	ldr	r2, [r7, #4]
 8007342:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007344:	605a      	str	r2, [r3, #4]
 8007346:	e008      	b.n	800735a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2201      	movs	r2, #1
 8007364:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40020407 	.word	0x40020407
 8007380:	bffdfff8 	.word	0xbffdfff8
 8007384:	cccccccd 	.word	0xcccccccd
 8007388:	40020000 	.word	0x40020000
 800738c:	bffdfbf8 	.word	0xbffdfbf8
 8007390:	40020400 	.word	0x40020400

08007394 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073a2:	2300      	movs	r3, #0
 80073a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073ac:	2b01      	cmp	r3, #1
 80073ae:	d101      	bne.n	80073b4 <HAL_DMA_Start_IT+0x20>
 80073b0:	2302      	movs	r3, #2
 80073b2:	e066      	b.n	8007482 <HAL_DMA_Start_IT+0xee>
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d155      	bne.n	8007474 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2200      	movs	r2, #0
 80073d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	68b9      	ldr	r1, [r7, #8]
 80073ec:	68f8      	ldr	r0, [r7, #12]
 80073ee:	f000 f9bb 	bl	8007768 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d008      	beq.n	800740c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	681a      	ldr	r2, [r3, #0]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f042 020e 	orr.w	r2, r2, #14
 8007408:	601a      	str	r2, [r3, #0]
 800740a:	e00f      	b.n	800742c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	681a      	ldr	r2, [r3, #0]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f022 0204 	bic.w	r2, r2, #4
 800741a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	f042 020a 	orr.w	r2, r2, #10
 800742a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d007      	beq.n	800744a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800743e:	681a      	ldr	r2, [r3, #0]
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007444:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007448:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007456:	681a      	ldr	r2, [r3, #0]
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800745c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007460:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f042 0201 	orr.w	r2, r2, #1
 8007470:	601a      	str	r2, [r3, #0]
 8007472:	e005      	b.n	8007480 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800747c:	2302      	movs	r3, #2
 800747e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007480:	7dfb      	ldrb	r3, [r7, #23]
}
 8007482:	4618      	mov	r0, r3
 8007484:	3718      	adds	r7, #24
 8007486:	46bd      	mov	sp, r7
 8007488:	bd80      	pop	{r7, pc}

0800748a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800748a:	b480      	push	{r7}
 800748c:	b085      	sub	sp, #20
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007492:	2300      	movs	r3, #0
 8007494:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d005      	beq.n	80074ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2204      	movs	r2, #4
 80074a6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	73fb      	strb	r3, [r7, #15]
 80074ac:	e037      	b.n	800751e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f022 020e 	bic.w	r2, r2, #14
 80074bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c2:	681a      	ldr	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	681a      	ldr	r2, [r3, #0]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f022 0201 	bic.w	r2, r2, #1
 80074dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80074e2:	f003 021f 	and.w	r2, r3, #31
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ea:	2101      	movs	r1, #1
 80074ec:	fa01 f202 	lsl.w	r2, r1, r2
 80074f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80074fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007500:	2b00      	cmp	r3, #0
 8007502:	d00c      	beq.n	800751e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800750e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007512:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800751c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2201      	movs	r2, #1
 8007522:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2200      	movs	r2, #0
 800752a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800753c:	b580      	push	{r7, lr}
 800753e:	b084      	sub	sp, #16
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007544:	2300      	movs	r3, #0
 8007546:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800754e:	b2db      	uxtb	r3, r3
 8007550:	2b02      	cmp	r3, #2
 8007552:	d00d      	beq.n	8007570 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2204      	movs	r2, #4
 8007558:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
 800756e:	e047      	b.n	8007600 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f022 020e 	bic.w	r2, r2, #14
 800757e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	681a      	ldr	r2, [r3, #0]
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	f022 0201 	bic.w	r2, r2, #1
 800758e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007594:	681a      	ldr	r2, [r3, #0]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800759a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800759e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075a4:	f003 021f 	and.w	r2, r3, #31
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ac:	2101      	movs	r1, #1
 80075ae:	fa01 f202 	lsl.w	r2, r1, r2
 80075b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075b8:	687a      	ldr	r2, [r7, #4]
 80075ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80075bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00c      	beq.n	80075e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075ca:	681a      	ldr	r2, [r3, #0]
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80075d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80075de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	2201      	movs	r2, #1
 80075e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d003      	beq.n	8007600 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	4798      	blx	r3
    }
  }
  return status;
 8007600:	7bfb      	ldrb	r3, [r7, #15]
}
 8007602:	4618      	mov	r0, r3
 8007604:	3710      	adds	r7, #16
 8007606:	46bd      	mov	sp, r7
 8007608:	bd80      	pop	{r7, pc}

0800760a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800760a:	b580      	push	{r7, lr}
 800760c:	b084      	sub	sp, #16
 800760e:	af00      	add	r7, sp, #0
 8007610:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007626:	f003 031f 	and.w	r3, r3, #31
 800762a:	2204      	movs	r2, #4
 800762c:	409a      	lsls	r2, r3
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4013      	ands	r3, r2
 8007632:	2b00      	cmp	r3, #0
 8007634:	d026      	beq.n	8007684 <HAL_DMA_IRQHandler+0x7a>
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	f003 0304 	and.w	r3, r3, #4
 800763c:	2b00      	cmp	r3, #0
 800763e:	d021      	beq.n	8007684 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 0320 	and.w	r3, r3, #32
 800764a:	2b00      	cmp	r3, #0
 800764c:	d107      	bne.n	800765e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0204 	bic.w	r2, r2, #4
 800765c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007662:	f003 021f 	and.w	r2, r3, #31
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800766a:	2104      	movs	r1, #4
 800766c:	fa01 f202 	lsl.w	r2, r1, r2
 8007670:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007676:	2b00      	cmp	r3, #0
 8007678:	d071      	beq.n	800775e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007682:	e06c      	b.n	800775e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	2202      	movs	r2, #2
 800768e:	409a      	lsls	r2, r3
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	4013      	ands	r3, r2
 8007694:	2b00      	cmp	r3, #0
 8007696:	d02e      	beq.n	80076f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 0302 	and.w	r3, r3, #2
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d029      	beq.n	80076f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f003 0320 	and.w	r3, r3, #32
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d10b      	bne.n	80076c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f022 020a 	bic.w	r2, r2, #10
 80076be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2201      	movs	r2, #1
 80076c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076cc:	f003 021f 	and.w	r2, r3, #31
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076d4:	2102      	movs	r1, #2
 80076d6:	fa01 f202 	lsl.w	r2, r1, r2
 80076da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d038      	beq.n	800775e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80076f4:	e033      	b.n	800775e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	2208      	movs	r2, #8
 8007700:	409a      	lsls	r2, r3
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	4013      	ands	r3, r2
 8007706:	2b00      	cmp	r3, #0
 8007708:	d02a      	beq.n	8007760 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d025      	beq.n	8007760 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f022 020e 	bic.w	r2, r2, #14
 8007722:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007728:	f003 021f 	and.w	r2, r3, #31
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007730:	2101      	movs	r1, #1
 8007732:	fa01 f202 	lsl.w	r2, r1, r2
 8007736:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2201      	movs	r2, #1
 800773c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007752:	2b00      	cmp	r3, #0
 8007754:	d004      	beq.n	8007760 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800775a:	6878      	ldr	r0, [r7, #4]
 800775c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800775e:	bf00      	nop
 8007760:	bf00      	nop
}
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	607a      	str	r2, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800777a:	68fa      	ldr	r2, [r7, #12]
 800777c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800777e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007784:	2b00      	cmp	r3, #0
 8007786:	d004      	beq.n	8007792 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800778c:	68fa      	ldr	r2, [r7, #12]
 800778e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007790:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007796:	f003 021f 	and.w	r2, r3, #31
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800779e:	2101      	movs	r1, #1
 80077a0:	fa01 f202 	lsl.w	r2, r1, r2
 80077a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	2b10      	cmp	r3, #16
 80077b4:	d108      	bne.n	80077c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	687a      	ldr	r2, [r7, #4]
 80077bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80077c6:	e007      	b.n	80077d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	60da      	str	r2, [r3, #12]
}
 80077d8:	bf00      	nop
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b087      	sub	sp, #28
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	461a      	mov	r2, r3
 80077f2:	4b16      	ldr	r3, [pc, #88]	; (800784c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d802      	bhi.n	80077fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80077f8:	4b15      	ldr	r3, [pc, #84]	; (8007850 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80077fa:	617b      	str	r3, [r7, #20]
 80077fc:	e001      	b.n	8007802 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80077fe:	4b15      	ldr	r3, [pc, #84]	; (8007854 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007800:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	b2db      	uxtb	r3, r3
 800780c:	3b08      	subs	r3, #8
 800780e:	4a12      	ldr	r2, [pc, #72]	; (8007858 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007810:	fba2 2303 	umull	r2, r3, r2, r3
 8007814:	091b      	lsrs	r3, r3, #4
 8007816:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800781c:	089b      	lsrs	r3, r3, #2
 800781e:	009a      	lsls	r2, r3, #2
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	461a      	mov	r2, r3
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a0b      	ldr	r2, [pc, #44]	; (800785c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800782e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	f003 031f 	and.w	r3, r3, #31
 8007836:	2201      	movs	r2, #1
 8007838:	409a      	lsls	r2, r3
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800783e:	bf00      	nop
 8007840:	371c      	adds	r7, #28
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr
 800784a:	bf00      	nop
 800784c:	40020407 	.word	0x40020407
 8007850:	40020800 	.word	0x40020800
 8007854:	40020820 	.word	0x40020820
 8007858:	cccccccd 	.word	0xcccccccd
 800785c:	40020880 	.word	0x40020880

08007860 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	b2db      	uxtb	r3, r3
 800786e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007874:	4413      	add	r3, r2
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	461a      	mov	r2, r3
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a08      	ldr	r2, [pc, #32]	; (80078a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007882:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	3b01      	subs	r3, #1
 8007888:	f003 031f 	and.w	r3, r3, #31
 800788c:	2201      	movs	r2, #1
 800788e:	409a      	lsls	r2, r3
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	1000823f 	.word	0x1000823f
 80078a4:	40020940 	.word	0x40020940

080078a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d101      	bne.n	80078ba <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e147      	b.n	8007b4a <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d106      	bne.n	80078d4 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80078ce:	6878      	ldr	r0, [r7, #4]
 80078d0:	f7fa fb6e 	bl	8001fb0 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	699a      	ldr	r2, [r3, #24]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f022 0210 	bic.w	r2, r2, #16
 80078e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80078e4:	f7fe f946 	bl	8005b74 <HAL_GetTick>
 80078e8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80078ea:	e012      	b.n	8007912 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80078ec:	f7fe f942 	bl	8005b74 <HAL_GetTick>
 80078f0:	4602      	mov	r2, r0
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	1ad3      	subs	r3, r2, r3
 80078f6:	2b0a      	cmp	r3, #10
 80078f8:	d90b      	bls.n	8007912 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80078fe:	f043 0201 	orr.w	r2, r3, #1
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	2203      	movs	r2, #3
 800790a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800790e:	2301      	movs	r3, #1
 8007910:	e11b      	b.n	8007b4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b08      	cmp	r3, #8
 800791e:	d0e5      	beq.n	80078ec <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	699a      	ldr	r2, [r3, #24]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f042 0201 	orr.w	r2, r2, #1
 800792e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007930:	f7fe f920 	bl	8005b74 <HAL_GetTick>
 8007934:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007936:	e012      	b.n	800795e <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8007938:	f7fe f91c 	bl	8005b74 <HAL_GetTick>
 800793c:	4602      	mov	r2, r0
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	1ad3      	subs	r3, r2, r3
 8007942:	2b0a      	cmp	r3, #10
 8007944:	d90b      	bls.n	800795e <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800794a:	f043 0201 	orr.w	r2, r3, #1
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2203      	movs	r2, #3
 8007956:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	e0f5      	b.n	8007b4a <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	699b      	ldr	r3, [r3, #24]
 8007964:	f003 0301 	and.w	r3, r3, #1
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0e5      	beq.n	8007938 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	699a      	ldr	r2, [r3, #24]
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f042 0202 	orr.w	r2, r2, #2
 800797a:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a74      	ldr	r2, [pc, #464]	; (8007b54 <HAL_FDCAN_Init+0x2ac>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d103      	bne.n	800798e <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 8007986:	4a74      	ldr	r2, [pc, #464]	; (8007b58 <HAL_FDCAN_Init+0x2b0>)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	7c1b      	ldrb	r3, [r3, #16]
 8007992:	2b01      	cmp	r3, #1
 8007994:	d108      	bne.n	80079a8 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80079a4:	619a      	str	r2, [r3, #24]
 80079a6:	e007      	b.n	80079b8 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	699a      	ldr	r2, [r3, #24]
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80079b6:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	7c5b      	ldrb	r3, [r3, #17]
 80079bc:	2b01      	cmp	r3, #1
 80079be:	d108      	bne.n	80079d2 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	699a      	ldr	r2, [r3, #24]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80079ce:	619a      	str	r2, [r3, #24]
 80079d0:	e007      	b.n	80079e2 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	699a      	ldr	r2, [r3, #24]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80079e0:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	7c9b      	ldrb	r3, [r3, #18]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d108      	bne.n	80079fc <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	699a      	ldr	r2, [r3, #24]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80079f8:	619a      	str	r2, [r3, #24]
 80079fa:	e007      	b.n	8007a0c <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	699a      	ldr	r2, [r3, #24]
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007a0a:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	689a      	ldr	r2, [r3, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	430a      	orrs	r2, r1
 8007a20:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	699a      	ldr	r2, [r3, #24]
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8007a30:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f022 0210 	bic.w	r2, r2, #16
 8007a40:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	68db      	ldr	r3, [r3, #12]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d108      	bne.n	8007a5c <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	699a      	ldr	r2, [r3, #24]
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f042 0204 	orr.w	r2, r2, #4
 8007a58:	619a      	str	r2, [r3, #24]
 8007a5a:	e02c      	b.n	8007ab6 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d028      	beq.n	8007ab6 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d01c      	beq.n	8007aa6 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	699a      	ldr	r2, [r3, #24]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a7a:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	691a      	ldr	r2, [r3, #16]
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f042 0210 	orr.w	r2, r2, #16
 8007a8a:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	2b03      	cmp	r3, #3
 8007a92:	d110      	bne.n	8007ab6 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	699a      	ldr	r2, [r3, #24]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f042 0220 	orr.w	r2, r2, #32
 8007aa2:	619a      	str	r2, [r3, #24]
 8007aa4:	e007      	b.n	8007ab6 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	699a      	ldr	r2, [r3, #24]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f042 0220 	orr.w	r2, r2, #32
 8007ab4:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	699b      	ldr	r3, [r3, #24]
 8007aba:	3b01      	subs	r3, #1
 8007abc:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	69db      	ldr	r3, [r3, #28]
 8007ac2:	3b01      	subs	r3, #1
 8007ac4:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ac6:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007ace:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	695b      	ldr	r3, [r3, #20]
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007ade:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007ae0:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007aea:	d115      	bne.n	8007b18 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007af0:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007af6:	3b01      	subs	r3, #1
 8007af8:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007afa:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b00:	3b01      	subs	r3, #1
 8007b02:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8007b04:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8007b14:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8007b16:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	430a      	orrs	r2, r1
 8007b2a:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 f9e6 	bl	8007f00 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2200      	movs	r2, #0
 8007b38:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2201      	movs	r2, #1
 8007b44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8007b48:	2300      	movs	r3, #0
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3710      	adds	r7, #16
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40006400 	.word	0x40006400
 8007b58:	40006500 	.word	0x40006500

08007b5c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	b087      	sub	sp, #28
 8007b60:	af00      	add	r7, sp, #0
 8007b62:	6078      	str	r0, [r7, #4]
 8007b64:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007b6c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007b6e:	7dfb      	ldrb	r3, [r7, #23]
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d002      	beq.n	8007b7a <HAL_FDCAN_ConfigFilter+0x1e>
 8007b74:	7dfb      	ldrb	r3, [r7, #23]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d13d      	bne.n	8007bf6 <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8007b7a:	683b      	ldr	r3, [r7, #0]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d119      	bne.n	8007bb6 <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	689b      	ldr	r3, [r3, #8]
 8007b86:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	68db      	ldr	r3, [r3, #12]
 8007b8c:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b8e:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	691b      	ldr	r3, [r3, #16]
 8007b94:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 8007b96:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 8007b98:	683b      	ldr	r3, [r7, #0]
 8007b9a:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	009b      	lsls	r3, r3, #2
 8007baa:	4413      	add	r3, r2
 8007bac:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	693a      	ldr	r2, [r7, #16]
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e01d      	b.n	8007bf2 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	68db      	ldr	r3, [r3, #12]
 8007bba:	075a      	lsls	r2, r3, #29
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8007bc4:	683b      	ldr	r3, [r7, #0]
 8007bc6:	689b      	ldr	r3, [r3, #8]
 8007bc8:	079a      	lsls	r2, r3, #30
 8007bca:	683b      	ldr	r3, [r7, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007bd6:	683b      	ldr	r3, [r7, #0]
 8007bd8:	685b      	ldr	r3, [r3, #4]
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	4413      	add	r3, r2
 8007bde:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007be0:	68bb      	ldr	r3, [r7, #8]
 8007be2:	693a      	ldr	r2, [r7, #16]
 8007be4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	3304      	adds	r3, #4
 8007bea:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	e006      	b.n	8007c04 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007bfa:	f043 0202 	orr.w	r2, r3, #2
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
  }
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	371c      	adds	r7, #28
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0e:	4770      	bx	lr

08007c10 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8007c10:	b480      	push	{r7}
 8007c12:	b085      	sub	sp, #20
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	60b9      	str	r1, [r7, #8]
 8007c1a:	607a      	str	r2, [r7, #4]
 8007c1c:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d116      	bne.n	8007c58 <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007c32:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	011a      	lsls	r2, r3, #4
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	009b      	lsls	r3, r3, #2
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	005b      	lsls	r3, r3, #1
 8007c44:	431a      	orrs	r2, r3
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	431a      	orrs	r2, r3
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	430a      	orrs	r2, r1
 8007c50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8007c54:	2300      	movs	r3, #0
 8007c56:	e006      	b.n	8007c66 <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c5c:	f043 0204 	orr.w	r2, r3, #4
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
  }
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3714      	adds	r7, #20
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr

08007c72 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8007c72:	b480      	push	{r7}
 8007c74:	b083      	sub	sp, #12
 8007c76:	af00      	add	r7, sp, #0
 8007c78:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007c80:	b2db      	uxtb	r3, r3
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d110      	bne.n	8007ca8 <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	699a      	ldr	r2, [r3, #24]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f022 0201 	bic.w	r2, r2, #1
 8007c9c:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Return function status */
    return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
 8007ca6:	e006      	b.n	8007cb6 <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cac:	f043 0204 	orr.w	r2, r3, #4
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007cb4:	2301      	movs	r3, #1
  }
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader,
                                                uint8_t *pTxData)
{
 8007cc2:	b580      	push	{r7, lr}
 8007cc4:	b086      	sub	sp, #24
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	60f8      	str	r0, [r7, #12]
 8007cca:	60b9      	str	r1, [r7, #8]
 8007ccc:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d12c      	bne.n	8007d34 <HAL_FDCAN_AddMessageToTxFifoQ+0x72>
  {
    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007ce2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d007      	beq.n	8007cfa <HAL_FDCAN_AddMessageToTxFifoQ+0x38>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cee:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	e023      	b.n	8007d42 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8007d02:	0c1b      	lsrs	r3, r3, #16
 8007d04:	f003 0303 	and.w	r3, r3, #3
 8007d08:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	687a      	ldr	r2, [r7, #4]
 8007d0e:	68b9      	ldr	r1, [r7, #8]
 8007d10:	68f8      	ldr	r0, [r7, #12]
 8007d12:	f000 f94b 	bl	8007fac <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2101      	movs	r1, #1
 8007d1c:	697a      	ldr	r2, [r7, #20]
 8007d1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007d22:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8007d26:	2201      	movs	r2, #1
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	409a      	lsls	r2, r3
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    /* Return function status */
    return HAL_OK;
 8007d30:	2300      	movs	r3, #0
 8007d32:	e006      	b.n	8007d42 <HAL_FDCAN_AddMessageToTxFifoQ+0x80>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d38:	f043 0208 	orr.w	r2, r3, #8
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
  }
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3718      	adds	r7, #24
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
	...

08007d4c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b08b      	sub	sp, #44	; 0x2c
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	60b9      	str	r1, [r7, #8]
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007d60:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 8007d62:	7efb      	ldrb	r3, [r7, #27]
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	f040 80bc 	bne.w	8007ee2 <HAL_FDCAN_GetRxMessage+0x196>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	d121      	bne.n	8007db4 <HAL_FDCAN_GetRxMessage+0x68>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d107      	bne.n	8007d90 <HAL_FDCAN_GetRxMessage+0x44>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d84:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007d8c:	2301      	movs	r3, #1
 8007d8e:	e0af      	b.n	8007ef0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 0 element address */
        GetIndex = ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d98:	0a1b      	lsrs	r3, r3, #8
 8007d9a:	f003 0303 	and.w	r3, r3, #3
 8007d9e:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	6c99      	ldr	r1, [r3, #72]	; 0x48
 8007da4:	69fa      	ldr	r2, [r7, #28]
 8007da6:	4613      	mov	r3, r2
 8007da8:	00db      	lsls	r3, r3, #3
 8007daa:	4413      	add	r3, r2
 8007dac:	00db      	lsls	r3, r3, #3
 8007dae:	440b      	add	r3, r1
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
 8007db2:	e020      	b.n	8007df6 <HAL_FDCAN_GetRxMessage+0xaa>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dbc:	f003 030f 	and.w	r3, r3, #15
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d107      	bne.n	8007dd4 <HAL_FDCAN_GetRxMessage+0x88>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e08d      	b.n	8007ef0 <HAL_FDCAN_GetRxMessage+0x1a4>
      }
      else
      {
        /* Calculate Rx FIFO 1 element address */
        GetIndex = ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ddc:	0a1b      	lsrs	r3, r3, #8
 8007dde:	f003 0303 	and.w	r3, r3, #3
 8007de2:	61fb      	str	r3, [r7, #28]
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8007de8:	69fa      	ldr	r2, [r7, #28]
 8007dea:	4613      	mov	r3, r2
 8007dec:	00db      	lsls	r3, r3, #3
 8007dee:	4413      	add	r3, r2
 8007df0:	00db      	lsls	r3, r3, #3
 8007df2:	440b      	add	r3, r1
 8007df4:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8007df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d107      	bne.n	8007e1a <HAL_FDCAN_GetRxMessage+0xce>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	0c9b      	lsrs	r3, r3, #18
 8007e10:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	601a      	str	r2, [r3, #0]
 8007e18:	e005      	b.n	8007e26 <HAL_FDCAN_GetRxMessage+0xda>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8007e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e40:	3304      	adds	r3, #4
 8007e42:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 8007e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	0e1b      	lsrs	r3, r3, #24
 8007e78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	0fda      	lsrs	r2, r3, #31
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	3304      	adds	r3, #4
 8007e8e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e92:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007e94:	2300      	movs	r3, #0
 8007e96:	623b      	str	r3, [r7, #32]
 8007e98:	e00a      	b.n	8007eb0 <HAL_FDCAN_GetRxMessage+0x164>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007e9a:	697a      	ldr	r2, [r7, #20]
 8007e9c:	6a3b      	ldr	r3, [r7, #32]
 8007e9e:	441a      	add	r2, r3
 8007ea0:	6839      	ldr	r1, [r7, #0]
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	440b      	add	r3, r1
 8007ea6:	7812      	ldrb	r2, [r2, #0]
 8007ea8:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16U]; ByteCounter++)
 8007eaa:	6a3b      	ldr	r3, [r7, #32]
 8007eac:	3301      	adds	r3, #1
 8007eae:	623b      	str	r3, [r7, #32]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	68db      	ldr	r3, [r3, #12]
 8007eb4:	0c1b      	lsrs	r3, r3, #16
 8007eb6:	4a11      	ldr	r2, [pc, #68]	; (8007efc <HAL_FDCAN_GetRxMessage+0x1b0>)
 8007eb8:	5cd3      	ldrb	r3, [r2, r3]
 8007eba:	461a      	mov	r2, r3
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d3eb      	bcc.n	8007e9a <HAL_FDCAN_GetRxMessage+0x14e>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2b40      	cmp	r3, #64	; 0x40
 8007ec6:	d105      	bne.n	8007ed4 <HAL_FDCAN_GetRxMessage+0x188>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	69fa      	ldr	r2, [r7, #28]
 8007ece:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8007ed2:	e004      	b.n	8007ede <HAL_FDCAN_GetRxMessage+0x192>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	69fa      	ldr	r2, [r7, #28]
 8007eda:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	e006      	b.n	8007ef0 <HAL_FDCAN_GetRxMessage+0x1a4>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ee6:	f043 0208 	orr.w	r2, r3, #8
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	661a      	str	r2, [r3, #96]	; 0x60

    return HAL_ERROR;
 8007eee:	2301      	movs	r3, #1
  }
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	372c      	adds	r7, #44	; 0x2c
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	080126cc 	.word	0x080126cc

08007f00 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007f00:	b480      	push	{r7}
 8007f02:	b085      	sub	sp, #20
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8007f08:	4b27      	ldr	r3, [pc, #156]	; (8007fa8 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8007f0a:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	68ba      	ldr	r2, [r7, #8]
 8007f10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f1a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f22:	041a      	lsls	r2, r3, #16
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	430a      	orrs	r2, r1
 8007f2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8007f2e:	68bb      	ldr	r3, [r7, #8]
 8007f30:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007f40:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f48:	061a      	lsls	r2, r3, #24
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	430a      	orrs	r2, r1
 8007f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8007f72:	68bb      	ldr	r3, [r7, #8]
 8007f74:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e005      	b.n	8007f8e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2200      	movs	r2, #0
 8007f86:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	3304      	adds	r3, #4
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d3f3      	bcc.n	8007f82 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8007f9a:	bf00      	nop
 8007f9c:	bf00      	nop
 8007f9e:	3714      	adds	r7, #20
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr
 8007fa8:	4000a400 	.word	0x4000a400

08007fac <FDCAN_CopyMessageToRAM>:
  * @param  BufferIndex index of the buffer to be configured.
  * @retval none
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData,
                                   uint32_t BufferIndex)
{
 8007fac:	b480      	push	{r7}
 8007fae:	b089      	sub	sp, #36	; 0x24
 8007fb0:	af00      	add	r7, sp, #0
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
 8007fb8:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	685b      	ldr	r3, [r3, #4]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d10a      	bne.n	8007fd8 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fc2:	68bb      	ldr	r3, [r7, #8]
 8007fc4:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8007fca:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18U));
 8007fcc:	68bb      	ldr	r3, [r7, #8]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fd2:	4313      	orrs	r3, r2
 8007fd4:	61fb      	str	r3, [r7, #28]
 8007fd6:	e00a      	b.n	8007fee <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8007fe0:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8007fe6:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8007fe8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fec:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007fee:	68bb      	ldr	r3, [r7, #8]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 8007ff8:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8007ffe:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8008000:	68bb      	ldr	r3, [r7, #8]
 8008002:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8008004:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8008006:	68bb      	ldr	r3, [r7, #8]
 8008008:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24U) |
 800800a:	4313      	orrs	r3, r2
 800800c:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxFIFOQSA + (BufferIndex * SRAMCAN_TFQ_SIZE));
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008012:	683a      	ldr	r2, [r7, #0]
 8008014:	4613      	mov	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	4413      	add	r3, r2
 800801a:	00db      	lsls	r3, r3, #3
 800801c:	440b      	add	r3, r1
 800801e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8008020:	69bb      	ldr	r3, [r7, #24]
 8008022:	69fa      	ldr	r2, [r7, #28]
 8008024:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008026:	69bb      	ldr	r3, [r7, #24]
 8008028:	3304      	adds	r3, #4
 800802a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8008032:	69bb      	ldr	r3, [r7, #24]
 8008034:	3304      	adds	r3, #4
 8008036:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 8008038:	2300      	movs	r3, #0
 800803a:	617b      	str	r3, [r7, #20]
 800803c:	e020      	b.n	8008080 <FDCAN_CopyMessageToRAM+0xd4>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	3303      	adds	r3, #3
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	4413      	add	r3, r2
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 800804a:	697b      	ldr	r3, [r7, #20]
 800804c:	3302      	adds	r3, #2
 800804e:	6879      	ldr	r1, [r7, #4]
 8008050:	440b      	add	r3, r1
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008056:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	3301      	adds	r3, #1
 800805c:	6879      	ldr	r1, [r7, #4]
 800805e:	440b      	add	r3, r1
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16U) |
 8008064:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	697a      	ldr	r2, [r7, #20]
 800806a:	440a      	add	r2, r1
 800806c:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8U)  |
 800806e:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24U) |
 8008070:	69bb      	ldr	r3, [r7, #24]
 8008072:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	3304      	adds	r3, #4
 8008078:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16U]; ByteCounter += 4U)
 800807a:	697b      	ldr	r3, [r7, #20]
 800807c:	3304      	adds	r3, #4
 800807e:	617b      	str	r3, [r7, #20]
 8008080:	68bb      	ldr	r3, [r7, #8]
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	0c1b      	lsrs	r3, r3, #16
 8008086:	4a06      	ldr	r2, [pc, #24]	; (80080a0 <FDCAN_CopyMessageToRAM+0xf4>)
 8008088:	5cd3      	ldrb	r3, [r2, r3]
 800808a:	461a      	mov	r2, r3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	4293      	cmp	r3, r2
 8008090:	d3d5      	bcc.n	800803e <FDCAN_CopyMessageToRAM+0x92>
  }
}
 8008092:	bf00      	nop
 8008094:	bf00      	nop
 8008096:	3724      	adds	r7, #36	; 0x24
 8008098:	46bd      	mov	sp, r7
 800809a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809e:	4770      	bx	lr
 80080a0:	080126cc 	.word	0x080126cc

080080a4 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b086      	sub	sp, #24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80080b6:	4b24      	ldr	r3, [pc, #144]	; (8008148 <HAL_FLASH_Program+0xa4>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d101      	bne.n	80080c2 <HAL_FLASH_Program+0x1e>
 80080be:	2302      	movs	r3, #2
 80080c0:	e03e      	b.n	8008140 <HAL_FLASH_Program+0x9c>
 80080c2:	4b21      	ldr	r3, [pc, #132]	; (8008148 <HAL_FLASH_Program+0xa4>)
 80080c4:	2201      	movs	r2, #1
 80080c6:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80080c8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80080cc:	f000 f888 	bl	80081e0 <FLASH_WaitForLastOperation>
 80080d0:	4603      	mov	r3, r0
 80080d2:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80080d4:	7dfb      	ldrb	r3, [r7, #23]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d12e      	bne.n	8008138 <HAL_FLASH_Program+0x94>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80080da:	4b1b      	ldr	r3, [pc, #108]	; (8008148 <HAL_FLASH_Program+0xa4>)
 80080dc:	2200      	movs	r2, #0
 80080de:	605a      	str	r2, [r3, #4]

    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d107      	bne.n	80080f6 <HAL_FLASH_Program+0x52>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80080e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80080ea:	68b8      	ldr	r0, [r7, #8]
 80080ec:	f000 f8cc 	bl	8008288 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80080f0:	2301      	movs	r3, #1
 80080f2:	613b      	str	r3, [r7, #16]
 80080f4:	e010      	b.n	8008118 <HAL_FLASH_Program+0x74>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d002      	beq.n	8008102 <HAL_FLASH_Program+0x5e>
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d10a      	bne.n	8008118 <HAL_FLASH_Program+0x74>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	4619      	mov	r1, r3
 8008106:	68b8      	ldr	r0, [r7, #8]
 8008108:	f000 f8e4 	bl	80082d4 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	2b02      	cmp	r3, #2
 8008110:	d102      	bne.n	8008118 <HAL_FLASH_Program+0x74>
      {
        prog_bit = FLASH_CR_FSTPG;
 8008112:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008116:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008118:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800811c:	f000 f860 	bl	80081e0 <FLASH_WaitForLastOperation>
 8008120:	4603      	mov	r3, r0
 8008122:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <HAL_FLASH_Program+0x94>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 800812a:	4b08      	ldr	r3, [pc, #32]	; (800814c <HAL_FLASH_Program+0xa8>)
 800812c:	695a      	ldr	r2, [r3, #20]
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	43db      	mvns	r3, r3
 8008132:	4906      	ldr	r1, [pc, #24]	; (800814c <HAL_FLASH_Program+0xa8>)
 8008134:	4013      	ands	r3, r2
 8008136:	614b      	str	r3, [r1, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008138:	4b03      	ldr	r3, [pc, #12]	; (8008148 <HAL_FLASH_Program+0xa4>)
 800813a:	2200      	movs	r2, #0
 800813c:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 800813e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008140:	4618      	mov	r0, r3
 8008142:	3718      	adds	r7, #24
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}
 8008148:	2000000c 	.word	0x2000000c
 800814c:	40022000 	.word	0x40022000

08008150 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008156:	2300      	movs	r3, #0
 8008158:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800815a:	4b0b      	ldr	r3, [pc, #44]	; (8008188 <HAL_FLASH_Unlock+0x38>)
 800815c:	695b      	ldr	r3, [r3, #20]
 800815e:	2b00      	cmp	r3, #0
 8008160:	da0b      	bge.n	800817a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8008162:	4b09      	ldr	r3, [pc, #36]	; (8008188 <HAL_FLASH_Unlock+0x38>)
 8008164:	4a09      	ldr	r2, [pc, #36]	; (800818c <HAL_FLASH_Unlock+0x3c>)
 8008166:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008168:	4b07      	ldr	r3, [pc, #28]	; (8008188 <HAL_FLASH_Unlock+0x38>)
 800816a:	4a09      	ldr	r2, [pc, #36]	; (8008190 <HAL_FLASH_Unlock+0x40>)
 800816c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 800816e:	4b06      	ldr	r3, [pc, #24]	; (8008188 <HAL_FLASH_Unlock+0x38>)
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	2b00      	cmp	r3, #0
 8008174:	da01      	bge.n	800817a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800817a:	79fb      	ldrb	r3, [r7, #7]
}
 800817c:	4618      	mov	r0, r3
 800817e:	370c      	adds	r7, #12
 8008180:	46bd      	mov	sp, r7
 8008182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008186:	4770      	bx	lr
 8008188:	40022000 	.word	0x40022000
 800818c:	45670123 	.word	0x45670123
 8008190:	cdef89ab 	.word	0xcdef89ab

08008194 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008194:	b480      	push	{r7}
 8008196:	b083      	sub	sp, #12
 8008198:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 800819a:	2301      	movs	r3, #1
 800819c:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800819e:	4b09      	ldr	r3, [pc, #36]	; (80081c4 <HAL_FLASH_Lock+0x30>)
 80081a0:	695b      	ldr	r3, [r3, #20]
 80081a2:	4a08      	ldr	r2, [pc, #32]	; (80081c4 <HAL_FLASH_Lock+0x30>)
 80081a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80081a8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80081aa:	4b06      	ldr	r3, [pc, #24]	; (80081c4 <HAL_FLASH_Lock+0x30>)
 80081ac:	695b      	ldr	r3, [r3, #20]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	da01      	bge.n	80081b6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80081b2:	2300      	movs	r3, #0
 80081b4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80081b6:	79fb      	ldrb	r3, [r7, #7]
}
 80081b8:	4618      	mov	r0, r3
 80081ba:	370c      	adds	r7, #12
 80081bc:	46bd      	mov	sp, r7
 80081be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c2:	4770      	bx	lr
 80081c4:	40022000 	.word	0x40022000

080081c8 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_FAST: FLASH Fast programming error
  *            @arg HAL_FLASH_ERROR_RD: FLASH PCROP read error
  *            @arg HAL_FLASH_ERROR_OPTV: FLASH Option validity error
  */
uint32_t HAL_FLASH_GetError(void)
{
 80081c8:	b480      	push	{r7}
 80081ca:	af00      	add	r7, sp, #0
  return pFlash.ErrorCode;
 80081cc:	4b03      	ldr	r3, [pc, #12]	; (80081dc <HAL_FLASH_GetError+0x14>)
 80081ce:	685b      	ldr	r3, [r3, #4]
}
 80081d0:	4618      	mov	r0, r3
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr
 80081da:	bf00      	nop
 80081dc:	2000000c 	.word	0x2000000c

080081e0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b084      	sub	sp, #16
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80081e8:	f7fd fcc4 	bl	8005b74 <HAL_GetTick>
 80081ec:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80081ee:	e009      	b.n	8008204 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80081f0:	f7fd fcc0 	bl	8005b74 <HAL_GetTick>
 80081f4:	4602      	mov	r2, r0
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	1ad3      	subs	r3, r2, r3
 80081fa:	687a      	ldr	r2, [r7, #4]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d201      	bcs.n	8008204 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e038      	b.n	8008276 <FLASH_WaitForLastOperation+0x96>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8008204:	4b1e      	ldr	r3, [pc, #120]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800820c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008210:	d0ee      	beq.n	80081f0 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8008212:	4b1b      	ldr	r3, [pc, #108]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 8008214:	691a      	ldr	r2, [r3, #16]
 8008216:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 800821a:	4013      	ands	r3, r2
 800821c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01e      	beq.n	8008262 <FLASH_WaitForLastOperation+0x82>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8008224:	4b17      	ldr	r3, [pc, #92]	; (8008284 <FLASH_WaitForLastOperation+0xa4>)
 8008226:	685a      	ldr	r2, [r3, #4]
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	4313      	orrs	r3, r2
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <FLASH_WaitForLastOperation+0xa4>)
 800822e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008236:	2b00      	cmp	r3, #0
 8008238:	d007      	beq.n	800824a <FLASH_WaitForLastOperation+0x6a>
 800823a:	4b11      	ldr	r3, [pc, #68]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 800823c:	699a      	ldr	r2, [r3, #24]
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8008244:	490e      	ldr	r1, [pc, #56]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 8008246:	4313      	orrs	r3, r2
 8008248:	618b      	str	r3, [r1, #24]
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <FLASH_WaitForLastOperation+0x7e>
 8008254:	4a0a      	ldr	r2, [pc, #40]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800825c:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 800825e:	2301      	movs	r3, #1
 8008260:	e009      	b.n	8008276 <FLASH_WaitForLastOperation+0x96>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8008262:	4b07      	ldr	r3, [pc, #28]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	2b01      	cmp	r3, #1
 800826c:	d102      	bne.n	8008274 <FLASH_WaitForLastOperation+0x94>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800826e:	4b04      	ldr	r3, [pc, #16]	; (8008280 <FLASH_WaitForLastOperation+0xa0>)
 8008270:	2201      	movs	r2, #1
 8008272:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8008274:	2300      	movs	r3, #0
}
 8008276:	4618      	mov	r0, r3
 8008278:	3710      	adds	r7, #16
 800827a:	46bd      	mov	sp, r7
 800827c:	bd80      	pop	{r7, pc}
 800827e:	bf00      	nop
 8008280:	40022000 	.word	0x40022000
 8008284:	2000000c 	.word	0x2000000c

08008288 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008288:	b480      	push	{r7}
 800828a:	b085      	sub	sp, #20
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8008294:	4b0e      	ldr	r3, [pc, #56]	; (80082d0 <FLASH_Program_DoubleWord+0x48>)
 8008296:	695b      	ldr	r3, [r3, #20]
 8008298:	4a0d      	ldr	r2, [pc, #52]	; (80082d0 <FLASH_Program_DoubleWord+0x48>)
 800829a:	f043 0301 	orr.w	r3, r3, #1
 800829e:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80082a6:	f3bf 8f6f 	isb	sy
}
 80082aa:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80082ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80082b0:	f04f 0200 	mov.w	r2, #0
 80082b4:	f04f 0300 	mov.w	r3, #0
 80082b8:	000a      	movs	r2, r1
 80082ba:	2300      	movs	r3, #0
 80082bc:	68f9      	ldr	r1, [r7, #12]
 80082be:	3104      	adds	r1, #4
 80082c0:	4613      	mov	r3, r2
 80082c2:	600b      	str	r3, [r1, #0]
}
 80082c4:	bf00      	nop
 80082c6:	3714      	adds	r7, #20
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr
 80082d0:	40022000 	.word	0x40022000

080082d4 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
 80082dc:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80082de:	2340      	movs	r3, #64	; 0x40
 80082e0:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80082ea:	4b14      	ldr	r3, [pc, #80]	; (800833c <FLASH_Program_Fast+0x68>)
 80082ec:	695b      	ldr	r3, [r3, #20]
 80082ee:	4a13      	ldr	r2, [pc, #76]	; (800833c <FLASH_Program_Fast+0x68>)
 80082f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80082f4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f6:	f3ef 8310 	mrs	r3, PRIMASK
 80082fa:	60fb      	str	r3, [r7, #12]
  return(result);
 80082fc:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 80082fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8008300:	b672      	cpsid	i
}
 8008302:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	69bb      	ldr	r3, [r7, #24]
 800830a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800830c:	69bb      	ldr	r3, [r7, #24]
 800830e:	3304      	adds	r3, #4
 8008310:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	3304      	adds	r3, #4
 8008316:	617b      	str	r3, [r7, #20]
    row_index--;
 8008318:	7ffb      	ldrb	r3, [r7, #31]
 800831a:	3b01      	subs	r3, #1
 800831c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800831e:	7ffb      	ldrb	r3, [r7, #31]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d1ef      	bne.n	8008304 <FLASH_Program_Fast+0x30>
 8008324:	693b      	ldr	r3, [r7, #16]
 8008326:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	f383 8810 	msr	PRIMASK, r3
}
 800832e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8008330:	bf00      	nop
 8008332:	3724      	adds	r7, #36	; 0x24
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr
 800833c:	40022000 	.word	0x40022000

08008340 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b084      	sub	sp, #16
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800834a:	4b4a      	ldr	r3, [pc, #296]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 800834c:	781b      	ldrb	r3, [r3, #0]
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_FLASHEx_Erase+0x16>
 8008352:	2302      	movs	r3, #2
 8008354:	e089      	b.n	800846a <HAL_FLASHEx_Erase+0x12a>
 8008356:	4b47      	ldr	r3, [pc, #284]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 8008358:	2201      	movs	r2, #1
 800835a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800835c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008360:	f7ff ff3e 	bl	80081e0 <FLASH_WaitForLastOperation>
 8008364:	4603      	mov	r3, r0
 8008366:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8008368:	7bfb      	ldrb	r3, [r7, #15]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d179      	bne.n	8008462 <HAL_FLASHEx_Erase+0x122>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800836e:	4b41      	ldr	r3, [pc, #260]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 8008370:	2200      	movs	r2, #0
 8008372:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8008374:	4b40      	ldr	r3, [pc, #256]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800837c:	2b00      	cmp	r3, #0
 800837e:	d019      	beq.n	80083b4 <HAL_FLASHEx_Erase+0x74>
    {
      /* Disable instruction cache  */
      __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008380:	4b3d      	ldr	r3, [pc, #244]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a3c      	ldr	r2, [pc, #240]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 8008386:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800838a:	6013      	str	r3, [r2, #0]

      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800838c:	4b3a      	ldr	r3, [pc, #232]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008394:	2b00      	cmp	r3, #0
 8008396:	d009      	beq.n	80083ac <HAL_FLASHEx_Erase+0x6c>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8008398:	4b37      	ldr	r3, [pc, #220]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	4a36      	ldr	r2, [pc, #216]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 800839e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083a2:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80083a4:	4b33      	ldr	r3, [pc, #204]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 80083a6:	2203      	movs	r2, #3
 80083a8:	771a      	strb	r2, [r3, #28]
 80083aa:	e016      	b.n	80083da <HAL_FLASHEx_Erase+0x9a>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80083ac:	4b31      	ldr	r3, [pc, #196]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 80083ae:	2201      	movs	r2, #1
 80083b0:	771a      	strb	r2, [r3, #28]
 80083b2:	e012      	b.n	80083da <HAL_FLASHEx_Erase+0x9a>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80083b4:	4b30      	ldr	r3, [pc, #192]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d009      	beq.n	80083d4 <HAL_FLASHEx_Erase+0x94>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80083c0:	4b2d      	ldr	r3, [pc, #180]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a2c      	ldr	r2, [pc, #176]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 80083c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ca:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80083cc:	4b29      	ldr	r3, [pc, #164]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 80083ce:	2202      	movs	r2, #2
 80083d0:	771a      	strb	r2, [r3, #28]
 80083d2:	e002      	b.n	80083da <HAL_FLASHEx_Erase+0x9a>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80083d4:	4b27      	ldr	r3, [pc, #156]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 80083d6:	2200      	movs	r2, #0
 80083d8:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d111      	bne.n	8008406 <HAL_FLASHEx_Erase+0xc6>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	4618      	mov	r0, r3
 80083e8:	f000 f848 	bl	800847c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80083ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083f0:	f7ff fef6 	bl	80081e0 <FLASH_WaitForLastOperation>
 80083f4:	4603      	mov	r3, r0
 80083f6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80083f8:	4b1f      	ldr	r3, [pc, #124]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 80083fa:	695b      	ldr	r3, [r3, #20]
 80083fc:	4a1e      	ldr	r2, [pc, #120]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 80083fe:	f023 0304 	bic.w	r3, r3, #4
 8008402:	6153      	str	r3, [r2, #20]
 8008404:	e02b      	b.n	800845e <HAL_FLASHEx_Erase+0x11e>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	f04f 32ff 	mov.w	r2, #4294967295
 800840c:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	60bb      	str	r3, [r7, #8]
 8008414:	e01b      	b.n	800844e <HAL_FLASHEx_Erase+0x10e>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	685b      	ldr	r3, [r3, #4]
 800841a:	4619      	mov	r1, r3
 800841c:	68b8      	ldr	r0, [r7, #8]
 800841e:	f000 f84b 	bl	80084b8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008422:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008426:	f7ff fedb 	bl	80081e0 <FLASH_WaitForLastOperation>
 800842a:	4603      	mov	r3, r0
 800842c:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800842e:	4b12      	ldr	r3, [pc, #72]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 8008430:	695b      	ldr	r3, [r3, #20]
 8008432:	4a11      	ldr	r2, [pc, #68]	; (8008478 <HAL_FLASHEx_Erase+0x138>)
 8008434:	f423 73fd 	bic.w	r3, r3, #506	; 0x1fa
 8008438:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d003      	beq.n	8008448 <HAL_FLASHEx_Erase+0x108>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8008440:	683b      	ldr	r3, [r7, #0]
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	601a      	str	r2, [r3, #0]
          break;
 8008446:	e00a      	b.n	800845e <HAL_FLASHEx_Erase+0x11e>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8008448:	68bb      	ldr	r3, [r7, #8]
 800844a:	3301      	adds	r3, #1
 800844c:	60bb      	str	r3, [r7, #8]
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	689a      	ldr	r2, [r3, #8]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	4413      	add	r3, r2
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	429a      	cmp	r2, r3
 800845c:	d3db      	bcc.n	8008416 <HAL_FLASHEx_Erase+0xd6>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800845e:	f000 f84f 	bl	8008500 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008462:	4b04      	ldr	r3, [pc, #16]	; (8008474 <HAL_FLASHEx_Erase+0x134>)
 8008464:	2200      	movs	r2, #0
 8008466:	701a      	strb	r2, [r3, #0]

  return status;
 8008468:	7bfb      	ldrb	r3, [r7, #15]
}
 800846a:	4618      	mov	r0, r3
 800846c:	3710      	adds	r7, #16
 800846e:	46bd      	mov	sp, r7
 8008470:	bd80      	pop	{r7, pc}
 8008472:	bf00      	nop
 8008474:	2000000c 	.word	0x2000000c
 8008478:	40022000 	.word	0x40022000

0800847c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f003 0301 	and.w	r3, r3, #1
 800848a:	2b00      	cmp	r3, #0
 800848c:	d005      	beq.n	800849a <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800848e:	4b09      	ldr	r3, [pc, #36]	; (80084b4 <FLASH_MassErase+0x38>)
 8008490:	695b      	ldr	r3, [r3, #20]
 8008492:	4a08      	ldr	r2, [pc, #32]	; (80084b4 <FLASH_MassErase+0x38>)
 8008494:	f043 0304 	orr.w	r3, r3, #4
 8008498:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800849a:	4b06      	ldr	r3, [pc, #24]	; (80084b4 <FLASH_MassErase+0x38>)
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	4a05      	ldr	r2, [pc, #20]	; (80084b4 <FLASH_MassErase+0x38>)
 80084a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084a4:	6153      	str	r3, [r2, #20]
}
 80084a6:	bf00      	nop
 80084a8:	370c      	adds	r7, #12
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	40022000 	.word	0x40022000

080084b8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
    }
  }
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80084c2:	4b0e      	ldr	r3, [pc, #56]	; (80084fc <FLASH_PageErase+0x44>)
 80084c4:	695b      	ldr	r3, [r3, #20]
 80084c6:	f423 72fc 	bic.w	r2, r3, #504	; 0x1f8
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	00db      	lsls	r3, r3, #3
 80084ce:	f403 63ff 	and.w	r3, r3, #2040	; 0x7f8
 80084d2:	490a      	ldr	r1, [pc, #40]	; (80084fc <FLASH_PageErase+0x44>)
 80084d4:	4313      	orrs	r3, r2
 80084d6:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80084d8:	4b08      	ldr	r3, [pc, #32]	; (80084fc <FLASH_PageErase+0x44>)
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	4a07      	ldr	r2, [pc, #28]	; (80084fc <FLASH_PageErase+0x44>)
 80084de:	f043 0302 	orr.w	r3, r3, #2
 80084e2:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80084e4:	4b05      	ldr	r3, [pc, #20]	; (80084fc <FLASH_PageErase+0x44>)
 80084e6:	695b      	ldr	r3, [r3, #20]
 80084e8:	4a04      	ldr	r2, [pc, #16]	; (80084fc <FLASH_PageErase+0x44>)
 80084ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ee:	6153      	str	r3, [r2, #20]
}
 80084f0:	bf00      	nop
 80084f2:	370c      	adds	r7, #12
 80084f4:	46bd      	mov	sp, r7
 80084f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084fa:	4770      	bx	lr
 80084fc:	40022000 	.word	0x40022000

08008500 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8008506:	4b1e      	ldr	r3, [pc, #120]	; (8008580 <FLASH_FlushCaches+0x80>)
 8008508:	7f1b      	ldrb	r3, [r3, #28]
 800850a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	2b01      	cmp	r3, #1
 8008510:	d002      	beq.n	8008518 <FLASH_FlushCaches+0x18>
 8008512:	79fb      	ldrb	r3, [r7, #7]
 8008514:	2b03      	cmp	r3, #3
 8008516:	d111      	bne.n	800853c <FLASH_FlushCaches+0x3c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008518:	4b1a      	ldr	r3, [pc, #104]	; (8008584 <FLASH_FlushCaches+0x84>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	4a19      	ldr	r2, [pc, #100]	; (8008584 <FLASH_FlushCaches+0x84>)
 800851e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008522:	6013      	str	r3, [r2, #0]
 8008524:	4b17      	ldr	r3, [pc, #92]	; (8008584 <FLASH_FlushCaches+0x84>)
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a16      	ldr	r2, [pc, #88]	; (8008584 <FLASH_FlushCaches+0x84>)
 800852a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800852e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008530:	4b14      	ldr	r3, [pc, #80]	; (8008584 <FLASH_FlushCaches+0x84>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4a13      	ldr	r2, [pc, #76]	; (8008584 <FLASH_FlushCaches+0x84>)
 8008536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800853a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800853c:	79fb      	ldrb	r3, [r7, #7]
 800853e:	2b02      	cmp	r3, #2
 8008540:	d002      	beq.n	8008548 <FLASH_FlushCaches+0x48>
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	2b03      	cmp	r3, #3
 8008546:	d111      	bne.n	800856c <FLASH_FlushCaches+0x6c>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008548:	4b0e      	ldr	r3, [pc, #56]	; (8008584 <FLASH_FlushCaches+0x84>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	4a0d      	ldr	r2, [pc, #52]	; (8008584 <FLASH_FlushCaches+0x84>)
 800854e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008552:	6013      	str	r3, [r2, #0]
 8008554:	4b0b      	ldr	r3, [pc, #44]	; (8008584 <FLASH_FlushCaches+0x84>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	4a0a      	ldr	r2, [pc, #40]	; (8008584 <FLASH_FlushCaches+0x84>)
 800855a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800855e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008560:	4b08      	ldr	r3, [pc, #32]	; (8008584 <FLASH_FlushCaches+0x84>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a07      	ldr	r2, [pc, #28]	; (8008584 <FLASH_FlushCaches+0x84>)
 8008566:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800856a:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800856c:	4b04      	ldr	r3, [pc, #16]	; (8008580 <FLASH_FlushCaches+0x80>)
 800856e:	2200      	movs	r2, #0
 8008570:	771a      	strb	r2, [r3, #28]
}
 8008572:	bf00      	nop
 8008574:	370c      	adds	r7, #12
 8008576:	46bd      	mov	sp, r7
 8008578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857c:	4770      	bx	lr
 800857e:	bf00      	nop
 8008580:	2000000c 	.word	0x2000000c
 8008584:	40022000 	.word	0x40022000

08008588 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008588:	b480      	push	{r7}
 800858a:	b087      	sub	sp, #28
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
 8008590:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008592:	2300      	movs	r3, #0
 8008594:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008596:	e15a      	b.n	800884e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	2101      	movs	r1, #1
 800859e:	697b      	ldr	r3, [r7, #20]
 80085a0:	fa01 f303 	lsl.w	r3, r1, r3
 80085a4:	4013      	ands	r3, r2
 80085a6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	f000 814c 	beq.w	8008848 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d00b      	beq.n	80085d0 <HAL_GPIO_Init+0x48>
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	2b02      	cmp	r3, #2
 80085be:	d007      	beq.n	80085d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085c4:	2b11      	cmp	r3, #17
 80085c6:	d003      	beq.n	80085d0 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b12      	cmp	r3, #18
 80085ce:	d130      	bne.n	8008632 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	689b      	ldr	r3, [r3, #8]
 80085d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	005b      	lsls	r3, r3, #1
 80085da:	2203      	movs	r2, #3
 80085dc:	fa02 f303 	lsl.w	r3, r2, r3
 80085e0:	43db      	mvns	r3, r3
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	4013      	ands	r3, r2
 80085e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	68da      	ldr	r2, [r3, #12]
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	fa02 f303 	lsl.w	r3, r2, r3
 80085f4:	693a      	ldr	r2, [r7, #16]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008606:	2201      	movs	r2, #1
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	fa02 f303 	lsl.w	r3, r2, r3
 800860e:	43db      	mvns	r3, r3
 8008610:	693a      	ldr	r2, [r7, #16]
 8008612:	4013      	ands	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	091b      	lsrs	r3, r3, #4
 800861c:	f003 0201 	and.w	r2, r3, #1
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	fa02 f303 	lsl.w	r3, r2, r3
 8008626:	693a      	ldr	r2, [r7, #16]
 8008628:	4313      	orrs	r3, r2
 800862a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	693a      	ldr	r2, [r7, #16]
 8008630:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	005b      	lsls	r3, r3, #1
 800863c:	2203      	movs	r2, #3
 800863e:	fa02 f303 	lsl.w	r3, r2, r3
 8008642:	43db      	mvns	r3, r3
 8008644:	693a      	ldr	r2, [r7, #16]
 8008646:	4013      	ands	r3, r2
 8008648:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	689a      	ldr	r2, [r3, #8]
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	fa02 f303 	lsl.w	r3, r2, r3
 8008656:	693a      	ldr	r2, [r7, #16]
 8008658:	4313      	orrs	r3, r2
 800865a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	693a      	ldr	r2, [r7, #16]
 8008660:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	2b02      	cmp	r3, #2
 8008668:	d003      	beq.n	8008672 <HAL_GPIO_Init+0xea>
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	685b      	ldr	r3, [r3, #4]
 800866e:	2b12      	cmp	r3, #18
 8008670:	d123      	bne.n	80086ba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008672:	697b      	ldr	r3, [r7, #20]
 8008674:	08da      	lsrs	r2, r3, #3
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	3208      	adds	r2, #8
 800867a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800867e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008680:	697b      	ldr	r3, [r7, #20]
 8008682:	f003 0307 	and.w	r3, r3, #7
 8008686:	009b      	lsls	r3, r3, #2
 8008688:	220f      	movs	r2, #15
 800868a:	fa02 f303 	lsl.w	r3, r2, r3
 800868e:	43db      	mvns	r3, r3
 8008690:	693a      	ldr	r2, [r7, #16]
 8008692:	4013      	ands	r3, r2
 8008694:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	691a      	ldr	r2, [r3, #16]
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f003 0307 	and.w	r3, r3, #7
 80086a0:	009b      	lsls	r3, r3, #2
 80086a2:	fa02 f303 	lsl.w	r3, r2, r3
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	4313      	orrs	r3, r2
 80086aa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80086ac:	697b      	ldr	r3, [r7, #20]
 80086ae:	08da      	lsrs	r2, r3, #3
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3208      	adds	r2, #8
 80086b4:	6939      	ldr	r1, [r7, #16]
 80086b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	005b      	lsls	r3, r3, #1
 80086c4:	2203      	movs	r2, #3
 80086c6:	fa02 f303 	lsl.w	r3, r2, r3
 80086ca:	43db      	mvns	r3, r3
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	4013      	ands	r3, r2
 80086d0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685b      	ldr	r3, [r3, #4]
 80086d6:	f003 0203 	and.w	r2, r3, #3
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	fa02 f303 	lsl.w	r3, r2, r3
 80086e2:	693a      	ldr	r2, [r7, #16]
 80086e4:	4313      	orrs	r3, r2
 80086e6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	693a      	ldr	r2, [r7, #16]
 80086ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	685b      	ldr	r3, [r3, #4]
 80086f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	f000 80a6 	beq.w	8008848 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086fc:	4b5b      	ldr	r3, [pc, #364]	; (800886c <HAL_GPIO_Init+0x2e4>)
 80086fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008700:	4a5a      	ldr	r2, [pc, #360]	; (800886c <HAL_GPIO_Init+0x2e4>)
 8008702:	f043 0301 	orr.w	r3, r3, #1
 8008706:	6613      	str	r3, [r2, #96]	; 0x60
 8008708:	4b58      	ldr	r3, [pc, #352]	; (800886c <HAL_GPIO_Init+0x2e4>)
 800870a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800870c:	f003 0301 	and.w	r3, r3, #1
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008714:	4a56      	ldr	r2, [pc, #344]	; (8008870 <HAL_GPIO_Init+0x2e8>)
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	089b      	lsrs	r3, r3, #2
 800871a:	3302      	adds	r3, #2
 800871c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008720:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f003 0303 	and.w	r3, r3, #3
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	220f      	movs	r2, #15
 800872c:	fa02 f303 	lsl.w	r3, r2, r3
 8008730:	43db      	mvns	r3, r3
 8008732:	693a      	ldr	r2, [r7, #16]
 8008734:	4013      	ands	r3, r2
 8008736:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800873e:	d01f      	beq.n	8008780 <HAL_GPIO_Init+0x1f8>
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	4a4c      	ldr	r2, [pc, #304]	; (8008874 <HAL_GPIO_Init+0x2ec>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d019      	beq.n	800877c <HAL_GPIO_Init+0x1f4>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	4a4b      	ldr	r2, [pc, #300]	; (8008878 <HAL_GPIO_Init+0x2f0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d013      	beq.n	8008778 <HAL_GPIO_Init+0x1f0>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a4a      	ldr	r2, [pc, #296]	; (800887c <HAL_GPIO_Init+0x2f4>)
 8008754:	4293      	cmp	r3, r2
 8008756:	d00d      	beq.n	8008774 <HAL_GPIO_Init+0x1ec>
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	4a49      	ldr	r2, [pc, #292]	; (8008880 <HAL_GPIO_Init+0x2f8>)
 800875c:	4293      	cmp	r3, r2
 800875e:	d007      	beq.n	8008770 <HAL_GPIO_Init+0x1e8>
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	4a48      	ldr	r2, [pc, #288]	; (8008884 <HAL_GPIO_Init+0x2fc>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d101      	bne.n	800876c <HAL_GPIO_Init+0x1e4>
 8008768:	2305      	movs	r3, #5
 800876a:	e00a      	b.n	8008782 <HAL_GPIO_Init+0x1fa>
 800876c:	2306      	movs	r3, #6
 800876e:	e008      	b.n	8008782 <HAL_GPIO_Init+0x1fa>
 8008770:	2304      	movs	r3, #4
 8008772:	e006      	b.n	8008782 <HAL_GPIO_Init+0x1fa>
 8008774:	2303      	movs	r3, #3
 8008776:	e004      	b.n	8008782 <HAL_GPIO_Init+0x1fa>
 8008778:	2302      	movs	r3, #2
 800877a:	e002      	b.n	8008782 <HAL_GPIO_Init+0x1fa>
 800877c:	2301      	movs	r3, #1
 800877e:	e000      	b.n	8008782 <HAL_GPIO_Init+0x1fa>
 8008780:	2300      	movs	r3, #0
 8008782:	697a      	ldr	r2, [r7, #20]
 8008784:	f002 0203 	and.w	r2, r2, #3
 8008788:	0092      	lsls	r2, r2, #2
 800878a:	4093      	lsls	r3, r2
 800878c:	693a      	ldr	r2, [r7, #16]
 800878e:	4313      	orrs	r3, r2
 8008790:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008792:	4937      	ldr	r1, [pc, #220]	; (8008870 <HAL_GPIO_Init+0x2e8>)
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	089b      	lsrs	r3, r3, #2
 8008798:	3302      	adds	r3, #2
 800879a:	693a      	ldr	r2, [r7, #16]
 800879c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80087a0:	4b39      	ldr	r3, [pc, #228]	; (8008888 <HAL_GPIO_Init+0x300>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	43db      	mvns	r3, r3
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	4013      	ands	r3, r2
 80087ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80087bc:	693a      	ldr	r2, [r7, #16]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	4313      	orrs	r3, r2
 80087c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80087c4:	4a30      	ldr	r2, [pc, #192]	; (8008888 <HAL_GPIO_Init+0x300>)
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80087ca:	4b2f      	ldr	r3, [pc, #188]	; (8008888 <HAL_GPIO_Init+0x300>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	43db      	mvns	r3, r3
 80087d4:	693a      	ldr	r2, [r7, #16]
 80087d6:	4013      	ands	r3, r2
 80087d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80087da:	683b      	ldr	r3, [r7, #0]
 80087dc:	685b      	ldr	r3, [r3, #4]
 80087de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d003      	beq.n	80087ee <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80087e6:	693a      	ldr	r2, [r7, #16]
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	4313      	orrs	r3, r2
 80087ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80087ee:	4a26      	ldr	r2, [pc, #152]	; (8008888 <HAL_GPIO_Init+0x300>)
 80087f0:	693b      	ldr	r3, [r7, #16]
 80087f2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80087f4:	4b24      	ldr	r3, [pc, #144]	; (8008888 <HAL_GPIO_Init+0x300>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	43db      	mvns	r3, r3
 80087fe:	693a      	ldr	r2, [r7, #16]
 8008800:	4013      	ands	r3, r2
 8008802:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008804:	683b      	ldr	r3, [r7, #0]
 8008806:	685b      	ldr	r3, [r3, #4]
 8008808:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800880c:	2b00      	cmp	r3, #0
 800880e:	d003      	beq.n	8008818 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008810:	693a      	ldr	r2, [r7, #16]
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	4313      	orrs	r3, r2
 8008816:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008818:	4a1b      	ldr	r2, [pc, #108]	; (8008888 <HAL_GPIO_Init+0x300>)
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800881e:	4b1a      	ldr	r3, [pc, #104]	; (8008888 <HAL_GPIO_Init+0x300>)
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	43db      	mvns	r3, r3
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	4013      	ands	r3, r2
 800882c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800882e:	683b      	ldr	r3, [r7, #0]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d003      	beq.n	8008842 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800883a:	693a      	ldr	r2, [r7, #16]
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	4313      	orrs	r3, r2
 8008840:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008842:	4a11      	ldr	r2, [pc, #68]	; (8008888 <HAL_GPIO_Init+0x300>)
 8008844:	693b      	ldr	r3, [r7, #16]
 8008846:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008848:	697b      	ldr	r3, [r7, #20]
 800884a:	3301      	adds	r3, #1
 800884c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	697b      	ldr	r3, [r7, #20]
 8008854:	fa22 f303 	lsr.w	r3, r2, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	f47f ae9d 	bne.w	8008598 <HAL_GPIO_Init+0x10>
  }
}
 800885e:	bf00      	nop
 8008860:	bf00      	nop
 8008862:	371c      	adds	r7, #28
 8008864:	46bd      	mov	sp, r7
 8008866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886a:	4770      	bx	lr
 800886c:	40021000 	.word	0x40021000
 8008870:	40010000 	.word	0x40010000
 8008874:	48000400 	.word	0x48000400
 8008878:	48000800 	.word	0x48000800
 800887c:	48000c00 	.word	0x48000c00
 8008880:	48001000 	.word	0x48001000
 8008884:	48001400 	.word	0x48001400
 8008888:	40010400 	.word	0x40010400

0800888c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	460b      	mov	r3, r1
 8008896:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	691a      	ldr	r2, [r3, #16]
 800889c:	887b      	ldrh	r3, [r7, #2]
 800889e:	4013      	ands	r3, r2
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d002      	beq.n	80088aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088a4:	2301      	movs	r3, #1
 80088a6:	73fb      	strb	r3, [r7, #15]
 80088a8:	e001      	b.n	80088ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088aa:	2300      	movs	r3, #0
 80088ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3714      	adds	r7, #20
 80088b4:	46bd      	mov	sp, r7
 80088b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ba:	4770      	bx	lr

080088bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088bc:	b480      	push	{r7}
 80088be:	b083      	sub	sp, #12
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	460b      	mov	r3, r1
 80088c6:	807b      	strh	r3, [r7, #2]
 80088c8:	4613      	mov	r3, r2
 80088ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80088cc:	787b      	ldrb	r3, [r7, #1]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d003      	beq.n	80088da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80088d2:	887a      	ldrh	r2, [r7, #2]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80088d8:	e002      	b.n	80088e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80088da:	887a      	ldrh	r2, [r7, #2]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr

080088ec <HAL_OPAMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OPAMP_Init(OPAMP_HandleTypeDef *hopamp)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80088f4:	2300      	movs	r3, #0
 80088f6:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation and lock status */
  /* Init not allowed if calibration is ongoing */
  if (hopamp == NULL)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d101      	bne.n	8008902 <HAL_OPAMP_Init+0x16>
  {
    return HAL_ERROR;
 80088fe:	2301      	movs	r3, #1
 8008900:	e0bb      	b.n	8008a7a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008908:	b2db      	uxtb	r3, r3
 800890a:	2b05      	cmp	r3, #5
 800890c:	d101      	bne.n	8008912 <HAL_OPAMP_Init+0x26>
  {
    return HAL_ERROR;
 800890e:	2301      	movs	r3, #1
 8008910:	e0b3      	b.n	8008a7a <HAL_OPAMP_Init+0x18e>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_CALIBBUSY)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008918:	b2db      	uxtb	r3, r3
 800891a:	2b02      	cmp	r3, #2
 800891c:	d101      	bne.n	8008922 <HAL_OPAMP_Init+0x36>
  {
    return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e0ab      	b.n	8008a7a <HAL_OPAMP_Init+0x18e>
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueP));
      assert_param(IS_OPAMP_TRIMMINGVALUE(hopamp->Init.TrimmingValueN));
    }

    /* Init SYSCFG and the low level hardware to access opamp */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008922:	4b58      	ldr	r3, [pc, #352]	; (8008a84 <HAL_OPAMP_Init+0x198>)
 8008924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008926:	4a57      	ldr	r2, [pc, #348]	; (8008a84 <HAL_OPAMP_Init+0x198>)
 8008928:	f043 0301 	orr.w	r3, r3, #1
 800892c:	6613      	str	r3, [r2, #96]	; 0x60
 800892e:	4b55      	ldr	r3, [pc, #340]	; (8008a84 <HAL_OPAMP_Init+0x198>)
 8008930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008932:	f003 0301 	and.w	r3, r3, #1
 8008936:	60bb      	str	r3, [r7, #8]
 8008938:	68bb      	ldr	r3, [r7, #8]

    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008940:	b2db      	uxtb	r3, r3
 8008942:	2b00      	cmp	r3, #0
 8008944:	d103      	bne.n	800894e <HAL_OPAMP_Init+0x62>
    {
      /* Allocate lock resource and initialize it */
      hopamp->Lock = HAL_UNLOCKED;
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2200      	movs	r2, #0
 800894a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

#if (USE_HAL_OPAMP_REGISTER_CALLBACKS == 1)
    hopamp->MspInitCallback(hopamp);
#else
    /* Call MSP init function */
    HAL_OPAMP_MspInit(hopamp);
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f7fc f946 	bl	8004be0 <HAL_OPAMP_MspInit>

    /* check if OPAMP_PGA_MODE & in Follower mode */
    /*   - InvertingInput                         */
    /* is Not Applicable                          */

    if ((hopamp->Init.Mode == OPAMP_PGA_MODE) || (hopamp->Init.Mode == OPAMP_FOLLOWER_MODE))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	689b      	ldr	r3, [r3, #8]
 8008958:	2b40      	cmp	r3, #64	; 0x40
 800895a:	d003      	beq.n	8008964 <HAL_OPAMP_Init+0x78>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	689b      	ldr	r3, [r3, #8]
 8008960:	2b60      	cmp	r3, #96	; 0x60
 8008962:	d133      	bne.n	80089cc <HAL_OPAMP_Init+0xe0>
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f023 0110 	bic.w	r1, r3, #16
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	430a      	orrs	r2, r1
 8008978:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	681a      	ldr	r2, [r3, #0]
 8008980:	4b41      	ldr	r3, [pc, #260]	; (8008a88 <HAL_OPAMP_Init+0x19c>)
 8008982:	4013      	ands	r3, r2
 8008984:	687a      	ldr	r2, [r7, #4]
 8008986:	6851      	ldr	r1, [r2, #4]
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	6892      	ldr	r2, [r2, #8]
 800898c:	4311      	orrs	r1, r2
 800898e:	687a      	ldr	r2, [r7, #4]
 8008990:	6912      	ldr	r2, [r2, #16]
 8008992:	430a      	orrs	r2, r1
 8008994:	6879      	ldr	r1, [r7, #4]
 8008996:	7d09      	ldrb	r1, [r1, #20]
 8008998:	2901      	cmp	r1, #1
 800899a:	d102      	bne.n	80089a2 <HAL_OPAMP_Init+0xb6>
 800899c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80089a0:	e000      	b.n	80089a4 <HAL_OPAMP_Init+0xb8>
 80089a2:	2100      	movs	r1, #0
 80089a4:	4311      	orrs	r1, r2
 80089a6:	687a      	ldr	r2, [r7, #4]
 80089a8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089aa:	4311      	orrs	r1, r2
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80089b0:	4311      	orrs	r1, r2
 80089b2:	687a      	ldr	r2, [r7, #4]
 80089b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80089b6:	04d2      	lsls	r2, r2, #19
 80089b8:	4311      	orrs	r1, r2
 80089ba:	687a      	ldr	r2, [r7, #4]
 80089bc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80089be:	0612      	lsls	r2, r2, #24
 80089c0:	4311      	orrs	r1, r2
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6812      	ldr	r2, [r2, #0]
 80089c6:	430b      	orrs	r3, r1
 80089c8:	6013      	str	r3, [r2, #0]
 80089ca:	e035      	b.n	8008a38 <HAL_OPAMP_Init+0x14c>
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }
    else /* OPAMP_STANDALONE_MODE */
    {
      /* Update User Trim config first to be able to modify trimming value afterwards */
      MODIFY_REG(hopamp->Instance->CSR,
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f023 0110 	bic.w	r1, r3, #16
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	430a      	orrs	r2, r1
 80089e0:	601a      	str	r2, [r3, #0]
                 OPAMP_CSR_USERTRIM,
                 hopamp->Init.UserTrimming);
      MODIFY_REG(hopamp->Instance->CSR,
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	4b27      	ldr	r3, [pc, #156]	; (8008a88 <HAL_OPAMP_Init+0x19c>)
 80089ea:	4013      	ands	r3, r2
 80089ec:	687a      	ldr	r2, [r7, #4]
 80089ee:	6851      	ldr	r1, [r2, #4]
 80089f0:	687a      	ldr	r2, [r7, #4]
 80089f2:	6892      	ldr	r2, [r2, #8]
 80089f4:	4311      	orrs	r1, r2
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	68d2      	ldr	r2, [r2, #12]
 80089fa:	4311      	orrs	r1, r2
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	6912      	ldr	r2, [r2, #16]
 8008a00:	430a      	orrs	r2, r1
 8008a02:	6879      	ldr	r1, [r7, #4]
 8008a04:	7d09      	ldrb	r1, [r1, #20]
 8008a06:	2901      	cmp	r1, #1
 8008a08:	d102      	bne.n	8008a10 <HAL_OPAMP_Init+0x124>
 8008a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008a0e:	e000      	b.n	8008a12 <HAL_OPAMP_Init+0x126>
 8008a10:	2100      	movs	r1, #0
 8008a12:	4311      	orrs	r1, r2
 8008a14:	687a      	ldr	r2, [r7, #4]
 8008a16:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a18:	4311      	orrs	r1, r2
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008a1e:	4311      	orrs	r1, r2
 8008a20:	687a      	ldr	r2, [r7, #4]
 8008a22:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008a24:	04d2      	lsls	r2, r2, #19
 8008a26:	4311      	orrs	r1, r2
 8008a28:	687a      	ldr	r2, [r7, #4]
 8008a2a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008a2c:	0612      	lsls	r2, r2, #24
 8008a2e:	4311      	orrs	r1, r2
 8008a30:	687a      	ldr	r2, [r7, #4]
 8008a32:	6812      	ldr	r2, [r2, #0]
 8008a34:	430b      	orrs	r3, r1
 8008a36:	6013      	str	r3, [r2, #0]
                 hopamp->Init.PgaGain |
                 (hopamp->Init.TrimmingValueP << OPAMP_INPUT_NONINVERTING) |
                 (hopamp->Init.TrimmingValueN << OPAMP_INPUT_INVERTING));
    }

    if ((READ_BIT(hopamp->Instance->TCMR, OPAMP_TCMR_LOCK)) == 0UL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	db10      	blt.n	8008a64 <HAL_OPAMP_Init+0x178>
    {
      MODIFY_REG(hopamp->Instance->TCMR,
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	699b      	ldr	r3, [r3, #24]
 8008a48:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	699a      	ldr	r2, [r3, #24]
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	69db      	ldr	r3, [r3, #28]
 8008a54:	431a      	orrs	r2, r3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	431a      	orrs	r2, r3
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	430a      	orrs	r2, r1
 8008a62:	619a      	str	r2, [r3, #24]
                 hopamp->Init.InvertingInputSecondary  |
                 hopamp->Init.NonInvertingInputSecondary);
    }

    /* Update the OPAMP state*/
    if (hopamp->State == HAL_OPAMP_STATE_RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d103      	bne.n	8008a78 <HAL_OPAMP_Init+0x18c>
    {
      /* From RESET state to READY State */
      hopamp->State = HAL_OPAMP_STATE_READY;
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	2201      	movs	r2, #1
 8008a74:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
    }
    /* else: remain in READY or BUSY state (no update) */

    return status;
 8008a78:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	40021000 	.word	0x40021000
 8008a88:	e0003e11 	.word	0xe0003e11

08008a8c <HAL_OPAMP_Start>:
  * @param  hopamp OPAMP handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_OPAMP_Start(OPAMP_HandleTypeDef *hopamp)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]

  /* Check the OPAMP handle allocation */
  /* Check if OPAMP locked */
  if (hopamp == NULL)
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d102      	bne.n	8008aa4 <HAL_OPAMP_Start+0x18>
  {
    status = HAL_ERROR;
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	73fb      	strb	r3, [r7, #15]
 8008aa2:	e01d      	b.n	8008ae0 <HAL_OPAMP_Start+0x54>
  }
  else if (hopamp->State == HAL_OPAMP_STATE_BUSYLOCKED)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008aaa:	b2db      	uxtb	r3, r3
 8008aac:	2b05      	cmp	r3, #5
 8008aae:	d102      	bne.n	8008ab6 <HAL_OPAMP_Start+0x2a>
  {
    status = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	73fb      	strb	r3, [r7, #15]
 8008ab4:	e014      	b.n	8008ae0 <HAL_OPAMP_Start+0x54>
  else
  {
    /* Check the parameter */
    assert_param(IS_OPAMP_ALL_INSTANCE(hopamp->Instance));

    if (hopamp->State == HAL_OPAMP_STATE_READY)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008abc:	b2db      	uxtb	r3, r3
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d10c      	bne.n	8008adc <HAL_OPAMP_Start+0x50>
    {
      /* Enable the selected opamp */
      SET_BIT(hopamp->Instance->CSR, OPAMP_CSR_OPAMPxEN);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	681a      	ldr	r2, [r3, #0]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f042 0201 	orr.w	r2, r2, #1
 8008ad0:	601a      	str	r2, [r3, #0]

      /* Update the OPAMP state*/
      /* From HAL_OPAMP_STATE_READY to HAL_OPAMP_STATE_BUSY */
      hopamp->State = HAL_OPAMP_STATE_BUSY;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	2204      	movs	r2, #4
 8008ad6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008ada:	e001      	b.n	8008ae0 <HAL_OPAMP_Start+0x54>
    }
    else
    {
      status = HAL_ERROR;
 8008adc:	2301      	movs	r3, #1
 8008ade:	73fb      	strb	r3, [r7, #15]
    }


  }
  return status;
 8008ae0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ae2:	4618      	mov	r0, r3
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
	...

08008af0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d141      	bne.n	8008b82 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008afe:	4b4b      	ldr	r3, [pc, #300]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0a:	d131      	bne.n	8008b70 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b0c:	4b47      	ldr	r3, [pc, #284]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b12:	4a46      	ldr	r2, [pc, #280]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b18:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008b1c:	4b43      	ldr	r3, [pc, #268]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008b24:	4a41      	ldr	r2, [pc, #260]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008b2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008b2c:	4b40      	ldr	r3, [pc, #256]	; (8008c30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	2232      	movs	r2, #50	; 0x32
 8008b32:	fb02 f303 	mul.w	r3, r2, r3
 8008b36:	4a3f      	ldr	r2, [pc, #252]	; (8008c34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008b38:	fba2 2303 	umull	r2, r3, r2, r3
 8008b3c:	0c9b      	lsrs	r3, r3, #18
 8008b3e:	3301      	adds	r3, #1
 8008b40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b42:	e002      	b.n	8008b4a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008b4a:	4b38      	ldr	r3, [pc, #224]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b4c:	695b      	ldr	r3, [r3, #20]
 8008b4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b56:	d102      	bne.n	8008b5e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f2      	bne.n	8008b44 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008b5e:	4b33      	ldr	r3, [pc, #204]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b6a:	d158      	bne.n	8008c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008b6c:	2303      	movs	r3, #3
 8008b6e:	e057      	b.n	8008c20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b70:	4b2e      	ldr	r3, [pc, #184]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b76:	4a2d      	ldr	r2, [pc, #180]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008b80:	e04d      	b.n	8008c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b88:	d141      	bne.n	8008c0e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008b8a:	4b28      	ldr	r3, [pc, #160]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b96:	d131      	bne.n	8008bfc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008b98:	4b24      	ldr	r3, [pc, #144]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008b9e:	4a23      	ldr	r2, [pc, #140]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ba0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ba4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008ba8:	4b20      	ldr	r3, [pc, #128]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008bb0:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bb6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008bb8:	4b1d      	ldr	r3, [pc, #116]	; (8008c30 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	2232      	movs	r2, #50	; 0x32
 8008bbe:	fb02 f303 	mul.w	r3, r2, r3
 8008bc2:	4a1c      	ldr	r2, [pc, #112]	; (8008c34 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008bc4:	fba2 2303 	umull	r2, r3, r2, r3
 8008bc8:	0c9b      	lsrs	r3, r3, #18
 8008bca:	3301      	adds	r3, #1
 8008bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bce:	e002      	b.n	8008bd6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	3b01      	subs	r3, #1
 8008bd4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008bd6:	4b15      	ldr	r3, [pc, #84]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bd8:	695b      	ldr	r3, [r3, #20]
 8008bda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008be2:	d102      	bne.n	8008bea <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1f2      	bne.n	8008bd0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008bea:	4b10      	ldr	r3, [pc, #64]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bec:	695b      	ldr	r3, [r3, #20]
 8008bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008bf6:	d112      	bne.n	8008c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e011      	b.n	8008c20 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008bfc:	4b0b      	ldr	r3, [pc, #44]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008c02:	4a0a      	ldr	r2, [pc, #40]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008c0c:	e007      	b.n	8008c1e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008c0e:	4b07      	ldr	r3, [pc, #28]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008c16:	4a05      	ldr	r2, [pc, #20]	; (8008c2c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008c18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008c1c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008c1e:	2300      	movs	r3, #0
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3714      	adds	r7, #20
 8008c24:	46bd      	mov	sp, r7
 8008c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2a:	4770      	bx	lr
 8008c2c:	40007000 	.word	0x40007000
 8008c30:	20000000 	.word	0x20000000
 8008c34:	431bde83 	.word	0x431bde83

08008c38 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008c3c:	4b05      	ldr	r3, [pc, #20]	; (8008c54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c3e:	689b      	ldr	r3, [r3, #8]
 8008c40:	4a04      	ldr	r2, [pc, #16]	; (8008c54 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8008c42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c46:	6093      	str	r3, [r2, #8]
}
 8008c48:	bf00      	nop
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c50:	4770      	bx	lr
 8008c52:	bf00      	nop
 8008c54:	40007000 	.word	0x40007000

08008c58 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d101      	bne.n	8008c6a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008c66:	2301      	movs	r3, #1
 8008c68:	e306      	b.n	8009278 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d075      	beq.n	8008d62 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008c76:	4b97      	ldr	r3, [pc, #604]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	f003 030c 	and.w	r3, r3, #12
 8008c7e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008c80:	4b94      	ldr	r3, [pc, #592]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008c82:	68db      	ldr	r3, [r3, #12]
 8008c84:	f003 0303 	and.w	r3, r3, #3
 8008c88:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008c8a:	69bb      	ldr	r3, [r7, #24]
 8008c8c:	2b0c      	cmp	r3, #12
 8008c8e:	d102      	bne.n	8008c96 <HAL_RCC_OscConfig+0x3e>
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	2b03      	cmp	r3, #3
 8008c94:	d002      	beq.n	8008c9c <HAL_RCC_OscConfig+0x44>
 8008c96:	69bb      	ldr	r3, [r7, #24]
 8008c98:	2b08      	cmp	r3, #8
 8008c9a:	d10b      	bne.n	8008cb4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c9c:	4b8d      	ldr	r3, [pc, #564]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d05b      	beq.n	8008d60 <HAL_RCC_OscConfig+0x108>
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d157      	bne.n	8008d60 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008cb0:	2301      	movs	r3, #1
 8008cb2:	e2e1      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cbc:	d106      	bne.n	8008ccc <HAL_RCC_OscConfig+0x74>
 8008cbe:	4b85      	ldr	r3, [pc, #532]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a84      	ldr	r2, [pc, #528]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cc8:	6013      	str	r3, [r2, #0]
 8008cca:	e01d      	b.n	8008d08 <HAL_RCC_OscConfig+0xb0>
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008cd4:	d10c      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x98>
 8008cd6:	4b7f      	ldr	r3, [pc, #508]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	4a7e      	ldr	r2, [pc, #504]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cdc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ce0:	6013      	str	r3, [r2, #0]
 8008ce2:	4b7c      	ldr	r3, [pc, #496]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	4a7b      	ldr	r2, [pc, #492]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008ce8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cec:	6013      	str	r3, [r2, #0]
 8008cee:	e00b      	b.n	8008d08 <HAL_RCC_OscConfig+0xb0>
 8008cf0:	4b78      	ldr	r3, [pc, #480]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a77      	ldr	r2, [pc, #476]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cf6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cfa:	6013      	str	r3, [r2, #0]
 8008cfc:	4b75      	ldr	r3, [pc, #468]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a74      	ldr	r2, [pc, #464]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008d02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d013      	beq.n	8008d38 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d10:	f7fc ff30 	bl	8005b74 <HAL_GetTick>
 8008d14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d16:	e008      	b.n	8008d2a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d18:	f7fc ff2c 	bl	8005b74 <HAL_GetTick>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	693b      	ldr	r3, [r7, #16]
 8008d20:	1ad3      	subs	r3, r2, r3
 8008d22:	2b64      	cmp	r3, #100	; 0x64
 8008d24:	d901      	bls.n	8008d2a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008d26:	2303      	movs	r3, #3
 8008d28:	e2a6      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d2a:	4b6a      	ldr	r3, [pc, #424]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d0f0      	beq.n	8008d18 <HAL_RCC_OscConfig+0xc0>
 8008d36:	e014      	b.n	8008d62 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d38:	f7fc ff1c 	bl	8005b74 <HAL_GetTick>
 8008d3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008d40:	f7fc ff18 	bl	8005b74 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b64      	cmp	r3, #100	; 0x64
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e292      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008d52:	4b60      	ldr	r3, [pc, #384]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f0      	bne.n	8008d40 <HAL_RCC_OscConfig+0xe8>
 8008d5e:	e000      	b.n	8008d62 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f003 0302 	and.w	r3, r3, #2
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d075      	beq.n	8008e5a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008d6e:	4b59      	ldr	r3, [pc, #356]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	f003 030c 	and.w	r3, r3, #12
 8008d76:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008d78:	4b56      	ldr	r3, [pc, #344]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0303 	and.w	r3, r3, #3
 8008d80:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008d82:	69bb      	ldr	r3, [r7, #24]
 8008d84:	2b0c      	cmp	r3, #12
 8008d86:	d102      	bne.n	8008d8e <HAL_RCC_OscConfig+0x136>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d002      	beq.n	8008d94 <HAL_RCC_OscConfig+0x13c>
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	2b04      	cmp	r3, #4
 8008d92:	d11f      	bne.n	8008dd4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008d94:	4b4f      	ldr	r3, [pc, #316]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_RCC_OscConfig+0x154>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d101      	bne.n	8008dac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e265      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008dac:	4b49      	ldr	r3, [pc, #292]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008dae:	685b      	ldr	r3, [r3, #4]
 8008db0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	691b      	ldr	r3, [r3, #16]
 8008db8:	061b      	lsls	r3, r3, #24
 8008dba:	4946      	ldr	r1, [pc, #280]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008dbc:	4313      	orrs	r3, r2
 8008dbe:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8008dc0:	4b45      	ldr	r3, [pc, #276]	; (8008ed8 <HAL_RCC_OscConfig+0x280>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	f7fc fe89 	bl	8005adc <HAL_InitTick>
 8008dca:	4603      	mov	r3, r0
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d043      	beq.n	8008e58 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	e251      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68db      	ldr	r3, [r3, #12]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d023      	beq.n	8008e24 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ddc:	4b3d      	ldr	r3, [pc, #244]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a3c      	ldr	r2, [pc, #240]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008de2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008de8:	f7fc fec4 	bl	8005b74 <HAL_GetTick>
 8008dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008dee:	e008      	b.n	8008e02 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008df0:	f7fc fec0 	bl	8005b74 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	2b02      	cmp	r3, #2
 8008dfc:	d901      	bls.n	8008e02 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e23a      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008e02:	4b34      	ldr	r3, [pc, #208]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d0f0      	beq.n	8008df0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e0e:	4b31      	ldr	r3, [pc, #196]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	691b      	ldr	r3, [r3, #16]
 8008e1a:	061b      	lsls	r3, r3, #24
 8008e1c:	492d      	ldr	r1, [pc, #180]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	604b      	str	r3, [r1, #4]
 8008e22:	e01a      	b.n	8008e5a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008e24:	4b2b      	ldr	r3, [pc, #172]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	4a2a      	ldr	r2, [pc, #168]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fc fea0 	bl	8005b74 <HAL_GetTick>
 8008e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e38:	f7fc fe9c 	bl	8005b74 <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b02      	cmp	r3, #2
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e216      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008e4a:	4b22      	ldr	r3, [pc, #136]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x1e0>
 8008e56:	e000      	b.n	8008e5a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008e58:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0308 	and.w	r3, r3, #8
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d041      	beq.n	8008eea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	695b      	ldr	r3, [r3, #20]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d01c      	beq.n	8008ea8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008e6e:	4b19      	ldr	r3, [pc, #100]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e74:	4a17      	ldr	r2, [pc, #92]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e76:	f043 0301 	orr.w	r3, r3, #1
 8008e7a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e7e:	f7fc fe79 	bl	8005b74 <HAL_GetTick>
 8008e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e84:	e008      	b.n	8008e98 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008e86:	f7fc fe75 	bl	8005b74 <HAL_GetTick>
 8008e8a:	4602      	mov	r2, r0
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	1ad3      	subs	r3, r2, r3
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d901      	bls.n	8008e98 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8008e94:	2303      	movs	r3, #3
 8008e96:	e1ef      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008e98:	4b0e      	ldr	r3, [pc, #56]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008e9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d0ef      	beq.n	8008e86 <HAL_RCC_OscConfig+0x22e>
 8008ea6:	e020      	b.n	8008eea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ea8:	4b0a      	ldr	r3, [pc, #40]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008eaa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eae:	4a09      	ldr	r2, [pc, #36]	; (8008ed4 <HAL_RCC_OscConfig+0x27c>)
 8008eb0:	f023 0301 	bic.w	r3, r3, #1
 8008eb4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb8:	f7fc fe5c 	bl	8005b74 <HAL_GetTick>
 8008ebc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008ebe:	e00d      	b.n	8008edc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008ec0:	f7fc fe58 	bl	8005b74 <HAL_GetTick>
 8008ec4:	4602      	mov	r2, r0
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	1ad3      	subs	r3, r2, r3
 8008eca:	2b02      	cmp	r3, #2
 8008ecc:	d906      	bls.n	8008edc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e1d2      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
 8008ed2:	bf00      	nop
 8008ed4:	40021000 	.word	0x40021000
 8008ed8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008edc:	4b8c      	ldr	r3, [pc, #560]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008ede:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1ea      	bne.n	8008ec0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	f003 0304 	and.w	r3, r3, #4
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	f000 80a6 	beq.w	8009044 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008efc:	4b84      	ldr	r3, [pc, #528]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008efe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d101      	bne.n	8008f0c <HAL_RCC_OscConfig+0x2b4>
 8008f08:	2301      	movs	r3, #1
 8008f0a:	e000      	b.n	8008f0e <HAL_RCC_OscConfig+0x2b6>
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d00d      	beq.n	8008f2e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f12:	4b7f      	ldr	r3, [pc, #508]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f16:	4a7e      	ldr	r2, [pc, #504]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008f1c:	6593      	str	r3, [r2, #88]	; 0x58
 8008f1e:	4b7c      	ldr	r3, [pc, #496]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f2e:	4b79      	ldr	r3, [pc, #484]	; (8009114 <HAL_RCC_OscConfig+0x4bc>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d118      	bne.n	8008f6c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008f3a:	4b76      	ldr	r3, [pc, #472]	; (8009114 <HAL_RCC_OscConfig+0x4bc>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	4a75      	ldr	r2, [pc, #468]	; (8009114 <HAL_RCC_OscConfig+0x4bc>)
 8008f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008f46:	f7fc fe15 	bl	8005b74 <HAL_GetTick>
 8008f4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f4c:	e008      	b.n	8008f60 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008f4e:	f7fc fe11 	bl	8005b74 <HAL_GetTick>
 8008f52:	4602      	mov	r2, r0
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	1ad3      	subs	r3, r2, r3
 8008f58:	2b02      	cmp	r3, #2
 8008f5a:	d901      	bls.n	8008f60 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8008f5c:	2303      	movs	r3, #3
 8008f5e:	e18b      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008f60:	4b6c      	ldr	r3, [pc, #432]	; (8009114 <HAL_RCC_OscConfig+0x4bc>)
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d0f0      	beq.n	8008f4e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d108      	bne.n	8008f86 <HAL_RCC_OscConfig+0x32e>
 8008f74:	4b66      	ldr	r3, [pc, #408]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7a:	4a65      	ldr	r2, [pc, #404]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f7c:	f043 0301 	orr.w	r3, r3, #1
 8008f80:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f84:	e024      	b.n	8008fd0 <HAL_RCC_OscConfig+0x378>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	2b05      	cmp	r3, #5
 8008f8c:	d110      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x358>
 8008f8e:	4b60      	ldr	r3, [pc, #384]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f94:	4a5e      	ldr	r2, [pc, #376]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008f96:	f043 0304 	orr.w	r3, r3, #4
 8008f9a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008f9e:	4b5c      	ldr	r3, [pc, #368]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa4:	4a5a      	ldr	r2, [pc, #360]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fae:	e00f      	b.n	8008fd0 <HAL_RCC_OscConfig+0x378>
 8008fb0:	4b57      	ldr	r3, [pc, #348]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fb6:	4a56      	ldr	r2, [pc, #344]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008fc0:	4b53      	ldr	r3, [pc, #332]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc6:	4a52      	ldr	r2, [pc, #328]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008fc8:	f023 0304 	bic.w	r3, r3, #4
 8008fcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	689b      	ldr	r3, [r3, #8]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d016      	beq.n	8009006 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008fd8:	f7fc fdcc 	bl	8005b74 <HAL_GetTick>
 8008fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008fde:	e00a      	b.n	8008ff6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008fe0:	f7fc fdc8 	bl	8005b74 <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	693b      	ldr	r3, [r7, #16]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fee:	4293      	cmp	r3, r2
 8008ff0:	d901      	bls.n	8008ff6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008ff2:	2303      	movs	r3, #3
 8008ff4:	e140      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008ff6:	4b46      	ldr	r3, [pc, #280]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8008ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ffc:	f003 0302 	and.w	r3, r3, #2
 8009000:	2b00      	cmp	r3, #0
 8009002:	d0ed      	beq.n	8008fe0 <HAL_RCC_OscConfig+0x388>
 8009004:	e015      	b.n	8009032 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009006:	f7fc fdb5 	bl	8005b74 <HAL_GetTick>
 800900a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800900c:	e00a      	b.n	8009024 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800900e:	f7fc fdb1 	bl	8005b74 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f241 3288 	movw	r2, #5000	; 0x1388
 800901c:	4293      	cmp	r3, r2
 800901e:	d901      	bls.n	8009024 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009020:	2303      	movs	r3, #3
 8009022:	e129      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009024:	4b3a      	ldr	r3, [pc, #232]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8009026:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800902a:	f003 0302 	and.w	r3, r3, #2
 800902e:	2b00      	cmp	r3, #0
 8009030:	d1ed      	bne.n	800900e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009032:	7ffb      	ldrb	r3, [r7, #31]
 8009034:	2b01      	cmp	r3, #1
 8009036:	d105      	bne.n	8009044 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009038:	4b35      	ldr	r3, [pc, #212]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 800903a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800903c:	4a34      	ldr	r2, [pc, #208]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 800903e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009042:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	f003 0320 	and.w	r3, r3, #32
 800904c:	2b00      	cmp	r3, #0
 800904e:	d03c      	beq.n	80090ca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	699b      	ldr	r3, [r3, #24]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d01c      	beq.n	8009092 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009058:	4b2d      	ldr	r3, [pc, #180]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 800905a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800905e:	4a2c      	ldr	r2, [pc, #176]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8009060:	f043 0301 	orr.w	r3, r3, #1
 8009064:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009068:	f7fc fd84 	bl	8005b74 <HAL_GetTick>
 800906c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800906e:	e008      	b.n	8009082 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009070:	f7fc fd80 	bl	8005b74 <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b02      	cmp	r3, #2
 800907c:	d901      	bls.n	8009082 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800907e:	2303      	movs	r3, #3
 8009080:	e0fa      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009082:	4b23      	ldr	r3, [pc, #140]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8009084:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009088:	f003 0302 	and.w	r3, r3, #2
 800908c:	2b00      	cmp	r3, #0
 800908e:	d0ef      	beq.n	8009070 <HAL_RCC_OscConfig+0x418>
 8009090:	e01b      	b.n	80090ca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009092:	4b1f      	ldr	r3, [pc, #124]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 8009094:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009098:	4a1d      	ldr	r2, [pc, #116]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 800909a:	f023 0301 	bic.w	r3, r3, #1
 800909e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a2:	f7fc fd67 	bl	8005b74 <HAL_GetTick>
 80090a6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80090a8:	e008      	b.n	80090bc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80090aa:	f7fc fd63 	bl	8005b74 <HAL_GetTick>
 80090ae:	4602      	mov	r2, r0
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	1ad3      	subs	r3, r2, r3
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d901      	bls.n	80090bc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80090b8:	2303      	movs	r3, #3
 80090ba:	e0dd      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80090bc:	4b14      	ldr	r3, [pc, #80]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 80090be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1ef      	bne.n	80090aa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	69db      	ldr	r3, [r3, #28]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	f000 80d1 	beq.w	8009276 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80090d4:	4b0e      	ldr	r3, [pc, #56]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f003 030c 	and.w	r3, r3, #12
 80090dc:	2b0c      	cmp	r3, #12
 80090de:	f000 808b 	beq.w	80091f8 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	69db      	ldr	r3, [r3, #28]
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d15e      	bne.n	80091a8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090ea:	4b09      	ldr	r3, [pc, #36]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	4a08      	ldr	r2, [pc, #32]	; (8009110 <HAL_RCC_OscConfig+0x4b8>)
 80090f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090f6:	f7fc fd3d 	bl	8005b74 <HAL_GetTick>
 80090fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80090fc:	e00c      	b.n	8009118 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80090fe:	f7fc fd39 	bl	8005b74 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	2b02      	cmp	r3, #2
 800910a:	d905      	bls.n	8009118 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800910c:	2303      	movs	r3, #3
 800910e:	e0b3      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
 8009110:	40021000 	.word	0x40021000
 8009114:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009118:	4b59      	ldr	r3, [pc, #356]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ec      	bne.n	80090fe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009124:	4b56      	ldr	r3, [pc, #344]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 8009126:	68da      	ldr	r2, [r3, #12]
 8009128:	4b56      	ldr	r3, [pc, #344]	; (8009284 <HAL_RCC_OscConfig+0x62c>)
 800912a:	4013      	ands	r3, r2
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6a11      	ldr	r1, [r2, #32]
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009134:	3a01      	subs	r2, #1
 8009136:	0112      	lsls	r2, r2, #4
 8009138:	4311      	orrs	r1, r2
 800913a:	687a      	ldr	r2, [r7, #4]
 800913c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800913e:	0212      	lsls	r2, r2, #8
 8009140:	4311      	orrs	r1, r2
 8009142:	687a      	ldr	r2, [r7, #4]
 8009144:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009146:	0852      	lsrs	r2, r2, #1
 8009148:	3a01      	subs	r2, #1
 800914a:	0552      	lsls	r2, r2, #21
 800914c:	4311      	orrs	r1, r2
 800914e:	687a      	ldr	r2, [r7, #4]
 8009150:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009152:	0852      	lsrs	r2, r2, #1
 8009154:	3a01      	subs	r2, #1
 8009156:	0652      	lsls	r2, r2, #25
 8009158:	4311      	orrs	r1, r2
 800915a:	687a      	ldr	r2, [r7, #4]
 800915c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800915e:	06d2      	lsls	r2, r2, #27
 8009160:	430a      	orrs	r2, r1
 8009162:	4947      	ldr	r1, [pc, #284]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 8009164:	4313      	orrs	r3, r2
 8009166:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009168:	4b45      	ldr	r3, [pc, #276]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	4a44      	ldr	r2, [pc, #272]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 800916e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009172:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009174:	4b42      	ldr	r3, [pc, #264]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	4a41      	ldr	r2, [pc, #260]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 800917a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800917e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009180:	f7fc fcf8 	bl	8005b74 <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009186:	e008      	b.n	800919a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009188:	f7fc fcf4 	bl	8005b74 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d901      	bls.n	800919a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e06e      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800919a:	4b39      	ldr	r3, [pc, #228]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d0f0      	beq.n	8009188 <HAL_RCC_OscConfig+0x530>
 80091a6:	e066      	b.n	8009276 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091a8:	4b35      	ldr	r3, [pc, #212]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	4a34      	ldr	r2, [pc, #208]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091b2:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80091b4:	4b32      	ldr	r3, [pc, #200]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4a31      	ldr	r2, [pc, #196]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091ba:	f023 0303 	bic.w	r3, r3, #3
 80091be:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80091c0:	4b2f      	ldr	r3, [pc, #188]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	4a2e      	ldr	r2, [pc, #184]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091c6:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80091ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d0:	f7fc fcd0 	bl	8005b74 <HAL_GetTick>
 80091d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091d6:	e008      	b.n	80091ea <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091d8:	f7fc fccc 	bl	8005b74 <HAL_GetTick>
 80091dc:	4602      	mov	r2, r0
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	1ad3      	subs	r3, r2, r3
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	d901      	bls.n	80091ea <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80091e6:	2303      	movs	r3, #3
 80091e8:	e046      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80091ea:	4b25      	ldr	r3, [pc, #148]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d1f0      	bne.n	80091d8 <HAL_RCC_OscConfig+0x580>
 80091f6:	e03e      	b.n	8009276 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	69db      	ldr	r3, [r3, #28]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d101      	bne.n	8009204 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8009200:	2301      	movs	r3, #1
 8009202:	e039      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8009204:	4b1e      	ldr	r3, [pc, #120]	; (8009280 <HAL_RCC_OscConfig+0x628>)
 8009206:	68db      	ldr	r3, [r3, #12]
 8009208:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800920a:	697b      	ldr	r3, [r7, #20]
 800920c:	f003 0203 	and.w	r2, r3, #3
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a1b      	ldr	r3, [r3, #32]
 8009214:	429a      	cmp	r2, r3
 8009216:	d12c      	bne.n	8009272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009222:	3b01      	subs	r3, #1
 8009224:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009226:	429a      	cmp	r2, r3
 8009228:	d123      	bne.n	8009272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800922a:	697b      	ldr	r3, [r7, #20]
 800922c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009234:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009236:	429a      	cmp	r2, r3
 8009238:	d11b      	bne.n	8009272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009244:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009246:	429a      	cmp	r2, r3
 8009248:	d113      	bne.n	8009272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800924a:	697b      	ldr	r3, [r7, #20]
 800924c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009254:	085b      	lsrs	r3, r3, #1
 8009256:	3b01      	subs	r3, #1
 8009258:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800925a:	429a      	cmp	r2, r3
 800925c:	d109      	bne.n	8009272 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800925e:	697b      	ldr	r3, [r7, #20]
 8009260:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009268:	085b      	lsrs	r3, r3, #1
 800926a:	3b01      	subs	r3, #1
 800926c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800926e:	429a      	cmp	r2, r3
 8009270:	d001      	beq.n	8009276 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8009272:	2301      	movs	r3, #1
 8009274:	e000      	b.n	8009278 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3720      	adds	r7, #32
 800927c:	46bd      	mov	sp, r7
 800927e:	bd80      	pop	{r7, pc}
 8009280:	40021000 	.word	0x40021000
 8009284:	019f800c 	.word	0x019f800c

08009288 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b086      	sub	sp, #24
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8009292:	2300      	movs	r3, #0
 8009294:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d101      	bne.n	80092a0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800929c:	2301      	movs	r3, #1
 800929e:	e11e      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80092a0:	4b91      	ldr	r3, [pc, #580]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 030f 	and.w	r3, r3, #15
 80092a8:	683a      	ldr	r2, [r7, #0]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d910      	bls.n	80092d0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092ae:	4b8e      	ldr	r3, [pc, #568]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f023 020f 	bic.w	r2, r3, #15
 80092b6:	498c      	ldr	r1, [pc, #560]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	4313      	orrs	r3, r2
 80092bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092be:	4b8a      	ldr	r3, [pc, #552]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f003 030f 	and.w	r3, r3, #15
 80092c6:	683a      	ldr	r2, [r7, #0]
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d001      	beq.n	80092d0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e106      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 0301 	and.w	r3, r3, #1
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d073      	beq.n	80093c4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	2b03      	cmp	r3, #3
 80092e2:	d129      	bne.n	8009338 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80092e4:	4b81      	ldr	r3, [pc, #516]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d101      	bne.n	80092f4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e0f4      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80092f4:	f000 f99e 	bl	8009634 <RCC_GetSysClockFreqFromPLLSource>
 80092f8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	4a7c      	ldr	r2, [pc, #496]	; (80094f0 <HAL_RCC_ClockConfig+0x268>)
 80092fe:	4293      	cmp	r3, r2
 8009300:	d93f      	bls.n	8009382 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009302:	4b7a      	ldr	r3, [pc, #488]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009304:	689b      	ldr	r3, [r3, #8]
 8009306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800930a:	2b00      	cmp	r3, #0
 800930c:	d009      	beq.n	8009322 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009316:	2b00      	cmp	r3, #0
 8009318:	d033      	beq.n	8009382 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800931e:	2b00      	cmp	r3, #0
 8009320:	d12f      	bne.n	8009382 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009322:	4b72      	ldr	r3, [pc, #456]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009324:	689b      	ldr	r3, [r3, #8]
 8009326:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800932a:	4a70      	ldr	r2, [pc, #448]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 800932c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009330:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009332:	2380      	movs	r3, #128	; 0x80
 8009334:	617b      	str	r3, [r7, #20]
 8009336:	e024      	b.n	8009382 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	2b02      	cmp	r3, #2
 800933e:	d107      	bne.n	8009350 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009340:	4b6a      	ldr	r3, [pc, #424]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800934c:	2301      	movs	r3, #1
 800934e:	e0c6      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009350:	4b66      	ldr	r3, [pc, #408]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009358:	2b00      	cmp	r3, #0
 800935a:	d101      	bne.n	8009360 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800935c:	2301      	movs	r3, #1
 800935e:	e0be      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8009360:	f000 f8ce 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 8009364:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8009366:	693b      	ldr	r3, [r7, #16]
 8009368:	4a61      	ldr	r2, [pc, #388]	; (80094f0 <HAL_RCC_ClockConfig+0x268>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d909      	bls.n	8009382 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800936e:	4b5f      	ldr	r3, [pc, #380]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009376:	4a5d      	ldr	r2, [pc, #372]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800937c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800937e:	2380      	movs	r3, #128	; 0x80
 8009380:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009382:	4b5a      	ldr	r3, [pc, #360]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f023 0203 	bic.w	r2, r3, #3
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	4957      	ldr	r1, [pc, #348]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009390:	4313      	orrs	r3, r2
 8009392:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009394:	f7fc fbee 	bl	8005b74 <HAL_GetTick>
 8009398:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800939a:	e00a      	b.n	80093b2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800939c:	f7fc fbea 	bl	8005b74 <HAL_GetTick>
 80093a0:	4602      	mov	r2, r0
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	1ad3      	subs	r3, r2, r3
 80093a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d901      	bls.n	80093b2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80093ae:	2303      	movs	r3, #3
 80093b0:	e095      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80093b2:	4b4e      	ldr	r3, [pc, #312]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f003 020c 	and.w	r2, r3, #12
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	685b      	ldr	r3, [r3, #4]
 80093be:	009b      	lsls	r3, r3, #2
 80093c0:	429a      	cmp	r2, r3
 80093c2:	d1eb      	bne.n	800939c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0302 	and.w	r3, r3, #2
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d023      	beq.n	8009418 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f003 0304 	and.w	r3, r3, #4
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d005      	beq.n	80093e8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80093dc:	4b43      	ldr	r3, [pc, #268]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80093de:	689b      	ldr	r3, [r3, #8]
 80093e0:	4a42      	ldr	r2, [pc, #264]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80093e2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80093e6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0308 	and.w	r3, r3, #8
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d007      	beq.n	8009404 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80093f4:	4b3d      	ldr	r3, [pc, #244]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80093fc:	4a3b      	ldr	r2, [pc, #236]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80093fe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009402:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009404:	4b39      	ldr	r3, [pc, #228]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009406:	689b      	ldr	r3, [r3, #8]
 8009408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	689b      	ldr	r3, [r3, #8]
 8009410:	4936      	ldr	r1, [pc, #216]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009412:	4313      	orrs	r3, r2
 8009414:	608b      	str	r3, [r1, #8]
 8009416:	e008      	b.n	800942a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8009418:	697b      	ldr	r3, [r7, #20]
 800941a:	2b80      	cmp	r3, #128	; 0x80
 800941c:	d105      	bne.n	800942a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800941e:	4b33      	ldr	r3, [pc, #204]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009420:	689b      	ldr	r3, [r3, #8]
 8009422:	4a32      	ldr	r2, [pc, #200]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009424:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009428:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800942a:	4b2f      	ldr	r3, [pc, #188]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f003 030f 	and.w	r3, r3, #15
 8009432:	683a      	ldr	r2, [r7, #0]
 8009434:	429a      	cmp	r2, r3
 8009436:	d21d      	bcs.n	8009474 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009438:	4b2b      	ldr	r3, [pc, #172]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	f023 020f 	bic.w	r2, r3, #15
 8009440:	4929      	ldr	r1, [pc, #164]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	4313      	orrs	r3, r2
 8009446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009448:	f7fc fb94 	bl	8005b74 <HAL_GetTick>
 800944c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800944e:	e00a      	b.n	8009466 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009450:	f7fc fb90 	bl	8005b74 <HAL_GetTick>
 8009454:	4602      	mov	r2, r0
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	1ad3      	subs	r3, r2, r3
 800945a:	f241 3288 	movw	r2, #5000	; 0x1388
 800945e:	4293      	cmp	r3, r2
 8009460:	d901      	bls.n	8009466 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8009462:	2303      	movs	r3, #3
 8009464:	e03b      	b.n	80094de <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009466:	4b20      	ldr	r3, [pc, #128]	; (80094e8 <HAL_RCC_ClockConfig+0x260>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f003 030f 	and.w	r3, r3, #15
 800946e:	683a      	ldr	r2, [r7, #0]
 8009470:	429a      	cmp	r2, r3
 8009472:	d1ed      	bne.n	8009450 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	f003 0304 	and.w	r3, r3, #4
 800947c:	2b00      	cmp	r3, #0
 800947e:	d008      	beq.n	8009492 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009480:	4b1a      	ldr	r3, [pc, #104]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	68db      	ldr	r3, [r3, #12]
 800948c:	4917      	ldr	r1, [pc, #92]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 800948e:	4313      	orrs	r3, r2
 8009490:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f003 0308 	and.w	r3, r3, #8
 800949a:	2b00      	cmp	r3, #0
 800949c:	d009      	beq.n	80094b2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800949e:	4b13      	ldr	r3, [pc, #76]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	691b      	ldr	r3, [r3, #16]
 80094aa:	00db      	lsls	r3, r3, #3
 80094ac:	490f      	ldr	r1, [pc, #60]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80094ae:	4313      	orrs	r3, r2
 80094b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80094b2:	f000 f825 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 80094b6:	4602      	mov	r2, r0
 80094b8:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <HAL_RCC_ClockConfig+0x264>)
 80094ba:	689b      	ldr	r3, [r3, #8]
 80094bc:	091b      	lsrs	r3, r3, #4
 80094be:	f003 030f 	and.w	r3, r3, #15
 80094c2:	490c      	ldr	r1, [pc, #48]	; (80094f4 <HAL_RCC_ClockConfig+0x26c>)
 80094c4:	5ccb      	ldrb	r3, [r1, r3]
 80094c6:	f003 031f 	and.w	r3, r3, #31
 80094ca:	fa22 f303 	lsr.w	r3, r2, r3
 80094ce:	4a0a      	ldr	r2, [pc, #40]	; (80094f8 <HAL_RCC_ClockConfig+0x270>)
 80094d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80094d2:	4b0a      	ldr	r3, [pc, #40]	; (80094fc <HAL_RCC_ClockConfig+0x274>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4618      	mov	r0, r3
 80094d8:	f7fc fb00 	bl	8005adc <HAL_InitTick>
 80094dc:	4603      	mov	r3, r0
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	40022000 	.word	0x40022000
 80094ec:	40021000 	.word	0x40021000
 80094f0:	04c4b400 	.word	0x04c4b400
 80094f4:	080126b4 	.word	0x080126b4
 80094f8:	20000000 	.word	0x20000000
 80094fc:	20000004 	.word	0x20000004

08009500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009500:	b480      	push	{r7}
 8009502:	b087      	sub	sp, #28
 8009504:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8009506:	4b2c      	ldr	r3, [pc, #176]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f003 030c 	and.w	r3, r3, #12
 800950e:	2b04      	cmp	r3, #4
 8009510:	d102      	bne.n	8009518 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009512:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009514:	613b      	str	r3, [r7, #16]
 8009516:	e047      	b.n	80095a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8009518:	4b27      	ldr	r3, [pc, #156]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800951a:	689b      	ldr	r3, [r3, #8]
 800951c:	f003 030c 	and.w	r3, r3, #12
 8009520:	2b08      	cmp	r3, #8
 8009522:	d102      	bne.n	800952a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009524:	4b26      	ldr	r3, [pc, #152]	; (80095c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009526:	613b      	str	r3, [r7, #16]
 8009528:	e03e      	b.n	80095a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800952a:	4b23      	ldr	r3, [pc, #140]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	f003 030c 	and.w	r3, r3, #12
 8009532:	2b0c      	cmp	r3, #12
 8009534:	d136      	bne.n	80095a4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009536:	4b20      	ldr	r3, [pc, #128]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f003 0303 	and.w	r3, r3, #3
 800953e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009540:	4b1d      	ldr	r3, [pc, #116]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009542:	68db      	ldr	r3, [r3, #12]
 8009544:	091b      	lsrs	r3, r3, #4
 8009546:	f003 030f 	and.w	r3, r3, #15
 800954a:	3301      	adds	r3, #1
 800954c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2b03      	cmp	r3, #3
 8009552:	d10c      	bne.n	800956e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009554:	4a1a      	ldr	r2, [pc, #104]	; (80095c0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	fbb2 f3f3 	udiv	r3, r2, r3
 800955c:	4a16      	ldr	r2, [pc, #88]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800955e:	68d2      	ldr	r2, [r2, #12]
 8009560:	0a12      	lsrs	r2, r2, #8
 8009562:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009566:	fb02 f303 	mul.w	r3, r2, r3
 800956a:	617b      	str	r3, [r7, #20]
      break;
 800956c:	e00c      	b.n	8009588 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800956e:	4a13      	ldr	r2, [pc, #76]	; (80095bc <HAL_RCC_GetSysClockFreq+0xbc>)
 8009570:	68bb      	ldr	r3, [r7, #8]
 8009572:	fbb2 f3f3 	udiv	r3, r2, r3
 8009576:	4a10      	ldr	r2, [pc, #64]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8009578:	68d2      	ldr	r2, [r2, #12]
 800957a:	0a12      	lsrs	r2, r2, #8
 800957c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009580:	fb02 f303 	mul.w	r3, r2, r3
 8009584:	617b      	str	r3, [r7, #20]
      break;
 8009586:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009588:	4b0b      	ldr	r3, [pc, #44]	; (80095b8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	0e5b      	lsrs	r3, r3, #25
 800958e:	f003 0303 	and.w	r3, r3, #3
 8009592:	3301      	adds	r3, #1
 8009594:	005b      	lsls	r3, r3, #1
 8009596:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	fbb2 f3f3 	udiv	r3, r2, r3
 80095a0:	613b      	str	r3, [r7, #16]
 80095a2:	e001      	b.n	80095a8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80095a4:	2300      	movs	r3, #0
 80095a6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80095a8:	693b      	ldr	r3, [r7, #16]
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	371c      	adds	r7, #28
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr
 80095b6:	bf00      	nop
 80095b8:	40021000 	.word	0x40021000
 80095bc:	00f42400 	.word	0x00f42400
 80095c0:	007a1200 	.word	0x007a1200

080095c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80095c4:	b480      	push	{r7}
 80095c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80095c8:	4b03      	ldr	r3, [pc, #12]	; (80095d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80095ca:	681b      	ldr	r3, [r3, #0]
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	46bd      	mov	sp, r7
 80095d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d4:	4770      	bx	lr
 80095d6:	bf00      	nop
 80095d8:	20000000 	.word	0x20000000

080095dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80095dc:	b580      	push	{r7, lr}
 80095de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80095e0:	f7ff fff0 	bl	80095c4 <HAL_RCC_GetHCLKFreq>
 80095e4:	4602      	mov	r2, r0
 80095e6:	4b06      	ldr	r3, [pc, #24]	; (8009600 <HAL_RCC_GetPCLK1Freq+0x24>)
 80095e8:	689b      	ldr	r3, [r3, #8]
 80095ea:	0a1b      	lsrs	r3, r3, #8
 80095ec:	f003 0307 	and.w	r3, r3, #7
 80095f0:	4904      	ldr	r1, [pc, #16]	; (8009604 <HAL_RCC_GetPCLK1Freq+0x28>)
 80095f2:	5ccb      	ldrb	r3, [r1, r3]
 80095f4:	f003 031f 	and.w	r3, r3, #31
 80095f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	bd80      	pop	{r7, pc}
 8009600:	40021000 	.word	0x40021000
 8009604:	080126c4 	.word	0x080126c4

08009608 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800960c:	f7ff ffda 	bl	80095c4 <HAL_RCC_GetHCLKFreq>
 8009610:	4602      	mov	r2, r0
 8009612:	4b06      	ldr	r3, [pc, #24]	; (800962c <HAL_RCC_GetPCLK2Freq+0x24>)
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	0adb      	lsrs	r3, r3, #11
 8009618:	f003 0307 	and.w	r3, r3, #7
 800961c:	4904      	ldr	r1, [pc, #16]	; (8009630 <HAL_RCC_GetPCLK2Freq+0x28>)
 800961e:	5ccb      	ldrb	r3, [r1, r3]
 8009620:	f003 031f 	and.w	r3, r3, #31
 8009624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009628:	4618      	mov	r0, r3
 800962a:	bd80      	pop	{r7, pc}
 800962c:	40021000 	.word	0x40021000
 8009630:	080126c4 	.word	0x080126c4

08009634 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009634:	b480      	push	{r7}
 8009636:	b087      	sub	sp, #28
 8009638:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800963a:	4b1e      	ldr	r3, [pc, #120]	; (80096b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	f003 0303 	and.w	r3, r3, #3
 8009642:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009644:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009646:	68db      	ldr	r3, [r3, #12]
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	3301      	adds	r3, #1
 8009650:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b03      	cmp	r3, #3
 8009656:	d10c      	bne.n	8009672 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009658:	4a17      	ldr	r2, [pc, #92]	; (80096b8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009660:	4a14      	ldr	r2, [pc, #80]	; (80096b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009662:	68d2      	ldr	r2, [r2, #12]
 8009664:	0a12      	lsrs	r2, r2, #8
 8009666:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800966a:	fb02 f303 	mul.w	r3, r2, r3
 800966e:	617b      	str	r3, [r7, #20]
    break;
 8009670:	e00c      	b.n	800968c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009672:	4a12      	ldr	r2, [pc, #72]	; (80096bc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	fbb2 f3f3 	udiv	r3, r2, r3
 800967a:	4a0e      	ldr	r2, [pc, #56]	; (80096b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800967c:	68d2      	ldr	r2, [r2, #12]
 800967e:	0a12      	lsrs	r2, r2, #8
 8009680:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009684:	fb02 f303 	mul.w	r3, r2, r3
 8009688:	617b      	str	r3, [r7, #20]
    break;
 800968a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800968c:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800968e:	68db      	ldr	r3, [r3, #12]
 8009690:	0e5b      	lsrs	r3, r3, #25
 8009692:	f003 0303 	and.w	r3, r3, #3
 8009696:	3301      	adds	r3, #1
 8009698:	005b      	lsls	r3, r3, #1
 800969a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800969c:	697a      	ldr	r2, [r7, #20]
 800969e:	68bb      	ldr	r3, [r7, #8]
 80096a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80096a6:	687b      	ldr	r3, [r7, #4]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	371c      	adds	r7, #28
 80096ac:	46bd      	mov	sp, r7
 80096ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b2:	4770      	bx	lr
 80096b4:	40021000 	.word	0x40021000
 80096b8:	007a1200 	.word	0x007a1200
 80096bc:	00f42400 	.word	0x00f42400

080096c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80096c8:	2300      	movs	r3, #0
 80096ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80096cc:	2300      	movs	r3, #0
 80096ce:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 8098 	beq.w	800980e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80096de:	2300      	movs	r3, #0
 80096e0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80096e2:	4b43      	ldr	r3, [pc, #268]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10d      	bne.n	800970a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80096ee:	4b40      	ldr	r3, [pc, #256]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096f2:	4a3f      	ldr	r2, [pc, #252]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096f8:	6593      	str	r3, [r2, #88]	; 0x58
 80096fa:	4b3d      	ldr	r3, [pc, #244]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80096fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009702:	60bb      	str	r3, [r7, #8]
 8009704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009706:	2301      	movs	r3, #1
 8009708:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800970a:	4b3a      	ldr	r3, [pc, #232]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a39      	ldr	r2, [pc, #228]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009714:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009716:	f7fc fa2d 	bl	8005b74 <HAL_GetTick>
 800971a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800971c:	e009      	b.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800971e:	f7fc fa29 	bl	8005b74 <HAL_GetTick>
 8009722:	4602      	mov	r2, r0
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	1ad3      	subs	r3, r2, r3
 8009728:	2b02      	cmp	r3, #2
 800972a:	d902      	bls.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	74fb      	strb	r3, [r7, #19]
        break;
 8009730:	e005      	b.n	800973e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009732:	4b30      	ldr	r3, [pc, #192]	; (80097f4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800973a:	2b00      	cmp	r3, #0
 800973c:	d0ef      	beq.n	800971e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800973e:	7cfb      	ldrb	r3, [r7, #19]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d159      	bne.n	80097f8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009744:	4b2a      	ldr	r3, [pc, #168]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800974a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800974e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8009750:	697b      	ldr	r3, [r7, #20]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d01e      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800975a:	697a      	ldr	r2, [r7, #20]
 800975c:	429a      	cmp	r2, r3
 800975e:	d019      	beq.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8009760:	4b23      	ldr	r3, [pc, #140]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009762:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009766:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800976a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800976c:	4b20      	ldr	r3, [pc, #128]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800976e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009772:	4a1f      	ldr	r2, [pc, #124]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800977c:	4b1c      	ldr	r3, [pc, #112]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800977e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009782:	4a1b      	ldr	r2, [pc, #108]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009784:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800978c:	4a18      	ldr	r2, [pc, #96]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009794:	697b      	ldr	r3, [r7, #20]
 8009796:	f003 0301 	and.w	r3, r3, #1
 800979a:	2b00      	cmp	r3, #0
 800979c:	d016      	beq.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800979e:	f7fc f9e9 	bl	8005b74 <HAL_GetTick>
 80097a2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097a4:	e00b      	b.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80097a6:	f7fc f9e5 	bl	8005b74 <HAL_GetTick>
 80097aa:	4602      	mov	r2, r0
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d902      	bls.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80097b8:	2303      	movs	r3, #3
 80097ba:	74fb      	strb	r3, [r7, #19]
            break;
 80097bc:	e006      	b.n	80097cc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80097be:	4b0c      	ldr	r3, [pc, #48]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097c4:	f003 0302 	and.w	r3, r3, #2
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d0ec      	beq.n	80097a6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80097cc:	7cfb      	ldrb	r3, [r7, #19]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d10b      	bne.n	80097ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80097d2:	4b07      	ldr	r3, [pc, #28]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e0:	4903      	ldr	r1, [pc, #12]	; (80097f0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80097e2:	4313      	orrs	r3, r2
 80097e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80097e8:	e008      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80097ea:	7cfb      	ldrb	r3, [r7, #19]
 80097ec:	74bb      	strb	r3, [r7, #18]
 80097ee:	e005      	b.n	80097fc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80097f0:	40021000 	.word	0x40021000
 80097f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097f8:	7cfb      	ldrb	r3, [r7, #19]
 80097fa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80097fc:	7c7b      	ldrb	r3, [r7, #17]
 80097fe:	2b01      	cmp	r3, #1
 8009800:	d105      	bne.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009802:	4ba6      	ldr	r3, [pc, #664]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009806:	4aa5      	ldr	r2, [pc, #660]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009808:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800980c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f003 0301 	and.w	r3, r3, #1
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800981a:	4ba0      	ldr	r3, [pc, #640]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800981c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009820:	f023 0203 	bic.w	r2, r3, #3
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	499c      	ldr	r1, [pc, #624]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f003 0302 	and.w	r3, r3, #2
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800983c:	4b97      	ldr	r3, [pc, #604]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800983e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009842:	f023 020c 	bic.w	r2, r3, #12
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	689b      	ldr	r3, [r3, #8]
 800984a:	4994      	ldr	r1, [pc, #592]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800984c:	4313      	orrs	r3, r2
 800984e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0304 	and.w	r3, r3, #4
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800985e:	4b8f      	ldr	r3, [pc, #572]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009860:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009864:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	498b      	ldr	r1, [pc, #556]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800986e:	4313      	orrs	r3, r2
 8009870:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0308 	and.w	r3, r3, #8
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009880:	4b86      	ldr	r3, [pc, #536]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009886:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	691b      	ldr	r3, [r3, #16]
 800988e:	4983      	ldr	r1, [pc, #524]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009890:	4313      	orrs	r3, r2
 8009892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f003 0320 	and.w	r3, r3, #32
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00a      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80098a2:	4b7e      	ldr	r3, [pc, #504]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098a8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	497a      	ldr	r1, [pc, #488]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80098c4:	4b75      	ldr	r3, [pc, #468]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	699b      	ldr	r3, [r3, #24]
 80098d2:	4972      	ldr	r1, [pc, #456]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80098e6:	4b6d      	ldr	r3, [pc, #436]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ec:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	69db      	ldr	r3, [r3, #28]
 80098f4:	4969      	ldr	r1, [pc, #420]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009908:	4b64      	ldr	r3, [pc, #400]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800990a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800990e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6a1b      	ldr	r3, [r3, #32]
 8009916:	4961      	ldr	r1, [pc, #388]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009918:	4313      	orrs	r3, r2
 800991a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800992a:	4b5c      	ldr	r3, [pc, #368]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800992c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009930:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009938:	4958      	ldr	r1, [pc, #352]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009948:	2b00      	cmp	r3, #0
 800994a:	d015      	beq.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800994c:	4b53      	ldr	r3, [pc, #332]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800994e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009952:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800995a:	4950      	ldr	r1, [pc, #320]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800996a:	d105      	bne.n	8009978 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800996c:	4b4b      	ldr	r3, [pc, #300]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800996e:	68db      	ldr	r3, [r3, #12]
 8009970:	4a4a      	ldr	r2, [pc, #296]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009976:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009980:	2b00      	cmp	r3, #0
 8009982:	d015      	beq.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009984:	4b45      	ldr	r3, [pc, #276]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800998a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009992:	4942      	ldr	r1, [pc, #264]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009994:	4313      	orrs	r3, r2
 8009996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800999e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80099a2:	d105      	bne.n	80099b0 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099a4:	4b3d      	ldr	r3, [pc, #244]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099a6:	68db      	ldr	r3, [r3, #12]
 80099a8:	4a3c      	ldr	r2, [pc, #240]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099ae:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d015      	beq.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80099bc:	4b37      	ldr	r3, [pc, #220]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099c2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099ca:	4934      	ldr	r1, [pc, #208]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099cc:	4313      	orrs	r3, r2
 80099ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80099da:	d105      	bne.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80099dc:	4b2f      	ldr	r3, [pc, #188]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	4a2e      	ldr	r2, [pc, #184]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80099e6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d015      	beq.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80099f4:	4b29      	ldr	r3, [pc, #164]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80099f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80099fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a02:	4926      	ldr	r1, [pc, #152]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a04:	4313      	orrs	r3, r2
 8009a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a12:	d105      	bne.n	8009a20 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a14:	4b21      	ldr	r3, [pc, #132]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	4a20      	ldr	r2, [pc, #128]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a1e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d015      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009a2c:	4b1b      	ldr	r3, [pc, #108]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a32:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a3a:	4918      	ldr	r1, [pc, #96]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a46:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009a4a:	d105      	bne.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009a4c:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a4e:	68db      	ldr	r3, [r3, #12]
 8009a50:	4a12      	ldr	r2, [pc, #72]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a56:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d015      	beq.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009a64:	4b0d      	ldr	r3, [pc, #52]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a6a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a72:	490a      	ldr	r1, [pc, #40]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a7e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009a82:	d105      	bne.n	8009a90 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009a84:	4b05      	ldr	r3, [pc, #20]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a86:	68db      	ldr	r3, [r3, #12]
 8009a88:	4a04      	ldr	r2, [pc, #16]	; (8009a9c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8009a8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009a8e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009a90:	7cbb      	ldrb	r3, [r7, #18]
}
 8009a92:	4618      	mov	r0, r3
 8009a94:	3718      	adds	r7, #24
 8009a96:	46bd      	mov	sp, r7
 8009a98:	bd80      	pop	{r7, pc}
 8009a9a:	bf00      	nop
 8009a9c:	40021000 	.word	0x40021000

08009aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b082      	sub	sp, #8
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d101      	bne.n	8009ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009aae:	2301      	movs	r3, #1
 8009ab0:	e049      	b.n	8009b46 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ab8:	b2db      	uxtb	r3, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d106      	bne.n	8009acc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f7fb fe52 	bl	8005770 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	2202      	movs	r2, #2
 8009ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f000 fdba 	bl	800a658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2201      	movs	r2, #1
 8009ae8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2201      	movs	r2, #1
 8009af0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2201      	movs	r2, #1
 8009af8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2201      	movs	r2, #1
 8009b00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2201      	movs	r2, #1
 8009b10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b44:	2300      	movs	r3, #0
}
 8009b46:	4618      	mov	r0, r3
 8009b48:	3708      	adds	r7, #8
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
	...

08009b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b085      	sub	sp, #20
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d001      	beq.n	8009b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b64:	2301      	movs	r3, #1
 8009b66:	e04a      	b.n	8009bfe <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2202      	movs	r2, #2
 8009b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	68da      	ldr	r2, [r3, #12]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	f042 0201 	orr.w	r2, r2, #1
 8009b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a21      	ldr	r2, [pc, #132]	; (8009c0c <HAL_TIM_Base_Start_IT+0xbc>)
 8009b86:	4293      	cmp	r3, r2
 8009b88:	d018      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x6c>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009b92:	d013      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x6c>
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	4a1d      	ldr	r2, [pc, #116]	; (8009c10 <HAL_TIM_Base_Start_IT+0xc0>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d00e      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x6c>
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	; (8009c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d009      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x6c>
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	4a1a      	ldr	r2, [pc, #104]	; (8009c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d004      	beq.n	8009bbc <HAL_TIM_Base_Start_IT+0x6c>
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	4a19      	ldr	r2, [pc, #100]	; (8009c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	d115      	bne.n	8009be8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	689a      	ldr	r2, [r3, #8]
 8009bc2:	4b17      	ldr	r3, [pc, #92]	; (8009c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8009bc4:	4013      	ands	r3, r2
 8009bc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	2b06      	cmp	r3, #6
 8009bcc:	d015      	beq.n	8009bfa <HAL_TIM_Base_Start_IT+0xaa>
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd4:	d011      	beq.n	8009bfa <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	681a      	ldr	r2, [r3, #0]
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f042 0201 	orr.w	r2, r2, #1
 8009be4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be6:	e008      	b.n	8009bfa <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	681a      	ldr	r2, [r3, #0]
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	f042 0201 	orr.w	r2, r2, #1
 8009bf6:	601a      	str	r2, [r3, #0]
 8009bf8:	e000      	b.n	8009bfc <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	40012c00 	.word	0x40012c00
 8009c10:	40000400 	.word	0x40000400
 8009c14:	40000800 	.word	0x40000800
 8009c18:	40013400 	.word	0x40013400
 8009c1c:	40014000 	.word	0x40014000
 8009c20:	00010007 	.word	0x00010007

08009c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c24:	b580      	push	{r7, lr}
 8009c26:	b082      	sub	sp, #8
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d101      	bne.n	8009c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	e049      	b.n	8009cca <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d106      	bne.n	8009c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	2200      	movs	r2, #0
 8009c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009c4a:	6878      	ldr	r0, [r7, #4]
 8009c4c:	f000 f841 	bl	8009cd2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2202      	movs	r2, #2
 8009c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681a      	ldr	r2, [r3, #0]
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	3304      	adds	r3, #4
 8009c60:	4619      	mov	r1, r3
 8009c62:	4610      	mov	r0, r2
 8009c64:	f000 fcf8 	bl	800a658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2201      	movs	r2, #1
 8009c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2201      	movs	r2, #1
 8009c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2201      	movs	r2, #1
 8009c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2201      	movs	r2, #1
 8009c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2201      	movs	r2, #1
 8009ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2201      	movs	r2, #1
 8009cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	2201      	movs	r2, #1
 8009cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2201      	movs	r2, #1
 8009cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3708      	adds	r7, #8
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}

08009cd2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009cd2:	b480      	push	{r7}
 8009cd4:	b083      	sub	sp, #12
 8009cd6:	af00      	add	r7, sp, #0
 8009cd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009cda:	bf00      	nop
 8009cdc:	370c      	adds	r7, #12
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce4:	4770      	bx	lr
	...

08009ce8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b084      	sub	sp, #16
 8009cec:	af00      	add	r7, sp, #0
 8009cee:	6078      	str	r0, [r7, #4]
 8009cf0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d109      	bne.n	8009d0c <HAL_TIM_PWM_Start+0x24>
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009cfe:	b2db      	uxtb	r3, r3
 8009d00:	2b01      	cmp	r3, #1
 8009d02:	bf14      	ite	ne
 8009d04:	2301      	movne	r3, #1
 8009d06:	2300      	moveq	r3, #0
 8009d08:	b2db      	uxtb	r3, r3
 8009d0a:	e03c      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	2b04      	cmp	r3, #4
 8009d10:	d109      	bne.n	8009d26 <HAL_TIM_PWM_Start+0x3e>
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	2b01      	cmp	r3, #1
 8009d1c:	bf14      	ite	ne
 8009d1e:	2301      	movne	r3, #1
 8009d20:	2300      	moveq	r3, #0
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	e02f      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	2b08      	cmp	r3, #8
 8009d2a:	d109      	bne.n	8009d40 <HAL_TIM_PWM_Start+0x58>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b01      	cmp	r3, #1
 8009d36:	bf14      	ite	ne
 8009d38:	2301      	movne	r3, #1
 8009d3a:	2300      	moveq	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	e022      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	2b0c      	cmp	r3, #12
 8009d44:	d109      	bne.n	8009d5a <HAL_TIM_PWM_Start+0x72>
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d4c:	b2db      	uxtb	r3, r3
 8009d4e:	2b01      	cmp	r3, #1
 8009d50:	bf14      	ite	ne
 8009d52:	2301      	movne	r3, #1
 8009d54:	2300      	moveq	r3, #0
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	e015      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b10      	cmp	r3, #16
 8009d5e:	d109      	bne.n	8009d74 <HAL_TIM_PWM_Start+0x8c>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d66:	b2db      	uxtb	r3, r3
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	bf14      	ite	ne
 8009d6c:	2301      	movne	r3, #1
 8009d6e:	2300      	moveq	r3, #0
 8009d70:	b2db      	uxtb	r3, r3
 8009d72:	e008      	b.n	8009d86 <HAL_TIM_PWM_Start+0x9e>
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d7a:	b2db      	uxtb	r3, r3
 8009d7c:	2b01      	cmp	r3, #1
 8009d7e:	bf14      	ite	ne
 8009d80:	2301      	movne	r3, #1
 8009d82:	2300      	moveq	r3, #0
 8009d84:	b2db      	uxtb	r3, r3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	e097      	b.n	8009ebe <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d104      	bne.n	8009d9e <HAL_TIM_PWM_Start+0xb6>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d9c:	e023      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b04      	cmp	r3, #4
 8009da2:	d104      	bne.n	8009dae <HAL_TIM_PWM_Start+0xc6>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009dac:	e01b      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	2b08      	cmp	r3, #8
 8009db2:	d104      	bne.n	8009dbe <HAL_TIM_PWM_Start+0xd6>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2202      	movs	r2, #2
 8009db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dbc:	e013      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	2b0c      	cmp	r3, #12
 8009dc2:	d104      	bne.n	8009dce <HAL_TIM_PWM_Start+0xe6>
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2202      	movs	r2, #2
 8009dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009dcc:	e00b      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	2b10      	cmp	r3, #16
 8009dd2:	d104      	bne.n	8009dde <HAL_TIM_PWM_Start+0xf6>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2202      	movs	r2, #2
 8009dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009ddc:	e003      	b.n	8009de6 <HAL_TIM_PWM_Start+0xfe>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2201      	movs	r2, #1
 8009dec:	6839      	ldr	r1, [r7, #0]
 8009dee:	4618      	mov	r0, r3
 8009df0:	f001 f854 	bl	800ae9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	4a33      	ldr	r2, [pc, #204]	; (8009ec8 <HAL_TIM_PWM_Start+0x1e0>)
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d013      	beq.n	8009e26 <HAL_TIM_PWM_Start+0x13e>
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	4a32      	ldr	r2, [pc, #200]	; (8009ecc <HAL_TIM_PWM_Start+0x1e4>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d00e      	beq.n	8009e26 <HAL_TIM_PWM_Start+0x13e>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	4a30      	ldr	r2, [pc, #192]	; (8009ed0 <HAL_TIM_PWM_Start+0x1e8>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d009      	beq.n	8009e26 <HAL_TIM_PWM_Start+0x13e>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	4a2f      	ldr	r2, [pc, #188]	; (8009ed4 <HAL_TIM_PWM_Start+0x1ec>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d004      	beq.n	8009e26 <HAL_TIM_PWM_Start+0x13e>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a2d      	ldr	r2, [pc, #180]	; (8009ed8 <HAL_TIM_PWM_Start+0x1f0>)
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d101      	bne.n	8009e2a <HAL_TIM_PWM_Start+0x142>
 8009e26:	2301      	movs	r3, #1
 8009e28:	e000      	b.n	8009e2c <HAL_TIM_PWM_Start+0x144>
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	2b00      	cmp	r3, #0
 8009e2e:	d007      	beq.n	8009e40 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009e3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a20      	ldr	r2, [pc, #128]	; (8009ec8 <HAL_TIM_PWM_Start+0x1e0>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d018      	beq.n	8009e7c <HAL_TIM_PWM_Start+0x194>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e52:	d013      	beq.n	8009e7c <HAL_TIM_PWM_Start+0x194>
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	4a20      	ldr	r2, [pc, #128]	; (8009edc <HAL_TIM_PWM_Start+0x1f4>)
 8009e5a:	4293      	cmp	r3, r2
 8009e5c:	d00e      	beq.n	8009e7c <HAL_TIM_PWM_Start+0x194>
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a1f      	ldr	r2, [pc, #124]	; (8009ee0 <HAL_TIM_PWM_Start+0x1f8>)
 8009e64:	4293      	cmp	r3, r2
 8009e66:	d009      	beq.n	8009e7c <HAL_TIM_PWM_Start+0x194>
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	4a17      	ldr	r2, [pc, #92]	; (8009ecc <HAL_TIM_PWM_Start+0x1e4>)
 8009e6e:	4293      	cmp	r3, r2
 8009e70:	d004      	beq.n	8009e7c <HAL_TIM_PWM_Start+0x194>
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	4a16      	ldr	r2, [pc, #88]	; (8009ed0 <HAL_TIM_PWM_Start+0x1e8>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d115      	bne.n	8009ea8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	689a      	ldr	r2, [r3, #8]
 8009e82:	4b18      	ldr	r3, [pc, #96]	; (8009ee4 <HAL_TIM_PWM_Start+0x1fc>)
 8009e84:	4013      	ands	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	2b06      	cmp	r3, #6
 8009e8c:	d015      	beq.n	8009eba <HAL_TIM_PWM_Start+0x1d2>
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e94:	d011      	beq.n	8009eba <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	681a      	ldr	r2, [r3, #0]
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	f042 0201 	orr.w	r2, r2, #1
 8009ea4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ea6:	e008      	b.n	8009eba <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f042 0201 	orr.w	r2, r2, #1
 8009eb6:	601a      	str	r2, [r3, #0]
 8009eb8:	e000      	b.n	8009ebc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009eba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ebc:	2300      	movs	r3, #0
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	3710      	adds	r7, #16
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	bd80      	pop	{r7, pc}
 8009ec6:	bf00      	nop
 8009ec8:	40012c00 	.word	0x40012c00
 8009ecc:	40013400 	.word	0x40013400
 8009ed0:	40014000 	.word	0x40014000
 8009ed4:	40014400 	.word	0x40014400
 8009ed8:	40014800 	.word	0x40014800
 8009edc:	40000400 	.word	0x40000400
 8009ee0:	40000800 	.word	0x40000800
 8009ee4:	00010007 	.word	0x00010007

08009ee8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ee8:	b580      	push	{r7, lr}
 8009eea:	b082      	sub	sp, #8
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	f003 0302 	and.w	r3, r3, #2
 8009efa:	2b02      	cmp	r3, #2
 8009efc:	d122      	bne.n	8009f44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	f003 0302 	and.w	r3, r3, #2
 8009f08:	2b02      	cmp	r3, #2
 8009f0a:	d11b      	bne.n	8009f44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	f06f 0202 	mvn.w	r2, #2
 8009f14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2201      	movs	r2, #1
 8009f1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	699b      	ldr	r3, [r3, #24]
 8009f22:	f003 0303 	and.w	r3, r3, #3
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d003      	beq.n	8009f32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fb76 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 8009f30:	e005      	b.n	8009f3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f000 fb68 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	f000 fb79 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	691b      	ldr	r3, [r3, #16]
 8009f4a:	f003 0304 	and.w	r3, r3, #4
 8009f4e:	2b04      	cmp	r3, #4
 8009f50:	d122      	bne.n	8009f98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	68db      	ldr	r3, [r3, #12]
 8009f58:	f003 0304 	and.w	r3, r3, #4
 8009f5c:	2b04      	cmp	r3, #4
 8009f5e:	d11b      	bne.n	8009f98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f06f 0204 	mvn.w	r2, #4
 8009f68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	2202      	movs	r2, #2
 8009f6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	699b      	ldr	r3, [r3, #24]
 8009f76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d003      	beq.n	8009f86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009f7e:	6878      	ldr	r0, [r7, #4]
 8009f80:	f000 fb4c 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 8009f84:	e005      	b.n	8009f92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fb3e 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fb4f 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2200      	movs	r2, #0
 8009f96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	691b      	ldr	r3, [r3, #16]
 8009f9e:	f003 0308 	and.w	r3, r3, #8
 8009fa2:	2b08      	cmp	r3, #8
 8009fa4:	d122      	bne.n	8009fec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	f003 0308 	and.w	r3, r3, #8
 8009fb0:	2b08      	cmp	r3, #8
 8009fb2:	d11b      	bne.n	8009fec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f06f 0208 	mvn.w	r2, #8
 8009fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2204      	movs	r2, #4
 8009fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	f003 0303 	and.w	r3, r3, #3
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d003      	beq.n	8009fda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009fd2:	6878      	ldr	r0, [r7, #4]
 8009fd4:	f000 fb22 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 8009fd8:	e005      	b.n	8009fe6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f000 fb14 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	f000 fb25 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	691b      	ldr	r3, [r3, #16]
 8009ff2:	f003 0310 	and.w	r3, r3, #16
 8009ff6:	2b10      	cmp	r3, #16
 8009ff8:	d122      	bne.n	800a040 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	68db      	ldr	r3, [r3, #12]
 800a000:	f003 0310 	and.w	r3, r3, #16
 800a004:	2b10      	cmp	r3, #16
 800a006:	d11b      	bne.n	800a040 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	f06f 0210 	mvn.w	r2, #16
 800a010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2208      	movs	r2, #8
 800a016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	69db      	ldr	r3, [r3, #28]
 800a01e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a022:	2b00      	cmp	r3, #0
 800a024:	d003      	beq.n	800a02e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f000 faf8 	bl	800a61c <HAL_TIM_IC_CaptureCallback>
 800a02c:	e005      	b.n	800a03a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 faea 	bl	800a608 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a034:	6878      	ldr	r0, [r7, #4]
 800a036:	f000 fafb 	bl	800a630 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	2200      	movs	r2, #0
 800a03e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	691b      	ldr	r3, [r3, #16]
 800a046:	f003 0301 	and.w	r3, r3, #1
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	d10e      	bne.n	800a06c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
 800a054:	f003 0301 	and.w	r3, r3, #1
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d107      	bne.n	800a06c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f06f 0201 	mvn.w	r2, #1
 800a064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f000 fac4 	bl	800a5f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a076:	2b80      	cmp	r3, #128	; 0x80
 800a078:	d10e      	bne.n	800a098 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a084:	2b80      	cmp	r3, #128	; 0x80
 800a086:	d107      	bne.n	800a098 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f001 f91b 	bl	800b2ce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	691b      	ldr	r3, [r3, #16]
 800a09e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a0a6:	d10e      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	68db      	ldr	r3, [r3, #12]
 800a0ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a0b2:	2b80      	cmp	r3, #128	; 0x80
 800a0b4:	d107      	bne.n	800a0c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a0be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a0c0:	6878      	ldr	r0, [r7, #4]
 800a0c2:	f001 f90e 	bl	800b2e2 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	691b      	ldr	r3, [r3, #16]
 800a0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0d0:	2b40      	cmp	r3, #64	; 0x40
 800a0d2:	d10e      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	68db      	ldr	r3, [r3, #12]
 800a0da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0de:	2b40      	cmp	r3, #64	; 0x40
 800a0e0:	d107      	bne.n	800a0f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a0ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 faa9 	bl	800a644 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	691b      	ldr	r3, [r3, #16]
 800a0f8:	f003 0320 	and.w	r3, r3, #32
 800a0fc:	2b20      	cmp	r3, #32
 800a0fe:	d10e      	bne.n	800a11e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	f003 0320 	and.w	r3, r3, #32
 800a10a:	2b20      	cmp	r3, #32
 800a10c:	d107      	bne.n	800a11e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	f06f 0220 	mvn.w	r2, #32
 800a116:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f001 f8ce 	bl	800b2ba <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	691b      	ldr	r3, [r3, #16]
 800a124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a128:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a12c:	d10f      	bne.n	800a14e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a138:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a13c:	d107      	bne.n	800a14e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f001 f8d4 	bl	800b2f6 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	691b      	ldr	r3, [r3, #16]
 800a154:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a158:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a15c:	d10f      	bne.n	800a17e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a168:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a16c:	d107      	bne.n	800a17e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a176:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f001 f8c6 	bl	800b30a <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a188:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a18c:	d10f      	bne.n	800a1ae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	68db      	ldr	r3, [r3, #12]
 800a194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a198:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a19c:	d107      	bne.n	800a1ae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a1a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f001 f8b8 	bl	800b31e <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1b8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1bc:	d10f      	bne.n	800a1de <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	68db      	ldr	r3, [r3, #12]
 800a1c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a1cc:	d107      	bne.n	800a1de <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a1d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a1d8:	6878      	ldr	r0, [r7, #4]
 800a1da:	f001 f8aa 	bl	800b332 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1de:	bf00      	nop
 800a1e0:	3708      	adds	r7, #8
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	bd80      	pop	{r7, pc}
	...

0800a1e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b084      	sub	sp, #16
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	60f8      	str	r0, [r7, #12]
 800a1f0:	60b9      	str	r1, [r7, #8]
 800a1f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1fa:	2b01      	cmp	r3, #1
 800a1fc:	d101      	bne.n	800a202 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a1fe:	2302      	movs	r3, #2
 800a200:	e0fd      	b.n	800a3fe <HAL_TIM_PWM_ConfigChannel+0x216>
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	2201      	movs	r2, #1
 800a206:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	2b14      	cmp	r3, #20
 800a20e:	f200 80f0 	bhi.w	800a3f2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800a212:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a26d 	.word	0x0800a26d
 800a21c:	0800a3f3 	.word	0x0800a3f3
 800a220:	0800a3f3 	.word	0x0800a3f3
 800a224:	0800a3f3 	.word	0x0800a3f3
 800a228:	0800a2ad 	.word	0x0800a2ad
 800a22c:	0800a3f3 	.word	0x0800a3f3
 800a230:	0800a3f3 	.word	0x0800a3f3
 800a234:	0800a3f3 	.word	0x0800a3f3
 800a238:	0800a2ef 	.word	0x0800a2ef
 800a23c:	0800a3f3 	.word	0x0800a3f3
 800a240:	0800a3f3 	.word	0x0800a3f3
 800a244:	0800a3f3 	.word	0x0800a3f3
 800a248:	0800a32f 	.word	0x0800a32f
 800a24c:	0800a3f3 	.word	0x0800a3f3
 800a250:	0800a3f3 	.word	0x0800a3f3
 800a254:	0800a3f3 	.word	0x0800a3f3
 800a258:	0800a371 	.word	0x0800a371
 800a25c:	0800a3f3 	.word	0x0800a3f3
 800a260:	0800a3f3 	.word	0x0800a3f3
 800a264:	0800a3f3 	.word	0x0800a3f3
 800a268:	0800a3b1 	.word	0x0800a3b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	4618      	mov	r0, r3
 800a274:	f000 fa80 	bl	800a778 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	699a      	ldr	r2, [r3, #24]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	f042 0208 	orr.w	r2, r2, #8
 800a286:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	699a      	ldr	r2, [r3, #24]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f022 0204 	bic.w	r2, r2, #4
 800a296:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	6999      	ldr	r1, [r3, #24]
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	691a      	ldr	r2, [r3, #16]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	430a      	orrs	r2, r1
 800a2a8:	619a      	str	r2, [r3, #24]
      break;
 800a2aa:	e0a3      	b.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	68b9      	ldr	r1, [r7, #8]
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f000 faf0 	bl	800a898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	699a      	ldr	r2, [r3, #24]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	699a      	ldr	r2, [r3, #24]
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	6999      	ldr	r1, [r3, #24]
 800a2de:	68bb      	ldr	r3, [r7, #8]
 800a2e0:	691b      	ldr	r3, [r3, #16]
 800a2e2:	021a      	lsls	r2, r3, #8
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	619a      	str	r2, [r3, #24]
      break;
 800a2ec:	e082      	b.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	68b9      	ldr	r1, [r7, #8]
 800a2f4:	4618      	mov	r0, r3
 800a2f6:	f000 fb59 	bl	800a9ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	69da      	ldr	r2, [r3, #28]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	f042 0208 	orr.w	r2, r2, #8
 800a308:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	69da      	ldr	r2, [r3, #28]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f022 0204 	bic.w	r2, r2, #4
 800a318:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	69d9      	ldr	r1, [r3, #28]
 800a320:	68bb      	ldr	r3, [r7, #8]
 800a322:	691a      	ldr	r2, [r3, #16]
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	430a      	orrs	r2, r1
 800a32a:	61da      	str	r2, [r3, #28]
      break;
 800a32c:	e062      	b.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68b9      	ldr	r1, [r7, #8]
 800a334:	4618      	mov	r0, r3
 800a336:	f000 fbc1 	bl	800aabc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	69da      	ldr	r2, [r3, #28]
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a348:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69da      	ldr	r2, [r3, #28]
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a358:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	69d9      	ldr	r1, [r3, #28]
 800a360:	68bb      	ldr	r3, [r7, #8]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	021a      	lsls	r2, r3, #8
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	430a      	orrs	r2, r1
 800a36c:	61da      	str	r2, [r3, #28]
      break;
 800a36e:	e041      	b.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	68b9      	ldr	r1, [r7, #8]
 800a376:	4618      	mov	r0, r3
 800a378:	f000 fc2a 	bl	800abd0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f042 0208 	orr.w	r2, r2, #8
 800a38a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	f022 0204 	bic.w	r2, r2, #4
 800a39a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	430a      	orrs	r2, r1
 800a3ac:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a3ae:	e021      	b.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	68b9      	ldr	r1, [r7, #8]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f000 fc6e 	bl	800ac98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a3ca:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3da:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	691b      	ldr	r3, [r3, #16]
 800a3e6:	021a      	lsls	r2, r3, #8
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	430a      	orrs	r2, r1
 800a3ee:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800a3f0:	e000      	b.n	800a3f4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800a3f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a3fc:	2300      	movs	r3, #0
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3710      	adds	r7, #16
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop

0800a408 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	6078      	str	r0, [r7, #4]
 800a410:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d101      	bne.n	800a420 <HAL_TIM_ConfigClockSource+0x18>
 800a41c:	2302      	movs	r3, #2
 800a41e:	e0dd      	b.n	800a5dc <HAL_TIM_ConfigClockSource+0x1d4>
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	2201      	movs	r2, #1
 800a424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2202      	movs	r2, #2
 800a42c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	689b      	ldr	r3, [r3, #8]
 800a436:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a43e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a44a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	68fa      	ldr	r2, [r7, #12]
 800a452:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a454:	683b      	ldr	r3, [r7, #0]
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	4a62      	ldr	r2, [pc, #392]	; (800a5e4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a45a:	4293      	cmp	r3, r2
 800a45c:	f000 80a9 	beq.w	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a460:	4a60      	ldr	r2, [pc, #384]	; (800a5e4 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a462:	4293      	cmp	r3, r2
 800a464:	f200 80ae 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a468:	4a5f      	ldr	r2, [pc, #380]	; (800a5e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	f000 80a1 	beq.w	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a470:	4a5d      	ldr	r2, [pc, #372]	; (800a5e8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800a472:	4293      	cmp	r3, r2
 800a474:	f200 80a6 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a478:	4a5c      	ldr	r2, [pc, #368]	; (800a5ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	f000 8099 	beq.w	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a480:	4a5a      	ldr	r2, [pc, #360]	; (800a5ec <HAL_TIM_ConfigClockSource+0x1e4>)
 800a482:	4293      	cmp	r3, r2
 800a484:	f200 809e 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a488:	4a59      	ldr	r2, [pc, #356]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a48a:	4293      	cmp	r3, r2
 800a48c:	f000 8091 	beq.w	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a490:	4a57      	ldr	r2, [pc, #348]	; (800a5f0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800a492:	4293      	cmp	r3, r2
 800a494:	f200 8096 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a498:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a49c:	f000 8089 	beq.w	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a4a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a4a4:	f200 808e 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4ac:	d03e      	beq.n	800a52c <HAL_TIM_ConfigClockSource+0x124>
 800a4ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a4b2:	f200 8087 	bhi.w	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ba:	f000 8085 	beq.w	800a5c8 <HAL_TIM_ConfigClockSource+0x1c0>
 800a4be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4c2:	d87f      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4c4:	2b70      	cmp	r3, #112	; 0x70
 800a4c6:	d01a      	beq.n	800a4fe <HAL_TIM_ConfigClockSource+0xf6>
 800a4c8:	2b70      	cmp	r3, #112	; 0x70
 800a4ca:	d87b      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4cc:	2b60      	cmp	r3, #96	; 0x60
 800a4ce:	d050      	beq.n	800a572 <HAL_TIM_ConfigClockSource+0x16a>
 800a4d0:	2b60      	cmp	r3, #96	; 0x60
 800a4d2:	d877      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4d4:	2b50      	cmp	r3, #80	; 0x50
 800a4d6:	d03c      	beq.n	800a552 <HAL_TIM_ConfigClockSource+0x14a>
 800a4d8:	2b50      	cmp	r3, #80	; 0x50
 800a4da:	d873      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4dc:	2b40      	cmp	r3, #64	; 0x40
 800a4de:	d058      	beq.n	800a592 <HAL_TIM_ConfigClockSource+0x18a>
 800a4e0:	2b40      	cmp	r3, #64	; 0x40
 800a4e2:	d86f      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4e4:	2b30      	cmp	r3, #48	; 0x30
 800a4e6:	d064      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a4e8:	2b30      	cmp	r3, #48	; 0x30
 800a4ea:	d86b      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4ec:	2b20      	cmp	r3, #32
 800a4ee:	d060      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a4f0:	2b20      	cmp	r3, #32
 800a4f2:	d867      	bhi.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d05c      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
 800a4f8:	2b10      	cmp	r3, #16
 800a4fa:	d05a      	beq.n	800a5b2 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800a4fc:	e062      	b.n	800a5c4 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6818      	ldr	r0, [r3, #0]
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	6899      	ldr	r1, [r3, #8]
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	685a      	ldr	r2, [r3, #4]
 800a50a:	683b      	ldr	r3, [r7, #0]
 800a50c:	68db      	ldr	r3, [r3, #12]
 800a50e:	f000 fca5 	bl	800ae5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	689b      	ldr	r3, [r3, #8]
 800a518:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a520:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	68fa      	ldr	r2, [r7, #12]
 800a528:	609a      	str	r2, [r3, #8]
      break;
 800a52a:	e04e      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	6818      	ldr	r0, [r3, #0]
 800a530:	683b      	ldr	r3, [r7, #0]
 800a532:	6899      	ldr	r1, [r3, #8]
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	685a      	ldr	r2, [r3, #4]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	68db      	ldr	r3, [r3, #12]
 800a53c:	f000 fc8e 	bl	800ae5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	689a      	ldr	r2, [r3, #8]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a54e:	609a      	str	r2, [r3, #8]
      break;
 800a550:	e03b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	6818      	ldr	r0, [r3, #0]
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	6859      	ldr	r1, [r3, #4]
 800a55a:	683b      	ldr	r3, [r7, #0]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	461a      	mov	r2, r3
 800a560:	f000 fc00 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	2150      	movs	r1, #80	; 0x50
 800a56a:	4618      	mov	r0, r3
 800a56c:	f000 fc59 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800a570:	e02b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6818      	ldr	r0, [r3, #0]
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	6859      	ldr	r1, [r3, #4]
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	68db      	ldr	r3, [r3, #12]
 800a57e:	461a      	mov	r2, r3
 800a580:	f000 fc1f 	bl	800adc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	2160      	movs	r1, #96	; 0x60
 800a58a:	4618      	mov	r0, r3
 800a58c:	f000 fc49 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800a590:	e01b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6818      	ldr	r0, [r3, #0]
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	6859      	ldr	r1, [r3, #4]
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	f000 fbe0 	bl	800ad64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2140      	movs	r1, #64	; 0x40
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f000 fc39 	bl	800ae22 <TIM_ITRx_SetConfig>
      break;
 800a5b0:	e00b      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	681a      	ldr	r2, [r3, #0]
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	4610      	mov	r0, r2
 800a5be:	f000 fc30 	bl	800ae22 <TIM_ITRx_SetConfig>
        break;
 800a5c2:	e002      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800a5c4:	bf00      	nop
 800a5c6:	e000      	b.n	800a5ca <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800a5c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	00100070 	.word	0x00100070
 800a5e8:	00100040 	.word	0x00100040
 800a5ec:	00100030 	.word	0x00100030
 800a5f0:	00100020 	.word	0x00100020

0800a5f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a5fc:	bf00      	nop
 800a5fe:	370c      	adds	r7, #12
 800a600:	46bd      	mov	sp, r7
 800a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a606:	4770      	bx	lr

0800a608 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a610:	bf00      	nop
 800a612:	370c      	adds	r7, #12
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b083      	sub	sp, #12
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a624:	bf00      	nop
 800a626:	370c      	adds	r7, #12
 800a628:	46bd      	mov	sp, r7
 800a62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62e:	4770      	bx	lr

0800a630 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a630:	b480      	push	{r7}
 800a632:	b083      	sub	sp, #12
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a638:	bf00      	nop
 800a63a:	370c      	adds	r7, #12
 800a63c:	46bd      	mov	sp, r7
 800a63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a642:	4770      	bx	lr

0800a644 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a644:	b480      	push	{r7}
 800a646:	b083      	sub	sp, #12
 800a648:	af00      	add	r7, sp, #0
 800a64a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a658:	b480      	push	{r7}
 800a65a:	b085      	sub	sp, #20
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
 800a660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	4a3c      	ldr	r2, [pc, #240]	; (800a75c <TIM_Base_SetConfig+0x104>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00f      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a676:	d00b      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	4a39      	ldr	r2, [pc, #228]	; (800a760 <TIM_Base_SetConfig+0x108>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d007      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	4a38      	ldr	r2, [pc, #224]	; (800a764 <TIM_Base_SetConfig+0x10c>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d003      	beq.n	800a690 <TIM_Base_SetConfig+0x38>
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a37      	ldr	r2, [pc, #220]	; (800a768 <TIM_Base_SetConfig+0x110>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d108      	bne.n	800a6a2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a698:	683b      	ldr	r3, [r7, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	4a2d      	ldr	r2, [pc, #180]	; (800a75c <TIM_Base_SetConfig+0x104>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d01b      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b0:	d017      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	4a2a      	ldr	r2, [pc, #168]	; (800a760 <TIM_Base_SetConfig+0x108>)
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d013      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	4a29      	ldr	r2, [pc, #164]	; (800a764 <TIM_Base_SetConfig+0x10c>)
 800a6be:	4293      	cmp	r3, r2
 800a6c0:	d00f      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	4a28      	ldr	r2, [pc, #160]	; (800a768 <TIM_Base_SetConfig+0x110>)
 800a6c6:	4293      	cmp	r3, r2
 800a6c8:	d00b      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	4a27      	ldr	r2, [pc, #156]	; (800a76c <TIM_Base_SetConfig+0x114>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d007      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	4a26      	ldr	r2, [pc, #152]	; (800a770 <TIM_Base_SetConfig+0x118>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d003      	beq.n	800a6e2 <TIM_Base_SetConfig+0x8a>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a25      	ldr	r2, [pc, #148]	; (800a774 <TIM_Base_SetConfig+0x11c>)
 800a6de:	4293      	cmp	r3, r2
 800a6e0:	d108      	bne.n	800a6f4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a6e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	68db      	ldr	r3, [r3, #12]
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	4313      	orrs	r3, r2
 800a6f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	695b      	ldr	r3, [r3, #20]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	68fa      	ldr	r2, [r7, #12]
 800a706:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a708:	683b      	ldr	r3, [r7, #0]
 800a70a:	689a      	ldr	r2, [r3, #8]
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	681a      	ldr	r2, [r3, #0]
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	4a10      	ldr	r2, [pc, #64]	; (800a75c <TIM_Base_SetConfig+0x104>)
 800a71c:	4293      	cmp	r3, r2
 800a71e:	d00f      	beq.n	800a740 <TIM_Base_SetConfig+0xe8>
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	4a11      	ldr	r2, [pc, #68]	; (800a768 <TIM_Base_SetConfig+0x110>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d00b      	beq.n	800a740 <TIM_Base_SetConfig+0xe8>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	4a10      	ldr	r2, [pc, #64]	; (800a76c <TIM_Base_SetConfig+0x114>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d007      	beq.n	800a740 <TIM_Base_SetConfig+0xe8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	4a0f      	ldr	r2, [pc, #60]	; (800a770 <TIM_Base_SetConfig+0x118>)
 800a734:	4293      	cmp	r3, r2
 800a736:	d003      	beq.n	800a740 <TIM_Base_SetConfig+0xe8>
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	4a0e      	ldr	r2, [pc, #56]	; (800a774 <TIM_Base_SetConfig+0x11c>)
 800a73c:	4293      	cmp	r3, r2
 800a73e:	d103      	bne.n	800a748 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	691a      	ldr	r2, [r3, #16]
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	615a      	str	r2, [r3, #20]
}
 800a74e:	bf00      	nop
 800a750:	3714      	adds	r7, #20
 800a752:	46bd      	mov	sp, r7
 800a754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a758:	4770      	bx	lr
 800a75a:	bf00      	nop
 800a75c:	40012c00 	.word	0x40012c00
 800a760:	40000400 	.word	0x40000400
 800a764:	40000800 	.word	0x40000800
 800a768:	40013400 	.word	0x40013400
 800a76c:	40014000 	.word	0x40014000
 800a770:	40014400 	.word	0x40014400
 800a774:	40014800 	.word	0x40014800

0800a778 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a778:	b480      	push	{r7}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a1b      	ldr	r3, [r3, #32]
 800a786:	f023 0201 	bic.w	r2, r3, #1
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	6a1b      	ldr	r3, [r3, #32]
 800a792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	699b      	ldr	r3, [r3, #24]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a7a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f023 0303 	bic.w	r3, r3, #3
 800a7b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a7b4:	683b      	ldr	r3, [r7, #0]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	68fa      	ldr	r2, [r7, #12]
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	f023 0302 	bic.w	r3, r3, #2
 800a7c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	689b      	ldr	r3, [r3, #8]
 800a7ca:	697a      	ldr	r2, [r7, #20]
 800a7cc:	4313      	orrs	r3, r2
 800a7ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a2c      	ldr	r2, [pc, #176]	; (800a884 <TIM_OC1_SetConfig+0x10c>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d00f      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x80>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a2b      	ldr	r2, [pc, #172]	; (800a888 <TIM_OC1_SetConfig+0x110>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d00b      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x80>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a2a      	ldr	r2, [pc, #168]	; (800a88c <TIM_OC1_SetConfig+0x114>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d007      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x80>
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	4a29      	ldr	r2, [pc, #164]	; (800a890 <TIM_OC1_SetConfig+0x118>)
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d003      	beq.n	800a7f8 <TIM_OC1_SetConfig+0x80>
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	4a28      	ldr	r2, [pc, #160]	; (800a894 <TIM_OC1_SetConfig+0x11c>)
 800a7f4:	4293      	cmp	r3, r2
 800a7f6:	d10c      	bne.n	800a812 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a7f8:	697b      	ldr	r3, [r7, #20]
 800a7fa:	f023 0308 	bic.w	r3, r3, #8
 800a7fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a800:	683b      	ldr	r3, [r7, #0]
 800a802:	68db      	ldr	r3, [r3, #12]
 800a804:	697a      	ldr	r2, [r7, #20]
 800a806:	4313      	orrs	r3, r2
 800a808:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a80a:	697b      	ldr	r3, [r7, #20]
 800a80c:	f023 0304 	bic.w	r3, r3, #4
 800a810:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1b      	ldr	r2, [pc, #108]	; (800a884 <TIM_OC1_SetConfig+0x10c>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00f      	beq.n	800a83a <TIM_OC1_SetConfig+0xc2>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a1a      	ldr	r2, [pc, #104]	; (800a888 <TIM_OC1_SetConfig+0x110>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00b      	beq.n	800a83a <TIM_OC1_SetConfig+0xc2>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a19      	ldr	r2, [pc, #100]	; (800a88c <TIM_OC1_SetConfig+0x114>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d007      	beq.n	800a83a <TIM_OC1_SetConfig+0xc2>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a18      	ldr	r2, [pc, #96]	; (800a890 <TIM_OC1_SetConfig+0x118>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d003      	beq.n	800a83a <TIM_OC1_SetConfig+0xc2>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a17      	ldr	r2, [pc, #92]	; (800a894 <TIM_OC1_SetConfig+0x11c>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d111      	bne.n	800a85e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a840:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a848:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	693a      	ldr	r2, [r7, #16]
 800a850:	4313      	orrs	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	699b      	ldr	r3, [r3, #24]
 800a858:	693a      	ldr	r2, [r7, #16]
 800a85a:	4313      	orrs	r3, r2
 800a85c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	693a      	ldr	r2, [r7, #16]
 800a862:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	68fa      	ldr	r2, [r7, #12]
 800a868:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	697a      	ldr	r2, [r7, #20]
 800a876:	621a      	str	r2, [r3, #32]
}
 800a878:	bf00      	nop
 800a87a:	371c      	adds	r7, #28
 800a87c:	46bd      	mov	sp, r7
 800a87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a882:	4770      	bx	lr
 800a884:	40012c00 	.word	0x40012c00
 800a888:	40013400 	.word	0x40013400
 800a88c:	40014000 	.word	0x40014000
 800a890:	40014400 	.word	0x40014400
 800a894:	40014800 	.word	0x40014800

0800a898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a898:	b480      	push	{r7}
 800a89a:	b087      	sub	sp, #28
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6a1b      	ldr	r3, [r3, #32]
 800a8a6:	f023 0210 	bic.w	r2, r3, #16
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a1b      	ldr	r3, [r3, #32]
 800a8b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a8ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a8d2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	021b      	lsls	r3, r3, #8
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	4313      	orrs	r3, r2
 800a8de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a8e0:	697b      	ldr	r3, [r7, #20]
 800a8e2:	f023 0320 	bic.w	r3, r3, #32
 800a8e6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	689b      	ldr	r3, [r3, #8]
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	697a      	ldr	r2, [r7, #20]
 800a8f0:	4313      	orrs	r3, r2
 800a8f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	4a28      	ldr	r2, [pc, #160]	; (800a998 <TIM_OC2_SetConfig+0x100>)
 800a8f8:	4293      	cmp	r3, r2
 800a8fa:	d003      	beq.n	800a904 <TIM_OC2_SetConfig+0x6c>
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	4a27      	ldr	r2, [pc, #156]	; (800a99c <TIM_OC2_SetConfig+0x104>)
 800a900:	4293      	cmp	r3, r2
 800a902:	d10d      	bne.n	800a920 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a904:	697b      	ldr	r3, [r7, #20]
 800a906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a90a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	68db      	ldr	r3, [r3, #12]
 800a910:	011b      	lsls	r3, r3, #4
 800a912:	697a      	ldr	r2, [r7, #20]
 800a914:	4313      	orrs	r3, r2
 800a916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a91e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	4a1d      	ldr	r2, [pc, #116]	; (800a998 <TIM_OC2_SetConfig+0x100>)
 800a924:	4293      	cmp	r3, r2
 800a926:	d00f      	beq.n	800a948 <TIM_OC2_SetConfig+0xb0>
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	4a1c      	ldr	r2, [pc, #112]	; (800a99c <TIM_OC2_SetConfig+0x104>)
 800a92c:	4293      	cmp	r3, r2
 800a92e:	d00b      	beq.n	800a948 <TIM_OC2_SetConfig+0xb0>
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	4a1b      	ldr	r2, [pc, #108]	; (800a9a0 <TIM_OC2_SetConfig+0x108>)
 800a934:	4293      	cmp	r3, r2
 800a936:	d007      	beq.n	800a948 <TIM_OC2_SetConfig+0xb0>
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	4a1a      	ldr	r2, [pc, #104]	; (800a9a4 <TIM_OC2_SetConfig+0x10c>)
 800a93c:	4293      	cmp	r3, r2
 800a93e:	d003      	beq.n	800a948 <TIM_OC2_SetConfig+0xb0>
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4a19      	ldr	r2, [pc, #100]	; (800a9a8 <TIM_OC2_SetConfig+0x110>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d113      	bne.n	800a970 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a948:	693b      	ldr	r3, [r7, #16]
 800a94a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a94e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a950:	693b      	ldr	r3, [r7, #16]
 800a952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a956:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	695b      	ldr	r3, [r3, #20]
 800a95c:	009b      	lsls	r3, r3, #2
 800a95e:	693a      	ldr	r2, [r7, #16]
 800a960:	4313      	orrs	r3, r2
 800a962:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	699b      	ldr	r3, [r3, #24]
 800a968:	009b      	lsls	r3, r3, #2
 800a96a:	693a      	ldr	r2, [r7, #16]
 800a96c:	4313      	orrs	r3, r2
 800a96e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	693a      	ldr	r2, [r7, #16]
 800a974:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	68fa      	ldr	r2, [r7, #12]
 800a97a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	697a      	ldr	r2, [r7, #20]
 800a988:	621a      	str	r2, [r3, #32]
}
 800a98a:	bf00      	nop
 800a98c:	371c      	adds	r7, #28
 800a98e:	46bd      	mov	sp, r7
 800a990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a994:	4770      	bx	lr
 800a996:	bf00      	nop
 800a998:	40012c00 	.word	0x40012c00
 800a99c:	40013400 	.word	0x40013400
 800a9a0:	40014000 	.word	0x40014000
 800a9a4:	40014400 	.word	0x40014400
 800a9a8:	40014800 	.word	0x40014800

0800a9ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b087      	sub	sp, #28
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
 800a9b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6a1b      	ldr	r3, [r3, #32]
 800a9ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6a1b      	ldr	r3, [r3, #32]
 800a9c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	69db      	ldr	r3, [r3, #28]
 800a9d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a9da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	f023 0303 	bic.w	r3, r3, #3
 800a9e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	68fa      	ldr	r2, [r7, #12]
 800a9ee:	4313      	orrs	r3, r2
 800a9f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a9f2:	697b      	ldr	r3, [r7, #20]
 800a9f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a9f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a9fa:	683b      	ldr	r3, [r7, #0]
 800a9fc:	689b      	ldr	r3, [r3, #8]
 800a9fe:	021b      	lsls	r3, r3, #8
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	4a27      	ldr	r2, [pc, #156]	; (800aaa8 <TIM_OC3_SetConfig+0xfc>)
 800aa0a:	4293      	cmp	r3, r2
 800aa0c:	d003      	beq.n	800aa16 <TIM_OC3_SetConfig+0x6a>
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	4a26      	ldr	r2, [pc, #152]	; (800aaac <TIM_OC3_SetConfig+0x100>)
 800aa12:	4293      	cmp	r3, r2
 800aa14:	d10d      	bne.n	800aa32 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa16:	697b      	ldr	r3, [r7, #20]
 800aa18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa1c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	021b      	lsls	r3, r3, #8
 800aa24:	697a      	ldr	r2, [r7, #20]
 800aa26:	4313      	orrs	r3, r2
 800aa28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	4a1c      	ldr	r2, [pc, #112]	; (800aaa8 <TIM_OC3_SetConfig+0xfc>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d00f      	beq.n	800aa5a <TIM_OC3_SetConfig+0xae>
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	4a1b      	ldr	r2, [pc, #108]	; (800aaac <TIM_OC3_SetConfig+0x100>)
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	d00b      	beq.n	800aa5a <TIM_OC3_SetConfig+0xae>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	4a1a      	ldr	r2, [pc, #104]	; (800aab0 <TIM_OC3_SetConfig+0x104>)
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d007      	beq.n	800aa5a <TIM_OC3_SetConfig+0xae>
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	4a19      	ldr	r2, [pc, #100]	; (800aab4 <TIM_OC3_SetConfig+0x108>)
 800aa4e:	4293      	cmp	r3, r2
 800aa50:	d003      	beq.n	800aa5a <TIM_OC3_SetConfig+0xae>
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	4a18      	ldr	r2, [pc, #96]	; (800aab8 <TIM_OC3_SetConfig+0x10c>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d113      	bne.n	800aa82 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aa5a:	693b      	ldr	r3, [r7, #16]
 800aa5c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aa60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aa62:	693b      	ldr	r3, [r7, #16]
 800aa64:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aa68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aa6a:	683b      	ldr	r3, [r7, #0]
 800aa6c:	695b      	ldr	r3, [r3, #20]
 800aa6e:	011b      	lsls	r3, r3, #4
 800aa70:	693a      	ldr	r2, [r7, #16]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	699b      	ldr	r3, [r3, #24]
 800aa7a:	011b      	lsls	r3, r3, #4
 800aa7c:	693a      	ldr	r2, [r7, #16]
 800aa7e:	4313      	orrs	r3, r2
 800aa80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68fa      	ldr	r2, [r7, #12]
 800aa8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aa8e:	683b      	ldr	r3, [r7, #0]
 800aa90:	685a      	ldr	r2, [r3, #4]
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	697a      	ldr	r2, [r7, #20]
 800aa9a:	621a      	str	r2, [r3, #32]
}
 800aa9c:	bf00      	nop
 800aa9e:	371c      	adds	r7, #28
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr
 800aaa8:	40012c00 	.word	0x40012c00
 800aaac:	40013400 	.word	0x40013400
 800aab0:	40014000 	.word	0x40014000
 800aab4:	40014400 	.word	0x40014400
 800aab8:	40014800 	.word	0x40014800

0800aabc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	6078      	str	r0, [r7, #4]
 800aac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	6a1b      	ldr	r3, [r3, #32]
 800aad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	69db      	ldr	r3, [r3, #28]
 800aae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800aaea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800aaee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aaf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	021b      	lsls	r3, r3, #8
 800aafe:	68fa      	ldr	r2, [r7, #12]
 800ab00:	4313      	orrs	r3, r2
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	689b      	ldr	r3, [r3, #8]
 800ab10:	031b      	lsls	r3, r3, #12
 800ab12:	697a      	ldr	r2, [r7, #20]
 800ab14:	4313      	orrs	r3, r2
 800ab16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a28      	ldr	r2, [pc, #160]	; (800abbc <TIM_OC4_SetConfig+0x100>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d003      	beq.n	800ab28 <TIM_OC4_SetConfig+0x6c>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a27      	ldr	r2, [pc, #156]	; (800abc0 <TIM_OC4_SetConfig+0x104>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d10d      	bne.n	800ab44 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	68db      	ldr	r3, [r3, #12]
 800ab34:	031b      	lsls	r3, r3, #12
 800ab36:	697a      	ldr	r2, [r7, #20]
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	4a1d      	ldr	r2, [pc, #116]	; (800abbc <TIM_OC4_SetConfig+0x100>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d00f      	beq.n	800ab6c <TIM_OC4_SetConfig+0xb0>
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	4a1c      	ldr	r2, [pc, #112]	; (800abc0 <TIM_OC4_SetConfig+0x104>)
 800ab50:	4293      	cmp	r3, r2
 800ab52:	d00b      	beq.n	800ab6c <TIM_OC4_SetConfig+0xb0>
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	4a1b      	ldr	r2, [pc, #108]	; (800abc4 <TIM_OC4_SetConfig+0x108>)
 800ab58:	4293      	cmp	r3, r2
 800ab5a:	d007      	beq.n	800ab6c <TIM_OC4_SetConfig+0xb0>
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	4a1a      	ldr	r2, [pc, #104]	; (800abc8 <TIM_OC4_SetConfig+0x10c>)
 800ab60:	4293      	cmp	r3, r2
 800ab62:	d003      	beq.n	800ab6c <TIM_OC4_SetConfig+0xb0>
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a19      	ldr	r2, [pc, #100]	; (800abcc <TIM_OC4_SetConfig+0x110>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d113      	bne.n	800ab94 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab72:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ab7a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab7c:	683b      	ldr	r3, [r7, #0]
 800ab7e:	695b      	ldr	r3, [r3, #20]
 800ab80:	019b      	lsls	r3, r3, #6
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	4313      	orrs	r3, r2
 800ab86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	699b      	ldr	r3, [r3, #24]
 800ab8c:	019b      	lsls	r3, r3, #6
 800ab8e:	693a      	ldr	r2, [r7, #16]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	693a      	ldr	r2, [r7, #16]
 800ab98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	685a      	ldr	r2, [r3, #4]
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	697a      	ldr	r2, [r7, #20]
 800abac:	621a      	str	r2, [r3, #32]
}
 800abae:	bf00      	nop
 800abb0:	371c      	adds	r7, #28
 800abb2:	46bd      	mov	sp, r7
 800abb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb8:	4770      	bx	lr
 800abba:	bf00      	nop
 800abbc:	40012c00 	.word	0x40012c00
 800abc0:	40013400 	.word	0x40013400
 800abc4:	40014000 	.word	0x40014000
 800abc8:	40014400 	.word	0x40014400
 800abcc:	40014800 	.word	0x40014800

0800abd0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b087      	sub	sp, #28
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	6a1b      	ldr	r3, [r3, #32]
 800abea:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800abfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	68fa      	ldr	r2, [r7, #12]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800ac0e:	693b      	ldr	r3, [r7, #16]
 800ac10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800ac14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	689b      	ldr	r3, [r3, #8]
 800ac1a:	041b      	lsls	r3, r3, #16
 800ac1c:	693a      	ldr	r2, [r7, #16]
 800ac1e:	4313      	orrs	r3, r2
 800ac20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	4a17      	ldr	r2, [pc, #92]	; (800ac84 <TIM_OC5_SetConfig+0xb4>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d00f      	beq.n	800ac4a <TIM_OC5_SetConfig+0x7a>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	4a16      	ldr	r2, [pc, #88]	; (800ac88 <TIM_OC5_SetConfig+0xb8>)
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d00b      	beq.n	800ac4a <TIM_OC5_SetConfig+0x7a>
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	4a15      	ldr	r2, [pc, #84]	; (800ac8c <TIM_OC5_SetConfig+0xbc>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d007      	beq.n	800ac4a <TIM_OC5_SetConfig+0x7a>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a14      	ldr	r2, [pc, #80]	; (800ac90 <TIM_OC5_SetConfig+0xc0>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d003      	beq.n	800ac4a <TIM_OC5_SetConfig+0x7a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	4a13      	ldr	r2, [pc, #76]	; (800ac94 <TIM_OC5_SetConfig+0xc4>)
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d109      	bne.n	800ac5e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ac50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	695b      	ldr	r3, [r3, #20]
 800ac56:	021b      	lsls	r3, r3, #8
 800ac58:	697a      	ldr	r2, [r7, #20]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	697a      	ldr	r2, [r7, #20]
 800ac62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	68fa      	ldr	r2, [r7, #12]
 800ac68:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	685a      	ldr	r2, [r3, #4]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	693a      	ldr	r2, [r7, #16]
 800ac76:	621a      	str	r2, [r3, #32]
}
 800ac78:	bf00      	nop
 800ac7a:	371c      	adds	r7, #28
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr
 800ac84:	40012c00 	.word	0x40012c00
 800ac88:	40013400 	.word	0x40013400
 800ac8c:	40014000 	.word	0x40014000
 800ac90:	40014400 	.word	0x40014400
 800ac94:	40014800 	.word	0x40014800

0800ac98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b087      	sub	sp, #28
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
 800aca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	6a1b      	ldr	r3, [r3, #32]
 800aca6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	6a1b      	ldr	r3, [r3, #32]
 800acb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	685b      	ldr	r3, [r3, #4]
 800acb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800acc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800acca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	021b      	lsls	r3, r3, #8
 800acd2:	68fa      	ldr	r2, [r7, #12]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800acd8:	693b      	ldr	r3, [r7, #16]
 800acda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800acde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	689b      	ldr	r3, [r3, #8]
 800ace4:	051b      	lsls	r3, r3, #20
 800ace6:	693a      	ldr	r2, [r7, #16]
 800ace8:	4313      	orrs	r3, r2
 800acea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	4a18      	ldr	r2, [pc, #96]	; (800ad50 <TIM_OC6_SetConfig+0xb8>)
 800acf0:	4293      	cmp	r3, r2
 800acf2:	d00f      	beq.n	800ad14 <TIM_OC6_SetConfig+0x7c>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a17      	ldr	r2, [pc, #92]	; (800ad54 <TIM_OC6_SetConfig+0xbc>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00b      	beq.n	800ad14 <TIM_OC6_SetConfig+0x7c>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a16      	ldr	r2, [pc, #88]	; (800ad58 <TIM_OC6_SetConfig+0xc0>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d007      	beq.n	800ad14 <TIM_OC6_SetConfig+0x7c>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a15      	ldr	r2, [pc, #84]	; (800ad5c <TIM_OC6_SetConfig+0xc4>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d003      	beq.n	800ad14 <TIM_OC6_SetConfig+0x7c>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a14      	ldr	r2, [pc, #80]	; (800ad60 <TIM_OC6_SetConfig+0xc8>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d109      	bne.n	800ad28 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800ad14:	697b      	ldr	r3, [r7, #20]
 800ad16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ad1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	695b      	ldr	r3, [r3, #20]
 800ad20:	029b      	lsls	r3, r3, #10
 800ad22:	697a      	ldr	r2, [r7, #20]
 800ad24:	4313      	orrs	r3, r2
 800ad26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	697a      	ldr	r2, [r7, #20]
 800ad2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	68fa      	ldr	r2, [r7, #12]
 800ad32:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800ad34:	683b      	ldr	r3, [r7, #0]
 800ad36:	685a      	ldr	r2, [r3, #4]
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	693a      	ldr	r2, [r7, #16]
 800ad40:	621a      	str	r2, [r3, #32]
}
 800ad42:	bf00      	nop
 800ad44:	371c      	adds	r7, #28
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	40012c00 	.word	0x40012c00
 800ad54:	40013400 	.word	0x40013400
 800ad58:	40014000 	.word	0x40014000
 800ad5c:	40014400 	.word	0x40014400
 800ad60:	40014800 	.word	0x40014800

0800ad64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad64:	b480      	push	{r7}
 800ad66:	b087      	sub	sp, #28
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	60f8      	str	r0, [r7, #12]
 800ad6c:	60b9      	str	r1, [r7, #8]
 800ad6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1b      	ldr	r3, [r3, #32]
 800ad74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	6a1b      	ldr	r3, [r3, #32]
 800ad7a:	f023 0201 	bic.w	r2, r3, #1
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	699b      	ldr	r3, [r3, #24]
 800ad86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad88:	693b      	ldr	r3, [r7, #16]
 800ad8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	011b      	lsls	r3, r3, #4
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	4313      	orrs	r3, r2
 800ad98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	f023 030a 	bic.w	r3, r3, #10
 800ada0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ada2:	697a      	ldr	r2, [r7, #20]
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	4313      	orrs	r3, r2
 800ada8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	693a      	ldr	r2, [r7, #16]
 800adae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	697a      	ldr	r2, [r7, #20]
 800adb4:	621a      	str	r2, [r3, #32]
}
 800adb6:	bf00      	nop
 800adb8:	371c      	adds	r7, #28
 800adba:	46bd      	mov	sp, r7
 800adbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc0:	4770      	bx	lr

0800adc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800adc2:	b480      	push	{r7}
 800adc4:	b087      	sub	sp, #28
 800adc6:	af00      	add	r7, sp, #0
 800adc8:	60f8      	str	r0, [r7, #12]
 800adca:	60b9      	str	r1, [r7, #8]
 800adcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	6a1b      	ldr	r3, [r3, #32]
 800add2:	f023 0210 	bic.w	r2, r3, #16
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	699b      	ldr	r3, [r3, #24]
 800adde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	6a1b      	ldr	r3, [r3, #32]
 800ade4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800adec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	031b      	lsls	r3, r3, #12
 800adf2:	697a      	ldr	r2, [r7, #20]
 800adf4:	4313      	orrs	r3, r2
 800adf6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800adfe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	011b      	lsls	r3, r3, #4
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4313      	orrs	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	697a      	ldr	r2, [r7, #20]
 800ae0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	693a      	ldr	r2, [r7, #16]
 800ae14:	621a      	str	r2, [r3, #32]
}
 800ae16:	bf00      	nop
 800ae18:	371c      	adds	r7, #28
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae20:	4770      	bx	lr

0800ae22 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ae22:	b480      	push	{r7}
 800ae24:	b085      	sub	sp, #20
 800ae26:	af00      	add	r7, sp, #0
 800ae28:	6078      	str	r0, [r7, #4]
 800ae2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689b      	ldr	r3, [r3, #8]
 800ae30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ae38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ae3e:	683a      	ldr	r2, [r7, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	4313      	orrs	r3, r2
 800ae44:	f043 0307 	orr.w	r3, r3, #7
 800ae48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	68fa      	ldr	r2, [r7, #12]
 800ae4e:	609a      	str	r2, [r3, #8]
}
 800ae50:	bf00      	nop
 800ae52:	3714      	adds	r7, #20
 800ae54:	46bd      	mov	sp, r7
 800ae56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5a:	4770      	bx	lr

0800ae5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ae5c:	b480      	push	{r7}
 800ae5e:	b087      	sub	sp, #28
 800ae60:	af00      	add	r7, sp, #0
 800ae62:	60f8      	str	r0, [r7, #12]
 800ae64:	60b9      	str	r1, [r7, #8]
 800ae66:	607a      	str	r2, [r7, #4]
 800ae68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae70:	697b      	ldr	r3, [r7, #20]
 800ae72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae78:	683b      	ldr	r3, [r7, #0]
 800ae7a:	021a      	lsls	r2, r3, #8
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	431a      	orrs	r2, r3
 800ae80:	68bb      	ldr	r3, [r7, #8]
 800ae82:	4313      	orrs	r3, r2
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	697a      	ldr	r2, [r7, #20]
 800ae8e:	609a      	str	r2, [r3, #8]
}
 800ae90:	bf00      	nop
 800ae92:	371c      	adds	r7, #28
 800ae94:	46bd      	mov	sp, r7
 800ae96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9a:	4770      	bx	lr

0800ae9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	b087      	sub	sp, #28
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800aea8:	68bb      	ldr	r3, [r7, #8]
 800aeaa:	f003 031f 	and.w	r3, r3, #31
 800aeae:	2201      	movs	r2, #1
 800aeb0:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	6a1a      	ldr	r2, [r3, #32]
 800aeba:	697b      	ldr	r3, [r7, #20]
 800aebc:	43db      	mvns	r3, r3
 800aebe:	401a      	ands	r2, r3
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a1a      	ldr	r2, [r3, #32]
 800aec8:	68bb      	ldr	r3, [r7, #8]
 800aeca:	f003 031f 	and.w	r3, r3, #31
 800aece:	6879      	ldr	r1, [r7, #4]
 800aed0:	fa01 f303 	lsl.w	r3, r1, r3
 800aed4:	431a      	orrs	r2, r3
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	621a      	str	r2, [r3, #32]
}
 800aeda:	bf00      	nop
 800aedc:	371c      	adds	r7, #28
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
	...

0800aee8 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b084      	sub	sp, #16
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800aef2:	683b      	ldr	r3, [r7, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d109      	bne.n	800af0c <HAL_TIMEx_PWMN_Start+0x24>
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800aefe:	b2db      	uxtb	r3, r3
 800af00:	2b01      	cmp	r3, #1
 800af02:	bf14      	ite	ne
 800af04:	2301      	movne	r3, #1
 800af06:	2300      	moveq	r3, #0
 800af08:	b2db      	uxtb	r3, r3
 800af0a:	e022      	b.n	800af52 <HAL_TIMEx_PWMN_Start+0x6a>
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	2b04      	cmp	r3, #4
 800af10:	d109      	bne.n	800af26 <HAL_TIMEx_PWMN_Start+0x3e>
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800af18:	b2db      	uxtb	r3, r3
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	bf14      	ite	ne
 800af1e:	2301      	movne	r3, #1
 800af20:	2300      	moveq	r3, #0
 800af22:	b2db      	uxtb	r3, r3
 800af24:	e015      	b.n	800af52 <HAL_TIMEx_PWMN_Start+0x6a>
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	2b08      	cmp	r3, #8
 800af2a:	d109      	bne.n	800af40 <HAL_TIMEx_PWMN_Start+0x58>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800af32:	b2db      	uxtb	r3, r3
 800af34:	2b01      	cmp	r3, #1
 800af36:	bf14      	ite	ne
 800af38:	2301      	movne	r3, #1
 800af3a:	2300      	moveq	r3, #0
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	e008      	b.n	800af52 <HAL_TIMEx_PWMN_Start+0x6a>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800af46:	b2db      	uxtb	r3, r3
 800af48:	2b01      	cmp	r3, #1
 800af4a:	bf14      	ite	ne
 800af4c:	2301      	movne	r3, #1
 800af4e:	2300      	moveq	r3, #0
 800af50:	b2db      	uxtb	r3, r3
 800af52:	2b00      	cmp	r3, #0
 800af54:	d001      	beq.n	800af5a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e069      	b.n	800b02e <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d104      	bne.n	800af6a <HAL_TIMEx_PWMN_Start+0x82>
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	2202      	movs	r2, #2
 800af64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800af68:	e013      	b.n	800af92 <HAL_TIMEx_PWMN_Start+0xaa>
 800af6a:	683b      	ldr	r3, [r7, #0]
 800af6c:	2b04      	cmp	r3, #4
 800af6e:	d104      	bne.n	800af7a <HAL_TIMEx_PWMN_Start+0x92>
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2202      	movs	r2, #2
 800af74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800af78:	e00b      	b.n	800af92 <HAL_TIMEx_PWMN_Start+0xaa>
 800af7a:	683b      	ldr	r3, [r7, #0]
 800af7c:	2b08      	cmp	r3, #8
 800af7e:	d104      	bne.n	800af8a <HAL_TIMEx_PWMN_Start+0xa2>
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	2202      	movs	r2, #2
 800af84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800af88:	e003      	b.n	800af92 <HAL_TIMEx_PWMN_Start+0xaa>
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2202      	movs	r2, #2
 800af8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	2204      	movs	r2, #4
 800af98:	6839      	ldr	r1, [r7, #0]
 800af9a:	4618      	mov	r0, r3
 800af9c:	f000 f9d3 	bl	800b346 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800afae:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	4a20      	ldr	r2, [pc, #128]	; (800b038 <HAL_TIMEx_PWMN_Start+0x150>)
 800afb6:	4293      	cmp	r3, r2
 800afb8:	d018      	beq.n	800afec <HAL_TIMEx_PWMN_Start+0x104>
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afc2:	d013      	beq.n	800afec <HAL_TIMEx_PWMN_Start+0x104>
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4a1c      	ldr	r2, [pc, #112]	; (800b03c <HAL_TIMEx_PWMN_Start+0x154>)
 800afca:	4293      	cmp	r3, r2
 800afcc:	d00e      	beq.n	800afec <HAL_TIMEx_PWMN_Start+0x104>
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	4a1b      	ldr	r2, [pc, #108]	; (800b040 <HAL_TIMEx_PWMN_Start+0x158>)
 800afd4:	4293      	cmp	r3, r2
 800afd6:	d009      	beq.n	800afec <HAL_TIMEx_PWMN_Start+0x104>
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	4a19      	ldr	r2, [pc, #100]	; (800b044 <HAL_TIMEx_PWMN_Start+0x15c>)
 800afde:	4293      	cmp	r3, r2
 800afe0:	d004      	beq.n	800afec <HAL_TIMEx_PWMN_Start+0x104>
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4a18      	ldr	r2, [pc, #96]	; (800b048 <HAL_TIMEx_PWMN_Start+0x160>)
 800afe8:	4293      	cmp	r3, r2
 800afea:	d115      	bne.n	800b018 <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	689a      	ldr	r2, [r3, #8]
 800aff2:	4b16      	ldr	r3, [pc, #88]	; (800b04c <HAL_TIMEx_PWMN_Start+0x164>)
 800aff4:	4013      	ands	r3, r2
 800aff6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2b06      	cmp	r3, #6
 800affc:	d015      	beq.n	800b02a <HAL_TIMEx_PWMN_Start+0x142>
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b004:	d011      	beq.n	800b02a <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f042 0201 	orr.w	r2, r2, #1
 800b014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b016:	e008      	b.n	800b02a <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	681a      	ldr	r2, [r3, #0]
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f042 0201 	orr.w	r2, r2, #1
 800b026:	601a      	str	r2, [r3, #0]
 800b028:	e000      	b.n	800b02c <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b02a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b02c:	2300      	movs	r3, #0
}
 800b02e:	4618      	mov	r0, r3
 800b030:	3710      	adds	r7, #16
 800b032:	46bd      	mov	sp, r7
 800b034:	bd80      	pop	{r7, pc}
 800b036:	bf00      	nop
 800b038:	40012c00 	.word	0x40012c00
 800b03c:	40000400 	.word	0x40000400
 800b040:	40000800 	.word	0x40000800
 800b044:	40013400 	.word	0x40013400
 800b048:	40014000 	.word	0x40014000
 800b04c:	00010007 	.word	0x00010007

0800b050 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b050:	b480      	push	{r7}
 800b052:	b085      	sub	sp, #20
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b060:	2b01      	cmp	r3, #1
 800b062:	d101      	bne.n	800b068 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b064:	2302      	movs	r3, #2
 800b066:	e065      	b.n	800b134 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2201      	movs	r2, #1
 800b06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2202      	movs	r2, #2
 800b074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	4a2c      	ldr	r2, [pc, #176]	; (800b140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b08e:	4293      	cmp	r3, r2
 800b090:	d004      	beq.n	800b09c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a2b      	ldr	r2, [pc, #172]	; (800b144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b098:	4293      	cmp	r3, r2
 800b09a:	d108      	bne.n	800b0ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b0a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b0a4:	683b      	ldr	r3, [r7, #0]
 800b0a6:	685b      	ldr	r3, [r3, #4]
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b0b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b0ba:	683b      	ldr	r3, [r7, #0]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	68fa      	ldr	r2, [r7, #12]
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	68fa      	ldr	r2, [r7, #12]
 800b0ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a1b      	ldr	r2, [pc, #108]	; (800b140 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d018      	beq.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0de:	d013      	beq.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	4a18      	ldr	r2, [pc, #96]	; (800b148 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800b0e6:	4293      	cmp	r3, r2
 800b0e8:	d00e      	beq.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	4a17      	ldr	r2, [pc, #92]	; (800b14c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800b0f0:	4293      	cmp	r3, r2
 800b0f2:	d009      	beq.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	4a12      	ldr	r2, [pc, #72]	; (800b144 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800b0fa:	4293      	cmp	r3, r2
 800b0fc:	d004      	beq.n	800b108 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	681b      	ldr	r3, [r3, #0]
 800b102:	4a13      	ldr	r2, [pc, #76]	; (800b150 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d10c      	bne.n	800b122 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b10e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	689b      	ldr	r3, [r3, #8]
 800b114:	68ba      	ldr	r2, [r7, #8]
 800b116:	4313      	orrs	r3, r2
 800b118:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	68ba      	ldr	r2, [r7, #8]
 800b120:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2201      	movs	r2, #1
 800b126:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	2200      	movs	r2, #0
 800b12e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b132:	2300      	movs	r3, #0
}
 800b134:	4618      	mov	r0, r3
 800b136:	3714      	adds	r7, #20
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr
 800b140:	40012c00 	.word	0x40012c00
 800b144:	40013400 	.word	0x40013400
 800b148:	40000400 	.word	0x40000400
 800b14c:	40000800 	.word	0x40000800
 800b150:	40014000 	.word	0x40014000

0800b154 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b154:	b480      	push	{r7}
 800b156:	b085      	sub	sp, #20
 800b158:	af00      	add	r7, sp, #0
 800b15a:	6078      	str	r0, [r7, #4]
 800b15c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b15e:	2300      	movs	r3, #0
 800b160:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d101      	bne.n	800b170 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b16c:	2302      	movs	r3, #2
 800b16e:	e087      	b.n	800b280 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	2201      	movs	r2, #1
 800b174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b17e:	683b      	ldr	r3, [r7, #0]
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	4313      	orrs	r3, r2
 800b184:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b18c:	683b      	ldr	r3, [r7, #0]
 800b18e:	689b      	ldr	r3, [r3, #8]
 800b190:	4313      	orrs	r3, r2
 800b192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	4313      	orrs	r3, r2
 800b1a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b1a8:	683b      	ldr	r3, [r7, #0]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	691b      	ldr	r3, [r3, #16]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b1c4:	683b      	ldr	r3, [r7, #0]
 800b1c6:	695b      	ldr	r3, [r3, #20]
 800b1c8:	4313      	orrs	r3, r2
 800b1ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b1d2:	683b      	ldr	r3, [r7, #0]
 800b1d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1d6:	4313      	orrs	r3, r2
 800b1d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b1e0:	683b      	ldr	r3, [r7, #0]
 800b1e2:	699b      	ldr	r3, [r3, #24]
 800b1e4:	041b      	lsls	r3, r3, #16
 800b1e6:	4313      	orrs	r3, r2
 800b1e8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a27      	ldr	r2, [pc, #156]	; (800b28c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b1f0:	4293      	cmp	r3, r2
 800b1f2:	d004      	beq.n	800b1fe <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	4a25      	ldr	r2, [pc, #148]	; (800b290 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b1fa:	4293      	cmp	r3, r2
 800b1fc:	d106      	bne.n	800b20c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800b204:	683b      	ldr	r3, [r7, #0]
 800b206:	69db      	ldr	r3, [r3, #28]
 800b208:	4313      	orrs	r3, r2
 800b20a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	4a1e      	ldr	r2, [pc, #120]	; (800b28c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b212:	4293      	cmp	r3, r2
 800b214:	d004      	beq.n	800b220 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4a1d      	ldr	r2, [pc, #116]	; (800b290 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b21c:	4293      	cmp	r3, r2
 800b21e:	d126      	bne.n	800b26e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b226:	683b      	ldr	r3, [r7, #0]
 800b228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b22a:	051b      	lsls	r3, r3, #20
 800b22c:	4313      	orrs	r3, r2
 800b22e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b236:	683b      	ldr	r3, [r7, #0]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	4313      	orrs	r3, r2
 800b23c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b244:	683b      	ldr	r3, [r7, #0]
 800b246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b248:	4313      	orrs	r3, r2
 800b24a:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	681b      	ldr	r3, [r3, #0]
 800b250:	4a0e      	ldr	r2, [pc, #56]	; (800b28c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 800b252:	4293      	cmp	r3, r2
 800b254:	d004      	beq.n	800b260 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a0d      	ldr	r2, [pc, #52]	; (800b290 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d106      	bne.n	800b26e <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800b266:	683b      	ldr	r3, [r7, #0]
 800b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26a:	4313      	orrs	r3, r2
 800b26c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	68fa      	ldr	r2, [r7, #12]
 800b274:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2200      	movs	r2, #0
 800b27a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3714      	adds	r7, #20
 800b284:	46bd      	mov	sp, r7
 800b286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28a:	4770      	bx	lr
 800b28c:	40012c00 	.word	0x40012c00
 800b290:	40013400 	.word	0x40013400

0800b294 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800b2aa:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 800b2ac:	2300      	movs	r3, #0
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	370c      	adds	r7, #12
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b8:	4770      	bx	lr

0800b2ba <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b2ba:	b480      	push	{r7}
 800b2bc:	b083      	sub	sp, #12
 800b2be:	af00      	add	r7, sp, #0
 800b2c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b2c2:	bf00      	nop
 800b2c4:	370c      	adds	r7, #12
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b083      	sub	sp, #12
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b2d6:	bf00      	nop
 800b2d8:	370c      	adds	r7, #12
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e0:	4770      	bx	lr

0800b2e2 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b2e2:	b480      	push	{r7}
 800b2e4:	b083      	sub	sp, #12
 800b2e6:	af00      	add	r7, sp, #0
 800b2e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b2ea:	bf00      	nop
 800b2ec:	370c      	adds	r7, #12
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr

0800b2f6 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b2f6:	b480      	push	{r7}
 800b2f8:	b083      	sub	sp, #12
 800b2fa:	af00      	add	r7, sp, #0
 800b2fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b2fe:	bf00      	nop
 800b300:	370c      	adds	r7, #12
 800b302:	46bd      	mov	sp, r7
 800b304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b308:	4770      	bx	lr

0800b30a <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b30a:	b480      	push	{r7}
 800b30c:	b083      	sub	sp, #12
 800b30e:	af00      	add	r7, sp, #0
 800b310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b312:	bf00      	nop
 800b314:	370c      	adds	r7, #12
 800b316:	46bd      	mov	sp, r7
 800b318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31c:	4770      	bx	lr

0800b31e <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b31e:	b480      	push	{r7}
 800b320:	b083      	sub	sp, #12
 800b322:	af00      	add	r7, sp, #0
 800b324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b326:	bf00      	nop
 800b328:	370c      	adds	r7, #12
 800b32a:	46bd      	mov	sp, r7
 800b32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b330:	4770      	bx	lr

0800b332 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b332:	b480      	push	{r7}
 800b334:	b083      	sub	sp, #12
 800b336:	af00      	add	r7, sp, #0
 800b338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b33a:	bf00      	nop
 800b33c:	370c      	adds	r7, #12
 800b33e:	46bd      	mov	sp, r7
 800b340:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b344:	4770      	bx	lr

0800b346 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800b346:	b480      	push	{r7}
 800b348:	b087      	sub	sp, #28
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	60b9      	str	r1, [r7, #8]
 800b350:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b352:	68bb      	ldr	r3, [r7, #8]
 800b354:	f003 031f 	and.w	r3, r3, #31
 800b358:	2204      	movs	r2, #4
 800b35a:	fa02 f303 	lsl.w	r3, r2, r3
 800b35e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	6a1a      	ldr	r2, [r3, #32]
 800b364:	697b      	ldr	r3, [r7, #20]
 800b366:	43db      	mvns	r3, r3
 800b368:	401a      	ands	r2, r3
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	6a1a      	ldr	r2, [r3, #32]
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	f003 031f 	and.w	r3, r3, #31
 800b378:	6879      	ldr	r1, [r7, #4]
 800b37a:	fa01 f303 	lsl.w	r3, r1, r3
 800b37e:	431a      	orrs	r2, r3
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	621a      	str	r2, [r3, #32]
}
 800b384:	bf00      	nop
 800b386:	371c      	adds	r7, #28
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr

0800b390 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b082      	sub	sp, #8
 800b394:	af00      	add	r7, sp, #0
 800b396:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e042      	b.n	800b428 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d106      	bne.n	800b3ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2200      	movs	r2, #0
 800b3b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f7fa fac3 	bl	8005940 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	2224      	movs	r2, #36	; 0x24
 800b3be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	f022 0201 	bic.w	r2, r2, #1
 800b3d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b3d2:	6878      	ldr	r0, [r7, #4]
 800b3d4:	f000 fb5c 	bl	800ba90 <UART_SetConfig>
 800b3d8:	4603      	mov	r3, r0
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d101      	bne.n	800b3e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	e022      	b.n	800b428 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d002      	beq.n	800b3f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b3ea:	6878      	ldr	r0, [r7, #4]
 800b3ec:	f000 fe1c 	bl	800c028 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	685a      	ldr	r2, [r3, #4]
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b3fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	689a      	ldr	r2, [r3, #8]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b40e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	681a      	ldr	r2, [r3, #0]
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f042 0201 	orr.w	r2, r2, #1
 800b41e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 fea3 	bl	800c16c <UART_CheckIdleState>
 800b426:	4603      	mov	r3, r0
}
 800b428:	4618      	mov	r0, r3
 800b42a:	3708      	adds	r7, #8
 800b42c:	46bd      	mov	sp, r7
 800b42e:	bd80      	pop	{r7, pc}

0800b430 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	; 0x28
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	603b      	str	r3, [r7, #0]
 800b43c:	4613      	mov	r3, r2
 800b43e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b446:	2b20      	cmp	r3, #32
 800b448:	f040 8083 	bne.w	800b552 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d002      	beq.n	800b458 <HAL_UART_Transmit+0x28>
 800b452:	88fb      	ldrh	r3, [r7, #6]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d101      	bne.n	800b45c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b458:	2301      	movs	r3, #1
 800b45a:	e07b      	b.n	800b554 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b462:	2b01      	cmp	r3, #1
 800b464:	d101      	bne.n	800b46a <HAL_UART_Transmit+0x3a>
 800b466:	2302      	movs	r3, #2
 800b468:	e074      	b.n	800b554 <HAL_UART_Transmit+0x124>
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	2201      	movs	r2, #1
 800b46e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	2221      	movs	r2, #33	; 0x21
 800b47e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b482:	f7fa fb77 	bl	8005b74 <HAL_GetTick>
 800b486:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	88fa      	ldrh	r2, [r7, #6]
 800b48c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	88fa      	ldrh	r2, [r7, #6]
 800b494:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	689b      	ldr	r3, [r3, #8]
 800b49c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b4a0:	d108      	bne.n	800b4b4 <HAL_UART_Transmit+0x84>
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	691b      	ldr	r3, [r3, #16]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d104      	bne.n	800b4b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800b4ae:	68bb      	ldr	r3, [r7, #8]
 800b4b0:	61bb      	str	r3, [r7, #24]
 800b4b2:	e003      	b.n	800b4bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800b4c4:	e02c      	b.n	800b520 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b4c6:	683b      	ldr	r3, [r7, #0]
 800b4c8:	9300      	str	r3, [sp, #0]
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	2200      	movs	r2, #0
 800b4ce:	2180      	movs	r1, #128	; 0x80
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 fe96 	bl	800c202 <UART_WaitOnFlagUntilTimeout>
 800b4d6:	4603      	mov	r3, r0
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d001      	beq.n	800b4e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800b4dc:	2303      	movs	r3, #3
 800b4de:	e039      	b.n	800b554 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800b4e0:	69fb      	ldr	r3, [r7, #28]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d10b      	bne.n	800b4fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b4e6:	69bb      	ldr	r3, [r7, #24]
 800b4e8:	881b      	ldrh	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b4f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b4f6:	69bb      	ldr	r3, [r7, #24]
 800b4f8:	3302      	adds	r3, #2
 800b4fa:	61bb      	str	r3, [r7, #24]
 800b4fc:	e007      	b.n	800b50e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b4fe:	69fb      	ldr	r3, [r7, #28]
 800b500:	781a      	ldrb	r2, [r3, #0]
 800b502:	68fb      	ldr	r3, [r7, #12]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b508:	69fb      	ldr	r3, [r7, #28]
 800b50a:	3301      	adds	r3, #1
 800b50c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b514:	b29b      	uxth	r3, r3
 800b516:	3b01      	subs	r3, #1
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b526:	b29b      	uxth	r3, r3
 800b528:	2b00      	cmp	r3, #0
 800b52a:	d1cc      	bne.n	800b4c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b52c:	683b      	ldr	r3, [r7, #0]
 800b52e:	9300      	str	r3, [sp, #0]
 800b530:	697b      	ldr	r3, [r7, #20]
 800b532:	2200      	movs	r2, #0
 800b534:	2140      	movs	r1, #64	; 0x40
 800b536:	68f8      	ldr	r0, [r7, #12]
 800b538:	f000 fe63 	bl	800c202 <UART_WaitOnFlagUntilTimeout>
 800b53c:	4603      	mov	r3, r0
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d001      	beq.n	800b546 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800b542:	2303      	movs	r3, #3
 800b544:	e006      	b.n	800b554 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2220      	movs	r2, #32
 800b54a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800b54e:	2300      	movs	r3, #0
 800b550:	e000      	b.n	800b554 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800b552:	2302      	movs	r3, #2
  }
}
 800b554:	4618      	mov	r0, r3
 800b556:	3720      	adds	r7, #32
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}

0800b55c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b55c:	b580      	push	{r7, lr}
 800b55e:	b084      	sub	sp, #16
 800b560:	af00      	add	r7, sp, #0
 800b562:	60f8      	str	r0, [r7, #12]
 800b564:	60b9      	str	r1, [r7, #8]
 800b566:	4613      	mov	r3, r2
 800b568:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b570:	2b20      	cmp	r3, #32
 800b572:	d131      	bne.n	800b5d8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <HAL_UART_Receive_IT+0x24>
 800b57a:	88fb      	ldrh	r3, [r7, #6]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b580:	2301      	movs	r3, #1
 800b582:	e02a      	b.n	800b5da <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800b58a:	2b01      	cmp	r3, #1
 800b58c:	d101      	bne.n	800b592 <HAL_UART_Receive_IT+0x36>
 800b58e:	2302      	movs	r3, #2
 800b590:	e023      	b.n	800b5da <HAL_UART_Receive_IT+0x7e>
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	2201      	movs	r2, #1
 800b596:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	2200      	movs	r2, #0
 800b59e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	4a0f      	ldr	r2, [pc, #60]	; (800b5e4 <HAL_UART_Receive_IT+0x88>)
 800b5a6:	4293      	cmp	r3, r2
 800b5a8:	d00e      	beq.n	800b5c8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	685b      	ldr	r3, [r3, #4]
 800b5b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d007      	beq.n	800b5c8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	681a      	ldr	r2, [r3, #0]
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800b5c6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b5c8:	88fb      	ldrh	r3, [r7, #6]
 800b5ca:	461a      	mov	r2, r3
 800b5cc:	68b9      	ldr	r1, [r7, #8]
 800b5ce:	68f8      	ldr	r0, [r7, #12]
 800b5d0:	f000 fe98 	bl	800c304 <UART_Start_Receive_IT>
 800b5d4:	4603      	mov	r3, r0
 800b5d6:	e000      	b.n	800b5da <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b5d8:	2302      	movs	r3, #2
  }
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}
 800b5e2:	bf00      	nop
 800b5e4:	40008000 	.word	0x40008000

0800b5e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	69db      	ldr	r3, [r3, #28]
 800b5f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b608:	69fa      	ldr	r2, [r7, #28]
 800b60a:	f640 030f 	movw	r3, #2063	; 0x80f
 800b60e:	4013      	ands	r3, r2
 800b610:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b612:	693b      	ldr	r3, [r7, #16]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d118      	bne.n	800b64a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b618:	69fb      	ldr	r3, [r7, #28]
 800b61a:	f003 0320 	and.w	r3, r3, #32
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d013      	beq.n	800b64a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b622:	69bb      	ldr	r3, [r7, #24]
 800b624:	f003 0320 	and.w	r3, r3, #32
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d104      	bne.n	800b636 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b62c:	697b      	ldr	r3, [r7, #20]
 800b62e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b632:	2b00      	cmp	r3, #0
 800b634:	d009      	beq.n	800b64a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	f000 81fb 	beq.w	800ba36 <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	4798      	blx	r3
      }
      return;
 800b648:	e1f5      	b.n	800ba36 <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b64a:	693b      	ldr	r3, [r7, #16]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	f000 80ef 	beq.w	800b830 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b652:	697a      	ldr	r2, [r7, #20]
 800b654:	4b73      	ldr	r3, [pc, #460]	; (800b824 <HAL_UART_IRQHandler+0x23c>)
 800b656:	4013      	ands	r3, r2
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d105      	bne.n	800b668 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b65c:	69ba      	ldr	r2, [r7, #24]
 800b65e:	4b72      	ldr	r3, [pc, #456]	; (800b828 <HAL_UART_IRQHandler+0x240>)
 800b660:	4013      	ands	r3, r2
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 80e4 	beq.w	800b830 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b668:	69fb      	ldr	r3, [r7, #28]
 800b66a:	f003 0301 	and.w	r3, r3, #1
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d010      	beq.n	800b694 <HAL_UART_IRQHandler+0xac>
 800b672:	69bb      	ldr	r3, [r7, #24]
 800b674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d00b      	beq.n	800b694 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	2201      	movs	r2, #1
 800b682:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b68a:	f043 0201 	orr.w	r2, r3, #1
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b694:	69fb      	ldr	r3, [r7, #28]
 800b696:	f003 0302 	and.w	r3, r3, #2
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d010      	beq.n	800b6c0 <HAL_UART_IRQHandler+0xd8>
 800b69e:	697b      	ldr	r3, [r7, #20]
 800b6a0:	f003 0301 	and.w	r3, r3, #1
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d00b      	beq.n	800b6c0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	2202      	movs	r2, #2
 800b6ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6b6:	f043 0204 	orr.w	r2, r3, #4
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b6c0:	69fb      	ldr	r3, [r7, #28]
 800b6c2:	f003 0304 	and.w	r3, r3, #4
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d010      	beq.n	800b6ec <HAL_UART_IRQHandler+0x104>
 800b6ca:	697b      	ldr	r3, [r7, #20]
 800b6cc:	f003 0301 	and.w	r3, r3, #1
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00b      	beq.n	800b6ec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	2204      	movs	r2, #4
 800b6da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b6e2:	f043 0202 	orr.w	r2, r3, #2
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b6ec:	69fb      	ldr	r3, [r7, #28]
 800b6ee:	f003 0308 	and.w	r3, r3, #8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d015      	beq.n	800b722 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b6f6:	69bb      	ldr	r3, [r7, #24]
 800b6f8:	f003 0320 	and.w	r3, r3, #32
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d104      	bne.n	800b70a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b700:	697a      	ldr	r2, [r7, #20]
 800b702:	4b48      	ldr	r3, [pc, #288]	; (800b824 <HAL_UART_IRQHandler+0x23c>)
 800b704:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00b      	beq.n	800b722 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	2208      	movs	r2, #8
 800b710:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b718:	f043 0208 	orr.w	r2, r3, #8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d011      	beq.n	800b750 <HAL_UART_IRQHandler+0x168>
 800b72c:	69bb      	ldr	r3, [r7, #24]
 800b72e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b732:	2b00      	cmp	r3, #0
 800b734:	d00c      	beq.n	800b750 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b73e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b746:	f043 0220 	orr.w	r2, r3, #32
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 816f 	beq.w	800ba3a <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b75c:	69fb      	ldr	r3, [r7, #28]
 800b75e:	f003 0320 	and.w	r3, r3, #32
 800b762:	2b00      	cmp	r3, #0
 800b764:	d011      	beq.n	800b78a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	f003 0320 	and.w	r3, r3, #32
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	d104      	bne.n	800b77a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b770:	697b      	ldr	r3, [r7, #20]
 800b772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b776:	2b00      	cmp	r3, #0
 800b778:	d007      	beq.n	800b78a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d003      	beq.n	800b78a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b790:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b79c:	2b40      	cmp	r3, #64	; 0x40
 800b79e:	d004      	beq.n	800b7aa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	d031      	beq.n	800b80e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b7aa:	6878      	ldr	r0, [r7, #4]
 800b7ac:	f000 fe68 	bl	800c480 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	689b      	ldr	r3, [r3, #8]
 800b7b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b7ba:	2b40      	cmp	r3, #64	; 0x40
 800b7bc:	d123      	bne.n	800b806 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	689a      	ldr	r2, [r3, #8]
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d013      	beq.n	800b7fe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7da:	4a14      	ldr	r2, [pc, #80]	; (800b82c <HAL_UART_IRQHandler+0x244>)
 800b7dc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	f7fb feaa 	bl	800753c <HAL_DMA_Abort_IT>
 800b7e8:	4603      	mov	r3, r0
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d017      	beq.n	800b81e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f4:	687a      	ldr	r2, [r7, #4]
 800b7f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800b7f8:	4610      	mov	r0, r2
 800b7fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b7fc:	e00f      	b.n	800b81e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f930 	bl	800ba64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b804:	e00b      	b.n	800b81e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b806:	6878      	ldr	r0, [r7, #4]
 800b808:	f000 f92c 	bl	800ba64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b80c:	e007      	b.n	800b81e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 f928 	bl	800ba64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b81c:	e10d      	b.n	800ba3a <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b81e:	bf00      	nop
    return;
 800b820:	e10b      	b.n	800ba3a <HAL_UART_IRQHandler+0x452>
 800b822:	bf00      	nop
 800b824:	10000001 	.word	0x10000001
 800b828:	04000120 	.word	0x04000120
 800b82c:	0800c4e5 	.word	0x0800c4e5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b834:	2b01      	cmp	r3, #1
 800b836:	f040 80ab 	bne.w	800b990 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	f003 0310 	and.w	r3, r3, #16
 800b840:	2b00      	cmp	r3, #0
 800b842:	f000 80a5 	beq.w	800b990 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	f003 0310 	and.w	r3, r3, #16
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	f000 809f 	beq.w	800b990 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	2210      	movs	r2, #16
 800b858:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	689b      	ldr	r3, [r3, #8]
 800b860:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b864:	2b40      	cmp	r3, #64	; 0x40
 800b866:	d155      	bne.n	800b914 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	685b      	ldr	r3, [r3, #4]
 800b870:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 800b872:	893b      	ldrh	r3, [r7, #8]
 800b874:	2b00      	cmp	r3, #0
 800b876:	f000 80e2 	beq.w	800ba3e <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b880:	893a      	ldrh	r2, [r7, #8]
 800b882:	429a      	cmp	r2, r3
 800b884:	f080 80db 	bcs.w	800ba3e <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	893a      	ldrh	r2, [r7, #8]
 800b88c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	f003 0320 	and.w	r3, r3, #32
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d12b      	bne.n	800b8f8 <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b8ae:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689a      	ldr	r2, [r3, #8]
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f022 0201 	bic.w	r2, r2, #1
 800b8be:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	689a      	ldr	r2, [r3, #8]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8ce:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2220      	movs	r2, #32
 800b8d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	681a      	ldr	r2, [r3, #0]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f022 0210 	bic.w	r2, r2, #16
 800b8ec:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fb fdc9 	bl	800748a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b904:	b29b      	uxth	r3, r3
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	b29b      	uxth	r3, r3
 800b90a:	4619      	mov	r1, r3
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f8b3 	bl	800ba78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b912:	e094      	b.n	800ba3e <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b920:	b29b      	uxth	r3, r3
 800b922:	1ad3      	subs	r3, r2, r3
 800b924:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b92c:	b29b      	uxth	r3, r3
 800b92e:	2b00      	cmp	r3, #0
 800b930:	f000 8087 	beq.w	800ba42 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 800b934:	897b      	ldrh	r3, [r7, #10]
 800b936:	2b00      	cmp	r3, #0
 800b938:	f000 8083 	beq.w	800ba42 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681a      	ldr	r2, [r3, #0]
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b94a:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	687a      	ldr	r2, [r7, #4]
 800b954:	6812      	ldr	r2, [r2, #0]
 800b956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b95a:	f023 0301 	bic.w	r3, r3, #1
 800b95e:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2220      	movs	r2, #32
 800b964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2200      	movs	r2, #0
 800b96c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	681a      	ldr	r2, [r3, #0]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f022 0210 	bic.w	r2, r2, #16
 800b982:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b984:	897b      	ldrh	r3, [r7, #10]
 800b986:	4619      	mov	r1, r3
 800b988:	6878      	ldr	r0, [r7, #4]
 800b98a:	f000 f875 	bl	800ba78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b98e:	e058      	b.n	800ba42 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b990:	69fb      	ldr	r3, [r7, #28]
 800b992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b996:	2b00      	cmp	r3, #0
 800b998:	d00d      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x3ce>
 800b99a:	697b      	ldr	r3, [r7, #20]
 800b99c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d008      	beq.n	800b9b6 <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b9ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f001 f8a4 	bl	800cafc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b9b4:	e048      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b9b6:	69fb      	ldr	r3, [r7, #28]
 800b9b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d012      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d104      	bne.n	800b9d4 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b9ca:	697b      	ldr	r3, [r7, #20]
 800b9cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d008      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d034      	beq.n	800ba46 <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b9e0:	6878      	ldr	r0, [r7, #4]
 800b9e2:	4798      	blx	r3
    }
    return;
 800b9e4:	e02f      	b.n	800ba46 <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b9e6:	69fb      	ldr	r3, [r7, #28]
 800b9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d008      	beq.n	800ba02 <HAL_UART_IRQHandler+0x41a>
 800b9f0:	69bb      	ldr	r3, [r7, #24]
 800b9f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d003      	beq.n	800ba02 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fd88 	bl	800c510 <UART_EndTransmit_IT>
    return;
 800ba00:	e022      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800ba02:	69fb      	ldr	r3, [r7, #28]
 800ba04:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d008      	beq.n	800ba1e <HAL_UART_IRQHandler+0x436>
 800ba0c:	69bb      	ldr	r3, [r7, #24]
 800ba0e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d003      	beq.n	800ba1e <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	f001 f884 	bl	800cb24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba1c:	e014      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800ba1e:	69fb      	ldr	r3, [r7, #28]
 800ba20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d00f      	beq.n	800ba48 <HAL_UART_IRQHandler+0x460>
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	da0c      	bge.n	800ba48 <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f001 f86e 	bl	800cb10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ba34:	e008      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
      return;
 800ba36:	bf00      	nop
 800ba38:	e006      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
    return;
 800ba3a:	bf00      	nop
 800ba3c:	e004      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
      return;
 800ba3e:	bf00      	nop
 800ba40:	e002      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
      return;
 800ba42:	bf00      	nop
 800ba44:	e000      	b.n	800ba48 <HAL_UART_IRQHandler+0x460>
    return;
 800ba46:	bf00      	nop
  }
}
 800ba48:	3720      	adds	r7, #32
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	bd80      	pop	{r7, pc}
 800ba4e:	bf00      	nop

0800ba50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	460b      	mov	r3, r1
 800ba82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba84:	bf00      	nop
 800ba86:	370c      	adds	r7, #12
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8e:	4770      	bx	lr

0800ba90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ba90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ba94:	b08c      	sub	sp, #48	; 0x30
 800ba96:	af00      	add	r7, sp, #0
 800ba98:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	689a      	ldr	r2, [r3, #8]
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	691b      	ldr	r3, [r3, #16]
 800baa8:	431a      	orrs	r2, r3
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	431a      	orrs	r2, r3
 800bab0:	697b      	ldr	r3, [r7, #20]
 800bab2:	69db      	ldr	r3, [r3, #28]
 800bab4:	4313      	orrs	r3, r2
 800bab6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	681a      	ldr	r2, [r3, #0]
 800babe:	4bab      	ldr	r3, [pc, #684]	; (800bd6c <UART_SetConfig+0x2dc>)
 800bac0:	4013      	ands	r3, r2
 800bac2:	697a      	ldr	r2, [r7, #20]
 800bac4:	6812      	ldr	r2, [r2, #0]
 800bac6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bac8:	430b      	orrs	r3, r1
 800baca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bacc:	697b      	ldr	r3, [r7, #20]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bad6:	697b      	ldr	r3, [r7, #20]
 800bad8:	68da      	ldr	r2, [r3, #12]
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	430a      	orrs	r2, r1
 800bae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	699b      	ldr	r3, [r3, #24]
 800bae6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bae8:	697b      	ldr	r3, [r7, #20]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	4aa0      	ldr	r2, [pc, #640]	; (800bd70 <UART_SetConfig+0x2e0>)
 800baee:	4293      	cmp	r3, r2
 800baf0:	d004      	beq.n	800bafc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	6a1b      	ldr	r3, [r3, #32]
 800baf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800baf8:	4313      	orrs	r3, r2
 800bafa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bafc:	697b      	ldr	r3, [r7, #20]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	689b      	ldr	r3, [r3, #8]
 800bb02:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800bb06:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800bb0a:	697a      	ldr	r2, [r7, #20]
 800bb0c:	6812      	ldr	r2, [r2, #0]
 800bb0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb10:	430b      	orrs	r3, r1
 800bb12:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb14:	697b      	ldr	r3, [r7, #20]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb1a:	f023 010f 	bic.w	r1, r3, #15
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	430a      	orrs	r2, r1
 800bb28:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	4a91      	ldr	r2, [pc, #580]	; (800bd74 <UART_SetConfig+0x2e4>)
 800bb30:	4293      	cmp	r3, r2
 800bb32:	d125      	bne.n	800bb80 <UART_SetConfig+0xf0>
 800bb34:	4b90      	ldr	r3, [pc, #576]	; (800bd78 <UART_SetConfig+0x2e8>)
 800bb36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb3a:	f003 0303 	and.w	r3, r3, #3
 800bb3e:	2b03      	cmp	r3, #3
 800bb40:	d81a      	bhi.n	800bb78 <UART_SetConfig+0xe8>
 800bb42:	a201      	add	r2, pc, #4	; (adr r2, 800bb48 <UART_SetConfig+0xb8>)
 800bb44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb48:	0800bb59 	.word	0x0800bb59
 800bb4c:	0800bb69 	.word	0x0800bb69
 800bb50:	0800bb61 	.word	0x0800bb61
 800bb54:	0800bb71 	.word	0x0800bb71
 800bb58:	2301      	movs	r3, #1
 800bb5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb5e:	e0d6      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bb60:	2302      	movs	r3, #2
 800bb62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb66:	e0d2      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bb68:	2304      	movs	r3, #4
 800bb6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb6e:	e0ce      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bb70:	2308      	movs	r3, #8
 800bb72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb76:	e0ca      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bb78:	2310      	movs	r3, #16
 800bb7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bb7e:	e0c6      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bb80:	697b      	ldr	r3, [r7, #20]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	4a7d      	ldr	r2, [pc, #500]	; (800bd7c <UART_SetConfig+0x2ec>)
 800bb86:	4293      	cmp	r3, r2
 800bb88:	d138      	bne.n	800bbfc <UART_SetConfig+0x16c>
 800bb8a:	4b7b      	ldr	r3, [pc, #492]	; (800bd78 <UART_SetConfig+0x2e8>)
 800bb8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb90:	f003 030c 	and.w	r3, r3, #12
 800bb94:	2b0c      	cmp	r3, #12
 800bb96:	d82d      	bhi.n	800bbf4 <UART_SetConfig+0x164>
 800bb98:	a201      	add	r2, pc, #4	; (adr r2, 800bba0 <UART_SetConfig+0x110>)
 800bb9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb9e:	bf00      	nop
 800bba0:	0800bbd5 	.word	0x0800bbd5
 800bba4:	0800bbf5 	.word	0x0800bbf5
 800bba8:	0800bbf5 	.word	0x0800bbf5
 800bbac:	0800bbf5 	.word	0x0800bbf5
 800bbb0:	0800bbe5 	.word	0x0800bbe5
 800bbb4:	0800bbf5 	.word	0x0800bbf5
 800bbb8:	0800bbf5 	.word	0x0800bbf5
 800bbbc:	0800bbf5 	.word	0x0800bbf5
 800bbc0:	0800bbdd 	.word	0x0800bbdd
 800bbc4:	0800bbf5 	.word	0x0800bbf5
 800bbc8:	0800bbf5 	.word	0x0800bbf5
 800bbcc:	0800bbf5 	.word	0x0800bbf5
 800bbd0:	0800bbed 	.word	0x0800bbed
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbda:	e098      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bbdc:	2302      	movs	r3, #2
 800bbde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbe2:	e094      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bbe4:	2304      	movs	r3, #4
 800bbe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbea:	e090      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bbec:	2308      	movs	r3, #8
 800bbee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbf2:	e08c      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bbf4:	2310      	movs	r3, #16
 800bbf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bbfa:	e088      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bbfc:	697b      	ldr	r3, [r7, #20]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	4a5f      	ldr	r2, [pc, #380]	; (800bd80 <UART_SetConfig+0x2f0>)
 800bc02:	4293      	cmp	r3, r2
 800bc04:	d125      	bne.n	800bc52 <UART_SetConfig+0x1c2>
 800bc06:	4b5c      	ldr	r3, [pc, #368]	; (800bd78 <UART_SetConfig+0x2e8>)
 800bc08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc0c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bc10:	2b30      	cmp	r3, #48	; 0x30
 800bc12:	d016      	beq.n	800bc42 <UART_SetConfig+0x1b2>
 800bc14:	2b30      	cmp	r3, #48	; 0x30
 800bc16:	d818      	bhi.n	800bc4a <UART_SetConfig+0x1ba>
 800bc18:	2b20      	cmp	r3, #32
 800bc1a:	d00a      	beq.n	800bc32 <UART_SetConfig+0x1a2>
 800bc1c:	2b20      	cmp	r3, #32
 800bc1e:	d814      	bhi.n	800bc4a <UART_SetConfig+0x1ba>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d002      	beq.n	800bc2a <UART_SetConfig+0x19a>
 800bc24:	2b10      	cmp	r3, #16
 800bc26:	d008      	beq.n	800bc3a <UART_SetConfig+0x1aa>
 800bc28:	e00f      	b.n	800bc4a <UART_SetConfig+0x1ba>
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc30:	e06d      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc32:	2302      	movs	r3, #2
 800bc34:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc38:	e069      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc3a:	2304      	movs	r3, #4
 800bc3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc40:	e065      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc42:	2308      	movs	r3, #8
 800bc44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc48:	e061      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc4a:	2310      	movs	r3, #16
 800bc4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc50:	e05d      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4a4b      	ldr	r2, [pc, #300]	; (800bd84 <UART_SetConfig+0x2f4>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d125      	bne.n	800bca8 <UART_SetConfig+0x218>
 800bc5c:	4b46      	ldr	r3, [pc, #280]	; (800bd78 <UART_SetConfig+0x2e8>)
 800bc5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bc66:	2bc0      	cmp	r3, #192	; 0xc0
 800bc68:	d016      	beq.n	800bc98 <UART_SetConfig+0x208>
 800bc6a:	2bc0      	cmp	r3, #192	; 0xc0
 800bc6c:	d818      	bhi.n	800bca0 <UART_SetConfig+0x210>
 800bc6e:	2b80      	cmp	r3, #128	; 0x80
 800bc70:	d00a      	beq.n	800bc88 <UART_SetConfig+0x1f8>
 800bc72:	2b80      	cmp	r3, #128	; 0x80
 800bc74:	d814      	bhi.n	800bca0 <UART_SetConfig+0x210>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d002      	beq.n	800bc80 <UART_SetConfig+0x1f0>
 800bc7a:	2b40      	cmp	r3, #64	; 0x40
 800bc7c:	d008      	beq.n	800bc90 <UART_SetConfig+0x200>
 800bc7e:	e00f      	b.n	800bca0 <UART_SetConfig+0x210>
 800bc80:	2300      	movs	r3, #0
 800bc82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc86:	e042      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc88:	2302      	movs	r3, #2
 800bc8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc8e:	e03e      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc90:	2304      	movs	r3, #4
 800bc92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc96:	e03a      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bc98:	2308      	movs	r3, #8
 800bc9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bc9e:	e036      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bca0:	2310      	movs	r3, #16
 800bca2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bca6:	e032      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bca8:	697b      	ldr	r3, [r7, #20]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	4a30      	ldr	r2, [pc, #192]	; (800bd70 <UART_SetConfig+0x2e0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d12a      	bne.n	800bd08 <UART_SetConfig+0x278>
 800bcb2:	4b31      	ldr	r3, [pc, #196]	; (800bd78 <UART_SetConfig+0x2e8>)
 800bcb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcb8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bcbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcc0:	d01a      	beq.n	800bcf8 <UART_SetConfig+0x268>
 800bcc2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bcc6:	d81b      	bhi.n	800bd00 <UART_SetConfig+0x270>
 800bcc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bccc:	d00c      	beq.n	800bce8 <UART_SetConfig+0x258>
 800bcce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bcd2:	d815      	bhi.n	800bd00 <UART_SetConfig+0x270>
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d003      	beq.n	800bce0 <UART_SetConfig+0x250>
 800bcd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bcdc:	d008      	beq.n	800bcf0 <UART_SetConfig+0x260>
 800bcde:	e00f      	b.n	800bd00 <UART_SetConfig+0x270>
 800bce0:	2300      	movs	r3, #0
 800bce2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bce6:	e012      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bce8:	2302      	movs	r3, #2
 800bcea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcee:	e00e      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bcf0:	2304      	movs	r3, #4
 800bcf2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcf6:	e00a      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bcf8:	2308      	movs	r3, #8
 800bcfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bcfe:	e006      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bd00:	2310      	movs	r3, #16
 800bd02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800bd06:	e002      	b.n	800bd0e <UART_SetConfig+0x27e>
 800bd08:	2310      	movs	r3, #16
 800bd0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a17      	ldr	r2, [pc, #92]	; (800bd70 <UART_SetConfig+0x2e0>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	f040 80a8 	bne.w	800be6a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800bd1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bd1e:	2b08      	cmp	r3, #8
 800bd20:	d834      	bhi.n	800bd8c <UART_SetConfig+0x2fc>
 800bd22:	a201      	add	r2, pc, #4	; (adr r2, 800bd28 <UART_SetConfig+0x298>)
 800bd24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd28:	0800bd4d 	.word	0x0800bd4d
 800bd2c:	0800bd8d 	.word	0x0800bd8d
 800bd30:	0800bd55 	.word	0x0800bd55
 800bd34:	0800bd8d 	.word	0x0800bd8d
 800bd38:	0800bd5b 	.word	0x0800bd5b
 800bd3c:	0800bd8d 	.word	0x0800bd8d
 800bd40:	0800bd8d 	.word	0x0800bd8d
 800bd44:	0800bd8d 	.word	0x0800bd8d
 800bd48:	0800bd63 	.word	0x0800bd63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd4c:	f7fd fc46 	bl	80095dc <HAL_RCC_GetPCLK1Freq>
 800bd50:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd52:	e021      	b.n	800bd98 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bd54:	4b0c      	ldr	r3, [pc, #48]	; (800bd88 <UART_SetConfig+0x2f8>)
 800bd56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd58:	e01e      	b.n	800bd98 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bd5a:	f7fd fbd1 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 800bd5e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bd60:	e01a      	b.n	800bd98 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd66:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bd68:	e016      	b.n	800bd98 <UART_SetConfig+0x308>
 800bd6a:	bf00      	nop
 800bd6c:	cfff69f3 	.word	0xcfff69f3
 800bd70:	40008000 	.word	0x40008000
 800bd74:	40013800 	.word	0x40013800
 800bd78:	40021000 	.word	0x40021000
 800bd7c:	40004400 	.word	0x40004400
 800bd80:	40004800 	.word	0x40004800
 800bd84:	40004c00 	.word	0x40004c00
 800bd88:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 800bd8c:	2300      	movs	r3, #0
 800bd8e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bd90:	2301      	movs	r3, #1
 800bd92:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bd96:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bd98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	f000 812a 	beq.w	800bff4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bda4:	4a9e      	ldr	r2, [pc, #632]	; (800c020 <UART_SetConfig+0x590>)
 800bda6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdaa:	461a      	mov	r2, r3
 800bdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdae:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdb4:	697b      	ldr	r3, [r7, #20]
 800bdb6:	685a      	ldr	r2, [r3, #4]
 800bdb8:	4613      	mov	r3, r2
 800bdba:	005b      	lsls	r3, r3, #1
 800bdbc:	4413      	add	r3, r2
 800bdbe:	69ba      	ldr	r2, [r7, #24]
 800bdc0:	429a      	cmp	r2, r3
 800bdc2:	d305      	bcc.n	800bdd0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bdc4:	697b      	ldr	r3, [r7, #20]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bdca:	69ba      	ldr	r2, [r7, #24]
 800bdcc:	429a      	cmp	r2, r3
 800bdce:	d903      	bls.n	800bdd8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 800bdd0:	2301      	movs	r3, #1
 800bdd2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bdd6:	e10d      	b.n	800bff4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	2200      	movs	r2, #0
 800bddc:	60bb      	str	r3, [r7, #8]
 800bdde:	60fa      	str	r2, [r7, #12]
 800bde0:	697b      	ldr	r3, [r7, #20]
 800bde2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bde4:	4a8e      	ldr	r2, [pc, #568]	; (800c020 <UART_SetConfig+0x590>)
 800bde6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdea:	b29b      	uxth	r3, r3
 800bdec:	2200      	movs	r2, #0
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	607a      	str	r2, [r7, #4]
 800bdf2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bdf6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bdfa:	f7f4 ff6d 	bl	8000cd8 <__aeabi_uldivmod>
 800bdfe:	4602      	mov	r2, r0
 800be00:	460b      	mov	r3, r1
 800be02:	4610      	mov	r0, r2
 800be04:	4619      	mov	r1, r3
 800be06:	f04f 0200 	mov.w	r2, #0
 800be0a:	f04f 0300 	mov.w	r3, #0
 800be0e:	020b      	lsls	r3, r1, #8
 800be10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800be14:	0202      	lsls	r2, r0, #8
 800be16:	6979      	ldr	r1, [r7, #20]
 800be18:	6849      	ldr	r1, [r1, #4]
 800be1a:	0849      	lsrs	r1, r1, #1
 800be1c:	2000      	movs	r0, #0
 800be1e:	460c      	mov	r4, r1
 800be20:	4605      	mov	r5, r0
 800be22:	eb12 0804 	adds.w	r8, r2, r4
 800be26:	eb43 0905 	adc.w	r9, r3, r5
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	685b      	ldr	r3, [r3, #4]
 800be2e:	2200      	movs	r2, #0
 800be30:	469a      	mov	sl, r3
 800be32:	4693      	mov	fp, r2
 800be34:	4652      	mov	r2, sl
 800be36:	465b      	mov	r3, fp
 800be38:	4640      	mov	r0, r8
 800be3a:	4649      	mov	r1, r9
 800be3c:	f7f4 ff4c 	bl	8000cd8 <__aeabi_uldivmod>
 800be40:	4602      	mov	r2, r0
 800be42:	460b      	mov	r3, r1
 800be44:	4613      	mov	r3, r2
 800be46:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800be48:	6a3b      	ldr	r3, [r7, #32]
 800be4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be4e:	d308      	bcc.n	800be62 <UART_SetConfig+0x3d2>
 800be50:	6a3b      	ldr	r3, [r7, #32]
 800be52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be56:	d204      	bcs.n	800be62 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800be58:	697b      	ldr	r3, [r7, #20]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	6a3a      	ldr	r2, [r7, #32]
 800be5e:	60da      	str	r2, [r3, #12]
 800be60:	e0c8      	b.n	800bff4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800be62:	2301      	movs	r3, #1
 800be64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800be68:	e0c4      	b.n	800bff4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	69db      	ldr	r3, [r3, #28]
 800be6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800be72:	d168      	bne.n	800bf46 <UART_SetConfig+0x4b6>
  {
    switch (clocksource)
 800be74:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800be78:	2b08      	cmp	r3, #8
 800be7a:	d828      	bhi.n	800bece <UART_SetConfig+0x43e>
 800be7c:	a201      	add	r2, pc, #4	; (adr r2, 800be84 <UART_SetConfig+0x3f4>)
 800be7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be82:	bf00      	nop
 800be84:	0800bea9 	.word	0x0800bea9
 800be88:	0800beb1 	.word	0x0800beb1
 800be8c:	0800beb9 	.word	0x0800beb9
 800be90:	0800becf 	.word	0x0800becf
 800be94:	0800bebf 	.word	0x0800bebf
 800be98:	0800becf 	.word	0x0800becf
 800be9c:	0800becf 	.word	0x0800becf
 800bea0:	0800becf 	.word	0x0800becf
 800bea4:	0800bec7 	.word	0x0800bec7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bea8:	f7fd fb98 	bl	80095dc <HAL_RCC_GetPCLK1Freq>
 800beac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800beae:	e014      	b.n	800beda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800beb0:	f7fd fbaa 	bl	8009608 <HAL_RCC_GetPCLK2Freq>
 800beb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800beb6:	e010      	b.n	800beda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800beb8:	4b5a      	ldr	r3, [pc, #360]	; (800c024 <UART_SetConfig+0x594>)
 800beba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bebc:	e00d      	b.n	800beda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bebe:	f7fd fb1f 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 800bec2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bec4:	e009      	b.n	800beda <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800becc:	e005      	b.n	800beda <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800bece:	2300      	movs	r3, #0
 800bed0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bed2:	2301      	movs	r3, #1
 800bed4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bed8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800beda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f000 8089 	beq.w	800bff4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bee6:	4a4e      	ldr	r2, [pc, #312]	; (800c020 <UART_SetConfig+0x590>)
 800bee8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800beec:	461a      	mov	r2, r3
 800beee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bef0:	fbb3 f3f2 	udiv	r3, r3, r2
 800bef4:	005a      	lsls	r2, r3, #1
 800bef6:	697b      	ldr	r3, [r7, #20]
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	085b      	lsrs	r3, r3, #1
 800befc:	441a      	add	r2, r3
 800befe:	697b      	ldr	r3, [r7, #20]
 800bf00:	685b      	ldr	r3, [r3, #4]
 800bf02:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf06:	b29b      	uxth	r3, r3
 800bf08:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf0a:	6a3b      	ldr	r3, [r7, #32]
 800bf0c:	2b0f      	cmp	r3, #15
 800bf0e:	d916      	bls.n	800bf3e <UART_SetConfig+0x4ae>
 800bf10:	6a3b      	ldr	r3, [r7, #32]
 800bf12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf16:	d212      	bcs.n	800bf3e <UART_SetConfig+0x4ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bf18:	6a3b      	ldr	r3, [r7, #32]
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f023 030f 	bic.w	r3, r3, #15
 800bf20:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bf22:	6a3b      	ldr	r3, [r7, #32]
 800bf24:	085b      	lsrs	r3, r3, #1
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	f003 0307 	and.w	r3, r3, #7
 800bf2c:	b29a      	uxth	r2, r3
 800bf2e:	8bfb      	ldrh	r3, [r7, #30]
 800bf30:	4313      	orrs	r3, r2
 800bf32:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	8bfa      	ldrh	r2, [r7, #30]
 800bf3a:	60da      	str	r2, [r3, #12]
 800bf3c:	e05a      	b.n	800bff4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bf3e:	2301      	movs	r3, #1
 800bf40:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800bf44:	e056      	b.n	800bff4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 800bf46:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800bf4a:	2b08      	cmp	r3, #8
 800bf4c:	d827      	bhi.n	800bf9e <UART_SetConfig+0x50e>
 800bf4e:	a201      	add	r2, pc, #4	; (adr r2, 800bf54 <UART_SetConfig+0x4c4>)
 800bf50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf54:	0800bf79 	.word	0x0800bf79
 800bf58:	0800bf81 	.word	0x0800bf81
 800bf5c:	0800bf89 	.word	0x0800bf89
 800bf60:	0800bf9f 	.word	0x0800bf9f
 800bf64:	0800bf8f 	.word	0x0800bf8f
 800bf68:	0800bf9f 	.word	0x0800bf9f
 800bf6c:	0800bf9f 	.word	0x0800bf9f
 800bf70:	0800bf9f 	.word	0x0800bf9f
 800bf74:	0800bf97 	.word	0x0800bf97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bf78:	f7fd fb30 	bl	80095dc <HAL_RCC_GetPCLK1Freq>
 800bf7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf7e:	e014      	b.n	800bfaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bf80:	f7fd fb42 	bl	8009608 <HAL_RCC_GetPCLK2Freq>
 800bf84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf86:	e010      	b.n	800bfaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800bf88:	4b26      	ldr	r3, [pc, #152]	; (800c024 <UART_SetConfig+0x594>)
 800bf8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf8c:	e00d      	b.n	800bfaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bf8e:	f7fd fab7 	bl	8009500 <HAL_RCC_GetSysClockFreq>
 800bf92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800bf94:	e009      	b.n	800bfaa <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800bf9c:	e005      	b.n	800bfaa <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800bfa2:	2301      	movs	r3, #1
 800bfa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800bfa8:	bf00      	nop
    }

    if (pclk != 0U)
 800bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d021      	beq.n	800bff4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bfb0:	697b      	ldr	r3, [r7, #20]
 800bfb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfb4:	4a1a      	ldr	r2, [pc, #104]	; (800c020 <UART_SetConfig+0x590>)
 800bfb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bfba:	461a      	mov	r2, r3
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	fbb3 f2f2 	udiv	r2, r3, r2
 800bfc2:	697b      	ldr	r3, [r7, #20]
 800bfc4:	685b      	ldr	r3, [r3, #4]
 800bfc6:	085b      	lsrs	r3, r3, #1
 800bfc8:	441a      	add	r2, r3
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bfd6:	6a3b      	ldr	r3, [r7, #32]
 800bfd8:	2b0f      	cmp	r3, #15
 800bfda:	d908      	bls.n	800bfee <UART_SetConfig+0x55e>
 800bfdc:	6a3b      	ldr	r3, [r7, #32]
 800bfde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe2:	d204      	bcs.n	800bfee <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = usartdiv;
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	6a3a      	ldr	r2, [r7, #32]
 800bfea:	60da      	str	r2, [r3, #12]
 800bfec:	e002      	b.n	800bff4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800bfee:	2301      	movs	r3, #1
 800bff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bff4:	697b      	ldr	r3, [r7, #20]
 800bff6:	2201      	movs	r2, #1
 800bff8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	2201      	movs	r2, #1
 800c000:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c004:	697b      	ldr	r3, [r7, #20]
 800c006:	2200      	movs	r2, #0
 800c008:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800c00a:	697b      	ldr	r3, [r7, #20]
 800c00c:	2200      	movs	r2, #0
 800c00e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800c010:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800c014:	4618      	mov	r0, r3
 800c016:	3730      	adds	r7, #48	; 0x30
 800c018:	46bd      	mov	sp, r7
 800c01a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c01e:	bf00      	nop
 800c020:	080126dc 	.word	0x080126dc
 800c024:	00f42400 	.word	0x00f42400

0800c028 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c028:	b480      	push	{r7}
 800c02a:	b083      	sub	sp, #12
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c034:	f003 0301 	and.w	r3, r3, #1
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d00a      	beq.n	800c052 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	685b      	ldr	r3, [r3, #4]
 800c042:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	430a      	orrs	r2, r1
 800c050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c056:	f003 0302 	and.w	r3, r3, #2
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d00a      	beq.n	800c074 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	685b      	ldr	r3, [r3, #4]
 800c064:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	430a      	orrs	r2, r1
 800c072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c078:	f003 0304 	and.w	r3, r3, #4
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d00a      	beq.n	800c096 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	685b      	ldr	r3, [r3, #4]
 800c086:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	430a      	orrs	r2, r1
 800c094:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c09a:	f003 0308 	and.w	r3, r3, #8
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d00a      	beq.n	800c0b8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	681b      	ldr	r3, [r3, #0]
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	430a      	orrs	r2, r1
 800c0b6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0bc:	f003 0310 	and.w	r3, r3, #16
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00a      	beq.n	800c0da <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	689b      	ldr	r3, [r3, #8]
 800c0ca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	430a      	orrs	r2, r1
 800c0d8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0de:	f003 0320 	and.w	r3, r3, #32
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d00a      	beq.n	800c0fc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	689b      	ldr	r3, [r3, #8]
 800c0ec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	430a      	orrs	r2, r1
 800c0fa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c104:	2b00      	cmp	r3, #0
 800c106:	d01a      	beq.n	800c13e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	430a      	orrs	r2, r1
 800c11c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c126:	d10a      	bne.n	800c13e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	685b      	ldr	r3, [r3, #4]
 800c12e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	430a      	orrs	r2, r1
 800c13c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c142:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	685b      	ldr	r3, [r3, #4]
 800c150:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	430a      	orrs	r2, r1
 800c15e:	605a      	str	r2, [r3, #4]
  }
}
 800c160:	bf00      	nop
 800c162:	370c      	adds	r7, #12
 800c164:	46bd      	mov	sp, r7
 800c166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16a:	4770      	bx	lr

0800c16c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b086      	sub	sp, #24
 800c170:	af02      	add	r7, sp, #8
 800c172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c17c:	f7f9 fcfa 	bl	8005b74 <HAL_GetTick>
 800c180:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f003 0308 	and.w	r3, r3, #8
 800c18c:	2b08      	cmp	r3, #8
 800c18e:	d10e      	bne.n	800c1ae <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c190:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c194:	9300      	str	r3, [sp, #0]
 800c196:	68fb      	ldr	r3, [r7, #12]
 800c198:	2200      	movs	r2, #0
 800c19a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c19e:	6878      	ldr	r0, [r7, #4]
 800c1a0:	f000 f82f 	bl	800c202 <UART_WaitOnFlagUntilTimeout>
 800c1a4:	4603      	mov	r3, r0
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d001      	beq.n	800c1ae <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1aa:	2303      	movs	r3, #3
 800c1ac:	e025      	b.n	800c1fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 0304 	and.w	r3, r3, #4
 800c1b8:	2b04      	cmp	r3, #4
 800c1ba:	d10e      	bne.n	800c1da <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c1bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c1c0:	9300      	str	r3, [sp, #0]
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f819 	bl	800c202 <UART_WaitOnFlagUntilTimeout>
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d001      	beq.n	800c1da <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c1d6:	2303      	movs	r3, #3
 800c1d8:	e00f      	b.n	800c1fa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2220      	movs	r2, #32
 800c1de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	2220      	movs	r2, #32
 800c1e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c1f8:	2300      	movs	r3, #0
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3710      	adds	r7, #16
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}

0800c202 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c202:	b580      	push	{r7, lr}
 800c204:	b084      	sub	sp, #16
 800c206:	af00      	add	r7, sp, #0
 800c208:	60f8      	str	r0, [r7, #12]
 800c20a:	60b9      	str	r1, [r7, #8]
 800c20c:	603b      	str	r3, [r7, #0]
 800c20e:	4613      	mov	r3, r2
 800c210:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c212:	e062      	b.n	800c2da <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c21a:	d05e      	beq.n	800c2da <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c21c:	f7f9 fcaa 	bl	8005b74 <HAL_GetTick>
 800c220:	4602      	mov	r2, r0
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	1ad3      	subs	r3, r2, r3
 800c226:	69ba      	ldr	r2, [r7, #24]
 800c228:	429a      	cmp	r2, r3
 800c22a:	d302      	bcc.n	800c232 <UART_WaitOnFlagUntilTimeout+0x30>
 800c22c:	69bb      	ldr	r3, [r7, #24]
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d11d      	bne.n	800c26e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	681a      	ldr	r2, [r3, #0]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c240:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	689a      	ldr	r2, [r3, #8]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f022 0201 	bic.w	r2, r2, #1
 800c250:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	2220      	movs	r2, #32
 800c256:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	2220      	movs	r2, #32
 800c25e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2200      	movs	r2, #0
 800c266:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c26a:	2303      	movs	r3, #3
 800c26c:	e045      	b.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	681b      	ldr	r3, [r3, #0]
 800c272:	681b      	ldr	r3, [r3, #0]
 800c274:	f003 0304 	and.w	r3, r3, #4
 800c278:	2b00      	cmp	r3, #0
 800c27a:	d02e      	beq.n	800c2da <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	69db      	ldr	r3, [r3, #28]
 800c282:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c286:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c28a:	d126      	bne.n	800c2da <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c294:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	681b      	ldr	r3, [r3, #0]
 800c29a:	681a      	ldr	r2, [r3, #0]
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c2a4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2a6:	68fb      	ldr	r3, [r7, #12]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	689a      	ldr	r2, [r3, #8]
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f022 0201 	bic.w	r2, r2, #1
 800c2b4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	2220      	movs	r2, #32
 800c2ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	2220      	movs	r2, #32
 800c2c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	2220      	movs	r2, #32
 800c2ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	2200      	movs	r2, #0
 800c2d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e00f      	b.n	800c2fa <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	69da      	ldr	r2, [r3, #28]
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	4013      	ands	r3, r2
 800c2e4:	68ba      	ldr	r2, [r7, #8]
 800c2e6:	429a      	cmp	r2, r3
 800c2e8:	bf0c      	ite	eq
 800c2ea:	2301      	moveq	r3, #1
 800c2ec:	2300      	movne	r3, #0
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	461a      	mov	r2, r3
 800c2f2:	79fb      	ldrb	r3, [r7, #7]
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d08d      	beq.n	800c214 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c2f8:	2300      	movs	r3, #0
}
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}
	...

0800c304 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c304:	b480      	push	{r7}
 800c306:	b085      	sub	sp, #20
 800c308:	af00      	add	r7, sp, #0
 800c30a:	60f8      	str	r0, [r7, #12]
 800c30c:	60b9      	str	r1, [r7, #8]
 800c30e:	4613      	mov	r3, r2
 800c310:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800c312:	68fb      	ldr	r3, [r7, #12]
 800c314:	68ba      	ldr	r2, [r7, #8]
 800c316:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	88fa      	ldrh	r2, [r7, #6]
 800c31c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800c320:	68fb      	ldr	r3, [r7, #12]
 800c322:	88fa      	ldrh	r2, [r7, #6]
 800c324:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 800c328:	68fb      	ldr	r3, [r7, #12]
 800c32a:	2200      	movs	r2, #0
 800c32c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	689b      	ldr	r3, [r3, #8]
 800c332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c336:	d10e      	bne.n	800c356 <UART_Start_Receive_IT+0x52>
 800c338:	68fb      	ldr	r3, [r7, #12]
 800c33a:	691b      	ldr	r3, [r3, #16]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d105      	bne.n	800c34c <UART_Start_Receive_IT+0x48>
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	f240 12ff 	movw	r2, #511	; 0x1ff
 800c346:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c34a:	e02d      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	22ff      	movs	r2, #255	; 0xff
 800c350:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c354:	e028      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c356:	68fb      	ldr	r3, [r7, #12]
 800c358:	689b      	ldr	r3, [r3, #8]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d10d      	bne.n	800c37a <UART_Start_Receive_IT+0x76>
 800c35e:	68fb      	ldr	r3, [r7, #12]
 800c360:	691b      	ldr	r3, [r3, #16]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d104      	bne.n	800c370 <UART_Start_Receive_IT+0x6c>
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	22ff      	movs	r2, #255	; 0xff
 800c36a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c36e:	e01b      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	227f      	movs	r2, #127	; 0x7f
 800c374:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c378:	e016      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	689b      	ldr	r3, [r3, #8]
 800c37e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c382:	d10d      	bne.n	800c3a0 <UART_Start_Receive_IT+0x9c>
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	691b      	ldr	r3, [r3, #16]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d104      	bne.n	800c396 <UART_Start_Receive_IT+0x92>
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	227f      	movs	r2, #127	; 0x7f
 800c390:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c394:	e008      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	223f      	movs	r2, #63	; 0x3f
 800c39a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800c39e:	e003      	b.n	800c3a8 <UART_Start_Receive_IT+0xa4>
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	2200      	movs	r2, #0
 800c3a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c3b0:	68fb      	ldr	r3, [r7, #12]
 800c3b2:	2222      	movs	r2, #34	; 0x22
 800c3b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	689a      	ldr	r2, [r3, #8]
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f042 0201 	orr.w	r2, r2, #1
 800c3c6:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c3d0:	d12a      	bne.n	800c428 <UART_Start_Receive_IT+0x124>
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c3d8:	88fa      	ldrh	r2, [r7, #6]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d324      	bcc.n	800c428 <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	689b      	ldr	r3, [r3, #8]
 800c3e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3e6:	d107      	bne.n	800c3f8 <UART_Start_Receive_IT+0xf4>
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	691b      	ldr	r3, [r3, #16]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d103      	bne.n	800c3f8 <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	4a1f      	ldr	r2, [pc, #124]	; (800c470 <UART_Start_Receive_IT+0x16c>)
 800c3f4:	671a      	str	r2, [r3, #112]	; 0x70
 800c3f6:	e002      	b.n	800c3fe <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800c3f8:	68fb      	ldr	r3, [r7, #12]
 800c3fa:	4a1e      	ldr	r2, [pc, #120]	; (800c474 <UART_Start_Receive_IT+0x170>)
 800c3fc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c406:	68fb      	ldr	r3, [r7, #12]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	681a      	ldr	r2, [r3, #0]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c414:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	689a      	ldr	r2, [r3, #8]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800c424:	609a      	str	r2, [r3, #8]
 800c426:	e01b      	b.n	800c460 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	689b      	ldr	r3, [r3, #8]
 800c42c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c430:	d107      	bne.n	800c442 <UART_Start_Receive_IT+0x13e>
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	691b      	ldr	r3, [r3, #16]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d103      	bne.n	800c442 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	4a0e      	ldr	r2, [pc, #56]	; (800c478 <UART_Start_Receive_IT+0x174>)
 800c43e:	671a      	str	r2, [r3, #112]	; 0x70
 800c440:	e002      	b.n	800c448 <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	4a0d      	ldr	r2, [pc, #52]	; (800c47c <UART_Start_Receive_IT+0x178>)
 800c446:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2200      	movs	r2, #0
 800c44c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	681a      	ldr	r2, [r3, #0]
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	681b      	ldr	r3, [r3, #0]
 800c45a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800c45e:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800c460:	2300      	movs	r3, #0
}
 800c462:	4618      	mov	r0, r3
 800c464:	3714      	adds	r7, #20
 800c466:	46bd      	mov	sp, r7
 800c468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c46c:	4770      	bx	lr
 800c46e:	bf00      	nop
 800c470:	0800c8f9 	.word	0x0800c8f9
 800c474:	0800c6f5 	.word	0x0800c6f5
 800c478:	0800c61d 	.word	0x0800c61d
 800c47c:	0800c545 	.word	0x0800c545

0800c480 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	681a      	ldr	r2, [r3, #0]
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c496:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	689b      	ldr	r3, [r3, #8]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	6812      	ldr	r2, [r2, #0]
 800c4a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c4a6:	f023 0301 	bic.w	r3, r3, #1
 800c4aa:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c4b0:	2b01      	cmp	r3, #1
 800c4b2:	d107      	bne.n	800c4c4 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f022 0210 	bic.w	r2, r2, #16
 800c4c2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2220      	movs	r2, #32
 800c4c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c4d8:	bf00      	nop
 800c4da:	370c      	adds	r7, #12
 800c4dc:	46bd      	mov	sp, r7
 800c4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4e2:	4770      	bx	lr

0800c4e4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4e4:	b580      	push	{r7, lr}
 800c4e6:	b084      	sub	sp, #16
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4f0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2200      	movs	r2, #0
 800c4f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c502:	68f8      	ldr	r0, [r7, #12]
 800c504:	f7ff faae 	bl	800ba64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c508:	bf00      	nop
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b082      	sub	sp, #8
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	681a      	ldr	r2, [r3, #0]
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c526:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	2220      	movs	r2, #32
 800c52c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2200      	movs	r2, #0
 800c534:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c536:	6878      	ldr	r0, [r7, #4]
 800c538:	f7ff fa8a 	bl	800ba50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c53c:	bf00      	nop
 800c53e:	3708      	adds	r7, #8
 800c540:	46bd      	mov	sp, r7
 800c542:	bd80      	pop	{r7, pc}

0800c544 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b084      	sub	sp, #16
 800c548:	af00      	add	r7, sp, #0
 800c54a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c552:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c55a:	2b22      	cmp	r3, #34	; 0x22
 800c55c:	d152      	bne.n	800c604 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c564:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c566:	89bb      	ldrh	r3, [r7, #12]
 800c568:	b2d9      	uxtb	r1, r3
 800c56a:	89fb      	ldrh	r3, [r7, #14]
 800c56c:	b2da      	uxtb	r2, r3
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c572:	400a      	ands	r2, r1
 800c574:	b2d2      	uxtb	r2, r2
 800c576:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c57c:	1c5a      	adds	r2, r3, #1
 800c57e:	687b      	ldr	r3, [r7, #4]
 800c580:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c588:	b29b      	uxth	r3, r3
 800c58a:	3b01      	subs	r3, #1
 800c58c:	b29a      	uxth	r2, r3
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c59a:	b29b      	uxth	r3, r3
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d139      	bne.n	800c614 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	681a      	ldr	r2, [r3, #0]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c5ae:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	689a      	ldr	r2, [r3, #8]
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	f022 0201 	bic.w	r2, r2, #1
 800c5be:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2220      	movs	r2, #32
 800c5c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5d2:	2b01      	cmp	r3, #1
 800c5d4:	d10f      	bne.n	800c5f6 <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	681a      	ldr	r2, [r3, #0]
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	f022 0210 	bic.w	r2, r2, #16
 800c5e4:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c5ec:	4619      	mov	r1, r3
 800c5ee:	6878      	ldr	r0, [r7, #4]
 800c5f0:	f7ff fa42 	bl	800ba78 <HAL_UARTEx_RxEventCallback>
 800c5f4:	e002      	b.n	800c5fc <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c5f6:	6878      	ldr	r0, [r7, #4]
 800c5f8:	f7f9 fa00 	bl	80059fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2200      	movs	r2, #0
 800c600:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c602:	e007      	b.n	800c614 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	699a      	ldr	r2, [r3, #24]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f042 0208 	orr.w	r2, r2, #8
 800c612:	619a      	str	r2, [r3, #24]
}
 800c614:	bf00      	nop
 800c616:	3710      	adds	r7, #16
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c62a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c632:	2b22      	cmp	r3, #34	; 0x22
 800c634:	d152      	bne.n	800c6dc <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c63c:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c642:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c644:	89ba      	ldrh	r2, [r7, #12]
 800c646:	89fb      	ldrh	r3, [r7, #14]
 800c648:	4013      	ands	r3, r2
 800c64a:	b29a      	uxth	r2, r3
 800c64c:	68bb      	ldr	r3, [r7, #8]
 800c64e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c654:	1c9a      	adds	r2, r3, #2
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c660:	b29b      	uxth	r3, r3
 800c662:	3b01      	subs	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c672:	b29b      	uxth	r3, r3
 800c674:	2b00      	cmp	r3, #0
 800c676:	d139      	bne.n	800c6ec <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c686:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	689a      	ldr	r2, [r3, #8]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f022 0201 	bic.w	r2, r2, #1
 800c696:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2220      	movs	r2, #32
 800c69c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c6aa:	2b01      	cmp	r3, #1
 800c6ac:	d10f      	bne.n	800c6ce <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	681b      	ldr	r3, [r3, #0]
 800c6b8:	f022 0210 	bic.w	r2, r2, #16
 800c6bc:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c6be:	687b      	ldr	r3, [r7, #4]
 800c6c0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6c4:	4619      	mov	r1, r3
 800c6c6:	6878      	ldr	r0, [r7, #4]
 800c6c8:	f7ff f9d6 	bl	800ba78 <HAL_UARTEx_RxEventCallback>
 800c6cc:	e002      	b.n	800c6d4 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c6ce:	6878      	ldr	r0, [r7, #4]
 800c6d0:	f7f9 f994 	bl	80059fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	2200      	movs	r2, #0
 800c6d8:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6da:	e007      	b.n	800c6ec <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	699a      	ldr	r2, [r3, #24]
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	f042 0208 	orr.w	r2, r2, #8
 800c6ea:	619a      	str	r2, [r3, #24]
}
 800c6ec:	bf00      	nop
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b088      	sub	sp, #32
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c702:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	69db      	ldr	r3, [r3, #28]
 800c70a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c722:	2b22      	cmp	r3, #34	; 0x22
 800c724:	f040 80da 	bne.w	800c8dc <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c72e:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c730:	e0aa      	b.n	800c888 <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	681b      	ldr	r3, [r3, #0]
 800c736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c738:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c73a:	89bb      	ldrh	r3, [r7, #12]
 800c73c:	b2d9      	uxtb	r1, r3
 800c73e:	8b7b      	ldrh	r3, [r7, #26]
 800c740:	b2da      	uxtb	r2, r3
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c746:	400a      	ands	r2, r1
 800c748:	b2d2      	uxtb	r2, r2
 800c74a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c750:	1c5a      	adds	r2, r3, #1
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c75c:	b29b      	uxth	r3, r3
 800c75e:	3b01      	subs	r3, #1
 800c760:	b29a      	uxth	r2, r3
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	69db      	ldr	r3, [r3, #28]
 800c76e:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c770:	69fb      	ldr	r3, [r7, #28]
 800c772:	f003 0307 	and.w	r3, r3, #7
 800c776:	2b00      	cmp	r3, #0
 800c778:	d04d      	beq.n	800c816 <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c77a:	69fb      	ldr	r3, [r7, #28]
 800c77c:	f003 0301 	and.w	r3, r3, #1
 800c780:	2b00      	cmp	r3, #0
 800c782:	d010      	beq.n	800c7a6 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800c784:	697b      	ldr	r3, [r7, #20]
 800c786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	2201      	movs	r2, #1
 800c794:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c79c:	f043 0201 	orr.w	r2, r3, #1
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7a6:	69fb      	ldr	r3, [r7, #28]
 800c7a8:	f003 0302 	and.w	r3, r3, #2
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d010      	beq.n	800c7d2 <UART_RxISR_8BIT_FIFOEN+0xde>
 800c7b0:	693b      	ldr	r3, [r7, #16]
 800c7b2:	f003 0301 	and.w	r3, r3, #1
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d00b      	beq.n	800c7d2 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7c8:	f043 0204 	orr.w	r2, r3, #4
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	f003 0304 	and.w	r3, r3, #4
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d010      	beq.n	800c7fe <UART_RxISR_8BIT_FIFOEN+0x10a>
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	f003 0301 	and.w	r3, r3, #1
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d00b      	beq.n	800c7fe <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	2204      	movs	r2, #4
 800c7ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7f4:	f043 0202 	orr.w	r2, r3, #2
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c804:	2b00      	cmp	r3, #0
 800c806:	d006      	beq.n	800c816 <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c808:	6878      	ldr	r0, [r7, #4]
 800c80a:	f7ff f92b 	bl	800ba64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	2200      	movs	r2, #0
 800c812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c81c:	b29b      	uxth	r3, r3
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d132      	bne.n	800c888 <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	681b      	ldr	r3, [r3, #0]
 800c826:	681a      	ldr	r2, [r3, #0]
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c830:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	689b      	ldr	r3, [r3, #8]
 800c838:	687a      	ldr	r2, [r7, #4]
 800c83a:	6812      	ldr	r2, [r2, #0]
 800c83c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c840:	f023 0301 	bic.w	r3, r3, #1
 800c844:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2220      	movs	r2, #32
 800c84a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	2200      	movs	r2, #0
 800c852:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d10f      	bne.n	800c87c <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	681a      	ldr	r2, [r3, #0]
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	f022 0210 	bic.w	r2, r2, #16
 800c86a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c872:	4619      	mov	r1, r3
 800c874:	6878      	ldr	r0, [r7, #4]
 800c876:	f7ff f8ff 	bl	800ba78 <HAL_UARTEx_RxEventCallback>
 800c87a:	e002      	b.n	800c882 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800c87c:	6878      	ldr	r0, [r7, #4]
 800c87e:	f7f9 f8bd 	bl	80059fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2200      	movs	r2, #0
 800c886:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c888:	89fb      	ldrh	r3, [r7, #14]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d005      	beq.n	800c89a <UART_RxISR_8BIT_FIFOEN+0x1a6>
 800c88e:	69fb      	ldr	r3, [r7, #28]
 800c890:	f003 0320 	and.w	r3, r3, #32
 800c894:	2b00      	cmp	r3, #0
 800c896:	f47f af4c 	bne.w	800c732 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c8a0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800c8a2:	897b      	ldrh	r3, [r7, #10]
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d021      	beq.n	800c8ec <UART_RxISR_8BIT_FIFOEN+0x1f8>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c8ae:	897a      	ldrh	r2, [r7, #10]
 800c8b0:	429a      	cmp	r2, r3
 800c8b2:	d21b      	bcs.n	800c8ec <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	689a      	ldr	r2, [r3, #8]
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800c8c2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	4a0b      	ldr	r2, [pc, #44]	; (800c8f4 <UART_RxISR_8BIT_FIFOEN+0x200>)
 800c8c8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	681a      	ldr	r2, [r3, #0]
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	681b      	ldr	r3, [r3, #0]
 800c8d4:	f042 0220 	orr.w	r2, r2, #32
 800c8d8:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c8da:	e007      	b.n	800c8ec <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	699a      	ldr	r2, [r3, #24]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	f042 0208 	orr.w	r2, r2, #8
 800c8ea:	619a      	str	r2, [r3, #24]
}
 800c8ec:	bf00      	nop
 800c8ee:	3720      	adds	r7, #32
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	bd80      	pop	{r7, pc}
 800c8f4:	0800c545 	.word	0x0800c545

0800c8f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b08a      	sub	sp, #40	; 0x28
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c906:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	681b      	ldr	r3, [r3, #0]
 800c90c:	69db      	ldr	r3, [r3, #28]
 800c90e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	689b      	ldr	r3, [r3, #8]
 800c91e:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c926:	2b22      	cmp	r3, #34	; 0x22
 800c928:	f040 80da 	bne.w	800cae0 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800c932:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800c934:	e0aa      	b.n	800ca8c <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93c:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c942:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 800c944:	8aba      	ldrh	r2, [r7, #20]
 800c946:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800c948:	4013      	ands	r3, r2
 800c94a:	b29a      	uxth	r2, r3
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c954:	1c9a      	adds	r2, r3, #2
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800c960:	b29b      	uxth	r3, r3
 800c962:	3b01      	subs	r3, #1
 800c964:	b29a      	uxth	r2, r3
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	69db      	ldr	r3, [r3, #28]
 800c972:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800c974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c976:	f003 0307 	and.w	r3, r3, #7
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d04d      	beq.n	800ca1a <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c97e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c980:	f003 0301 	and.w	r3, r3, #1
 800c984:	2b00      	cmp	r3, #0
 800c986:	d010      	beq.n	800c9aa <UART_RxISR_16BIT_FIFOEN+0xb2>
 800c988:	69fb      	ldr	r3, [r7, #28]
 800c98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d00b      	beq.n	800c9aa <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	2201      	movs	r2, #1
 800c998:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9a0:	f043 0201 	orr.w	r2, r3, #1
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9ac:	f003 0302 	and.w	r3, r3, #2
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d010      	beq.n	800c9d6 <UART_RxISR_16BIT_FIFOEN+0xde>
 800c9b4:	69bb      	ldr	r3, [r7, #24]
 800c9b6:	f003 0301 	and.w	r3, r3, #1
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d00b      	beq.n	800c9d6 <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	2202      	movs	r2, #2
 800c9c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9cc:	f043 0204 	orr.w	r2, r3, #4
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c9d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d8:	f003 0304 	and.w	r3, r3, #4
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d010      	beq.n	800ca02 <UART_RxISR_16BIT_FIFOEN+0x10a>
 800c9e0:	69bb      	ldr	r3, [r7, #24]
 800c9e2:	f003 0301 	and.w	r3, r3, #1
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d00b      	beq.n	800ca02 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2204      	movs	r2, #4
 800c9f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c9f8:	f043 0202 	orr.w	r2, r3, #2
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d006      	beq.n	800ca1a <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	f7ff f829 	bl	800ba64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	2200      	movs	r2, #0
 800ca16:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800ca20:	b29b      	uxth	r3, r3
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d132      	bne.n	800ca8c <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	681a      	ldr	r2, [r3, #0]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ca34:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	689b      	ldr	r3, [r3, #8]
 800ca3c:	687a      	ldr	r2, [r7, #4]
 800ca3e:	6812      	ldr	r2, [r2, #0]
 800ca40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ca44:	f023 0301 	bic.w	r3, r3, #1
 800ca48:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	2220      	movs	r2, #32
 800ca4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	2200      	movs	r2, #0
 800ca56:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d10f      	bne.n	800ca80 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	f022 0210 	bic.w	r2, r2, #16
 800ca6e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800ca76:	4619      	mov	r1, r3
 800ca78:	6878      	ldr	r0, [r7, #4]
 800ca7a:	f7fe fffd 	bl	800ba78 <HAL_UARTEx_RxEventCallback>
 800ca7e:	e002      	b.n	800ca86 <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7f8 ffbb 	bl	80059fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	2200      	movs	r2, #0
 800ca8a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800ca8c:	8afb      	ldrh	r3, [r7, #22]
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <UART_RxISR_16BIT_FIFOEN+0x1a6>
 800ca92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca94:	f003 0320 	and.w	r3, r3, #32
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	f47f af4c 	bne.w	800c936 <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800caa4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800caa6:	89fb      	ldrh	r3, [r7, #14]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d021      	beq.n	800caf0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800cab2:	89fa      	ldrh	r2, [r7, #14]
 800cab4:	429a      	cmp	r2, r3
 800cab6:	d21b      	bcs.n	800caf0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	689a      	ldr	r2, [r3, #8]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800cac6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	4a0b      	ldr	r2, [pc, #44]	; (800caf8 <UART_RxISR_16BIT_FIFOEN+0x200>)
 800cacc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	681a      	ldr	r2, [r3, #0]
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f042 0220 	orr.w	r2, r2, #32
 800cadc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800cade:	e007      	b.n	800caf0 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	699a      	ldr	r2, [r3, #24]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f042 0208 	orr.w	r2, r2, #8
 800caee:	619a      	str	r2, [r3, #24]
}
 800caf0:	bf00      	nop
 800caf2:	3728      	adds	r7, #40	; 0x28
 800caf4:	46bd      	mov	sp, r7
 800caf6:	bd80      	pop	{r7, pc}
 800caf8:	0800c61d 	.word	0x0800c61d

0800cafc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cafc:	b480      	push	{r7}
 800cafe:	b083      	sub	sp, #12
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cb04:	bf00      	nop
 800cb06:	370c      	adds	r7, #12
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0e:	4770      	bx	lr

0800cb10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b083      	sub	sp, #12
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cb18:	bf00      	nop
 800cb1a:	370c      	adds	r7, #12
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr

0800cb24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cb24:	b480      	push	{r7}
 800cb26:	b083      	sub	sp, #12
 800cb28:	af00      	add	r7, sp, #0
 800cb2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cb2c:	bf00      	nop
 800cb2e:	370c      	adds	r7, #12
 800cb30:	46bd      	mov	sp, r7
 800cb32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb36:	4770      	bx	lr

0800cb38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cb38:	b480      	push	{r7}
 800cb3a:	b085      	sub	sp, #20
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cb46:	2b01      	cmp	r3, #1
 800cb48:	d101      	bne.n	800cb4e <HAL_UARTEx_DisableFifoMode+0x16>
 800cb4a:	2302      	movs	r3, #2
 800cb4c:	e027      	b.n	800cb9e <HAL_UARTEx_DisableFifoMode+0x66>
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	2201      	movs	r2, #1
 800cb52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	2224      	movs	r2, #36	; 0x24
 800cb5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	681a      	ldr	r2, [r3, #0]
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f022 0201 	bic.w	r2, r2, #1
 800cb74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800cb7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cb7e:	687b      	ldr	r3, [r7, #4]
 800cb80:	2200      	movs	r2, #0
 800cb82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	2220      	movs	r2, #32
 800cb90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cb94:	687b      	ldr	r3, [r7, #4]
 800cb96:	2200      	movs	r2, #0
 800cb98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cb9c:	2300      	movs	r3, #0
}
 800cb9e:	4618      	mov	r0, r3
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr

0800cbaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cbaa:	b580      	push	{r7, lr}
 800cbac:	b084      	sub	sp, #16
 800cbae:	af00      	add	r7, sp, #0
 800cbb0:	6078      	str	r0, [r7, #4]
 800cbb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d101      	bne.n	800cbc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cbbe:	2302      	movs	r3, #2
 800cbc0:	e02d      	b.n	800cc1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	2201      	movs	r2, #1
 800cbc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	2224      	movs	r2, #36	; 0x24
 800cbce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	f022 0201 	bic.w	r2, r2, #1
 800cbe8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	681b      	ldr	r3, [r3, #0]
 800cbee:	689b      	ldr	r3, [r3, #8]
 800cbf0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	681b      	ldr	r3, [r3, #0]
 800cbf8:	683a      	ldr	r2, [r7, #0]
 800cbfa:	430a      	orrs	r2, r1
 800cbfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cbfe:	6878      	ldr	r0, [r7, #4]
 800cc00:	f000 f850 	bl	800cca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc0c:	687b      	ldr	r3, [r7, #4]
 800cc0e:	2220      	movs	r2, #32
 800cc10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc1c:	2300      	movs	r3, #0
}
 800cc1e:	4618      	mov	r0, r3
 800cc20:	3710      	adds	r7, #16
 800cc22:	46bd      	mov	sp, r7
 800cc24:	bd80      	pop	{r7, pc}

0800cc26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cc26:	b580      	push	{r7, lr}
 800cc28:	b084      	sub	sp, #16
 800cc2a:	af00      	add	r7, sp, #0
 800cc2c:	6078      	str	r0, [r7, #4]
 800cc2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800cc36:	2b01      	cmp	r3, #1
 800cc38:	d101      	bne.n	800cc3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800cc3a:	2302      	movs	r3, #2
 800cc3c:	e02d      	b.n	800cc9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	2201      	movs	r2, #1
 800cc42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	2224      	movs	r2, #36	; 0x24
 800cc4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	681a      	ldr	r2, [r3, #0]
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	f022 0201 	bic.w	r2, r2, #1
 800cc64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	689b      	ldr	r3, [r3, #8]
 800cc6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	683a      	ldr	r2, [r7, #0]
 800cc76:	430a      	orrs	r2, r1
 800cc78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 f812 	bl	800cca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	681b      	ldr	r3, [r3, #0]
 800cc84:	68fa      	ldr	r2, [r7, #12]
 800cc86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2220      	movs	r2, #32
 800cc8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2200      	movs	r2, #0
 800cc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800cc98:	2300      	movs	r3, #0
}
 800cc9a:	4618      	mov	r0, r3
 800cc9c:	3710      	adds	r7, #16
 800cc9e:	46bd      	mov	sp, r7
 800cca0:	bd80      	pop	{r7, pc}
	...

0800cca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d108      	bne.n	800ccc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2201      	movs	r2, #1
 800ccb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2201      	movs	r2, #1
 800ccc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ccc4:	e031      	b.n	800cd2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ccc6:	2308      	movs	r3, #8
 800ccc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ccca:	2308      	movs	r3, #8
 800cccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ccce:	687b      	ldr	r3, [r7, #4]
 800ccd0:	681b      	ldr	r3, [r3, #0]
 800ccd2:	689b      	ldr	r3, [r3, #8]
 800ccd4:	0e5b      	lsrs	r3, r3, #25
 800ccd6:	b2db      	uxtb	r3, r3
 800ccd8:	f003 0307 	and.w	r3, r3, #7
 800ccdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	689b      	ldr	r3, [r3, #8]
 800cce4:	0f5b      	lsrs	r3, r3, #29
 800cce6:	b2db      	uxtb	r3, r3
 800cce8:	f003 0307 	and.w	r3, r3, #7
 800ccec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ccee:	7bbb      	ldrb	r3, [r7, #14]
 800ccf0:	7b3a      	ldrb	r2, [r7, #12]
 800ccf2:	4911      	ldr	r1, [pc, #68]	; (800cd38 <UARTEx_SetNbDataToProcess+0x94>)
 800ccf4:	5c8a      	ldrb	r2, [r1, r2]
 800ccf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ccfa:	7b3a      	ldrb	r2, [r7, #12]
 800ccfc:	490f      	ldr	r1, [pc, #60]	; (800cd3c <UARTEx_SetNbDataToProcess+0x98>)
 800ccfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800cd00:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd0c:	7bfb      	ldrb	r3, [r7, #15]
 800cd0e:	7b7a      	ldrb	r2, [r7, #13]
 800cd10:	4909      	ldr	r1, [pc, #36]	; (800cd38 <UARTEx_SetNbDataToProcess+0x94>)
 800cd12:	5c8a      	ldrb	r2, [r1, r2]
 800cd14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800cd18:	7b7a      	ldrb	r2, [r7, #13]
 800cd1a:	4908      	ldr	r1, [pc, #32]	; (800cd3c <UARTEx_SetNbDataToProcess+0x98>)
 800cd1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800cd1e:	fb93 f3f2 	sdiv	r3, r3, r2
 800cd22:	b29a      	uxth	r2, r3
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800cd2a:	bf00      	nop
 800cd2c:	3714      	adds	r7, #20
 800cd2e:	46bd      	mov	sp, r7
 800cd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd34:	4770      	bx	lr
 800cd36:	bf00      	nop
 800cd38:	080126f4 	.word	0x080126f4
 800cd3c:	080126fc 	.word	0x080126fc

0800cd40 <atof>:
 800cd40:	2100      	movs	r1, #0
 800cd42:	f001 bb7b 	b.w	800e43c <strtod>

0800cd46 <atoi>:
 800cd46:	220a      	movs	r2, #10
 800cd48:	2100      	movs	r1, #0
 800cd4a:	f001 bc05 	b.w	800e558 <strtol>
	...

0800cd50 <__errno>:
 800cd50:	4b01      	ldr	r3, [pc, #4]	; (800cd58 <__errno+0x8>)
 800cd52:	6818      	ldr	r0, [r3, #0]
 800cd54:	4770      	bx	lr
 800cd56:	bf00      	nop
 800cd58:	2000002c 	.word	0x2000002c

0800cd5c <__libc_init_array>:
 800cd5c:	b570      	push	{r4, r5, r6, lr}
 800cd5e:	4d0d      	ldr	r5, [pc, #52]	; (800cd94 <__libc_init_array+0x38>)
 800cd60:	4c0d      	ldr	r4, [pc, #52]	; (800cd98 <__libc_init_array+0x3c>)
 800cd62:	1b64      	subs	r4, r4, r5
 800cd64:	10a4      	asrs	r4, r4, #2
 800cd66:	2600      	movs	r6, #0
 800cd68:	42a6      	cmp	r6, r4
 800cd6a:	d109      	bne.n	800cd80 <__libc_init_array+0x24>
 800cd6c:	4d0b      	ldr	r5, [pc, #44]	; (800cd9c <__libc_init_array+0x40>)
 800cd6e:	4c0c      	ldr	r4, [pc, #48]	; (800cda0 <__libc_init_array+0x44>)
 800cd70:	f004 fcc4 	bl	80116fc <_init>
 800cd74:	1b64      	subs	r4, r4, r5
 800cd76:	10a4      	asrs	r4, r4, #2
 800cd78:	2600      	movs	r6, #0
 800cd7a:	42a6      	cmp	r6, r4
 800cd7c:	d105      	bne.n	800cd8a <__libc_init_array+0x2e>
 800cd7e:	bd70      	pop	{r4, r5, r6, pc}
 800cd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd84:	4798      	blx	r3
 800cd86:	3601      	adds	r6, #1
 800cd88:	e7ee      	b.n	800cd68 <__libc_init_array+0xc>
 800cd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cd8e:	4798      	blx	r3
 800cd90:	3601      	adds	r6, #1
 800cd92:	e7f2      	b.n	800cd7a <__libc_init_array+0x1e>
 800cd94:	08012bf0 	.word	0x08012bf0
 800cd98:	08012bf0 	.word	0x08012bf0
 800cd9c:	08012bf0 	.word	0x08012bf0
 800cda0:	08012bf4 	.word	0x08012bf4

0800cda4 <memcpy>:
 800cda4:	440a      	add	r2, r1
 800cda6:	4291      	cmp	r1, r2
 800cda8:	f100 33ff 	add.w	r3, r0, #4294967295
 800cdac:	d100      	bne.n	800cdb0 <memcpy+0xc>
 800cdae:	4770      	bx	lr
 800cdb0:	b510      	push	{r4, lr}
 800cdb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cdba:	4291      	cmp	r1, r2
 800cdbc:	d1f9      	bne.n	800cdb2 <memcpy+0xe>
 800cdbe:	bd10      	pop	{r4, pc}

0800cdc0 <memmove>:
 800cdc0:	4288      	cmp	r0, r1
 800cdc2:	b510      	push	{r4, lr}
 800cdc4:	eb01 0402 	add.w	r4, r1, r2
 800cdc8:	d902      	bls.n	800cdd0 <memmove+0x10>
 800cdca:	4284      	cmp	r4, r0
 800cdcc:	4623      	mov	r3, r4
 800cdce:	d807      	bhi.n	800cde0 <memmove+0x20>
 800cdd0:	1e43      	subs	r3, r0, #1
 800cdd2:	42a1      	cmp	r1, r4
 800cdd4:	d008      	beq.n	800cde8 <memmove+0x28>
 800cdd6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdda:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdde:	e7f8      	b.n	800cdd2 <memmove+0x12>
 800cde0:	4402      	add	r2, r0
 800cde2:	4601      	mov	r1, r0
 800cde4:	428a      	cmp	r2, r1
 800cde6:	d100      	bne.n	800cdea <memmove+0x2a>
 800cde8:	bd10      	pop	{r4, pc}
 800cdea:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cdee:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cdf2:	e7f7      	b.n	800cde4 <memmove+0x24>

0800cdf4 <memset>:
 800cdf4:	4402      	add	r2, r0
 800cdf6:	4603      	mov	r3, r0
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d100      	bne.n	800cdfe <memset+0xa>
 800cdfc:	4770      	bx	lr
 800cdfe:	f803 1b01 	strb.w	r1, [r3], #1
 800ce02:	e7f9      	b.n	800cdf8 <memset+0x4>

0800ce04 <__cvt>:
 800ce04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ce08:	ec55 4b10 	vmov	r4, r5, d0
 800ce0c:	2d00      	cmp	r5, #0
 800ce0e:	460e      	mov	r6, r1
 800ce10:	4619      	mov	r1, r3
 800ce12:	462b      	mov	r3, r5
 800ce14:	bfbb      	ittet	lt
 800ce16:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ce1a:	461d      	movlt	r5, r3
 800ce1c:	2300      	movge	r3, #0
 800ce1e:	232d      	movlt	r3, #45	; 0x2d
 800ce20:	700b      	strb	r3, [r1, #0]
 800ce22:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ce24:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ce28:	4691      	mov	r9, r2
 800ce2a:	f023 0820 	bic.w	r8, r3, #32
 800ce2e:	bfbc      	itt	lt
 800ce30:	4622      	movlt	r2, r4
 800ce32:	4614      	movlt	r4, r2
 800ce34:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce38:	d005      	beq.n	800ce46 <__cvt+0x42>
 800ce3a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ce3e:	d100      	bne.n	800ce42 <__cvt+0x3e>
 800ce40:	3601      	adds	r6, #1
 800ce42:	2102      	movs	r1, #2
 800ce44:	e000      	b.n	800ce48 <__cvt+0x44>
 800ce46:	2103      	movs	r1, #3
 800ce48:	ab03      	add	r3, sp, #12
 800ce4a:	9301      	str	r3, [sp, #4]
 800ce4c:	ab02      	add	r3, sp, #8
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	ec45 4b10 	vmov	d0, r4, r5
 800ce54:	4653      	mov	r3, sl
 800ce56:	4632      	mov	r2, r6
 800ce58:	f001 fcd6 	bl	800e808 <_dtoa_r>
 800ce5c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ce60:	4607      	mov	r7, r0
 800ce62:	d102      	bne.n	800ce6a <__cvt+0x66>
 800ce64:	f019 0f01 	tst.w	r9, #1
 800ce68:	d022      	beq.n	800ceb0 <__cvt+0xac>
 800ce6a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ce6e:	eb07 0906 	add.w	r9, r7, r6
 800ce72:	d110      	bne.n	800ce96 <__cvt+0x92>
 800ce74:	783b      	ldrb	r3, [r7, #0]
 800ce76:	2b30      	cmp	r3, #48	; 0x30
 800ce78:	d10a      	bne.n	800ce90 <__cvt+0x8c>
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	2300      	movs	r3, #0
 800ce7e:	4620      	mov	r0, r4
 800ce80:	4629      	mov	r1, r5
 800ce82:	f7f3 fe49 	bl	8000b18 <__aeabi_dcmpeq>
 800ce86:	b918      	cbnz	r0, 800ce90 <__cvt+0x8c>
 800ce88:	f1c6 0601 	rsb	r6, r6, #1
 800ce8c:	f8ca 6000 	str.w	r6, [sl]
 800ce90:	f8da 3000 	ldr.w	r3, [sl]
 800ce94:	4499      	add	r9, r3
 800ce96:	2200      	movs	r2, #0
 800ce98:	2300      	movs	r3, #0
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	4629      	mov	r1, r5
 800ce9e:	f7f3 fe3b 	bl	8000b18 <__aeabi_dcmpeq>
 800cea2:	b108      	cbz	r0, 800cea8 <__cvt+0xa4>
 800cea4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cea8:	2230      	movs	r2, #48	; 0x30
 800ceaa:	9b03      	ldr	r3, [sp, #12]
 800ceac:	454b      	cmp	r3, r9
 800ceae:	d307      	bcc.n	800cec0 <__cvt+0xbc>
 800ceb0:	9b03      	ldr	r3, [sp, #12]
 800ceb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ceb4:	1bdb      	subs	r3, r3, r7
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	6013      	str	r3, [r2, #0]
 800ceba:	b004      	add	sp, #16
 800cebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cec0:	1c59      	adds	r1, r3, #1
 800cec2:	9103      	str	r1, [sp, #12]
 800cec4:	701a      	strb	r2, [r3, #0]
 800cec6:	e7f0      	b.n	800ceaa <__cvt+0xa6>

0800cec8 <__exponent>:
 800cec8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ceca:	4603      	mov	r3, r0
 800cecc:	2900      	cmp	r1, #0
 800cece:	bfb8      	it	lt
 800ced0:	4249      	neglt	r1, r1
 800ced2:	f803 2b02 	strb.w	r2, [r3], #2
 800ced6:	bfb4      	ite	lt
 800ced8:	222d      	movlt	r2, #45	; 0x2d
 800ceda:	222b      	movge	r2, #43	; 0x2b
 800cedc:	2909      	cmp	r1, #9
 800cede:	7042      	strb	r2, [r0, #1]
 800cee0:	dd2a      	ble.n	800cf38 <__exponent+0x70>
 800cee2:	f10d 0407 	add.w	r4, sp, #7
 800cee6:	46a4      	mov	ip, r4
 800cee8:	270a      	movs	r7, #10
 800ceea:	46a6      	mov	lr, r4
 800ceec:	460a      	mov	r2, r1
 800ceee:	fb91 f6f7 	sdiv	r6, r1, r7
 800cef2:	fb07 1516 	mls	r5, r7, r6, r1
 800cef6:	3530      	adds	r5, #48	; 0x30
 800cef8:	2a63      	cmp	r2, #99	; 0x63
 800cefa:	f104 34ff 	add.w	r4, r4, #4294967295
 800cefe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cf02:	4631      	mov	r1, r6
 800cf04:	dcf1      	bgt.n	800ceea <__exponent+0x22>
 800cf06:	3130      	adds	r1, #48	; 0x30
 800cf08:	f1ae 0502 	sub.w	r5, lr, #2
 800cf0c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cf10:	1c44      	adds	r4, r0, #1
 800cf12:	4629      	mov	r1, r5
 800cf14:	4561      	cmp	r1, ip
 800cf16:	d30a      	bcc.n	800cf2e <__exponent+0x66>
 800cf18:	f10d 0209 	add.w	r2, sp, #9
 800cf1c:	eba2 020e 	sub.w	r2, r2, lr
 800cf20:	4565      	cmp	r5, ip
 800cf22:	bf88      	it	hi
 800cf24:	2200      	movhi	r2, #0
 800cf26:	4413      	add	r3, r2
 800cf28:	1a18      	subs	r0, r3, r0
 800cf2a:	b003      	add	sp, #12
 800cf2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf32:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cf36:	e7ed      	b.n	800cf14 <__exponent+0x4c>
 800cf38:	2330      	movs	r3, #48	; 0x30
 800cf3a:	3130      	adds	r1, #48	; 0x30
 800cf3c:	7083      	strb	r3, [r0, #2]
 800cf3e:	70c1      	strb	r1, [r0, #3]
 800cf40:	1d03      	adds	r3, r0, #4
 800cf42:	e7f1      	b.n	800cf28 <__exponent+0x60>

0800cf44 <_printf_float>:
 800cf44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf48:	ed2d 8b02 	vpush	{d8}
 800cf4c:	b08d      	sub	sp, #52	; 0x34
 800cf4e:	460c      	mov	r4, r1
 800cf50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cf54:	4616      	mov	r6, r2
 800cf56:	461f      	mov	r7, r3
 800cf58:	4605      	mov	r5, r0
 800cf5a:	f002 ff69 	bl	800fe30 <_localeconv_r>
 800cf5e:	f8d0 a000 	ldr.w	sl, [r0]
 800cf62:	4650      	mov	r0, sl
 800cf64:	f7f3 f95c 	bl	8000220 <strlen>
 800cf68:	2300      	movs	r3, #0
 800cf6a:	930a      	str	r3, [sp, #40]	; 0x28
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	9305      	str	r3, [sp, #20]
 800cf70:	f8d8 3000 	ldr.w	r3, [r8]
 800cf74:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cf78:	3307      	adds	r3, #7
 800cf7a:	f023 0307 	bic.w	r3, r3, #7
 800cf7e:	f103 0208 	add.w	r2, r3, #8
 800cf82:	f8c8 2000 	str.w	r2, [r8]
 800cf86:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf8a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cf8e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cf92:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cf96:	9307      	str	r3, [sp, #28]
 800cf98:	f8cd 8018 	str.w	r8, [sp, #24]
 800cf9c:	ee08 0a10 	vmov	s16, r0
 800cfa0:	4b9f      	ldr	r3, [pc, #636]	; (800d220 <_printf_float+0x2dc>)
 800cfa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfa6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfaa:	f7f3 fde7 	bl	8000b7c <__aeabi_dcmpun>
 800cfae:	bb88      	cbnz	r0, 800d014 <_printf_float+0xd0>
 800cfb0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cfb4:	4b9a      	ldr	r3, [pc, #616]	; (800d220 <_printf_float+0x2dc>)
 800cfb6:	f04f 32ff 	mov.w	r2, #4294967295
 800cfba:	f7f3 fdc1 	bl	8000b40 <__aeabi_dcmple>
 800cfbe:	bb48      	cbnz	r0, 800d014 <_printf_float+0xd0>
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	4649      	mov	r1, r9
 800cfc8:	f7f3 fdb0 	bl	8000b2c <__aeabi_dcmplt>
 800cfcc:	b110      	cbz	r0, 800cfd4 <_printf_float+0x90>
 800cfce:	232d      	movs	r3, #45	; 0x2d
 800cfd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfd4:	4b93      	ldr	r3, [pc, #588]	; (800d224 <_printf_float+0x2e0>)
 800cfd6:	4894      	ldr	r0, [pc, #592]	; (800d228 <_printf_float+0x2e4>)
 800cfd8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cfdc:	bf94      	ite	ls
 800cfde:	4698      	movls	r8, r3
 800cfe0:	4680      	movhi	r8, r0
 800cfe2:	2303      	movs	r3, #3
 800cfe4:	6123      	str	r3, [r4, #16]
 800cfe6:	9b05      	ldr	r3, [sp, #20]
 800cfe8:	f023 0204 	bic.w	r2, r3, #4
 800cfec:	6022      	str	r2, [r4, #0]
 800cfee:	f04f 0900 	mov.w	r9, #0
 800cff2:	9700      	str	r7, [sp, #0]
 800cff4:	4633      	mov	r3, r6
 800cff6:	aa0b      	add	r2, sp, #44	; 0x2c
 800cff8:	4621      	mov	r1, r4
 800cffa:	4628      	mov	r0, r5
 800cffc:	f000 f9d8 	bl	800d3b0 <_printf_common>
 800d000:	3001      	adds	r0, #1
 800d002:	f040 8090 	bne.w	800d126 <_printf_float+0x1e2>
 800d006:	f04f 30ff 	mov.w	r0, #4294967295
 800d00a:	b00d      	add	sp, #52	; 0x34
 800d00c:	ecbd 8b02 	vpop	{d8}
 800d010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d014:	4642      	mov	r2, r8
 800d016:	464b      	mov	r3, r9
 800d018:	4640      	mov	r0, r8
 800d01a:	4649      	mov	r1, r9
 800d01c:	f7f3 fdae 	bl	8000b7c <__aeabi_dcmpun>
 800d020:	b140      	cbz	r0, 800d034 <_printf_float+0xf0>
 800d022:	464b      	mov	r3, r9
 800d024:	2b00      	cmp	r3, #0
 800d026:	bfbc      	itt	lt
 800d028:	232d      	movlt	r3, #45	; 0x2d
 800d02a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800d02e:	487f      	ldr	r0, [pc, #508]	; (800d22c <_printf_float+0x2e8>)
 800d030:	4b7f      	ldr	r3, [pc, #508]	; (800d230 <_printf_float+0x2ec>)
 800d032:	e7d1      	b.n	800cfd8 <_printf_float+0x94>
 800d034:	6863      	ldr	r3, [r4, #4]
 800d036:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800d03a:	9206      	str	r2, [sp, #24]
 800d03c:	1c5a      	adds	r2, r3, #1
 800d03e:	d13f      	bne.n	800d0c0 <_printf_float+0x17c>
 800d040:	2306      	movs	r3, #6
 800d042:	6063      	str	r3, [r4, #4]
 800d044:	9b05      	ldr	r3, [sp, #20]
 800d046:	6861      	ldr	r1, [r4, #4]
 800d048:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800d04c:	2300      	movs	r3, #0
 800d04e:	9303      	str	r3, [sp, #12]
 800d050:	ab0a      	add	r3, sp, #40	; 0x28
 800d052:	e9cd b301 	strd	fp, r3, [sp, #4]
 800d056:	ab09      	add	r3, sp, #36	; 0x24
 800d058:	ec49 8b10 	vmov	d0, r8, r9
 800d05c:	9300      	str	r3, [sp, #0]
 800d05e:	6022      	str	r2, [r4, #0]
 800d060:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d064:	4628      	mov	r0, r5
 800d066:	f7ff fecd 	bl	800ce04 <__cvt>
 800d06a:	9b06      	ldr	r3, [sp, #24]
 800d06c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d06e:	2b47      	cmp	r3, #71	; 0x47
 800d070:	4680      	mov	r8, r0
 800d072:	d108      	bne.n	800d086 <_printf_float+0x142>
 800d074:	1cc8      	adds	r0, r1, #3
 800d076:	db02      	blt.n	800d07e <_printf_float+0x13a>
 800d078:	6863      	ldr	r3, [r4, #4]
 800d07a:	4299      	cmp	r1, r3
 800d07c:	dd41      	ble.n	800d102 <_printf_float+0x1be>
 800d07e:	f1ab 0b02 	sub.w	fp, fp, #2
 800d082:	fa5f fb8b 	uxtb.w	fp, fp
 800d086:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d08a:	d820      	bhi.n	800d0ce <_printf_float+0x18a>
 800d08c:	3901      	subs	r1, #1
 800d08e:	465a      	mov	r2, fp
 800d090:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800d094:	9109      	str	r1, [sp, #36]	; 0x24
 800d096:	f7ff ff17 	bl	800cec8 <__exponent>
 800d09a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d09c:	1813      	adds	r3, r2, r0
 800d09e:	2a01      	cmp	r2, #1
 800d0a0:	4681      	mov	r9, r0
 800d0a2:	6123      	str	r3, [r4, #16]
 800d0a4:	dc02      	bgt.n	800d0ac <_printf_float+0x168>
 800d0a6:	6822      	ldr	r2, [r4, #0]
 800d0a8:	07d2      	lsls	r2, r2, #31
 800d0aa:	d501      	bpl.n	800d0b0 <_printf_float+0x16c>
 800d0ac:	3301      	adds	r3, #1
 800d0ae:	6123      	str	r3, [r4, #16]
 800d0b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800d0b4:	2b00      	cmp	r3, #0
 800d0b6:	d09c      	beq.n	800cff2 <_printf_float+0xae>
 800d0b8:	232d      	movs	r3, #45	; 0x2d
 800d0ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d0be:	e798      	b.n	800cff2 <_printf_float+0xae>
 800d0c0:	9a06      	ldr	r2, [sp, #24]
 800d0c2:	2a47      	cmp	r2, #71	; 0x47
 800d0c4:	d1be      	bne.n	800d044 <_printf_float+0x100>
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1bc      	bne.n	800d044 <_printf_float+0x100>
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	e7b9      	b.n	800d042 <_printf_float+0xfe>
 800d0ce:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800d0d2:	d118      	bne.n	800d106 <_printf_float+0x1c2>
 800d0d4:	2900      	cmp	r1, #0
 800d0d6:	6863      	ldr	r3, [r4, #4]
 800d0d8:	dd0b      	ble.n	800d0f2 <_printf_float+0x1ae>
 800d0da:	6121      	str	r1, [r4, #16]
 800d0dc:	b913      	cbnz	r3, 800d0e4 <_printf_float+0x1a0>
 800d0de:	6822      	ldr	r2, [r4, #0]
 800d0e0:	07d0      	lsls	r0, r2, #31
 800d0e2:	d502      	bpl.n	800d0ea <_printf_float+0x1a6>
 800d0e4:	3301      	adds	r3, #1
 800d0e6:	440b      	add	r3, r1
 800d0e8:	6123      	str	r3, [r4, #16]
 800d0ea:	65a1      	str	r1, [r4, #88]	; 0x58
 800d0ec:	f04f 0900 	mov.w	r9, #0
 800d0f0:	e7de      	b.n	800d0b0 <_printf_float+0x16c>
 800d0f2:	b913      	cbnz	r3, 800d0fa <_printf_float+0x1b6>
 800d0f4:	6822      	ldr	r2, [r4, #0]
 800d0f6:	07d2      	lsls	r2, r2, #31
 800d0f8:	d501      	bpl.n	800d0fe <_printf_float+0x1ba>
 800d0fa:	3302      	adds	r3, #2
 800d0fc:	e7f4      	b.n	800d0e8 <_printf_float+0x1a4>
 800d0fe:	2301      	movs	r3, #1
 800d100:	e7f2      	b.n	800d0e8 <_printf_float+0x1a4>
 800d102:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800d106:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d108:	4299      	cmp	r1, r3
 800d10a:	db05      	blt.n	800d118 <_printf_float+0x1d4>
 800d10c:	6823      	ldr	r3, [r4, #0]
 800d10e:	6121      	str	r1, [r4, #16]
 800d110:	07d8      	lsls	r0, r3, #31
 800d112:	d5ea      	bpl.n	800d0ea <_printf_float+0x1a6>
 800d114:	1c4b      	adds	r3, r1, #1
 800d116:	e7e7      	b.n	800d0e8 <_printf_float+0x1a4>
 800d118:	2900      	cmp	r1, #0
 800d11a:	bfd4      	ite	le
 800d11c:	f1c1 0202 	rsble	r2, r1, #2
 800d120:	2201      	movgt	r2, #1
 800d122:	4413      	add	r3, r2
 800d124:	e7e0      	b.n	800d0e8 <_printf_float+0x1a4>
 800d126:	6823      	ldr	r3, [r4, #0]
 800d128:	055a      	lsls	r2, r3, #21
 800d12a:	d407      	bmi.n	800d13c <_printf_float+0x1f8>
 800d12c:	6923      	ldr	r3, [r4, #16]
 800d12e:	4642      	mov	r2, r8
 800d130:	4631      	mov	r1, r6
 800d132:	4628      	mov	r0, r5
 800d134:	47b8      	blx	r7
 800d136:	3001      	adds	r0, #1
 800d138:	d12c      	bne.n	800d194 <_printf_float+0x250>
 800d13a:	e764      	b.n	800d006 <_printf_float+0xc2>
 800d13c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800d140:	f240 80e0 	bls.w	800d304 <_printf_float+0x3c0>
 800d144:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d148:	2200      	movs	r2, #0
 800d14a:	2300      	movs	r3, #0
 800d14c:	f7f3 fce4 	bl	8000b18 <__aeabi_dcmpeq>
 800d150:	2800      	cmp	r0, #0
 800d152:	d034      	beq.n	800d1be <_printf_float+0x27a>
 800d154:	4a37      	ldr	r2, [pc, #220]	; (800d234 <_printf_float+0x2f0>)
 800d156:	2301      	movs	r3, #1
 800d158:	4631      	mov	r1, r6
 800d15a:	4628      	mov	r0, r5
 800d15c:	47b8      	blx	r7
 800d15e:	3001      	adds	r0, #1
 800d160:	f43f af51 	beq.w	800d006 <_printf_float+0xc2>
 800d164:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d168:	429a      	cmp	r2, r3
 800d16a:	db02      	blt.n	800d172 <_printf_float+0x22e>
 800d16c:	6823      	ldr	r3, [r4, #0]
 800d16e:	07d8      	lsls	r0, r3, #31
 800d170:	d510      	bpl.n	800d194 <_printf_float+0x250>
 800d172:	ee18 3a10 	vmov	r3, s16
 800d176:	4652      	mov	r2, sl
 800d178:	4631      	mov	r1, r6
 800d17a:	4628      	mov	r0, r5
 800d17c:	47b8      	blx	r7
 800d17e:	3001      	adds	r0, #1
 800d180:	f43f af41 	beq.w	800d006 <_printf_float+0xc2>
 800d184:	f04f 0800 	mov.w	r8, #0
 800d188:	f104 091a 	add.w	r9, r4, #26
 800d18c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d18e:	3b01      	subs	r3, #1
 800d190:	4543      	cmp	r3, r8
 800d192:	dc09      	bgt.n	800d1a8 <_printf_float+0x264>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	079b      	lsls	r3, r3, #30
 800d198:	f100 8105 	bmi.w	800d3a6 <_printf_float+0x462>
 800d19c:	68e0      	ldr	r0, [r4, #12]
 800d19e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1a0:	4298      	cmp	r0, r3
 800d1a2:	bfb8      	it	lt
 800d1a4:	4618      	movlt	r0, r3
 800d1a6:	e730      	b.n	800d00a <_printf_float+0xc6>
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	464a      	mov	r2, r9
 800d1ac:	4631      	mov	r1, r6
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	47b8      	blx	r7
 800d1b2:	3001      	adds	r0, #1
 800d1b4:	f43f af27 	beq.w	800d006 <_printf_float+0xc2>
 800d1b8:	f108 0801 	add.w	r8, r8, #1
 800d1bc:	e7e6      	b.n	800d18c <_printf_float+0x248>
 800d1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	dc39      	bgt.n	800d238 <_printf_float+0x2f4>
 800d1c4:	4a1b      	ldr	r2, [pc, #108]	; (800d234 <_printf_float+0x2f0>)
 800d1c6:	2301      	movs	r3, #1
 800d1c8:	4631      	mov	r1, r6
 800d1ca:	4628      	mov	r0, r5
 800d1cc:	47b8      	blx	r7
 800d1ce:	3001      	adds	r0, #1
 800d1d0:	f43f af19 	beq.w	800d006 <_printf_float+0xc2>
 800d1d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d1d8:	4313      	orrs	r3, r2
 800d1da:	d102      	bne.n	800d1e2 <_printf_float+0x29e>
 800d1dc:	6823      	ldr	r3, [r4, #0]
 800d1de:	07d9      	lsls	r1, r3, #31
 800d1e0:	d5d8      	bpl.n	800d194 <_printf_float+0x250>
 800d1e2:	ee18 3a10 	vmov	r3, s16
 800d1e6:	4652      	mov	r2, sl
 800d1e8:	4631      	mov	r1, r6
 800d1ea:	4628      	mov	r0, r5
 800d1ec:	47b8      	blx	r7
 800d1ee:	3001      	adds	r0, #1
 800d1f0:	f43f af09 	beq.w	800d006 <_printf_float+0xc2>
 800d1f4:	f04f 0900 	mov.w	r9, #0
 800d1f8:	f104 0a1a 	add.w	sl, r4, #26
 800d1fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d1fe:	425b      	negs	r3, r3
 800d200:	454b      	cmp	r3, r9
 800d202:	dc01      	bgt.n	800d208 <_printf_float+0x2c4>
 800d204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d206:	e792      	b.n	800d12e <_printf_float+0x1ea>
 800d208:	2301      	movs	r3, #1
 800d20a:	4652      	mov	r2, sl
 800d20c:	4631      	mov	r1, r6
 800d20e:	4628      	mov	r0, r5
 800d210:	47b8      	blx	r7
 800d212:	3001      	adds	r0, #1
 800d214:	f43f aef7 	beq.w	800d006 <_printf_float+0xc2>
 800d218:	f109 0901 	add.w	r9, r9, #1
 800d21c:	e7ee      	b.n	800d1fc <_printf_float+0x2b8>
 800d21e:	bf00      	nop
 800d220:	7fefffff 	.word	0x7fefffff
 800d224:	08012708 	.word	0x08012708
 800d228:	0801270c 	.word	0x0801270c
 800d22c:	08012714 	.word	0x08012714
 800d230:	08012710 	.word	0x08012710
 800d234:	08012718 	.word	0x08012718
 800d238:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d23a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d23c:	429a      	cmp	r2, r3
 800d23e:	bfa8      	it	ge
 800d240:	461a      	movge	r2, r3
 800d242:	2a00      	cmp	r2, #0
 800d244:	4691      	mov	r9, r2
 800d246:	dc37      	bgt.n	800d2b8 <_printf_float+0x374>
 800d248:	f04f 0b00 	mov.w	fp, #0
 800d24c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d250:	f104 021a 	add.w	r2, r4, #26
 800d254:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d256:	9305      	str	r3, [sp, #20]
 800d258:	eba3 0309 	sub.w	r3, r3, r9
 800d25c:	455b      	cmp	r3, fp
 800d25e:	dc33      	bgt.n	800d2c8 <_printf_float+0x384>
 800d260:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d264:	429a      	cmp	r2, r3
 800d266:	db3b      	blt.n	800d2e0 <_printf_float+0x39c>
 800d268:	6823      	ldr	r3, [r4, #0]
 800d26a:	07da      	lsls	r2, r3, #31
 800d26c:	d438      	bmi.n	800d2e0 <_printf_float+0x39c>
 800d26e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d270:	9a05      	ldr	r2, [sp, #20]
 800d272:	9909      	ldr	r1, [sp, #36]	; 0x24
 800d274:	1a9a      	subs	r2, r3, r2
 800d276:	eba3 0901 	sub.w	r9, r3, r1
 800d27a:	4591      	cmp	r9, r2
 800d27c:	bfa8      	it	ge
 800d27e:	4691      	movge	r9, r2
 800d280:	f1b9 0f00 	cmp.w	r9, #0
 800d284:	dc35      	bgt.n	800d2f2 <_printf_float+0x3ae>
 800d286:	f04f 0800 	mov.w	r8, #0
 800d28a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d28e:	f104 0a1a 	add.w	sl, r4, #26
 800d292:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800d296:	1a9b      	subs	r3, r3, r2
 800d298:	eba3 0309 	sub.w	r3, r3, r9
 800d29c:	4543      	cmp	r3, r8
 800d29e:	f77f af79 	ble.w	800d194 <_printf_float+0x250>
 800d2a2:	2301      	movs	r3, #1
 800d2a4:	4652      	mov	r2, sl
 800d2a6:	4631      	mov	r1, r6
 800d2a8:	4628      	mov	r0, r5
 800d2aa:	47b8      	blx	r7
 800d2ac:	3001      	adds	r0, #1
 800d2ae:	f43f aeaa 	beq.w	800d006 <_printf_float+0xc2>
 800d2b2:	f108 0801 	add.w	r8, r8, #1
 800d2b6:	e7ec      	b.n	800d292 <_printf_float+0x34e>
 800d2b8:	4613      	mov	r3, r2
 800d2ba:	4631      	mov	r1, r6
 800d2bc:	4642      	mov	r2, r8
 800d2be:	4628      	mov	r0, r5
 800d2c0:	47b8      	blx	r7
 800d2c2:	3001      	adds	r0, #1
 800d2c4:	d1c0      	bne.n	800d248 <_printf_float+0x304>
 800d2c6:	e69e      	b.n	800d006 <_printf_float+0xc2>
 800d2c8:	2301      	movs	r3, #1
 800d2ca:	4631      	mov	r1, r6
 800d2cc:	4628      	mov	r0, r5
 800d2ce:	9205      	str	r2, [sp, #20]
 800d2d0:	47b8      	blx	r7
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	f43f ae97 	beq.w	800d006 <_printf_float+0xc2>
 800d2d8:	9a05      	ldr	r2, [sp, #20]
 800d2da:	f10b 0b01 	add.w	fp, fp, #1
 800d2de:	e7b9      	b.n	800d254 <_printf_float+0x310>
 800d2e0:	ee18 3a10 	vmov	r3, s16
 800d2e4:	4652      	mov	r2, sl
 800d2e6:	4631      	mov	r1, r6
 800d2e8:	4628      	mov	r0, r5
 800d2ea:	47b8      	blx	r7
 800d2ec:	3001      	adds	r0, #1
 800d2ee:	d1be      	bne.n	800d26e <_printf_float+0x32a>
 800d2f0:	e689      	b.n	800d006 <_printf_float+0xc2>
 800d2f2:	9a05      	ldr	r2, [sp, #20]
 800d2f4:	464b      	mov	r3, r9
 800d2f6:	4442      	add	r2, r8
 800d2f8:	4631      	mov	r1, r6
 800d2fa:	4628      	mov	r0, r5
 800d2fc:	47b8      	blx	r7
 800d2fe:	3001      	adds	r0, #1
 800d300:	d1c1      	bne.n	800d286 <_printf_float+0x342>
 800d302:	e680      	b.n	800d006 <_printf_float+0xc2>
 800d304:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d306:	2a01      	cmp	r2, #1
 800d308:	dc01      	bgt.n	800d30e <_printf_float+0x3ca>
 800d30a:	07db      	lsls	r3, r3, #31
 800d30c:	d538      	bpl.n	800d380 <_printf_float+0x43c>
 800d30e:	2301      	movs	r3, #1
 800d310:	4642      	mov	r2, r8
 800d312:	4631      	mov	r1, r6
 800d314:	4628      	mov	r0, r5
 800d316:	47b8      	blx	r7
 800d318:	3001      	adds	r0, #1
 800d31a:	f43f ae74 	beq.w	800d006 <_printf_float+0xc2>
 800d31e:	ee18 3a10 	vmov	r3, s16
 800d322:	4652      	mov	r2, sl
 800d324:	4631      	mov	r1, r6
 800d326:	4628      	mov	r0, r5
 800d328:	47b8      	blx	r7
 800d32a:	3001      	adds	r0, #1
 800d32c:	f43f ae6b 	beq.w	800d006 <_printf_float+0xc2>
 800d330:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800d334:	2200      	movs	r2, #0
 800d336:	2300      	movs	r3, #0
 800d338:	f7f3 fbee 	bl	8000b18 <__aeabi_dcmpeq>
 800d33c:	b9d8      	cbnz	r0, 800d376 <_printf_float+0x432>
 800d33e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d340:	f108 0201 	add.w	r2, r8, #1
 800d344:	3b01      	subs	r3, #1
 800d346:	4631      	mov	r1, r6
 800d348:	4628      	mov	r0, r5
 800d34a:	47b8      	blx	r7
 800d34c:	3001      	adds	r0, #1
 800d34e:	d10e      	bne.n	800d36e <_printf_float+0x42a>
 800d350:	e659      	b.n	800d006 <_printf_float+0xc2>
 800d352:	2301      	movs	r3, #1
 800d354:	4652      	mov	r2, sl
 800d356:	4631      	mov	r1, r6
 800d358:	4628      	mov	r0, r5
 800d35a:	47b8      	blx	r7
 800d35c:	3001      	adds	r0, #1
 800d35e:	f43f ae52 	beq.w	800d006 <_printf_float+0xc2>
 800d362:	f108 0801 	add.w	r8, r8, #1
 800d366:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d368:	3b01      	subs	r3, #1
 800d36a:	4543      	cmp	r3, r8
 800d36c:	dcf1      	bgt.n	800d352 <_printf_float+0x40e>
 800d36e:	464b      	mov	r3, r9
 800d370:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800d374:	e6dc      	b.n	800d130 <_printf_float+0x1ec>
 800d376:	f04f 0800 	mov.w	r8, #0
 800d37a:	f104 0a1a 	add.w	sl, r4, #26
 800d37e:	e7f2      	b.n	800d366 <_printf_float+0x422>
 800d380:	2301      	movs	r3, #1
 800d382:	4642      	mov	r2, r8
 800d384:	e7df      	b.n	800d346 <_printf_float+0x402>
 800d386:	2301      	movs	r3, #1
 800d388:	464a      	mov	r2, r9
 800d38a:	4631      	mov	r1, r6
 800d38c:	4628      	mov	r0, r5
 800d38e:	47b8      	blx	r7
 800d390:	3001      	adds	r0, #1
 800d392:	f43f ae38 	beq.w	800d006 <_printf_float+0xc2>
 800d396:	f108 0801 	add.w	r8, r8, #1
 800d39a:	68e3      	ldr	r3, [r4, #12]
 800d39c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d39e:	1a5b      	subs	r3, r3, r1
 800d3a0:	4543      	cmp	r3, r8
 800d3a2:	dcf0      	bgt.n	800d386 <_printf_float+0x442>
 800d3a4:	e6fa      	b.n	800d19c <_printf_float+0x258>
 800d3a6:	f04f 0800 	mov.w	r8, #0
 800d3aa:	f104 0919 	add.w	r9, r4, #25
 800d3ae:	e7f4      	b.n	800d39a <_printf_float+0x456>

0800d3b0 <_printf_common>:
 800d3b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3b4:	4616      	mov	r6, r2
 800d3b6:	4699      	mov	r9, r3
 800d3b8:	688a      	ldr	r2, [r1, #8]
 800d3ba:	690b      	ldr	r3, [r1, #16]
 800d3bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d3c0:	4293      	cmp	r3, r2
 800d3c2:	bfb8      	it	lt
 800d3c4:	4613      	movlt	r3, r2
 800d3c6:	6033      	str	r3, [r6, #0]
 800d3c8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	460c      	mov	r4, r1
 800d3d0:	b10a      	cbz	r2, 800d3d6 <_printf_common+0x26>
 800d3d2:	3301      	adds	r3, #1
 800d3d4:	6033      	str	r3, [r6, #0]
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	0699      	lsls	r1, r3, #26
 800d3da:	bf42      	ittt	mi
 800d3dc:	6833      	ldrmi	r3, [r6, #0]
 800d3de:	3302      	addmi	r3, #2
 800d3e0:	6033      	strmi	r3, [r6, #0]
 800d3e2:	6825      	ldr	r5, [r4, #0]
 800d3e4:	f015 0506 	ands.w	r5, r5, #6
 800d3e8:	d106      	bne.n	800d3f8 <_printf_common+0x48>
 800d3ea:	f104 0a19 	add.w	sl, r4, #25
 800d3ee:	68e3      	ldr	r3, [r4, #12]
 800d3f0:	6832      	ldr	r2, [r6, #0]
 800d3f2:	1a9b      	subs	r3, r3, r2
 800d3f4:	42ab      	cmp	r3, r5
 800d3f6:	dc26      	bgt.n	800d446 <_printf_common+0x96>
 800d3f8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d3fc:	1e13      	subs	r3, r2, #0
 800d3fe:	6822      	ldr	r2, [r4, #0]
 800d400:	bf18      	it	ne
 800d402:	2301      	movne	r3, #1
 800d404:	0692      	lsls	r2, r2, #26
 800d406:	d42b      	bmi.n	800d460 <_printf_common+0xb0>
 800d408:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d40c:	4649      	mov	r1, r9
 800d40e:	4638      	mov	r0, r7
 800d410:	47c0      	blx	r8
 800d412:	3001      	adds	r0, #1
 800d414:	d01e      	beq.n	800d454 <_printf_common+0xa4>
 800d416:	6823      	ldr	r3, [r4, #0]
 800d418:	68e5      	ldr	r5, [r4, #12]
 800d41a:	6832      	ldr	r2, [r6, #0]
 800d41c:	f003 0306 	and.w	r3, r3, #6
 800d420:	2b04      	cmp	r3, #4
 800d422:	bf08      	it	eq
 800d424:	1aad      	subeq	r5, r5, r2
 800d426:	68a3      	ldr	r3, [r4, #8]
 800d428:	6922      	ldr	r2, [r4, #16]
 800d42a:	bf0c      	ite	eq
 800d42c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d430:	2500      	movne	r5, #0
 800d432:	4293      	cmp	r3, r2
 800d434:	bfc4      	itt	gt
 800d436:	1a9b      	subgt	r3, r3, r2
 800d438:	18ed      	addgt	r5, r5, r3
 800d43a:	2600      	movs	r6, #0
 800d43c:	341a      	adds	r4, #26
 800d43e:	42b5      	cmp	r5, r6
 800d440:	d11a      	bne.n	800d478 <_printf_common+0xc8>
 800d442:	2000      	movs	r0, #0
 800d444:	e008      	b.n	800d458 <_printf_common+0xa8>
 800d446:	2301      	movs	r3, #1
 800d448:	4652      	mov	r2, sl
 800d44a:	4649      	mov	r1, r9
 800d44c:	4638      	mov	r0, r7
 800d44e:	47c0      	blx	r8
 800d450:	3001      	adds	r0, #1
 800d452:	d103      	bne.n	800d45c <_printf_common+0xac>
 800d454:	f04f 30ff 	mov.w	r0, #4294967295
 800d458:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45c:	3501      	adds	r5, #1
 800d45e:	e7c6      	b.n	800d3ee <_printf_common+0x3e>
 800d460:	18e1      	adds	r1, r4, r3
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	2030      	movs	r0, #48	; 0x30
 800d466:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d46a:	4422      	add	r2, r4
 800d46c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d470:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d474:	3302      	adds	r3, #2
 800d476:	e7c7      	b.n	800d408 <_printf_common+0x58>
 800d478:	2301      	movs	r3, #1
 800d47a:	4622      	mov	r2, r4
 800d47c:	4649      	mov	r1, r9
 800d47e:	4638      	mov	r0, r7
 800d480:	47c0      	blx	r8
 800d482:	3001      	adds	r0, #1
 800d484:	d0e6      	beq.n	800d454 <_printf_common+0xa4>
 800d486:	3601      	adds	r6, #1
 800d488:	e7d9      	b.n	800d43e <_printf_common+0x8e>
	...

0800d48c <_printf_i>:
 800d48c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d490:	7e0f      	ldrb	r7, [r1, #24]
 800d492:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d494:	2f78      	cmp	r7, #120	; 0x78
 800d496:	4691      	mov	r9, r2
 800d498:	4680      	mov	r8, r0
 800d49a:	460c      	mov	r4, r1
 800d49c:	469a      	mov	sl, r3
 800d49e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d4a2:	d807      	bhi.n	800d4b4 <_printf_i+0x28>
 800d4a4:	2f62      	cmp	r7, #98	; 0x62
 800d4a6:	d80a      	bhi.n	800d4be <_printf_i+0x32>
 800d4a8:	2f00      	cmp	r7, #0
 800d4aa:	f000 80d8 	beq.w	800d65e <_printf_i+0x1d2>
 800d4ae:	2f58      	cmp	r7, #88	; 0x58
 800d4b0:	f000 80a3 	beq.w	800d5fa <_printf_i+0x16e>
 800d4b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d4b8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d4bc:	e03a      	b.n	800d534 <_printf_i+0xa8>
 800d4be:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d4c2:	2b15      	cmp	r3, #21
 800d4c4:	d8f6      	bhi.n	800d4b4 <_printf_i+0x28>
 800d4c6:	a101      	add	r1, pc, #4	; (adr r1, 800d4cc <_printf_i+0x40>)
 800d4c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d4cc:	0800d525 	.word	0x0800d525
 800d4d0:	0800d539 	.word	0x0800d539
 800d4d4:	0800d4b5 	.word	0x0800d4b5
 800d4d8:	0800d4b5 	.word	0x0800d4b5
 800d4dc:	0800d4b5 	.word	0x0800d4b5
 800d4e0:	0800d4b5 	.word	0x0800d4b5
 800d4e4:	0800d539 	.word	0x0800d539
 800d4e8:	0800d4b5 	.word	0x0800d4b5
 800d4ec:	0800d4b5 	.word	0x0800d4b5
 800d4f0:	0800d4b5 	.word	0x0800d4b5
 800d4f4:	0800d4b5 	.word	0x0800d4b5
 800d4f8:	0800d645 	.word	0x0800d645
 800d4fc:	0800d569 	.word	0x0800d569
 800d500:	0800d627 	.word	0x0800d627
 800d504:	0800d4b5 	.word	0x0800d4b5
 800d508:	0800d4b5 	.word	0x0800d4b5
 800d50c:	0800d667 	.word	0x0800d667
 800d510:	0800d4b5 	.word	0x0800d4b5
 800d514:	0800d569 	.word	0x0800d569
 800d518:	0800d4b5 	.word	0x0800d4b5
 800d51c:	0800d4b5 	.word	0x0800d4b5
 800d520:	0800d62f 	.word	0x0800d62f
 800d524:	682b      	ldr	r3, [r5, #0]
 800d526:	1d1a      	adds	r2, r3, #4
 800d528:	681b      	ldr	r3, [r3, #0]
 800d52a:	602a      	str	r2, [r5, #0]
 800d52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d530:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d534:	2301      	movs	r3, #1
 800d536:	e0a3      	b.n	800d680 <_printf_i+0x1f4>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	6829      	ldr	r1, [r5, #0]
 800d53c:	0606      	lsls	r6, r0, #24
 800d53e:	f101 0304 	add.w	r3, r1, #4
 800d542:	d50a      	bpl.n	800d55a <_printf_i+0xce>
 800d544:	680e      	ldr	r6, [r1, #0]
 800d546:	602b      	str	r3, [r5, #0]
 800d548:	2e00      	cmp	r6, #0
 800d54a:	da03      	bge.n	800d554 <_printf_i+0xc8>
 800d54c:	232d      	movs	r3, #45	; 0x2d
 800d54e:	4276      	negs	r6, r6
 800d550:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d554:	485e      	ldr	r0, [pc, #376]	; (800d6d0 <_printf_i+0x244>)
 800d556:	230a      	movs	r3, #10
 800d558:	e019      	b.n	800d58e <_printf_i+0x102>
 800d55a:	680e      	ldr	r6, [r1, #0]
 800d55c:	602b      	str	r3, [r5, #0]
 800d55e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d562:	bf18      	it	ne
 800d564:	b236      	sxthne	r6, r6
 800d566:	e7ef      	b.n	800d548 <_printf_i+0xbc>
 800d568:	682b      	ldr	r3, [r5, #0]
 800d56a:	6820      	ldr	r0, [r4, #0]
 800d56c:	1d19      	adds	r1, r3, #4
 800d56e:	6029      	str	r1, [r5, #0]
 800d570:	0601      	lsls	r1, r0, #24
 800d572:	d501      	bpl.n	800d578 <_printf_i+0xec>
 800d574:	681e      	ldr	r6, [r3, #0]
 800d576:	e002      	b.n	800d57e <_printf_i+0xf2>
 800d578:	0646      	lsls	r6, r0, #25
 800d57a:	d5fb      	bpl.n	800d574 <_printf_i+0xe8>
 800d57c:	881e      	ldrh	r6, [r3, #0]
 800d57e:	4854      	ldr	r0, [pc, #336]	; (800d6d0 <_printf_i+0x244>)
 800d580:	2f6f      	cmp	r7, #111	; 0x6f
 800d582:	bf0c      	ite	eq
 800d584:	2308      	moveq	r3, #8
 800d586:	230a      	movne	r3, #10
 800d588:	2100      	movs	r1, #0
 800d58a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d58e:	6865      	ldr	r5, [r4, #4]
 800d590:	60a5      	str	r5, [r4, #8]
 800d592:	2d00      	cmp	r5, #0
 800d594:	bfa2      	ittt	ge
 800d596:	6821      	ldrge	r1, [r4, #0]
 800d598:	f021 0104 	bicge.w	r1, r1, #4
 800d59c:	6021      	strge	r1, [r4, #0]
 800d59e:	b90e      	cbnz	r6, 800d5a4 <_printf_i+0x118>
 800d5a0:	2d00      	cmp	r5, #0
 800d5a2:	d04d      	beq.n	800d640 <_printf_i+0x1b4>
 800d5a4:	4615      	mov	r5, r2
 800d5a6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d5aa:	fb03 6711 	mls	r7, r3, r1, r6
 800d5ae:	5dc7      	ldrb	r7, [r0, r7]
 800d5b0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d5b4:	4637      	mov	r7, r6
 800d5b6:	42bb      	cmp	r3, r7
 800d5b8:	460e      	mov	r6, r1
 800d5ba:	d9f4      	bls.n	800d5a6 <_printf_i+0x11a>
 800d5bc:	2b08      	cmp	r3, #8
 800d5be:	d10b      	bne.n	800d5d8 <_printf_i+0x14c>
 800d5c0:	6823      	ldr	r3, [r4, #0]
 800d5c2:	07de      	lsls	r6, r3, #31
 800d5c4:	d508      	bpl.n	800d5d8 <_printf_i+0x14c>
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	6861      	ldr	r1, [r4, #4]
 800d5ca:	4299      	cmp	r1, r3
 800d5cc:	bfde      	ittt	le
 800d5ce:	2330      	movle	r3, #48	; 0x30
 800d5d0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d5d4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d5d8:	1b52      	subs	r2, r2, r5
 800d5da:	6122      	str	r2, [r4, #16]
 800d5dc:	f8cd a000 	str.w	sl, [sp]
 800d5e0:	464b      	mov	r3, r9
 800d5e2:	aa03      	add	r2, sp, #12
 800d5e4:	4621      	mov	r1, r4
 800d5e6:	4640      	mov	r0, r8
 800d5e8:	f7ff fee2 	bl	800d3b0 <_printf_common>
 800d5ec:	3001      	adds	r0, #1
 800d5ee:	d14c      	bne.n	800d68a <_printf_i+0x1fe>
 800d5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f4:	b004      	add	sp, #16
 800d5f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5fa:	4835      	ldr	r0, [pc, #212]	; (800d6d0 <_printf_i+0x244>)
 800d5fc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d600:	6829      	ldr	r1, [r5, #0]
 800d602:	6823      	ldr	r3, [r4, #0]
 800d604:	f851 6b04 	ldr.w	r6, [r1], #4
 800d608:	6029      	str	r1, [r5, #0]
 800d60a:	061d      	lsls	r5, r3, #24
 800d60c:	d514      	bpl.n	800d638 <_printf_i+0x1ac>
 800d60e:	07df      	lsls	r7, r3, #31
 800d610:	bf44      	itt	mi
 800d612:	f043 0320 	orrmi.w	r3, r3, #32
 800d616:	6023      	strmi	r3, [r4, #0]
 800d618:	b91e      	cbnz	r6, 800d622 <_printf_i+0x196>
 800d61a:	6823      	ldr	r3, [r4, #0]
 800d61c:	f023 0320 	bic.w	r3, r3, #32
 800d620:	6023      	str	r3, [r4, #0]
 800d622:	2310      	movs	r3, #16
 800d624:	e7b0      	b.n	800d588 <_printf_i+0xfc>
 800d626:	6823      	ldr	r3, [r4, #0]
 800d628:	f043 0320 	orr.w	r3, r3, #32
 800d62c:	6023      	str	r3, [r4, #0]
 800d62e:	2378      	movs	r3, #120	; 0x78
 800d630:	4828      	ldr	r0, [pc, #160]	; (800d6d4 <_printf_i+0x248>)
 800d632:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d636:	e7e3      	b.n	800d600 <_printf_i+0x174>
 800d638:	0659      	lsls	r1, r3, #25
 800d63a:	bf48      	it	mi
 800d63c:	b2b6      	uxthmi	r6, r6
 800d63e:	e7e6      	b.n	800d60e <_printf_i+0x182>
 800d640:	4615      	mov	r5, r2
 800d642:	e7bb      	b.n	800d5bc <_printf_i+0x130>
 800d644:	682b      	ldr	r3, [r5, #0]
 800d646:	6826      	ldr	r6, [r4, #0]
 800d648:	6961      	ldr	r1, [r4, #20]
 800d64a:	1d18      	adds	r0, r3, #4
 800d64c:	6028      	str	r0, [r5, #0]
 800d64e:	0635      	lsls	r5, r6, #24
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	d501      	bpl.n	800d658 <_printf_i+0x1cc>
 800d654:	6019      	str	r1, [r3, #0]
 800d656:	e002      	b.n	800d65e <_printf_i+0x1d2>
 800d658:	0670      	lsls	r0, r6, #25
 800d65a:	d5fb      	bpl.n	800d654 <_printf_i+0x1c8>
 800d65c:	8019      	strh	r1, [r3, #0]
 800d65e:	2300      	movs	r3, #0
 800d660:	6123      	str	r3, [r4, #16]
 800d662:	4615      	mov	r5, r2
 800d664:	e7ba      	b.n	800d5dc <_printf_i+0x150>
 800d666:	682b      	ldr	r3, [r5, #0]
 800d668:	1d1a      	adds	r2, r3, #4
 800d66a:	602a      	str	r2, [r5, #0]
 800d66c:	681d      	ldr	r5, [r3, #0]
 800d66e:	6862      	ldr	r2, [r4, #4]
 800d670:	2100      	movs	r1, #0
 800d672:	4628      	mov	r0, r5
 800d674:	f7f2 fddc 	bl	8000230 <memchr>
 800d678:	b108      	cbz	r0, 800d67e <_printf_i+0x1f2>
 800d67a:	1b40      	subs	r0, r0, r5
 800d67c:	6060      	str	r0, [r4, #4]
 800d67e:	6863      	ldr	r3, [r4, #4]
 800d680:	6123      	str	r3, [r4, #16]
 800d682:	2300      	movs	r3, #0
 800d684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d688:	e7a8      	b.n	800d5dc <_printf_i+0x150>
 800d68a:	6923      	ldr	r3, [r4, #16]
 800d68c:	462a      	mov	r2, r5
 800d68e:	4649      	mov	r1, r9
 800d690:	4640      	mov	r0, r8
 800d692:	47d0      	blx	sl
 800d694:	3001      	adds	r0, #1
 800d696:	d0ab      	beq.n	800d5f0 <_printf_i+0x164>
 800d698:	6823      	ldr	r3, [r4, #0]
 800d69a:	079b      	lsls	r3, r3, #30
 800d69c:	d413      	bmi.n	800d6c6 <_printf_i+0x23a>
 800d69e:	68e0      	ldr	r0, [r4, #12]
 800d6a0:	9b03      	ldr	r3, [sp, #12]
 800d6a2:	4298      	cmp	r0, r3
 800d6a4:	bfb8      	it	lt
 800d6a6:	4618      	movlt	r0, r3
 800d6a8:	e7a4      	b.n	800d5f4 <_printf_i+0x168>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	4632      	mov	r2, r6
 800d6ae:	4649      	mov	r1, r9
 800d6b0:	4640      	mov	r0, r8
 800d6b2:	47d0      	blx	sl
 800d6b4:	3001      	adds	r0, #1
 800d6b6:	d09b      	beq.n	800d5f0 <_printf_i+0x164>
 800d6b8:	3501      	adds	r5, #1
 800d6ba:	68e3      	ldr	r3, [r4, #12]
 800d6bc:	9903      	ldr	r1, [sp, #12]
 800d6be:	1a5b      	subs	r3, r3, r1
 800d6c0:	42ab      	cmp	r3, r5
 800d6c2:	dcf2      	bgt.n	800d6aa <_printf_i+0x21e>
 800d6c4:	e7eb      	b.n	800d69e <_printf_i+0x212>
 800d6c6:	2500      	movs	r5, #0
 800d6c8:	f104 0619 	add.w	r6, r4, #25
 800d6cc:	e7f5      	b.n	800d6ba <_printf_i+0x22e>
 800d6ce:	bf00      	nop
 800d6d0:	0801271a 	.word	0x0801271a
 800d6d4:	0801272b 	.word	0x0801272b

0800d6d8 <iprintf>:
 800d6d8:	b40f      	push	{r0, r1, r2, r3}
 800d6da:	4b0a      	ldr	r3, [pc, #40]	; (800d704 <iprintf+0x2c>)
 800d6dc:	b513      	push	{r0, r1, r4, lr}
 800d6de:	681c      	ldr	r4, [r3, #0]
 800d6e0:	b124      	cbz	r4, 800d6ec <iprintf+0x14>
 800d6e2:	69a3      	ldr	r3, [r4, #24]
 800d6e4:	b913      	cbnz	r3, 800d6ec <iprintf+0x14>
 800d6e6:	4620      	mov	r0, r4
 800d6e8:	f001 ff96 	bl	800f618 <__sinit>
 800d6ec:	ab05      	add	r3, sp, #20
 800d6ee:	9a04      	ldr	r2, [sp, #16]
 800d6f0:	68a1      	ldr	r1, [r4, #8]
 800d6f2:	9301      	str	r3, [sp, #4]
 800d6f4:	4620      	mov	r0, r4
 800d6f6:	f003 fa03 	bl	8010b00 <_vfiprintf_r>
 800d6fa:	b002      	add	sp, #8
 800d6fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d700:	b004      	add	sp, #16
 800d702:	4770      	bx	lr
 800d704:	2000002c 	.word	0x2000002c

0800d708 <_puts_r>:
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	460e      	mov	r6, r1
 800d70c:	4605      	mov	r5, r0
 800d70e:	b118      	cbz	r0, 800d718 <_puts_r+0x10>
 800d710:	6983      	ldr	r3, [r0, #24]
 800d712:	b90b      	cbnz	r3, 800d718 <_puts_r+0x10>
 800d714:	f001 ff80 	bl	800f618 <__sinit>
 800d718:	69ab      	ldr	r3, [r5, #24]
 800d71a:	68ac      	ldr	r4, [r5, #8]
 800d71c:	b913      	cbnz	r3, 800d724 <_puts_r+0x1c>
 800d71e:	4628      	mov	r0, r5
 800d720:	f001 ff7a 	bl	800f618 <__sinit>
 800d724:	4b2c      	ldr	r3, [pc, #176]	; (800d7d8 <_puts_r+0xd0>)
 800d726:	429c      	cmp	r4, r3
 800d728:	d120      	bne.n	800d76c <_puts_r+0x64>
 800d72a:	686c      	ldr	r4, [r5, #4]
 800d72c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d72e:	07db      	lsls	r3, r3, #31
 800d730:	d405      	bmi.n	800d73e <_puts_r+0x36>
 800d732:	89a3      	ldrh	r3, [r4, #12]
 800d734:	0598      	lsls	r0, r3, #22
 800d736:	d402      	bmi.n	800d73e <_puts_r+0x36>
 800d738:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d73a:	f002 fb7e 	bl	800fe3a <__retarget_lock_acquire_recursive>
 800d73e:	89a3      	ldrh	r3, [r4, #12]
 800d740:	0719      	lsls	r1, r3, #28
 800d742:	d51d      	bpl.n	800d780 <_puts_r+0x78>
 800d744:	6923      	ldr	r3, [r4, #16]
 800d746:	b1db      	cbz	r3, 800d780 <_puts_r+0x78>
 800d748:	3e01      	subs	r6, #1
 800d74a:	68a3      	ldr	r3, [r4, #8]
 800d74c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d750:	3b01      	subs	r3, #1
 800d752:	60a3      	str	r3, [r4, #8]
 800d754:	bb39      	cbnz	r1, 800d7a6 <_puts_r+0x9e>
 800d756:	2b00      	cmp	r3, #0
 800d758:	da38      	bge.n	800d7cc <_puts_r+0xc4>
 800d75a:	4622      	mov	r2, r4
 800d75c:	210a      	movs	r1, #10
 800d75e:	4628      	mov	r0, r5
 800d760:	f000 ff04 	bl	800e56c <__swbuf_r>
 800d764:	3001      	adds	r0, #1
 800d766:	d011      	beq.n	800d78c <_puts_r+0x84>
 800d768:	250a      	movs	r5, #10
 800d76a:	e011      	b.n	800d790 <_puts_r+0x88>
 800d76c:	4b1b      	ldr	r3, [pc, #108]	; (800d7dc <_puts_r+0xd4>)
 800d76e:	429c      	cmp	r4, r3
 800d770:	d101      	bne.n	800d776 <_puts_r+0x6e>
 800d772:	68ac      	ldr	r4, [r5, #8]
 800d774:	e7da      	b.n	800d72c <_puts_r+0x24>
 800d776:	4b1a      	ldr	r3, [pc, #104]	; (800d7e0 <_puts_r+0xd8>)
 800d778:	429c      	cmp	r4, r3
 800d77a:	bf08      	it	eq
 800d77c:	68ec      	ldreq	r4, [r5, #12]
 800d77e:	e7d5      	b.n	800d72c <_puts_r+0x24>
 800d780:	4621      	mov	r1, r4
 800d782:	4628      	mov	r0, r5
 800d784:	f000 ff44 	bl	800e610 <__swsetup_r>
 800d788:	2800      	cmp	r0, #0
 800d78a:	d0dd      	beq.n	800d748 <_puts_r+0x40>
 800d78c:	f04f 35ff 	mov.w	r5, #4294967295
 800d790:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d792:	07da      	lsls	r2, r3, #31
 800d794:	d405      	bmi.n	800d7a2 <_puts_r+0x9a>
 800d796:	89a3      	ldrh	r3, [r4, #12]
 800d798:	059b      	lsls	r3, r3, #22
 800d79a:	d402      	bmi.n	800d7a2 <_puts_r+0x9a>
 800d79c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d79e:	f002 fb4d 	bl	800fe3c <__retarget_lock_release_recursive>
 800d7a2:	4628      	mov	r0, r5
 800d7a4:	bd70      	pop	{r4, r5, r6, pc}
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	da04      	bge.n	800d7b4 <_puts_r+0xac>
 800d7aa:	69a2      	ldr	r2, [r4, #24]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	dc06      	bgt.n	800d7be <_puts_r+0xb6>
 800d7b0:	290a      	cmp	r1, #10
 800d7b2:	d004      	beq.n	800d7be <_puts_r+0xb6>
 800d7b4:	6823      	ldr	r3, [r4, #0]
 800d7b6:	1c5a      	adds	r2, r3, #1
 800d7b8:	6022      	str	r2, [r4, #0]
 800d7ba:	7019      	strb	r1, [r3, #0]
 800d7bc:	e7c5      	b.n	800d74a <_puts_r+0x42>
 800d7be:	4622      	mov	r2, r4
 800d7c0:	4628      	mov	r0, r5
 800d7c2:	f000 fed3 	bl	800e56c <__swbuf_r>
 800d7c6:	3001      	adds	r0, #1
 800d7c8:	d1bf      	bne.n	800d74a <_puts_r+0x42>
 800d7ca:	e7df      	b.n	800d78c <_puts_r+0x84>
 800d7cc:	6823      	ldr	r3, [r4, #0]
 800d7ce:	250a      	movs	r5, #10
 800d7d0:	1c5a      	adds	r2, r3, #1
 800d7d2:	6022      	str	r2, [r4, #0]
 800d7d4:	701d      	strb	r5, [r3, #0]
 800d7d6:	e7db      	b.n	800d790 <_puts_r+0x88>
 800d7d8:	08012944 	.word	0x08012944
 800d7dc:	08012964 	.word	0x08012964
 800d7e0:	08012924 	.word	0x08012924

0800d7e4 <puts>:
 800d7e4:	4b02      	ldr	r3, [pc, #8]	; (800d7f0 <puts+0xc>)
 800d7e6:	4601      	mov	r1, r0
 800d7e8:	6818      	ldr	r0, [r3, #0]
 800d7ea:	f7ff bf8d 	b.w	800d708 <_puts_r>
 800d7ee:	bf00      	nop
 800d7f0:	2000002c 	.word	0x2000002c

0800d7f4 <sulp>:
 800d7f4:	b570      	push	{r4, r5, r6, lr}
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	460d      	mov	r5, r1
 800d7fa:	ec45 4b10 	vmov	d0, r4, r5
 800d7fe:	4616      	mov	r6, r2
 800d800:	f002 ff0e 	bl	8010620 <__ulp>
 800d804:	ec51 0b10 	vmov	r0, r1, d0
 800d808:	b17e      	cbz	r6, 800d82a <sulp+0x36>
 800d80a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d80e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d812:	2b00      	cmp	r3, #0
 800d814:	dd09      	ble.n	800d82a <sulp+0x36>
 800d816:	051b      	lsls	r3, r3, #20
 800d818:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d81c:	2400      	movs	r4, #0
 800d81e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d822:	4622      	mov	r2, r4
 800d824:	462b      	mov	r3, r5
 800d826:	f7f2 ff0f 	bl	8000648 <__aeabi_dmul>
 800d82a:	bd70      	pop	{r4, r5, r6, pc}
 800d82c:	0000      	movs	r0, r0
	...

0800d830 <_strtod_l>:
 800d830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d834:	ed2d 8b02 	vpush	{d8}
 800d838:	b09d      	sub	sp, #116	; 0x74
 800d83a:	461f      	mov	r7, r3
 800d83c:	2300      	movs	r3, #0
 800d83e:	9318      	str	r3, [sp, #96]	; 0x60
 800d840:	4ba2      	ldr	r3, [pc, #648]	; (800dacc <_strtod_l+0x29c>)
 800d842:	9213      	str	r2, [sp, #76]	; 0x4c
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	9305      	str	r3, [sp, #20]
 800d848:	4604      	mov	r4, r0
 800d84a:	4618      	mov	r0, r3
 800d84c:	4688      	mov	r8, r1
 800d84e:	f7f2 fce7 	bl	8000220 <strlen>
 800d852:	f04f 0a00 	mov.w	sl, #0
 800d856:	4605      	mov	r5, r0
 800d858:	f04f 0b00 	mov.w	fp, #0
 800d85c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d860:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d862:	781a      	ldrb	r2, [r3, #0]
 800d864:	2a2b      	cmp	r2, #43	; 0x2b
 800d866:	d04e      	beq.n	800d906 <_strtod_l+0xd6>
 800d868:	d83b      	bhi.n	800d8e2 <_strtod_l+0xb2>
 800d86a:	2a0d      	cmp	r2, #13
 800d86c:	d834      	bhi.n	800d8d8 <_strtod_l+0xa8>
 800d86e:	2a08      	cmp	r2, #8
 800d870:	d834      	bhi.n	800d8dc <_strtod_l+0xac>
 800d872:	2a00      	cmp	r2, #0
 800d874:	d03e      	beq.n	800d8f4 <_strtod_l+0xc4>
 800d876:	2300      	movs	r3, #0
 800d878:	930a      	str	r3, [sp, #40]	; 0x28
 800d87a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d87c:	7833      	ldrb	r3, [r6, #0]
 800d87e:	2b30      	cmp	r3, #48	; 0x30
 800d880:	f040 80b0 	bne.w	800d9e4 <_strtod_l+0x1b4>
 800d884:	7873      	ldrb	r3, [r6, #1]
 800d886:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d88a:	2b58      	cmp	r3, #88	; 0x58
 800d88c:	d168      	bne.n	800d960 <_strtod_l+0x130>
 800d88e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d890:	9301      	str	r3, [sp, #4]
 800d892:	ab18      	add	r3, sp, #96	; 0x60
 800d894:	9702      	str	r7, [sp, #8]
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	4a8d      	ldr	r2, [pc, #564]	; (800dad0 <_strtod_l+0x2a0>)
 800d89a:	ab19      	add	r3, sp, #100	; 0x64
 800d89c:	a917      	add	r1, sp, #92	; 0x5c
 800d89e:	4620      	mov	r0, r4
 800d8a0:	f001 ffbe 	bl	800f820 <__gethex>
 800d8a4:	f010 0707 	ands.w	r7, r0, #7
 800d8a8:	4605      	mov	r5, r0
 800d8aa:	d005      	beq.n	800d8b8 <_strtod_l+0x88>
 800d8ac:	2f06      	cmp	r7, #6
 800d8ae:	d12c      	bne.n	800d90a <_strtod_l+0xda>
 800d8b0:	3601      	adds	r6, #1
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d8b6:	930a      	str	r3, [sp, #40]	; 0x28
 800d8b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	f040 8590 	bne.w	800e3e0 <_strtod_l+0xbb0>
 800d8c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d8c2:	b1eb      	cbz	r3, 800d900 <_strtod_l+0xd0>
 800d8c4:	4652      	mov	r2, sl
 800d8c6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d8ca:	ec43 2b10 	vmov	d0, r2, r3
 800d8ce:	b01d      	add	sp, #116	; 0x74
 800d8d0:	ecbd 8b02 	vpop	{d8}
 800d8d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d8:	2a20      	cmp	r2, #32
 800d8da:	d1cc      	bne.n	800d876 <_strtod_l+0x46>
 800d8dc:	3301      	adds	r3, #1
 800d8de:	9317      	str	r3, [sp, #92]	; 0x5c
 800d8e0:	e7be      	b.n	800d860 <_strtod_l+0x30>
 800d8e2:	2a2d      	cmp	r2, #45	; 0x2d
 800d8e4:	d1c7      	bne.n	800d876 <_strtod_l+0x46>
 800d8e6:	2201      	movs	r2, #1
 800d8e8:	920a      	str	r2, [sp, #40]	; 0x28
 800d8ea:	1c5a      	adds	r2, r3, #1
 800d8ec:	9217      	str	r2, [sp, #92]	; 0x5c
 800d8ee:	785b      	ldrb	r3, [r3, #1]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d1c2      	bne.n	800d87a <_strtod_l+0x4a>
 800d8f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d8f6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	f040 856e 	bne.w	800e3dc <_strtod_l+0xbac>
 800d900:	4652      	mov	r2, sl
 800d902:	465b      	mov	r3, fp
 800d904:	e7e1      	b.n	800d8ca <_strtod_l+0x9a>
 800d906:	2200      	movs	r2, #0
 800d908:	e7ee      	b.n	800d8e8 <_strtod_l+0xb8>
 800d90a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d90c:	b13a      	cbz	r2, 800d91e <_strtod_l+0xee>
 800d90e:	2135      	movs	r1, #53	; 0x35
 800d910:	a81a      	add	r0, sp, #104	; 0x68
 800d912:	f002 ff90 	bl	8010836 <__copybits>
 800d916:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d918:	4620      	mov	r0, r4
 800d91a:	f002 fb4f 	bl	800ffbc <_Bfree>
 800d91e:	3f01      	subs	r7, #1
 800d920:	2f04      	cmp	r7, #4
 800d922:	d806      	bhi.n	800d932 <_strtod_l+0x102>
 800d924:	e8df f007 	tbb	[pc, r7]
 800d928:	1714030a 	.word	0x1714030a
 800d92c:	0a          	.byte	0x0a
 800d92d:	00          	.byte	0x00
 800d92e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d932:	0728      	lsls	r0, r5, #28
 800d934:	d5c0      	bpl.n	800d8b8 <_strtod_l+0x88>
 800d936:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d93a:	e7bd      	b.n	800d8b8 <_strtod_l+0x88>
 800d93c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d940:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d942:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d946:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d94a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d94e:	e7f0      	b.n	800d932 <_strtod_l+0x102>
 800d950:	f8df b180 	ldr.w	fp, [pc, #384]	; 800dad4 <_strtod_l+0x2a4>
 800d954:	e7ed      	b.n	800d932 <_strtod_l+0x102>
 800d956:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d95a:	f04f 3aff 	mov.w	sl, #4294967295
 800d95e:	e7e8      	b.n	800d932 <_strtod_l+0x102>
 800d960:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d962:	1c5a      	adds	r2, r3, #1
 800d964:	9217      	str	r2, [sp, #92]	; 0x5c
 800d966:	785b      	ldrb	r3, [r3, #1]
 800d968:	2b30      	cmp	r3, #48	; 0x30
 800d96a:	d0f9      	beq.n	800d960 <_strtod_l+0x130>
 800d96c:	2b00      	cmp	r3, #0
 800d96e:	d0a3      	beq.n	800d8b8 <_strtod_l+0x88>
 800d970:	2301      	movs	r3, #1
 800d972:	f04f 0900 	mov.w	r9, #0
 800d976:	9304      	str	r3, [sp, #16]
 800d978:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d97a:	9308      	str	r3, [sp, #32]
 800d97c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d980:	464f      	mov	r7, r9
 800d982:	220a      	movs	r2, #10
 800d984:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d986:	7806      	ldrb	r6, [r0, #0]
 800d988:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d98c:	b2d9      	uxtb	r1, r3
 800d98e:	2909      	cmp	r1, #9
 800d990:	d92a      	bls.n	800d9e8 <_strtod_l+0x1b8>
 800d992:	9905      	ldr	r1, [sp, #20]
 800d994:	462a      	mov	r2, r5
 800d996:	f003 fa3e 	bl	8010e16 <strncmp>
 800d99a:	b398      	cbz	r0, 800da04 <_strtod_l+0x1d4>
 800d99c:	2000      	movs	r0, #0
 800d99e:	4632      	mov	r2, r6
 800d9a0:	463d      	mov	r5, r7
 800d9a2:	9005      	str	r0, [sp, #20]
 800d9a4:	4603      	mov	r3, r0
 800d9a6:	2a65      	cmp	r2, #101	; 0x65
 800d9a8:	d001      	beq.n	800d9ae <_strtod_l+0x17e>
 800d9aa:	2a45      	cmp	r2, #69	; 0x45
 800d9ac:	d118      	bne.n	800d9e0 <_strtod_l+0x1b0>
 800d9ae:	b91d      	cbnz	r5, 800d9b8 <_strtod_l+0x188>
 800d9b0:	9a04      	ldr	r2, [sp, #16]
 800d9b2:	4302      	orrs	r2, r0
 800d9b4:	d09e      	beq.n	800d8f4 <_strtod_l+0xc4>
 800d9b6:	2500      	movs	r5, #0
 800d9b8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d9bc:	f108 0201 	add.w	r2, r8, #1
 800d9c0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d9c2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d9c6:	2a2b      	cmp	r2, #43	; 0x2b
 800d9c8:	d075      	beq.n	800dab6 <_strtod_l+0x286>
 800d9ca:	2a2d      	cmp	r2, #45	; 0x2d
 800d9cc:	d07b      	beq.n	800dac6 <_strtod_l+0x296>
 800d9ce:	f04f 0c00 	mov.w	ip, #0
 800d9d2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d9d6:	2909      	cmp	r1, #9
 800d9d8:	f240 8082 	bls.w	800dae0 <_strtod_l+0x2b0>
 800d9dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d9e0:	2600      	movs	r6, #0
 800d9e2:	e09d      	b.n	800db20 <_strtod_l+0x2f0>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	e7c4      	b.n	800d972 <_strtod_l+0x142>
 800d9e8:	2f08      	cmp	r7, #8
 800d9ea:	bfd8      	it	le
 800d9ec:	9907      	ldrle	r1, [sp, #28]
 800d9ee:	f100 0001 	add.w	r0, r0, #1
 800d9f2:	bfda      	itte	le
 800d9f4:	fb02 3301 	mlale	r3, r2, r1, r3
 800d9f8:	9307      	strle	r3, [sp, #28]
 800d9fa:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d9fe:	3701      	adds	r7, #1
 800da00:	9017      	str	r0, [sp, #92]	; 0x5c
 800da02:	e7bf      	b.n	800d984 <_strtod_l+0x154>
 800da04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da06:	195a      	adds	r2, r3, r5
 800da08:	9217      	str	r2, [sp, #92]	; 0x5c
 800da0a:	5d5a      	ldrb	r2, [r3, r5]
 800da0c:	2f00      	cmp	r7, #0
 800da0e:	d037      	beq.n	800da80 <_strtod_l+0x250>
 800da10:	9005      	str	r0, [sp, #20]
 800da12:	463d      	mov	r5, r7
 800da14:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800da18:	2b09      	cmp	r3, #9
 800da1a:	d912      	bls.n	800da42 <_strtod_l+0x212>
 800da1c:	2301      	movs	r3, #1
 800da1e:	e7c2      	b.n	800d9a6 <_strtod_l+0x176>
 800da20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	9217      	str	r2, [sp, #92]	; 0x5c
 800da26:	785a      	ldrb	r2, [r3, #1]
 800da28:	3001      	adds	r0, #1
 800da2a:	2a30      	cmp	r2, #48	; 0x30
 800da2c:	d0f8      	beq.n	800da20 <_strtod_l+0x1f0>
 800da2e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800da32:	2b08      	cmp	r3, #8
 800da34:	f200 84d9 	bhi.w	800e3ea <_strtod_l+0xbba>
 800da38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800da3a:	9005      	str	r0, [sp, #20]
 800da3c:	2000      	movs	r0, #0
 800da3e:	9308      	str	r3, [sp, #32]
 800da40:	4605      	mov	r5, r0
 800da42:	3a30      	subs	r2, #48	; 0x30
 800da44:	f100 0301 	add.w	r3, r0, #1
 800da48:	d014      	beq.n	800da74 <_strtod_l+0x244>
 800da4a:	9905      	ldr	r1, [sp, #20]
 800da4c:	4419      	add	r1, r3
 800da4e:	9105      	str	r1, [sp, #20]
 800da50:	462b      	mov	r3, r5
 800da52:	eb00 0e05 	add.w	lr, r0, r5
 800da56:	210a      	movs	r1, #10
 800da58:	4573      	cmp	r3, lr
 800da5a:	d113      	bne.n	800da84 <_strtod_l+0x254>
 800da5c:	182b      	adds	r3, r5, r0
 800da5e:	2b08      	cmp	r3, #8
 800da60:	f105 0501 	add.w	r5, r5, #1
 800da64:	4405      	add	r5, r0
 800da66:	dc1c      	bgt.n	800daa2 <_strtod_l+0x272>
 800da68:	9907      	ldr	r1, [sp, #28]
 800da6a:	230a      	movs	r3, #10
 800da6c:	fb03 2301 	mla	r3, r3, r1, r2
 800da70:	9307      	str	r3, [sp, #28]
 800da72:	2300      	movs	r3, #0
 800da74:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da76:	1c51      	adds	r1, r2, #1
 800da78:	9117      	str	r1, [sp, #92]	; 0x5c
 800da7a:	7852      	ldrb	r2, [r2, #1]
 800da7c:	4618      	mov	r0, r3
 800da7e:	e7c9      	b.n	800da14 <_strtod_l+0x1e4>
 800da80:	4638      	mov	r0, r7
 800da82:	e7d2      	b.n	800da2a <_strtod_l+0x1fa>
 800da84:	2b08      	cmp	r3, #8
 800da86:	dc04      	bgt.n	800da92 <_strtod_l+0x262>
 800da88:	9e07      	ldr	r6, [sp, #28]
 800da8a:	434e      	muls	r6, r1
 800da8c:	9607      	str	r6, [sp, #28]
 800da8e:	3301      	adds	r3, #1
 800da90:	e7e2      	b.n	800da58 <_strtod_l+0x228>
 800da92:	f103 0c01 	add.w	ip, r3, #1
 800da96:	f1bc 0f10 	cmp.w	ip, #16
 800da9a:	bfd8      	it	le
 800da9c:	fb01 f909 	mulle.w	r9, r1, r9
 800daa0:	e7f5      	b.n	800da8e <_strtod_l+0x25e>
 800daa2:	2d10      	cmp	r5, #16
 800daa4:	bfdc      	itt	le
 800daa6:	230a      	movle	r3, #10
 800daa8:	fb03 2909 	mlale	r9, r3, r9, r2
 800daac:	e7e1      	b.n	800da72 <_strtod_l+0x242>
 800daae:	2300      	movs	r3, #0
 800dab0:	9305      	str	r3, [sp, #20]
 800dab2:	2301      	movs	r3, #1
 800dab4:	e77c      	b.n	800d9b0 <_strtod_l+0x180>
 800dab6:	f04f 0c00 	mov.w	ip, #0
 800daba:	f108 0202 	add.w	r2, r8, #2
 800dabe:	9217      	str	r2, [sp, #92]	; 0x5c
 800dac0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800dac4:	e785      	b.n	800d9d2 <_strtod_l+0x1a2>
 800dac6:	f04f 0c01 	mov.w	ip, #1
 800daca:	e7f6      	b.n	800daba <_strtod_l+0x28a>
 800dacc:	080129ec 	.word	0x080129ec
 800dad0:	0801273c 	.word	0x0801273c
 800dad4:	7ff00000 	.word	0x7ff00000
 800dad8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800dada:	1c51      	adds	r1, r2, #1
 800dadc:	9117      	str	r1, [sp, #92]	; 0x5c
 800dade:	7852      	ldrb	r2, [r2, #1]
 800dae0:	2a30      	cmp	r2, #48	; 0x30
 800dae2:	d0f9      	beq.n	800dad8 <_strtod_l+0x2a8>
 800dae4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800dae8:	2908      	cmp	r1, #8
 800daea:	f63f af79 	bhi.w	800d9e0 <_strtod_l+0x1b0>
 800daee:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800daf2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800daf4:	9206      	str	r2, [sp, #24]
 800daf6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800daf8:	1c51      	adds	r1, r2, #1
 800dafa:	9117      	str	r1, [sp, #92]	; 0x5c
 800dafc:	7852      	ldrb	r2, [r2, #1]
 800dafe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800db02:	2e09      	cmp	r6, #9
 800db04:	d937      	bls.n	800db76 <_strtod_l+0x346>
 800db06:	9e06      	ldr	r6, [sp, #24]
 800db08:	1b89      	subs	r1, r1, r6
 800db0a:	2908      	cmp	r1, #8
 800db0c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800db10:	dc02      	bgt.n	800db18 <_strtod_l+0x2e8>
 800db12:	4576      	cmp	r6, lr
 800db14:	bfa8      	it	ge
 800db16:	4676      	movge	r6, lr
 800db18:	f1bc 0f00 	cmp.w	ip, #0
 800db1c:	d000      	beq.n	800db20 <_strtod_l+0x2f0>
 800db1e:	4276      	negs	r6, r6
 800db20:	2d00      	cmp	r5, #0
 800db22:	d14d      	bne.n	800dbc0 <_strtod_l+0x390>
 800db24:	9904      	ldr	r1, [sp, #16]
 800db26:	4301      	orrs	r1, r0
 800db28:	f47f aec6 	bne.w	800d8b8 <_strtod_l+0x88>
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	f47f aee1 	bne.w	800d8f4 <_strtod_l+0xc4>
 800db32:	2a69      	cmp	r2, #105	; 0x69
 800db34:	d027      	beq.n	800db86 <_strtod_l+0x356>
 800db36:	dc24      	bgt.n	800db82 <_strtod_l+0x352>
 800db38:	2a49      	cmp	r2, #73	; 0x49
 800db3a:	d024      	beq.n	800db86 <_strtod_l+0x356>
 800db3c:	2a4e      	cmp	r2, #78	; 0x4e
 800db3e:	f47f aed9 	bne.w	800d8f4 <_strtod_l+0xc4>
 800db42:	499f      	ldr	r1, [pc, #636]	; (800ddc0 <_strtod_l+0x590>)
 800db44:	a817      	add	r0, sp, #92	; 0x5c
 800db46:	f002 f8c3 	bl	800fcd0 <__match>
 800db4a:	2800      	cmp	r0, #0
 800db4c:	f43f aed2 	beq.w	800d8f4 <_strtod_l+0xc4>
 800db50:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db52:	781b      	ldrb	r3, [r3, #0]
 800db54:	2b28      	cmp	r3, #40	; 0x28
 800db56:	d12d      	bne.n	800dbb4 <_strtod_l+0x384>
 800db58:	499a      	ldr	r1, [pc, #616]	; (800ddc4 <_strtod_l+0x594>)
 800db5a:	aa1a      	add	r2, sp, #104	; 0x68
 800db5c:	a817      	add	r0, sp, #92	; 0x5c
 800db5e:	f002 f8cb 	bl	800fcf8 <__hexnan>
 800db62:	2805      	cmp	r0, #5
 800db64:	d126      	bne.n	800dbb4 <_strtod_l+0x384>
 800db66:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800db68:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800db6c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800db70:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800db74:	e6a0      	b.n	800d8b8 <_strtod_l+0x88>
 800db76:	210a      	movs	r1, #10
 800db78:	fb01 2e0e 	mla	lr, r1, lr, r2
 800db7c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800db80:	e7b9      	b.n	800daf6 <_strtod_l+0x2c6>
 800db82:	2a6e      	cmp	r2, #110	; 0x6e
 800db84:	e7db      	b.n	800db3e <_strtod_l+0x30e>
 800db86:	4990      	ldr	r1, [pc, #576]	; (800ddc8 <_strtod_l+0x598>)
 800db88:	a817      	add	r0, sp, #92	; 0x5c
 800db8a:	f002 f8a1 	bl	800fcd0 <__match>
 800db8e:	2800      	cmp	r0, #0
 800db90:	f43f aeb0 	beq.w	800d8f4 <_strtod_l+0xc4>
 800db94:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db96:	498d      	ldr	r1, [pc, #564]	; (800ddcc <_strtod_l+0x59c>)
 800db98:	3b01      	subs	r3, #1
 800db9a:	a817      	add	r0, sp, #92	; 0x5c
 800db9c:	9317      	str	r3, [sp, #92]	; 0x5c
 800db9e:	f002 f897 	bl	800fcd0 <__match>
 800dba2:	b910      	cbnz	r0, 800dbaa <_strtod_l+0x37a>
 800dba4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dba6:	3301      	adds	r3, #1
 800dba8:	9317      	str	r3, [sp, #92]	; 0x5c
 800dbaa:	f8df b230 	ldr.w	fp, [pc, #560]	; 800dddc <_strtod_l+0x5ac>
 800dbae:	f04f 0a00 	mov.w	sl, #0
 800dbb2:	e681      	b.n	800d8b8 <_strtod_l+0x88>
 800dbb4:	4886      	ldr	r0, [pc, #536]	; (800ddd0 <_strtod_l+0x5a0>)
 800dbb6:	f003 f8d3 	bl	8010d60 <nan>
 800dbba:	ec5b ab10 	vmov	sl, fp, d0
 800dbbe:	e67b      	b.n	800d8b8 <_strtod_l+0x88>
 800dbc0:	9b05      	ldr	r3, [sp, #20]
 800dbc2:	9807      	ldr	r0, [sp, #28]
 800dbc4:	1af3      	subs	r3, r6, r3
 800dbc6:	2f00      	cmp	r7, #0
 800dbc8:	bf08      	it	eq
 800dbca:	462f      	moveq	r7, r5
 800dbcc:	2d10      	cmp	r5, #16
 800dbce:	9306      	str	r3, [sp, #24]
 800dbd0:	46a8      	mov	r8, r5
 800dbd2:	bfa8      	it	ge
 800dbd4:	f04f 0810 	movge.w	r8, #16
 800dbd8:	f7f2 fcbc 	bl	8000554 <__aeabi_ui2d>
 800dbdc:	2d09      	cmp	r5, #9
 800dbde:	4682      	mov	sl, r0
 800dbe0:	468b      	mov	fp, r1
 800dbe2:	dd13      	ble.n	800dc0c <_strtod_l+0x3dc>
 800dbe4:	4b7b      	ldr	r3, [pc, #492]	; (800ddd4 <_strtod_l+0x5a4>)
 800dbe6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800dbea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800dbee:	f7f2 fd2b 	bl	8000648 <__aeabi_dmul>
 800dbf2:	4682      	mov	sl, r0
 800dbf4:	4648      	mov	r0, r9
 800dbf6:	468b      	mov	fp, r1
 800dbf8:	f7f2 fcac 	bl	8000554 <__aeabi_ui2d>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4650      	mov	r0, sl
 800dc02:	4659      	mov	r1, fp
 800dc04:	f7f2 fb6a 	bl	80002dc <__adddf3>
 800dc08:	4682      	mov	sl, r0
 800dc0a:	468b      	mov	fp, r1
 800dc0c:	2d0f      	cmp	r5, #15
 800dc0e:	dc38      	bgt.n	800dc82 <_strtod_l+0x452>
 800dc10:	9b06      	ldr	r3, [sp, #24]
 800dc12:	2b00      	cmp	r3, #0
 800dc14:	f43f ae50 	beq.w	800d8b8 <_strtod_l+0x88>
 800dc18:	dd24      	ble.n	800dc64 <_strtod_l+0x434>
 800dc1a:	2b16      	cmp	r3, #22
 800dc1c:	dc0b      	bgt.n	800dc36 <_strtod_l+0x406>
 800dc1e:	496d      	ldr	r1, [pc, #436]	; (800ddd4 <_strtod_l+0x5a4>)
 800dc20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc24:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc28:	4652      	mov	r2, sl
 800dc2a:	465b      	mov	r3, fp
 800dc2c:	f7f2 fd0c 	bl	8000648 <__aeabi_dmul>
 800dc30:	4682      	mov	sl, r0
 800dc32:	468b      	mov	fp, r1
 800dc34:	e640      	b.n	800d8b8 <_strtod_l+0x88>
 800dc36:	9a06      	ldr	r2, [sp, #24]
 800dc38:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dc3c:	4293      	cmp	r3, r2
 800dc3e:	db20      	blt.n	800dc82 <_strtod_l+0x452>
 800dc40:	4c64      	ldr	r4, [pc, #400]	; (800ddd4 <_strtod_l+0x5a4>)
 800dc42:	f1c5 050f 	rsb	r5, r5, #15
 800dc46:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dc4a:	4652      	mov	r2, sl
 800dc4c:	465b      	mov	r3, fp
 800dc4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc52:	f7f2 fcf9 	bl	8000648 <__aeabi_dmul>
 800dc56:	9b06      	ldr	r3, [sp, #24]
 800dc58:	1b5d      	subs	r5, r3, r5
 800dc5a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dc5e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dc62:	e7e3      	b.n	800dc2c <_strtod_l+0x3fc>
 800dc64:	9b06      	ldr	r3, [sp, #24]
 800dc66:	3316      	adds	r3, #22
 800dc68:	db0b      	blt.n	800dc82 <_strtod_l+0x452>
 800dc6a:	9b05      	ldr	r3, [sp, #20]
 800dc6c:	1b9e      	subs	r6, r3, r6
 800dc6e:	4b59      	ldr	r3, [pc, #356]	; (800ddd4 <_strtod_l+0x5a4>)
 800dc70:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dc74:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dc78:	4650      	mov	r0, sl
 800dc7a:	4659      	mov	r1, fp
 800dc7c:	f7f2 fe0e 	bl	800089c <__aeabi_ddiv>
 800dc80:	e7d6      	b.n	800dc30 <_strtod_l+0x400>
 800dc82:	9b06      	ldr	r3, [sp, #24]
 800dc84:	eba5 0808 	sub.w	r8, r5, r8
 800dc88:	4498      	add	r8, r3
 800dc8a:	f1b8 0f00 	cmp.w	r8, #0
 800dc8e:	dd74      	ble.n	800dd7a <_strtod_l+0x54a>
 800dc90:	f018 030f 	ands.w	r3, r8, #15
 800dc94:	d00a      	beq.n	800dcac <_strtod_l+0x47c>
 800dc96:	494f      	ldr	r1, [pc, #316]	; (800ddd4 <_strtod_l+0x5a4>)
 800dc98:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc9c:	4652      	mov	r2, sl
 800dc9e:	465b      	mov	r3, fp
 800dca0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dca4:	f7f2 fcd0 	bl	8000648 <__aeabi_dmul>
 800dca8:	4682      	mov	sl, r0
 800dcaa:	468b      	mov	fp, r1
 800dcac:	f038 080f 	bics.w	r8, r8, #15
 800dcb0:	d04f      	beq.n	800dd52 <_strtod_l+0x522>
 800dcb2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dcb6:	dd22      	ble.n	800dcfe <_strtod_l+0x4ce>
 800dcb8:	2500      	movs	r5, #0
 800dcba:	462e      	mov	r6, r5
 800dcbc:	9507      	str	r5, [sp, #28]
 800dcbe:	9505      	str	r5, [sp, #20]
 800dcc0:	2322      	movs	r3, #34	; 0x22
 800dcc2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800dddc <_strtod_l+0x5ac>
 800dcc6:	6023      	str	r3, [r4, #0]
 800dcc8:	f04f 0a00 	mov.w	sl, #0
 800dccc:	9b07      	ldr	r3, [sp, #28]
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f43f adf2 	beq.w	800d8b8 <_strtod_l+0x88>
 800dcd4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dcd6:	4620      	mov	r0, r4
 800dcd8:	f002 f970 	bl	800ffbc <_Bfree>
 800dcdc:	9905      	ldr	r1, [sp, #20]
 800dcde:	4620      	mov	r0, r4
 800dce0:	f002 f96c 	bl	800ffbc <_Bfree>
 800dce4:	4631      	mov	r1, r6
 800dce6:	4620      	mov	r0, r4
 800dce8:	f002 f968 	bl	800ffbc <_Bfree>
 800dcec:	9907      	ldr	r1, [sp, #28]
 800dcee:	4620      	mov	r0, r4
 800dcf0:	f002 f964 	bl	800ffbc <_Bfree>
 800dcf4:	4629      	mov	r1, r5
 800dcf6:	4620      	mov	r0, r4
 800dcf8:	f002 f960 	bl	800ffbc <_Bfree>
 800dcfc:	e5dc      	b.n	800d8b8 <_strtod_l+0x88>
 800dcfe:	4b36      	ldr	r3, [pc, #216]	; (800ddd8 <_strtod_l+0x5a8>)
 800dd00:	9304      	str	r3, [sp, #16]
 800dd02:	2300      	movs	r3, #0
 800dd04:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dd08:	4650      	mov	r0, sl
 800dd0a:	4659      	mov	r1, fp
 800dd0c:	4699      	mov	r9, r3
 800dd0e:	f1b8 0f01 	cmp.w	r8, #1
 800dd12:	dc21      	bgt.n	800dd58 <_strtod_l+0x528>
 800dd14:	b10b      	cbz	r3, 800dd1a <_strtod_l+0x4ea>
 800dd16:	4682      	mov	sl, r0
 800dd18:	468b      	mov	fp, r1
 800dd1a:	4b2f      	ldr	r3, [pc, #188]	; (800ddd8 <_strtod_l+0x5a8>)
 800dd1c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dd20:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dd24:	4652      	mov	r2, sl
 800dd26:	465b      	mov	r3, fp
 800dd28:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dd2c:	f7f2 fc8c 	bl	8000648 <__aeabi_dmul>
 800dd30:	4b2a      	ldr	r3, [pc, #168]	; (800dddc <_strtod_l+0x5ac>)
 800dd32:	460a      	mov	r2, r1
 800dd34:	400b      	ands	r3, r1
 800dd36:	492a      	ldr	r1, [pc, #168]	; (800dde0 <_strtod_l+0x5b0>)
 800dd38:	428b      	cmp	r3, r1
 800dd3a:	4682      	mov	sl, r0
 800dd3c:	d8bc      	bhi.n	800dcb8 <_strtod_l+0x488>
 800dd3e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dd42:	428b      	cmp	r3, r1
 800dd44:	bf86      	itte	hi
 800dd46:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800dde4 <_strtod_l+0x5b4>
 800dd4a:	f04f 3aff 	movhi.w	sl, #4294967295
 800dd4e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dd52:	2300      	movs	r3, #0
 800dd54:	9304      	str	r3, [sp, #16]
 800dd56:	e084      	b.n	800de62 <_strtod_l+0x632>
 800dd58:	f018 0f01 	tst.w	r8, #1
 800dd5c:	d005      	beq.n	800dd6a <_strtod_l+0x53a>
 800dd5e:	9b04      	ldr	r3, [sp, #16]
 800dd60:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd64:	f7f2 fc70 	bl	8000648 <__aeabi_dmul>
 800dd68:	2301      	movs	r3, #1
 800dd6a:	9a04      	ldr	r2, [sp, #16]
 800dd6c:	3208      	adds	r2, #8
 800dd6e:	f109 0901 	add.w	r9, r9, #1
 800dd72:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dd76:	9204      	str	r2, [sp, #16]
 800dd78:	e7c9      	b.n	800dd0e <_strtod_l+0x4de>
 800dd7a:	d0ea      	beq.n	800dd52 <_strtod_l+0x522>
 800dd7c:	f1c8 0800 	rsb	r8, r8, #0
 800dd80:	f018 020f 	ands.w	r2, r8, #15
 800dd84:	d00a      	beq.n	800dd9c <_strtod_l+0x56c>
 800dd86:	4b13      	ldr	r3, [pc, #76]	; (800ddd4 <_strtod_l+0x5a4>)
 800dd88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd8c:	4650      	mov	r0, sl
 800dd8e:	4659      	mov	r1, fp
 800dd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd94:	f7f2 fd82 	bl	800089c <__aeabi_ddiv>
 800dd98:	4682      	mov	sl, r0
 800dd9a:	468b      	mov	fp, r1
 800dd9c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dda0:	d0d7      	beq.n	800dd52 <_strtod_l+0x522>
 800dda2:	f1b8 0f1f 	cmp.w	r8, #31
 800dda6:	dd1f      	ble.n	800dde8 <_strtod_l+0x5b8>
 800dda8:	2500      	movs	r5, #0
 800ddaa:	462e      	mov	r6, r5
 800ddac:	9507      	str	r5, [sp, #28]
 800ddae:	9505      	str	r5, [sp, #20]
 800ddb0:	2322      	movs	r3, #34	; 0x22
 800ddb2:	f04f 0a00 	mov.w	sl, #0
 800ddb6:	f04f 0b00 	mov.w	fp, #0
 800ddba:	6023      	str	r3, [r4, #0]
 800ddbc:	e786      	b.n	800dccc <_strtod_l+0x49c>
 800ddbe:	bf00      	nop
 800ddc0:	08012715 	.word	0x08012715
 800ddc4:	08012750 	.word	0x08012750
 800ddc8:	0801270d 	.word	0x0801270d
 800ddcc:	08012894 	.word	0x08012894
 800ddd0:	08012ba8 	.word	0x08012ba8
 800ddd4:	08012a88 	.word	0x08012a88
 800ddd8:	08012a60 	.word	0x08012a60
 800dddc:	7ff00000 	.word	0x7ff00000
 800dde0:	7ca00000 	.word	0x7ca00000
 800dde4:	7fefffff 	.word	0x7fefffff
 800dde8:	f018 0310 	ands.w	r3, r8, #16
 800ddec:	bf18      	it	ne
 800ddee:	236a      	movne	r3, #106	; 0x6a
 800ddf0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e1a0 <_strtod_l+0x970>
 800ddf4:	9304      	str	r3, [sp, #16]
 800ddf6:	4650      	mov	r0, sl
 800ddf8:	4659      	mov	r1, fp
 800ddfa:	2300      	movs	r3, #0
 800ddfc:	f018 0f01 	tst.w	r8, #1
 800de00:	d004      	beq.n	800de0c <_strtod_l+0x5dc>
 800de02:	e9d9 2300 	ldrd	r2, r3, [r9]
 800de06:	f7f2 fc1f 	bl	8000648 <__aeabi_dmul>
 800de0a:	2301      	movs	r3, #1
 800de0c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800de10:	f109 0908 	add.w	r9, r9, #8
 800de14:	d1f2      	bne.n	800ddfc <_strtod_l+0x5cc>
 800de16:	b10b      	cbz	r3, 800de1c <_strtod_l+0x5ec>
 800de18:	4682      	mov	sl, r0
 800de1a:	468b      	mov	fp, r1
 800de1c:	9b04      	ldr	r3, [sp, #16]
 800de1e:	b1c3      	cbz	r3, 800de52 <_strtod_l+0x622>
 800de20:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800de24:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800de28:	2b00      	cmp	r3, #0
 800de2a:	4659      	mov	r1, fp
 800de2c:	dd11      	ble.n	800de52 <_strtod_l+0x622>
 800de2e:	2b1f      	cmp	r3, #31
 800de30:	f340 8124 	ble.w	800e07c <_strtod_l+0x84c>
 800de34:	2b34      	cmp	r3, #52	; 0x34
 800de36:	bfde      	ittt	le
 800de38:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800de3c:	f04f 33ff 	movle.w	r3, #4294967295
 800de40:	fa03 f202 	lslle.w	r2, r3, r2
 800de44:	f04f 0a00 	mov.w	sl, #0
 800de48:	bfcc      	ite	gt
 800de4a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800de4e:	ea02 0b01 	andle.w	fp, r2, r1
 800de52:	2200      	movs	r2, #0
 800de54:	2300      	movs	r3, #0
 800de56:	4650      	mov	r0, sl
 800de58:	4659      	mov	r1, fp
 800de5a:	f7f2 fe5d 	bl	8000b18 <__aeabi_dcmpeq>
 800de5e:	2800      	cmp	r0, #0
 800de60:	d1a2      	bne.n	800dda8 <_strtod_l+0x578>
 800de62:	9b07      	ldr	r3, [sp, #28]
 800de64:	9300      	str	r3, [sp, #0]
 800de66:	9908      	ldr	r1, [sp, #32]
 800de68:	462b      	mov	r3, r5
 800de6a:	463a      	mov	r2, r7
 800de6c:	4620      	mov	r0, r4
 800de6e:	f002 f90d 	bl	801008c <__s2b>
 800de72:	9007      	str	r0, [sp, #28]
 800de74:	2800      	cmp	r0, #0
 800de76:	f43f af1f 	beq.w	800dcb8 <_strtod_l+0x488>
 800de7a:	9b05      	ldr	r3, [sp, #20]
 800de7c:	1b9e      	subs	r6, r3, r6
 800de7e:	9b06      	ldr	r3, [sp, #24]
 800de80:	2b00      	cmp	r3, #0
 800de82:	bfb4      	ite	lt
 800de84:	4633      	movlt	r3, r6
 800de86:	2300      	movge	r3, #0
 800de88:	930c      	str	r3, [sp, #48]	; 0x30
 800de8a:	9b06      	ldr	r3, [sp, #24]
 800de8c:	2500      	movs	r5, #0
 800de8e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de92:	9312      	str	r3, [sp, #72]	; 0x48
 800de94:	462e      	mov	r6, r5
 800de96:	9b07      	ldr	r3, [sp, #28]
 800de98:	4620      	mov	r0, r4
 800de9a:	6859      	ldr	r1, [r3, #4]
 800de9c:	f002 f84e 	bl	800ff3c <_Balloc>
 800dea0:	9005      	str	r0, [sp, #20]
 800dea2:	2800      	cmp	r0, #0
 800dea4:	f43f af0c 	beq.w	800dcc0 <_strtod_l+0x490>
 800dea8:	9b07      	ldr	r3, [sp, #28]
 800deaa:	691a      	ldr	r2, [r3, #16]
 800deac:	3202      	adds	r2, #2
 800deae:	f103 010c 	add.w	r1, r3, #12
 800deb2:	0092      	lsls	r2, r2, #2
 800deb4:	300c      	adds	r0, #12
 800deb6:	f7fe ff75 	bl	800cda4 <memcpy>
 800deba:	ec4b ab10 	vmov	d0, sl, fp
 800debe:	aa1a      	add	r2, sp, #104	; 0x68
 800dec0:	a919      	add	r1, sp, #100	; 0x64
 800dec2:	4620      	mov	r0, r4
 800dec4:	f002 fc28 	bl	8010718 <__d2b>
 800dec8:	ec4b ab18 	vmov	d8, sl, fp
 800decc:	9018      	str	r0, [sp, #96]	; 0x60
 800dece:	2800      	cmp	r0, #0
 800ded0:	f43f aef6 	beq.w	800dcc0 <_strtod_l+0x490>
 800ded4:	2101      	movs	r1, #1
 800ded6:	4620      	mov	r0, r4
 800ded8:	f002 f972 	bl	80101c0 <__i2b>
 800dedc:	4606      	mov	r6, r0
 800dede:	2800      	cmp	r0, #0
 800dee0:	f43f aeee 	beq.w	800dcc0 <_strtod_l+0x490>
 800dee4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800dee6:	9904      	ldr	r1, [sp, #16]
 800dee8:	2b00      	cmp	r3, #0
 800deea:	bfab      	itete	ge
 800deec:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800deee:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800def0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800def2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800def6:	bfac      	ite	ge
 800def8:	eb03 0902 	addge.w	r9, r3, r2
 800defc:	1ad7      	sublt	r7, r2, r3
 800defe:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800df00:	eba3 0801 	sub.w	r8, r3, r1
 800df04:	4490      	add	r8, r2
 800df06:	4ba1      	ldr	r3, [pc, #644]	; (800e18c <_strtod_l+0x95c>)
 800df08:	f108 38ff 	add.w	r8, r8, #4294967295
 800df0c:	4598      	cmp	r8, r3
 800df0e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800df12:	f280 80c7 	bge.w	800e0a4 <_strtod_l+0x874>
 800df16:	eba3 0308 	sub.w	r3, r3, r8
 800df1a:	2b1f      	cmp	r3, #31
 800df1c:	eba2 0203 	sub.w	r2, r2, r3
 800df20:	f04f 0101 	mov.w	r1, #1
 800df24:	f300 80b1 	bgt.w	800e08a <_strtod_l+0x85a>
 800df28:	fa01 f303 	lsl.w	r3, r1, r3
 800df2c:	930d      	str	r3, [sp, #52]	; 0x34
 800df2e:	2300      	movs	r3, #0
 800df30:	9308      	str	r3, [sp, #32]
 800df32:	eb09 0802 	add.w	r8, r9, r2
 800df36:	9b04      	ldr	r3, [sp, #16]
 800df38:	45c1      	cmp	r9, r8
 800df3a:	4417      	add	r7, r2
 800df3c:	441f      	add	r7, r3
 800df3e:	464b      	mov	r3, r9
 800df40:	bfa8      	it	ge
 800df42:	4643      	movge	r3, r8
 800df44:	42bb      	cmp	r3, r7
 800df46:	bfa8      	it	ge
 800df48:	463b      	movge	r3, r7
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	bfc2      	ittt	gt
 800df4e:	eba8 0803 	subgt.w	r8, r8, r3
 800df52:	1aff      	subgt	r7, r7, r3
 800df54:	eba9 0903 	subgt.w	r9, r9, r3
 800df58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	dd17      	ble.n	800df8e <_strtod_l+0x75e>
 800df5e:	4631      	mov	r1, r6
 800df60:	461a      	mov	r2, r3
 800df62:	4620      	mov	r0, r4
 800df64:	f002 f9ec 	bl	8010340 <__pow5mult>
 800df68:	4606      	mov	r6, r0
 800df6a:	2800      	cmp	r0, #0
 800df6c:	f43f aea8 	beq.w	800dcc0 <_strtod_l+0x490>
 800df70:	4601      	mov	r1, r0
 800df72:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800df74:	4620      	mov	r0, r4
 800df76:	f002 f939 	bl	80101ec <__multiply>
 800df7a:	900b      	str	r0, [sp, #44]	; 0x2c
 800df7c:	2800      	cmp	r0, #0
 800df7e:	f43f ae9f 	beq.w	800dcc0 <_strtod_l+0x490>
 800df82:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df84:	4620      	mov	r0, r4
 800df86:	f002 f819 	bl	800ffbc <_Bfree>
 800df8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df8c:	9318      	str	r3, [sp, #96]	; 0x60
 800df8e:	f1b8 0f00 	cmp.w	r8, #0
 800df92:	f300 808c 	bgt.w	800e0ae <_strtod_l+0x87e>
 800df96:	9b06      	ldr	r3, [sp, #24]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	dd08      	ble.n	800dfae <_strtod_l+0x77e>
 800df9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df9e:	9905      	ldr	r1, [sp, #20]
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f002 f9cd 	bl	8010340 <__pow5mult>
 800dfa6:	9005      	str	r0, [sp, #20]
 800dfa8:	2800      	cmp	r0, #0
 800dfaa:	f43f ae89 	beq.w	800dcc0 <_strtod_l+0x490>
 800dfae:	2f00      	cmp	r7, #0
 800dfb0:	dd08      	ble.n	800dfc4 <_strtod_l+0x794>
 800dfb2:	9905      	ldr	r1, [sp, #20]
 800dfb4:	463a      	mov	r2, r7
 800dfb6:	4620      	mov	r0, r4
 800dfb8:	f002 fa1c 	bl	80103f4 <__lshift>
 800dfbc:	9005      	str	r0, [sp, #20]
 800dfbe:	2800      	cmp	r0, #0
 800dfc0:	f43f ae7e 	beq.w	800dcc0 <_strtod_l+0x490>
 800dfc4:	f1b9 0f00 	cmp.w	r9, #0
 800dfc8:	dd08      	ble.n	800dfdc <_strtod_l+0x7ac>
 800dfca:	4631      	mov	r1, r6
 800dfcc:	464a      	mov	r2, r9
 800dfce:	4620      	mov	r0, r4
 800dfd0:	f002 fa10 	bl	80103f4 <__lshift>
 800dfd4:	4606      	mov	r6, r0
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f43f ae72 	beq.w	800dcc0 <_strtod_l+0x490>
 800dfdc:	9a05      	ldr	r2, [sp, #20]
 800dfde:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f002 fa93 	bl	801050c <__mdiff>
 800dfe6:	4605      	mov	r5, r0
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	f43f ae69 	beq.w	800dcc0 <_strtod_l+0x490>
 800dfee:	68c3      	ldr	r3, [r0, #12]
 800dff0:	930b      	str	r3, [sp, #44]	; 0x2c
 800dff2:	2300      	movs	r3, #0
 800dff4:	60c3      	str	r3, [r0, #12]
 800dff6:	4631      	mov	r1, r6
 800dff8:	f002 fa6c 	bl	80104d4 <__mcmp>
 800dffc:	2800      	cmp	r0, #0
 800dffe:	da60      	bge.n	800e0c2 <_strtod_l+0x892>
 800e000:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e002:	ea53 030a 	orrs.w	r3, r3, sl
 800e006:	f040 8082 	bne.w	800e10e <_strtod_l+0x8de>
 800e00a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d17d      	bne.n	800e10e <_strtod_l+0x8de>
 800e012:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e016:	0d1b      	lsrs	r3, r3, #20
 800e018:	051b      	lsls	r3, r3, #20
 800e01a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800e01e:	d976      	bls.n	800e10e <_strtod_l+0x8de>
 800e020:	696b      	ldr	r3, [r5, #20]
 800e022:	b913      	cbnz	r3, 800e02a <_strtod_l+0x7fa>
 800e024:	692b      	ldr	r3, [r5, #16]
 800e026:	2b01      	cmp	r3, #1
 800e028:	dd71      	ble.n	800e10e <_strtod_l+0x8de>
 800e02a:	4629      	mov	r1, r5
 800e02c:	2201      	movs	r2, #1
 800e02e:	4620      	mov	r0, r4
 800e030:	f002 f9e0 	bl	80103f4 <__lshift>
 800e034:	4631      	mov	r1, r6
 800e036:	4605      	mov	r5, r0
 800e038:	f002 fa4c 	bl	80104d4 <__mcmp>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	dd66      	ble.n	800e10e <_strtod_l+0x8de>
 800e040:	9904      	ldr	r1, [sp, #16]
 800e042:	4a53      	ldr	r2, [pc, #332]	; (800e190 <_strtod_l+0x960>)
 800e044:	465b      	mov	r3, fp
 800e046:	2900      	cmp	r1, #0
 800e048:	f000 8081 	beq.w	800e14e <_strtod_l+0x91e>
 800e04c:	ea02 010b 	and.w	r1, r2, fp
 800e050:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800e054:	dc7b      	bgt.n	800e14e <_strtod_l+0x91e>
 800e056:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800e05a:	f77f aea9 	ble.w	800ddb0 <_strtod_l+0x580>
 800e05e:	4b4d      	ldr	r3, [pc, #308]	; (800e194 <_strtod_l+0x964>)
 800e060:	4650      	mov	r0, sl
 800e062:	4659      	mov	r1, fp
 800e064:	2200      	movs	r2, #0
 800e066:	f7f2 faef 	bl	8000648 <__aeabi_dmul>
 800e06a:	460b      	mov	r3, r1
 800e06c:	4303      	orrs	r3, r0
 800e06e:	bf08      	it	eq
 800e070:	2322      	moveq	r3, #34	; 0x22
 800e072:	4682      	mov	sl, r0
 800e074:	468b      	mov	fp, r1
 800e076:	bf08      	it	eq
 800e078:	6023      	streq	r3, [r4, #0]
 800e07a:	e62b      	b.n	800dcd4 <_strtod_l+0x4a4>
 800e07c:	f04f 32ff 	mov.w	r2, #4294967295
 800e080:	fa02 f303 	lsl.w	r3, r2, r3
 800e084:	ea03 0a0a 	and.w	sl, r3, sl
 800e088:	e6e3      	b.n	800de52 <_strtod_l+0x622>
 800e08a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e08e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e092:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e096:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e09a:	fa01 f308 	lsl.w	r3, r1, r8
 800e09e:	9308      	str	r3, [sp, #32]
 800e0a0:	910d      	str	r1, [sp, #52]	; 0x34
 800e0a2:	e746      	b.n	800df32 <_strtod_l+0x702>
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9308      	str	r3, [sp, #32]
 800e0a8:	2301      	movs	r3, #1
 800e0aa:	930d      	str	r3, [sp, #52]	; 0x34
 800e0ac:	e741      	b.n	800df32 <_strtod_l+0x702>
 800e0ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e0b0:	4642      	mov	r2, r8
 800e0b2:	4620      	mov	r0, r4
 800e0b4:	f002 f99e 	bl	80103f4 <__lshift>
 800e0b8:	9018      	str	r0, [sp, #96]	; 0x60
 800e0ba:	2800      	cmp	r0, #0
 800e0bc:	f47f af6b 	bne.w	800df96 <_strtod_l+0x766>
 800e0c0:	e5fe      	b.n	800dcc0 <_strtod_l+0x490>
 800e0c2:	465f      	mov	r7, fp
 800e0c4:	d16e      	bne.n	800e1a4 <_strtod_l+0x974>
 800e0c6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e0c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e0cc:	b342      	cbz	r2, 800e120 <_strtod_l+0x8f0>
 800e0ce:	4a32      	ldr	r2, [pc, #200]	; (800e198 <_strtod_l+0x968>)
 800e0d0:	4293      	cmp	r3, r2
 800e0d2:	d128      	bne.n	800e126 <_strtod_l+0x8f6>
 800e0d4:	9b04      	ldr	r3, [sp, #16]
 800e0d6:	4651      	mov	r1, sl
 800e0d8:	b1eb      	cbz	r3, 800e116 <_strtod_l+0x8e6>
 800e0da:	4b2d      	ldr	r3, [pc, #180]	; (800e190 <_strtod_l+0x960>)
 800e0dc:	403b      	ands	r3, r7
 800e0de:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e0e2:	f04f 32ff 	mov.w	r2, #4294967295
 800e0e6:	d819      	bhi.n	800e11c <_strtod_l+0x8ec>
 800e0e8:	0d1b      	lsrs	r3, r3, #20
 800e0ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e0ee:	fa02 f303 	lsl.w	r3, r2, r3
 800e0f2:	4299      	cmp	r1, r3
 800e0f4:	d117      	bne.n	800e126 <_strtod_l+0x8f6>
 800e0f6:	4b29      	ldr	r3, [pc, #164]	; (800e19c <_strtod_l+0x96c>)
 800e0f8:	429f      	cmp	r7, r3
 800e0fa:	d102      	bne.n	800e102 <_strtod_l+0x8d2>
 800e0fc:	3101      	adds	r1, #1
 800e0fe:	f43f addf 	beq.w	800dcc0 <_strtod_l+0x490>
 800e102:	4b23      	ldr	r3, [pc, #140]	; (800e190 <_strtod_l+0x960>)
 800e104:	403b      	ands	r3, r7
 800e106:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e10a:	f04f 0a00 	mov.w	sl, #0
 800e10e:	9b04      	ldr	r3, [sp, #16]
 800e110:	2b00      	cmp	r3, #0
 800e112:	d1a4      	bne.n	800e05e <_strtod_l+0x82e>
 800e114:	e5de      	b.n	800dcd4 <_strtod_l+0x4a4>
 800e116:	f04f 33ff 	mov.w	r3, #4294967295
 800e11a:	e7ea      	b.n	800e0f2 <_strtod_l+0x8c2>
 800e11c:	4613      	mov	r3, r2
 800e11e:	e7e8      	b.n	800e0f2 <_strtod_l+0x8c2>
 800e120:	ea53 030a 	orrs.w	r3, r3, sl
 800e124:	d08c      	beq.n	800e040 <_strtod_l+0x810>
 800e126:	9b08      	ldr	r3, [sp, #32]
 800e128:	b1db      	cbz	r3, 800e162 <_strtod_l+0x932>
 800e12a:	423b      	tst	r3, r7
 800e12c:	d0ef      	beq.n	800e10e <_strtod_l+0x8de>
 800e12e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e130:	9a04      	ldr	r2, [sp, #16]
 800e132:	4650      	mov	r0, sl
 800e134:	4659      	mov	r1, fp
 800e136:	b1c3      	cbz	r3, 800e16a <_strtod_l+0x93a>
 800e138:	f7ff fb5c 	bl	800d7f4 <sulp>
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	ec51 0b18 	vmov	r0, r1, d8
 800e144:	f7f2 f8ca 	bl	80002dc <__adddf3>
 800e148:	4682      	mov	sl, r0
 800e14a:	468b      	mov	fp, r1
 800e14c:	e7df      	b.n	800e10e <_strtod_l+0x8de>
 800e14e:	4013      	ands	r3, r2
 800e150:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e154:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e158:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e15c:	f04f 3aff 	mov.w	sl, #4294967295
 800e160:	e7d5      	b.n	800e10e <_strtod_l+0x8de>
 800e162:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e164:	ea13 0f0a 	tst.w	r3, sl
 800e168:	e7e0      	b.n	800e12c <_strtod_l+0x8fc>
 800e16a:	f7ff fb43 	bl	800d7f4 <sulp>
 800e16e:	4602      	mov	r2, r0
 800e170:	460b      	mov	r3, r1
 800e172:	ec51 0b18 	vmov	r0, r1, d8
 800e176:	f7f2 f8af 	bl	80002d8 <__aeabi_dsub>
 800e17a:	2200      	movs	r2, #0
 800e17c:	2300      	movs	r3, #0
 800e17e:	4682      	mov	sl, r0
 800e180:	468b      	mov	fp, r1
 800e182:	f7f2 fcc9 	bl	8000b18 <__aeabi_dcmpeq>
 800e186:	2800      	cmp	r0, #0
 800e188:	d0c1      	beq.n	800e10e <_strtod_l+0x8de>
 800e18a:	e611      	b.n	800ddb0 <_strtod_l+0x580>
 800e18c:	fffffc02 	.word	0xfffffc02
 800e190:	7ff00000 	.word	0x7ff00000
 800e194:	39500000 	.word	0x39500000
 800e198:	000fffff 	.word	0x000fffff
 800e19c:	7fefffff 	.word	0x7fefffff
 800e1a0:	08012768 	.word	0x08012768
 800e1a4:	4631      	mov	r1, r6
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f002 fb12 	bl	80107d0 <__ratio>
 800e1ac:	ec59 8b10 	vmov	r8, r9, d0
 800e1b0:	ee10 0a10 	vmov	r0, s0
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e1ba:	4649      	mov	r1, r9
 800e1bc:	f7f2 fcc0 	bl	8000b40 <__aeabi_dcmple>
 800e1c0:	2800      	cmp	r0, #0
 800e1c2:	d07a      	beq.n	800e2ba <_strtod_l+0xa8a>
 800e1c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d04a      	beq.n	800e260 <_strtod_l+0xa30>
 800e1ca:	4b95      	ldr	r3, [pc, #596]	; (800e420 <_strtod_l+0xbf0>)
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e1d2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e420 <_strtod_l+0xbf0>
 800e1d6:	f04f 0800 	mov.w	r8, #0
 800e1da:	4b92      	ldr	r3, [pc, #584]	; (800e424 <_strtod_l+0xbf4>)
 800e1dc:	403b      	ands	r3, r7
 800e1de:	930d      	str	r3, [sp, #52]	; 0x34
 800e1e0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e1e2:	4b91      	ldr	r3, [pc, #580]	; (800e428 <_strtod_l+0xbf8>)
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	f040 80b0 	bne.w	800e34a <_strtod_l+0xb1a>
 800e1ea:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e1ee:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e1f2:	ec4b ab10 	vmov	d0, sl, fp
 800e1f6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e1fa:	f002 fa11 	bl	8010620 <__ulp>
 800e1fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e202:	ec53 2b10 	vmov	r2, r3, d0
 800e206:	f7f2 fa1f 	bl	8000648 <__aeabi_dmul>
 800e20a:	4652      	mov	r2, sl
 800e20c:	465b      	mov	r3, fp
 800e20e:	f7f2 f865 	bl	80002dc <__adddf3>
 800e212:	460b      	mov	r3, r1
 800e214:	4983      	ldr	r1, [pc, #524]	; (800e424 <_strtod_l+0xbf4>)
 800e216:	4a85      	ldr	r2, [pc, #532]	; (800e42c <_strtod_l+0xbfc>)
 800e218:	4019      	ands	r1, r3
 800e21a:	4291      	cmp	r1, r2
 800e21c:	4682      	mov	sl, r0
 800e21e:	d960      	bls.n	800e2e2 <_strtod_l+0xab2>
 800e220:	ee18 3a90 	vmov	r3, s17
 800e224:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e228:	4293      	cmp	r3, r2
 800e22a:	d104      	bne.n	800e236 <_strtod_l+0xa06>
 800e22c:	ee18 3a10 	vmov	r3, s16
 800e230:	3301      	adds	r3, #1
 800e232:	f43f ad45 	beq.w	800dcc0 <_strtod_l+0x490>
 800e236:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e438 <_strtod_l+0xc08>
 800e23a:	f04f 3aff 	mov.w	sl, #4294967295
 800e23e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e240:	4620      	mov	r0, r4
 800e242:	f001 febb 	bl	800ffbc <_Bfree>
 800e246:	9905      	ldr	r1, [sp, #20]
 800e248:	4620      	mov	r0, r4
 800e24a:	f001 feb7 	bl	800ffbc <_Bfree>
 800e24e:	4631      	mov	r1, r6
 800e250:	4620      	mov	r0, r4
 800e252:	f001 feb3 	bl	800ffbc <_Bfree>
 800e256:	4629      	mov	r1, r5
 800e258:	4620      	mov	r0, r4
 800e25a:	f001 feaf 	bl	800ffbc <_Bfree>
 800e25e:	e61a      	b.n	800de96 <_strtod_l+0x666>
 800e260:	f1ba 0f00 	cmp.w	sl, #0
 800e264:	d11b      	bne.n	800e29e <_strtod_l+0xa6e>
 800e266:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e26a:	b9f3      	cbnz	r3, 800e2aa <_strtod_l+0xa7a>
 800e26c:	4b6c      	ldr	r3, [pc, #432]	; (800e420 <_strtod_l+0xbf0>)
 800e26e:	2200      	movs	r2, #0
 800e270:	4640      	mov	r0, r8
 800e272:	4649      	mov	r1, r9
 800e274:	f7f2 fc5a 	bl	8000b2c <__aeabi_dcmplt>
 800e278:	b9d0      	cbnz	r0, 800e2b0 <_strtod_l+0xa80>
 800e27a:	4640      	mov	r0, r8
 800e27c:	4649      	mov	r1, r9
 800e27e:	4b6c      	ldr	r3, [pc, #432]	; (800e430 <_strtod_l+0xc00>)
 800e280:	2200      	movs	r2, #0
 800e282:	f7f2 f9e1 	bl	8000648 <__aeabi_dmul>
 800e286:	4680      	mov	r8, r0
 800e288:	4689      	mov	r9, r1
 800e28a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e28e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e292:	9315      	str	r3, [sp, #84]	; 0x54
 800e294:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e298:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e29c:	e79d      	b.n	800e1da <_strtod_l+0x9aa>
 800e29e:	f1ba 0f01 	cmp.w	sl, #1
 800e2a2:	d102      	bne.n	800e2aa <_strtod_l+0xa7a>
 800e2a4:	2f00      	cmp	r7, #0
 800e2a6:	f43f ad83 	beq.w	800ddb0 <_strtod_l+0x580>
 800e2aa:	4b62      	ldr	r3, [pc, #392]	; (800e434 <_strtod_l+0xc04>)
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	e78e      	b.n	800e1ce <_strtod_l+0x99e>
 800e2b0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e430 <_strtod_l+0xc00>
 800e2b4:	f04f 0800 	mov.w	r8, #0
 800e2b8:	e7e7      	b.n	800e28a <_strtod_l+0xa5a>
 800e2ba:	4b5d      	ldr	r3, [pc, #372]	; (800e430 <_strtod_l+0xc00>)
 800e2bc:	4640      	mov	r0, r8
 800e2be:	4649      	mov	r1, r9
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	f7f2 f9c1 	bl	8000648 <__aeabi_dmul>
 800e2c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2c8:	4680      	mov	r8, r0
 800e2ca:	4689      	mov	r9, r1
 800e2cc:	b933      	cbnz	r3, 800e2dc <_strtod_l+0xaac>
 800e2ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e2d2:	900e      	str	r0, [sp, #56]	; 0x38
 800e2d4:	930f      	str	r3, [sp, #60]	; 0x3c
 800e2d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e2da:	e7dd      	b.n	800e298 <_strtod_l+0xa68>
 800e2dc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e2e0:	e7f9      	b.n	800e2d6 <_strtod_l+0xaa6>
 800e2e2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e2e6:	9b04      	ldr	r3, [sp, #16]
 800e2e8:	2b00      	cmp	r3, #0
 800e2ea:	d1a8      	bne.n	800e23e <_strtod_l+0xa0e>
 800e2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e2f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e2f2:	0d1b      	lsrs	r3, r3, #20
 800e2f4:	051b      	lsls	r3, r3, #20
 800e2f6:	429a      	cmp	r2, r3
 800e2f8:	d1a1      	bne.n	800e23e <_strtod_l+0xa0e>
 800e2fa:	4640      	mov	r0, r8
 800e2fc:	4649      	mov	r1, r9
 800e2fe:	f7f2 fd03 	bl	8000d08 <__aeabi_d2lz>
 800e302:	f7f2 f973 	bl	80005ec <__aeabi_l2d>
 800e306:	4602      	mov	r2, r0
 800e308:	460b      	mov	r3, r1
 800e30a:	4640      	mov	r0, r8
 800e30c:	4649      	mov	r1, r9
 800e30e:	f7f1 ffe3 	bl	80002d8 <__aeabi_dsub>
 800e312:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e314:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e318:	ea43 030a 	orr.w	r3, r3, sl
 800e31c:	4313      	orrs	r3, r2
 800e31e:	4680      	mov	r8, r0
 800e320:	4689      	mov	r9, r1
 800e322:	d055      	beq.n	800e3d0 <_strtod_l+0xba0>
 800e324:	a336      	add	r3, pc, #216	; (adr r3, 800e400 <_strtod_l+0xbd0>)
 800e326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e32a:	f7f2 fbff 	bl	8000b2c <__aeabi_dcmplt>
 800e32e:	2800      	cmp	r0, #0
 800e330:	f47f acd0 	bne.w	800dcd4 <_strtod_l+0x4a4>
 800e334:	a334      	add	r3, pc, #208	; (adr r3, 800e408 <_strtod_l+0xbd8>)
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	4640      	mov	r0, r8
 800e33c:	4649      	mov	r1, r9
 800e33e:	f7f2 fc13 	bl	8000b68 <__aeabi_dcmpgt>
 800e342:	2800      	cmp	r0, #0
 800e344:	f43f af7b 	beq.w	800e23e <_strtod_l+0xa0e>
 800e348:	e4c4      	b.n	800dcd4 <_strtod_l+0x4a4>
 800e34a:	9b04      	ldr	r3, [sp, #16]
 800e34c:	b333      	cbz	r3, 800e39c <_strtod_l+0xb6c>
 800e34e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e350:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e354:	d822      	bhi.n	800e39c <_strtod_l+0xb6c>
 800e356:	a32e      	add	r3, pc, #184	; (adr r3, 800e410 <_strtod_l+0xbe0>)
 800e358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35c:	4640      	mov	r0, r8
 800e35e:	4649      	mov	r1, r9
 800e360:	f7f2 fbee 	bl	8000b40 <__aeabi_dcmple>
 800e364:	b1a0      	cbz	r0, 800e390 <_strtod_l+0xb60>
 800e366:	4649      	mov	r1, r9
 800e368:	4640      	mov	r0, r8
 800e36a:	f7f2 fc45 	bl	8000bf8 <__aeabi_d2uiz>
 800e36e:	2801      	cmp	r0, #1
 800e370:	bf38      	it	cc
 800e372:	2001      	movcc	r0, #1
 800e374:	f7f2 f8ee 	bl	8000554 <__aeabi_ui2d>
 800e378:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e37a:	4680      	mov	r8, r0
 800e37c:	4689      	mov	r9, r1
 800e37e:	bb23      	cbnz	r3, 800e3ca <_strtod_l+0xb9a>
 800e380:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e384:	9010      	str	r0, [sp, #64]	; 0x40
 800e386:	9311      	str	r3, [sp, #68]	; 0x44
 800e388:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e38c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e392:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e394:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e398:	1a9b      	subs	r3, r3, r2
 800e39a:	9309      	str	r3, [sp, #36]	; 0x24
 800e39c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3a0:	eeb0 0a48 	vmov.f32	s0, s16
 800e3a4:	eef0 0a68 	vmov.f32	s1, s17
 800e3a8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e3ac:	f002 f938 	bl	8010620 <__ulp>
 800e3b0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e3b4:	ec53 2b10 	vmov	r2, r3, d0
 800e3b8:	f7f2 f946 	bl	8000648 <__aeabi_dmul>
 800e3bc:	ec53 2b18 	vmov	r2, r3, d8
 800e3c0:	f7f1 ff8c 	bl	80002dc <__adddf3>
 800e3c4:	4682      	mov	sl, r0
 800e3c6:	468b      	mov	fp, r1
 800e3c8:	e78d      	b.n	800e2e6 <_strtod_l+0xab6>
 800e3ca:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e3ce:	e7db      	b.n	800e388 <_strtod_l+0xb58>
 800e3d0:	a311      	add	r3, pc, #68	; (adr r3, 800e418 <_strtod_l+0xbe8>)
 800e3d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d6:	f7f2 fba9 	bl	8000b2c <__aeabi_dcmplt>
 800e3da:	e7b2      	b.n	800e342 <_strtod_l+0xb12>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	930a      	str	r3, [sp, #40]	; 0x28
 800e3e0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e3e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e3e4:	6013      	str	r3, [r2, #0]
 800e3e6:	f7ff ba6b 	b.w	800d8c0 <_strtod_l+0x90>
 800e3ea:	2a65      	cmp	r2, #101	; 0x65
 800e3ec:	f43f ab5f 	beq.w	800daae <_strtod_l+0x27e>
 800e3f0:	2a45      	cmp	r2, #69	; 0x45
 800e3f2:	f43f ab5c 	beq.w	800daae <_strtod_l+0x27e>
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	f7ff bb94 	b.w	800db24 <_strtod_l+0x2f4>
 800e3fc:	f3af 8000 	nop.w
 800e400:	94a03595 	.word	0x94a03595
 800e404:	3fdfffff 	.word	0x3fdfffff
 800e408:	35afe535 	.word	0x35afe535
 800e40c:	3fe00000 	.word	0x3fe00000
 800e410:	ffc00000 	.word	0xffc00000
 800e414:	41dfffff 	.word	0x41dfffff
 800e418:	94a03595 	.word	0x94a03595
 800e41c:	3fcfffff 	.word	0x3fcfffff
 800e420:	3ff00000 	.word	0x3ff00000
 800e424:	7ff00000 	.word	0x7ff00000
 800e428:	7fe00000 	.word	0x7fe00000
 800e42c:	7c9fffff 	.word	0x7c9fffff
 800e430:	3fe00000 	.word	0x3fe00000
 800e434:	bff00000 	.word	0xbff00000
 800e438:	7fefffff 	.word	0x7fefffff

0800e43c <strtod>:
 800e43c:	460a      	mov	r2, r1
 800e43e:	4601      	mov	r1, r0
 800e440:	4802      	ldr	r0, [pc, #8]	; (800e44c <strtod+0x10>)
 800e442:	4b03      	ldr	r3, [pc, #12]	; (800e450 <strtod+0x14>)
 800e444:	6800      	ldr	r0, [r0, #0]
 800e446:	f7ff b9f3 	b.w	800d830 <_strtod_l>
 800e44a:	bf00      	nop
 800e44c:	2000002c 	.word	0x2000002c
 800e450:	20000094 	.word	0x20000094

0800e454 <_strtol_l.constprop.0>:
 800e454:	2b01      	cmp	r3, #1
 800e456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e45a:	d001      	beq.n	800e460 <_strtol_l.constprop.0+0xc>
 800e45c:	2b24      	cmp	r3, #36	; 0x24
 800e45e:	d906      	bls.n	800e46e <_strtol_l.constprop.0+0x1a>
 800e460:	f7fe fc76 	bl	800cd50 <__errno>
 800e464:	2316      	movs	r3, #22
 800e466:	6003      	str	r3, [r0, #0]
 800e468:	2000      	movs	r0, #0
 800e46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e554 <_strtol_l.constprop.0+0x100>
 800e472:	460d      	mov	r5, r1
 800e474:	462e      	mov	r6, r5
 800e476:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e47a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e47e:	f017 0708 	ands.w	r7, r7, #8
 800e482:	d1f7      	bne.n	800e474 <_strtol_l.constprop.0+0x20>
 800e484:	2c2d      	cmp	r4, #45	; 0x2d
 800e486:	d132      	bne.n	800e4ee <_strtol_l.constprop.0+0x9a>
 800e488:	782c      	ldrb	r4, [r5, #0]
 800e48a:	2701      	movs	r7, #1
 800e48c:	1cb5      	adds	r5, r6, #2
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d05b      	beq.n	800e54a <_strtol_l.constprop.0+0xf6>
 800e492:	2b10      	cmp	r3, #16
 800e494:	d109      	bne.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e496:	2c30      	cmp	r4, #48	; 0x30
 800e498:	d107      	bne.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e49a:	782c      	ldrb	r4, [r5, #0]
 800e49c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e4a0:	2c58      	cmp	r4, #88	; 0x58
 800e4a2:	d14d      	bne.n	800e540 <_strtol_l.constprop.0+0xec>
 800e4a4:	786c      	ldrb	r4, [r5, #1]
 800e4a6:	2310      	movs	r3, #16
 800e4a8:	3502      	adds	r5, #2
 800e4aa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e4ae:	f108 38ff 	add.w	r8, r8, #4294967295
 800e4b2:	f04f 0c00 	mov.w	ip, #0
 800e4b6:	fbb8 f9f3 	udiv	r9, r8, r3
 800e4ba:	4666      	mov	r6, ip
 800e4bc:	fb03 8a19 	mls	sl, r3, r9, r8
 800e4c0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e4c4:	f1be 0f09 	cmp.w	lr, #9
 800e4c8:	d816      	bhi.n	800e4f8 <_strtol_l.constprop.0+0xa4>
 800e4ca:	4674      	mov	r4, lr
 800e4cc:	42a3      	cmp	r3, r4
 800e4ce:	dd24      	ble.n	800e51a <_strtol_l.constprop.0+0xc6>
 800e4d0:	f1bc 0f00 	cmp.w	ip, #0
 800e4d4:	db1e      	blt.n	800e514 <_strtol_l.constprop.0+0xc0>
 800e4d6:	45b1      	cmp	r9, r6
 800e4d8:	d31c      	bcc.n	800e514 <_strtol_l.constprop.0+0xc0>
 800e4da:	d101      	bne.n	800e4e0 <_strtol_l.constprop.0+0x8c>
 800e4dc:	45a2      	cmp	sl, r4
 800e4de:	db19      	blt.n	800e514 <_strtol_l.constprop.0+0xc0>
 800e4e0:	fb06 4603 	mla	r6, r6, r3, r4
 800e4e4:	f04f 0c01 	mov.w	ip, #1
 800e4e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e4ec:	e7e8      	b.n	800e4c0 <_strtol_l.constprop.0+0x6c>
 800e4ee:	2c2b      	cmp	r4, #43	; 0x2b
 800e4f0:	bf04      	itt	eq
 800e4f2:	782c      	ldrbeq	r4, [r5, #0]
 800e4f4:	1cb5      	addeq	r5, r6, #2
 800e4f6:	e7ca      	b.n	800e48e <_strtol_l.constprop.0+0x3a>
 800e4f8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e4fc:	f1be 0f19 	cmp.w	lr, #25
 800e500:	d801      	bhi.n	800e506 <_strtol_l.constprop.0+0xb2>
 800e502:	3c37      	subs	r4, #55	; 0x37
 800e504:	e7e2      	b.n	800e4cc <_strtol_l.constprop.0+0x78>
 800e506:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e50a:	f1be 0f19 	cmp.w	lr, #25
 800e50e:	d804      	bhi.n	800e51a <_strtol_l.constprop.0+0xc6>
 800e510:	3c57      	subs	r4, #87	; 0x57
 800e512:	e7db      	b.n	800e4cc <_strtol_l.constprop.0+0x78>
 800e514:	f04f 3cff 	mov.w	ip, #4294967295
 800e518:	e7e6      	b.n	800e4e8 <_strtol_l.constprop.0+0x94>
 800e51a:	f1bc 0f00 	cmp.w	ip, #0
 800e51e:	da05      	bge.n	800e52c <_strtol_l.constprop.0+0xd8>
 800e520:	2322      	movs	r3, #34	; 0x22
 800e522:	6003      	str	r3, [r0, #0]
 800e524:	4646      	mov	r6, r8
 800e526:	b942      	cbnz	r2, 800e53a <_strtol_l.constprop.0+0xe6>
 800e528:	4630      	mov	r0, r6
 800e52a:	e79e      	b.n	800e46a <_strtol_l.constprop.0+0x16>
 800e52c:	b107      	cbz	r7, 800e530 <_strtol_l.constprop.0+0xdc>
 800e52e:	4276      	negs	r6, r6
 800e530:	2a00      	cmp	r2, #0
 800e532:	d0f9      	beq.n	800e528 <_strtol_l.constprop.0+0xd4>
 800e534:	f1bc 0f00 	cmp.w	ip, #0
 800e538:	d000      	beq.n	800e53c <_strtol_l.constprop.0+0xe8>
 800e53a:	1e69      	subs	r1, r5, #1
 800e53c:	6011      	str	r1, [r2, #0]
 800e53e:	e7f3      	b.n	800e528 <_strtol_l.constprop.0+0xd4>
 800e540:	2430      	movs	r4, #48	; 0x30
 800e542:	2b00      	cmp	r3, #0
 800e544:	d1b1      	bne.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e546:	2308      	movs	r3, #8
 800e548:	e7af      	b.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e54a:	2c30      	cmp	r4, #48	; 0x30
 800e54c:	d0a5      	beq.n	800e49a <_strtol_l.constprop.0+0x46>
 800e54e:	230a      	movs	r3, #10
 800e550:	e7ab      	b.n	800e4aa <_strtol_l.constprop.0+0x56>
 800e552:	bf00      	nop
 800e554:	08012791 	.word	0x08012791

0800e558 <strtol>:
 800e558:	4613      	mov	r3, r2
 800e55a:	460a      	mov	r2, r1
 800e55c:	4601      	mov	r1, r0
 800e55e:	4802      	ldr	r0, [pc, #8]	; (800e568 <strtol+0x10>)
 800e560:	6800      	ldr	r0, [r0, #0]
 800e562:	f7ff bf77 	b.w	800e454 <_strtol_l.constprop.0>
 800e566:	bf00      	nop
 800e568:	2000002c 	.word	0x2000002c

0800e56c <__swbuf_r>:
 800e56c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e56e:	460e      	mov	r6, r1
 800e570:	4614      	mov	r4, r2
 800e572:	4605      	mov	r5, r0
 800e574:	b118      	cbz	r0, 800e57e <__swbuf_r+0x12>
 800e576:	6983      	ldr	r3, [r0, #24]
 800e578:	b90b      	cbnz	r3, 800e57e <__swbuf_r+0x12>
 800e57a:	f001 f84d 	bl	800f618 <__sinit>
 800e57e:	4b21      	ldr	r3, [pc, #132]	; (800e604 <__swbuf_r+0x98>)
 800e580:	429c      	cmp	r4, r3
 800e582:	d12b      	bne.n	800e5dc <__swbuf_r+0x70>
 800e584:	686c      	ldr	r4, [r5, #4]
 800e586:	69a3      	ldr	r3, [r4, #24]
 800e588:	60a3      	str	r3, [r4, #8]
 800e58a:	89a3      	ldrh	r3, [r4, #12]
 800e58c:	071a      	lsls	r2, r3, #28
 800e58e:	d52f      	bpl.n	800e5f0 <__swbuf_r+0x84>
 800e590:	6923      	ldr	r3, [r4, #16]
 800e592:	b36b      	cbz	r3, 800e5f0 <__swbuf_r+0x84>
 800e594:	6923      	ldr	r3, [r4, #16]
 800e596:	6820      	ldr	r0, [r4, #0]
 800e598:	1ac0      	subs	r0, r0, r3
 800e59a:	6963      	ldr	r3, [r4, #20]
 800e59c:	b2f6      	uxtb	r6, r6
 800e59e:	4283      	cmp	r3, r0
 800e5a0:	4637      	mov	r7, r6
 800e5a2:	dc04      	bgt.n	800e5ae <__swbuf_r+0x42>
 800e5a4:	4621      	mov	r1, r4
 800e5a6:	4628      	mov	r0, r5
 800e5a8:	f000 ffa2 	bl	800f4f0 <_fflush_r>
 800e5ac:	bb30      	cbnz	r0, 800e5fc <__swbuf_r+0x90>
 800e5ae:	68a3      	ldr	r3, [r4, #8]
 800e5b0:	3b01      	subs	r3, #1
 800e5b2:	60a3      	str	r3, [r4, #8]
 800e5b4:	6823      	ldr	r3, [r4, #0]
 800e5b6:	1c5a      	adds	r2, r3, #1
 800e5b8:	6022      	str	r2, [r4, #0]
 800e5ba:	701e      	strb	r6, [r3, #0]
 800e5bc:	6963      	ldr	r3, [r4, #20]
 800e5be:	3001      	adds	r0, #1
 800e5c0:	4283      	cmp	r3, r0
 800e5c2:	d004      	beq.n	800e5ce <__swbuf_r+0x62>
 800e5c4:	89a3      	ldrh	r3, [r4, #12]
 800e5c6:	07db      	lsls	r3, r3, #31
 800e5c8:	d506      	bpl.n	800e5d8 <__swbuf_r+0x6c>
 800e5ca:	2e0a      	cmp	r6, #10
 800e5cc:	d104      	bne.n	800e5d8 <__swbuf_r+0x6c>
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	4628      	mov	r0, r5
 800e5d2:	f000 ff8d 	bl	800f4f0 <_fflush_r>
 800e5d6:	b988      	cbnz	r0, 800e5fc <__swbuf_r+0x90>
 800e5d8:	4638      	mov	r0, r7
 800e5da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5dc:	4b0a      	ldr	r3, [pc, #40]	; (800e608 <__swbuf_r+0x9c>)
 800e5de:	429c      	cmp	r4, r3
 800e5e0:	d101      	bne.n	800e5e6 <__swbuf_r+0x7a>
 800e5e2:	68ac      	ldr	r4, [r5, #8]
 800e5e4:	e7cf      	b.n	800e586 <__swbuf_r+0x1a>
 800e5e6:	4b09      	ldr	r3, [pc, #36]	; (800e60c <__swbuf_r+0xa0>)
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	bf08      	it	eq
 800e5ec:	68ec      	ldreq	r4, [r5, #12]
 800e5ee:	e7ca      	b.n	800e586 <__swbuf_r+0x1a>
 800e5f0:	4621      	mov	r1, r4
 800e5f2:	4628      	mov	r0, r5
 800e5f4:	f000 f80c 	bl	800e610 <__swsetup_r>
 800e5f8:	2800      	cmp	r0, #0
 800e5fa:	d0cb      	beq.n	800e594 <__swbuf_r+0x28>
 800e5fc:	f04f 37ff 	mov.w	r7, #4294967295
 800e600:	e7ea      	b.n	800e5d8 <__swbuf_r+0x6c>
 800e602:	bf00      	nop
 800e604:	08012944 	.word	0x08012944
 800e608:	08012964 	.word	0x08012964
 800e60c:	08012924 	.word	0x08012924

0800e610 <__swsetup_r>:
 800e610:	4b32      	ldr	r3, [pc, #200]	; (800e6dc <__swsetup_r+0xcc>)
 800e612:	b570      	push	{r4, r5, r6, lr}
 800e614:	681d      	ldr	r5, [r3, #0]
 800e616:	4606      	mov	r6, r0
 800e618:	460c      	mov	r4, r1
 800e61a:	b125      	cbz	r5, 800e626 <__swsetup_r+0x16>
 800e61c:	69ab      	ldr	r3, [r5, #24]
 800e61e:	b913      	cbnz	r3, 800e626 <__swsetup_r+0x16>
 800e620:	4628      	mov	r0, r5
 800e622:	f000 fff9 	bl	800f618 <__sinit>
 800e626:	4b2e      	ldr	r3, [pc, #184]	; (800e6e0 <__swsetup_r+0xd0>)
 800e628:	429c      	cmp	r4, r3
 800e62a:	d10f      	bne.n	800e64c <__swsetup_r+0x3c>
 800e62c:	686c      	ldr	r4, [r5, #4]
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e634:	0719      	lsls	r1, r3, #28
 800e636:	d42c      	bmi.n	800e692 <__swsetup_r+0x82>
 800e638:	06dd      	lsls	r5, r3, #27
 800e63a:	d411      	bmi.n	800e660 <__swsetup_r+0x50>
 800e63c:	2309      	movs	r3, #9
 800e63e:	6033      	str	r3, [r6, #0]
 800e640:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e644:	81a3      	strh	r3, [r4, #12]
 800e646:	f04f 30ff 	mov.w	r0, #4294967295
 800e64a:	e03e      	b.n	800e6ca <__swsetup_r+0xba>
 800e64c:	4b25      	ldr	r3, [pc, #148]	; (800e6e4 <__swsetup_r+0xd4>)
 800e64e:	429c      	cmp	r4, r3
 800e650:	d101      	bne.n	800e656 <__swsetup_r+0x46>
 800e652:	68ac      	ldr	r4, [r5, #8]
 800e654:	e7eb      	b.n	800e62e <__swsetup_r+0x1e>
 800e656:	4b24      	ldr	r3, [pc, #144]	; (800e6e8 <__swsetup_r+0xd8>)
 800e658:	429c      	cmp	r4, r3
 800e65a:	bf08      	it	eq
 800e65c:	68ec      	ldreq	r4, [r5, #12]
 800e65e:	e7e6      	b.n	800e62e <__swsetup_r+0x1e>
 800e660:	0758      	lsls	r0, r3, #29
 800e662:	d512      	bpl.n	800e68a <__swsetup_r+0x7a>
 800e664:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e666:	b141      	cbz	r1, 800e67a <__swsetup_r+0x6a>
 800e668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e66c:	4299      	cmp	r1, r3
 800e66e:	d002      	beq.n	800e676 <__swsetup_r+0x66>
 800e670:	4630      	mov	r0, r6
 800e672:	f002 f93b 	bl	80108ec <_free_r>
 800e676:	2300      	movs	r3, #0
 800e678:	6363      	str	r3, [r4, #52]	; 0x34
 800e67a:	89a3      	ldrh	r3, [r4, #12]
 800e67c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e680:	81a3      	strh	r3, [r4, #12]
 800e682:	2300      	movs	r3, #0
 800e684:	6063      	str	r3, [r4, #4]
 800e686:	6923      	ldr	r3, [r4, #16]
 800e688:	6023      	str	r3, [r4, #0]
 800e68a:	89a3      	ldrh	r3, [r4, #12]
 800e68c:	f043 0308 	orr.w	r3, r3, #8
 800e690:	81a3      	strh	r3, [r4, #12]
 800e692:	6923      	ldr	r3, [r4, #16]
 800e694:	b94b      	cbnz	r3, 800e6aa <__swsetup_r+0x9a>
 800e696:	89a3      	ldrh	r3, [r4, #12]
 800e698:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e69c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e6a0:	d003      	beq.n	800e6aa <__swsetup_r+0x9a>
 800e6a2:	4621      	mov	r1, r4
 800e6a4:	4630      	mov	r0, r6
 800e6a6:	f001 fbef 	bl	800fe88 <__smakebuf_r>
 800e6aa:	89a0      	ldrh	r0, [r4, #12]
 800e6ac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e6b0:	f010 0301 	ands.w	r3, r0, #1
 800e6b4:	d00a      	beq.n	800e6cc <__swsetup_r+0xbc>
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	60a3      	str	r3, [r4, #8]
 800e6ba:	6963      	ldr	r3, [r4, #20]
 800e6bc:	425b      	negs	r3, r3
 800e6be:	61a3      	str	r3, [r4, #24]
 800e6c0:	6923      	ldr	r3, [r4, #16]
 800e6c2:	b943      	cbnz	r3, 800e6d6 <__swsetup_r+0xc6>
 800e6c4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e6c8:	d1ba      	bne.n	800e640 <__swsetup_r+0x30>
 800e6ca:	bd70      	pop	{r4, r5, r6, pc}
 800e6cc:	0781      	lsls	r1, r0, #30
 800e6ce:	bf58      	it	pl
 800e6d0:	6963      	ldrpl	r3, [r4, #20]
 800e6d2:	60a3      	str	r3, [r4, #8]
 800e6d4:	e7f4      	b.n	800e6c0 <__swsetup_r+0xb0>
 800e6d6:	2000      	movs	r0, #0
 800e6d8:	e7f7      	b.n	800e6ca <__swsetup_r+0xba>
 800e6da:	bf00      	nop
 800e6dc:	2000002c 	.word	0x2000002c
 800e6e0:	08012944 	.word	0x08012944
 800e6e4:	08012964 	.word	0x08012964
 800e6e8:	08012924 	.word	0x08012924

0800e6ec <quorem>:
 800e6ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6f0:	6903      	ldr	r3, [r0, #16]
 800e6f2:	690c      	ldr	r4, [r1, #16]
 800e6f4:	42a3      	cmp	r3, r4
 800e6f6:	4607      	mov	r7, r0
 800e6f8:	f2c0 8081 	blt.w	800e7fe <quorem+0x112>
 800e6fc:	3c01      	subs	r4, #1
 800e6fe:	f101 0814 	add.w	r8, r1, #20
 800e702:	f100 0514 	add.w	r5, r0, #20
 800e706:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e70a:	9301      	str	r3, [sp, #4]
 800e70c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e710:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e714:	3301      	adds	r3, #1
 800e716:	429a      	cmp	r2, r3
 800e718:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e71c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e720:	fbb2 f6f3 	udiv	r6, r2, r3
 800e724:	d331      	bcc.n	800e78a <quorem+0x9e>
 800e726:	f04f 0e00 	mov.w	lr, #0
 800e72a:	4640      	mov	r0, r8
 800e72c:	46ac      	mov	ip, r5
 800e72e:	46f2      	mov	sl, lr
 800e730:	f850 2b04 	ldr.w	r2, [r0], #4
 800e734:	b293      	uxth	r3, r2
 800e736:	fb06 e303 	mla	r3, r6, r3, lr
 800e73a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e73e:	b29b      	uxth	r3, r3
 800e740:	ebaa 0303 	sub.w	r3, sl, r3
 800e744:	f8dc a000 	ldr.w	sl, [ip]
 800e748:	0c12      	lsrs	r2, r2, #16
 800e74a:	fa13 f38a 	uxtah	r3, r3, sl
 800e74e:	fb06 e202 	mla	r2, r6, r2, lr
 800e752:	9300      	str	r3, [sp, #0]
 800e754:	9b00      	ldr	r3, [sp, #0]
 800e756:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e75a:	b292      	uxth	r2, r2
 800e75c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e760:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e764:	f8bd 3000 	ldrh.w	r3, [sp]
 800e768:	4581      	cmp	r9, r0
 800e76a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e76e:	f84c 3b04 	str.w	r3, [ip], #4
 800e772:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e776:	d2db      	bcs.n	800e730 <quorem+0x44>
 800e778:	f855 300b 	ldr.w	r3, [r5, fp]
 800e77c:	b92b      	cbnz	r3, 800e78a <quorem+0x9e>
 800e77e:	9b01      	ldr	r3, [sp, #4]
 800e780:	3b04      	subs	r3, #4
 800e782:	429d      	cmp	r5, r3
 800e784:	461a      	mov	r2, r3
 800e786:	d32e      	bcc.n	800e7e6 <quorem+0xfa>
 800e788:	613c      	str	r4, [r7, #16]
 800e78a:	4638      	mov	r0, r7
 800e78c:	f001 fea2 	bl	80104d4 <__mcmp>
 800e790:	2800      	cmp	r0, #0
 800e792:	db24      	blt.n	800e7de <quorem+0xf2>
 800e794:	3601      	adds	r6, #1
 800e796:	4628      	mov	r0, r5
 800e798:	f04f 0c00 	mov.w	ip, #0
 800e79c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e7a0:	f8d0 e000 	ldr.w	lr, [r0]
 800e7a4:	b293      	uxth	r3, r2
 800e7a6:	ebac 0303 	sub.w	r3, ip, r3
 800e7aa:	0c12      	lsrs	r2, r2, #16
 800e7ac:	fa13 f38e 	uxtah	r3, r3, lr
 800e7b0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e7b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e7b8:	b29b      	uxth	r3, r3
 800e7ba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e7be:	45c1      	cmp	r9, r8
 800e7c0:	f840 3b04 	str.w	r3, [r0], #4
 800e7c4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e7c8:	d2e8      	bcs.n	800e79c <quorem+0xb0>
 800e7ca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e7ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e7d2:	b922      	cbnz	r2, 800e7de <quorem+0xf2>
 800e7d4:	3b04      	subs	r3, #4
 800e7d6:	429d      	cmp	r5, r3
 800e7d8:	461a      	mov	r2, r3
 800e7da:	d30a      	bcc.n	800e7f2 <quorem+0x106>
 800e7dc:	613c      	str	r4, [r7, #16]
 800e7de:	4630      	mov	r0, r6
 800e7e0:	b003      	add	sp, #12
 800e7e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e7e6:	6812      	ldr	r2, [r2, #0]
 800e7e8:	3b04      	subs	r3, #4
 800e7ea:	2a00      	cmp	r2, #0
 800e7ec:	d1cc      	bne.n	800e788 <quorem+0x9c>
 800e7ee:	3c01      	subs	r4, #1
 800e7f0:	e7c7      	b.n	800e782 <quorem+0x96>
 800e7f2:	6812      	ldr	r2, [r2, #0]
 800e7f4:	3b04      	subs	r3, #4
 800e7f6:	2a00      	cmp	r2, #0
 800e7f8:	d1f0      	bne.n	800e7dc <quorem+0xf0>
 800e7fa:	3c01      	subs	r4, #1
 800e7fc:	e7eb      	b.n	800e7d6 <quorem+0xea>
 800e7fe:	2000      	movs	r0, #0
 800e800:	e7ee      	b.n	800e7e0 <quorem+0xf4>
 800e802:	0000      	movs	r0, r0
 800e804:	0000      	movs	r0, r0
	...

0800e808 <_dtoa_r>:
 800e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e80c:	ed2d 8b04 	vpush	{d8-d9}
 800e810:	ec57 6b10 	vmov	r6, r7, d0
 800e814:	b093      	sub	sp, #76	; 0x4c
 800e816:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e818:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e81c:	9106      	str	r1, [sp, #24]
 800e81e:	ee10 aa10 	vmov	sl, s0
 800e822:	4604      	mov	r4, r0
 800e824:	9209      	str	r2, [sp, #36]	; 0x24
 800e826:	930c      	str	r3, [sp, #48]	; 0x30
 800e828:	46bb      	mov	fp, r7
 800e82a:	b975      	cbnz	r5, 800e84a <_dtoa_r+0x42>
 800e82c:	2010      	movs	r0, #16
 800e82e:	f001 fb6b 	bl	800ff08 <malloc>
 800e832:	4602      	mov	r2, r0
 800e834:	6260      	str	r0, [r4, #36]	; 0x24
 800e836:	b920      	cbnz	r0, 800e842 <_dtoa_r+0x3a>
 800e838:	4ba7      	ldr	r3, [pc, #668]	; (800ead8 <_dtoa_r+0x2d0>)
 800e83a:	21ea      	movs	r1, #234	; 0xea
 800e83c:	48a7      	ldr	r0, [pc, #668]	; (800eadc <_dtoa_r+0x2d4>)
 800e83e:	f002 fb1d 	bl	8010e7c <__assert_func>
 800e842:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e846:	6005      	str	r5, [r0, #0]
 800e848:	60c5      	str	r5, [r0, #12]
 800e84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e84c:	6819      	ldr	r1, [r3, #0]
 800e84e:	b151      	cbz	r1, 800e866 <_dtoa_r+0x5e>
 800e850:	685a      	ldr	r2, [r3, #4]
 800e852:	604a      	str	r2, [r1, #4]
 800e854:	2301      	movs	r3, #1
 800e856:	4093      	lsls	r3, r2
 800e858:	608b      	str	r3, [r1, #8]
 800e85a:	4620      	mov	r0, r4
 800e85c:	f001 fbae 	bl	800ffbc <_Bfree>
 800e860:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e862:	2200      	movs	r2, #0
 800e864:	601a      	str	r2, [r3, #0]
 800e866:	1e3b      	subs	r3, r7, #0
 800e868:	bfaa      	itet	ge
 800e86a:	2300      	movge	r3, #0
 800e86c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e870:	f8c8 3000 	strge.w	r3, [r8]
 800e874:	4b9a      	ldr	r3, [pc, #616]	; (800eae0 <_dtoa_r+0x2d8>)
 800e876:	bfbc      	itt	lt
 800e878:	2201      	movlt	r2, #1
 800e87a:	f8c8 2000 	strlt.w	r2, [r8]
 800e87e:	ea33 030b 	bics.w	r3, r3, fp
 800e882:	d11b      	bne.n	800e8bc <_dtoa_r+0xb4>
 800e884:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e886:	f242 730f 	movw	r3, #9999	; 0x270f
 800e88a:	6013      	str	r3, [r2, #0]
 800e88c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e890:	4333      	orrs	r3, r6
 800e892:	f000 8592 	beq.w	800f3ba <_dtoa_r+0xbb2>
 800e896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e898:	b963      	cbnz	r3, 800e8b4 <_dtoa_r+0xac>
 800e89a:	4b92      	ldr	r3, [pc, #584]	; (800eae4 <_dtoa_r+0x2dc>)
 800e89c:	e022      	b.n	800e8e4 <_dtoa_r+0xdc>
 800e89e:	4b92      	ldr	r3, [pc, #584]	; (800eae8 <_dtoa_r+0x2e0>)
 800e8a0:	9301      	str	r3, [sp, #4]
 800e8a2:	3308      	adds	r3, #8
 800e8a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e8a6:	6013      	str	r3, [r2, #0]
 800e8a8:	9801      	ldr	r0, [sp, #4]
 800e8aa:	b013      	add	sp, #76	; 0x4c
 800e8ac:	ecbd 8b04 	vpop	{d8-d9}
 800e8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e8b4:	4b8b      	ldr	r3, [pc, #556]	; (800eae4 <_dtoa_r+0x2dc>)
 800e8b6:	9301      	str	r3, [sp, #4]
 800e8b8:	3303      	adds	r3, #3
 800e8ba:	e7f3      	b.n	800e8a4 <_dtoa_r+0x9c>
 800e8bc:	2200      	movs	r2, #0
 800e8be:	2300      	movs	r3, #0
 800e8c0:	4650      	mov	r0, sl
 800e8c2:	4659      	mov	r1, fp
 800e8c4:	f7f2 f928 	bl	8000b18 <__aeabi_dcmpeq>
 800e8c8:	ec4b ab19 	vmov	d9, sl, fp
 800e8cc:	4680      	mov	r8, r0
 800e8ce:	b158      	cbz	r0, 800e8e8 <_dtoa_r+0xe0>
 800e8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e8d2:	2301      	movs	r3, #1
 800e8d4:	6013      	str	r3, [r2, #0]
 800e8d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	f000 856b 	beq.w	800f3b4 <_dtoa_r+0xbac>
 800e8de:	4883      	ldr	r0, [pc, #524]	; (800eaec <_dtoa_r+0x2e4>)
 800e8e0:	6018      	str	r0, [r3, #0]
 800e8e2:	1e43      	subs	r3, r0, #1
 800e8e4:	9301      	str	r3, [sp, #4]
 800e8e6:	e7df      	b.n	800e8a8 <_dtoa_r+0xa0>
 800e8e8:	ec4b ab10 	vmov	d0, sl, fp
 800e8ec:	aa10      	add	r2, sp, #64	; 0x40
 800e8ee:	a911      	add	r1, sp, #68	; 0x44
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f001 ff11 	bl	8010718 <__d2b>
 800e8f6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e8fa:	ee08 0a10 	vmov	s16, r0
 800e8fe:	2d00      	cmp	r5, #0
 800e900:	f000 8084 	beq.w	800ea0c <_dtoa_r+0x204>
 800e904:	ee19 3a90 	vmov	r3, s19
 800e908:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e90c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e910:	4656      	mov	r6, sl
 800e912:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e916:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e91a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e91e:	4b74      	ldr	r3, [pc, #464]	; (800eaf0 <_dtoa_r+0x2e8>)
 800e920:	2200      	movs	r2, #0
 800e922:	4630      	mov	r0, r6
 800e924:	4639      	mov	r1, r7
 800e926:	f7f1 fcd7 	bl	80002d8 <__aeabi_dsub>
 800e92a:	a365      	add	r3, pc, #404	; (adr r3, 800eac0 <_dtoa_r+0x2b8>)
 800e92c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e930:	f7f1 fe8a 	bl	8000648 <__aeabi_dmul>
 800e934:	a364      	add	r3, pc, #400	; (adr r3, 800eac8 <_dtoa_r+0x2c0>)
 800e936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93a:	f7f1 fccf 	bl	80002dc <__adddf3>
 800e93e:	4606      	mov	r6, r0
 800e940:	4628      	mov	r0, r5
 800e942:	460f      	mov	r7, r1
 800e944:	f7f1 fe16 	bl	8000574 <__aeabi_i2d>
 800e948:	a361      	add	r3, pc, #388	; (adr r3, 800ead0 <_dtoa_r+0x2c8>)
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	f7f1 fe7b 	bl	8000648 <__aeabi_dmul>
 800e952:	4602      	mov	r2, r0
 800e954:	460b      	mov	r3, r1
 800e956:	4630      	mov	r0, r6
 800e958:	4639      	mov	r1, r7
 800e95a:	f7f1 fcbf 	bl	80002dc <__adddf3>
 800e95e:	4606      	mov	r6, r0
 800e960:	460f      	mov	r7, r1
 800e962:	f7f2 f921 	bl	8000ba8 <__aeabi_d2iz>
 800e966:	2200      	movs	r2, #0
 800e968:	9000      	str	r0, [sp, #0]
 800e96a:	2300      	movs	r3, #0
 800e96c:	4630      	mov	r0, r6
 800e96e:	4639      	mov	r1, r7
 800e970:	f7f2 f8dc 	bl	8000b2c <__aeabi_dcmplt>
 800e974:	b150      	cbz	r0, 800e98c <_dtoa_r+0x184>
 800e976:	9800      	ldr	r0, [sp, #0]
 800e978:	f7f1 fdfc 	bl	8000574 <__aeabi_i2d>
 800e97c:	4632      	mov	r2, r6
 800e97e:	463b      	mov	r3, r7
 800e980:	f7f2 f8ca 	bl	8000b18 <__aeabi_dcmpeq>
 800e984:	b910      	cbnz	r0, 800e98c <_dtoa_r+0x184>
 800e986:	9b00      	ldr	r3, [sp, #0]
 800e988:	3b01      	subs	r3, #1
 800e98a:	9300      	str	r3, [sp, #0]
 800e98c:	9b00      	ldr	r3, [sp, #0]
 800e98e:	2b16      	cmp	r3, #22
 800e990:	d85a      	bhi.n	800ea48 <_dtoa_r+0x240>
 800e992:	9a00      	ldr	r2, [sp, #0]
 800e994:	4b57      	ldr	r3, [pc, #348]	; (800eaf4 <_dtoa_r+0x2ec>)
 800e996:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	ec51 0b19 	vmov	r0, r1, d9
 800e9a2:	f7f2 f8c3 	bl	8000b2c <__aeabi_dcmplt>
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	d050      	beq.n	800ea4c <_dtoa_r+0x244>
 800e9aa:	9b00      	ldr	r3, [sp, #0]
 800e9ac:	3b01      	subs	r3, #1
 800e9ae:	9300      	str	r3, [sp, #0]
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800e9b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e9b6:	1b5d      	subs	r5, r3, r5
 800e9b8:	1e6b      	subs	r3, r5, #1
 800e9ba:	9305      	str	r3, [sp, #20]
 800e9bc:	bf45      	ittet	mi
 800e9be:	f1c5 0301 	rsbmi	r3, r5, #1
 800e9c2:	9304      	strmi	r3, [sp, #16]
 800e9c4:	2300      	movpl	r3, #0
 800e9c6:	2300      	movmi	r3, #0
 800e9c8:	bf4c      	ite	mi
 800e9ca:	9305      	strmi	r3, [sp, #20]
 800e9cc:	9304      	strpl	r3, [sp, #16]
 800e9ce:	9b00      	ldr	r3, [sp, #0]
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	db3d      	blt.n	800ea50 <_dtoa_r+0x248>
 800e9d4:	9b05      	ldr	r3, [sp, #20]
 800e9d6:	9a00      	ldr	r2, [sp, #0]
 800e9d8:	920a      	str	r2, [sp, #40]	; 0x28
 800e9da:	4413      	add	r3, r2
 800e9dc:	9305      	str	r3, [sp, #20]
 800e9de:	2300      	movs	r3, #0
 800e9e0:	9307      	str	r3, [sp, #28]
 800e9e2:	9b06      	ldr	r3, [sp, #24]
 800e9e4:	2b09      	cmp	r3, #9
 800e9e6:	f200 8089 	bhi.w	800eafc <_dtoa_r+0x2f4>
 800e9ea:	2b05      	cmp	r3, #5
 800e9ec:	bfc4      	itt	gt
 800e9ee:	3b04      	subgt	r3, #4
 800e9f0:	9306      	strgt	r3, [sp, #24]
 800e9f2:	9b06      	ldr	r3, [sp, #24]
 800e9f4:	f1a3 0302 	sub.w	r3, r3, #2
 800e9f8:	bfcc      	ite	gt
 800e9fa:	2500      	movgt	r5, #0
 800e9fc:	2501      	movle	r5, #1
 800e9fe:	2b03      	cmp	r3, #3
 800ea00:	f200 8087 	bhi.w	800eb12 <_dtoa_r+0x30a>
 800ea04:	e8df f003 	tbb	[pc, r3]
 800ea08:	59383a2d 	.word	0x59383a2d
 800ea0c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800ea10:	441d      	add	r5, r3
 800ea12:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ea16:	2b20      	cmp	r3, #32
 800ea18:	bfc1      	itttt	gt
 800ea1a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ea1e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ea22:	fa0b f303 	lslgt.w	r3, fp, r3
 800ea26:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ea2a:	bfda      	itte	le
 800ea2c:	f1c3 0320 	rsble	r3, r3, #32
 800ea30:	fa06 f003 	lslle.w	r0, r6, r3
 800ea34:	4318      	orrgt	r0, r3
 800ea36:	f7f1 fd8d 	bl	8000554 <__aeabi_ui2d>
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	4606      	mov	r6, r0
 800ea3e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ea42:	3d01      	subs	r5, #1
 800ea44:	930e      	str	r3, [sp, #56]	; 0x38
 800ea46:	e76a      	b.n	800e91e <_dtoa_r+0x116>
 800ea48:	2301      	movs	r3, #1
 800ea4a:	e7b2      	b.n	800e9b2 <_dtoa_r+0x1aa>
 800ea4c:	900b      	str	r0, [sp, #44]	; 0x2c
 800ea4e:	e7b1      	b.n	800e9b4 <_dtoa_r+0x1ac>
 800ea50:	9b04      	ldr	r3, [sp, #16]
 800ea52:	9a00      	ldr	r2, [sp, #0]
 800ea54:	1a9b      	subs	r3, r3, r2
 800ea56:	9304      	str	r3, [sp, #16]
 800ea58:	4253      	negs	r3, r2
 800ea5a:	9307      	str	r3, [sp, #28]
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	930a      	str	r3, [sp, #40]	; 0x28
 800ea60:	e7bf      	b.n	800e9e2 <_dtoa_r+0x1da>
 800ea62:	2300      	movs	r3, #0
 800ea64:	9308      	str	r3, [sp, #32]
 800ea66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	dc55      	bgt.n	800eb18 <_dtoa_r+0x310>
 800ea6c:	2301      	movs	r3, #1
 800ea6e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ea72:	461a      	mov	r2, r3
 800ea74:	9209      	str	r2, [sp, #36]	; 0x24
 800ea76:	e00c      	b.n	800ea92 <_dtoa_r+0x28a>
 800ea78:	2301      	movs	r3, #1
 800ea7a:	e7f3      	b.n	800ea64 <_dtoa_r+0x25c>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea80:	9308      	str	r3, [sp, #32]
 800ea82:	9b00      	ldr	r3, [sp, #0]
 800ea84:	4413      	add	r3, r2
 800ea86:	9302      	str	r3, [sp, #8]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	2b01      	cmp	r3, #1
 800ea8c:	9303      	str	r3, [sp, #12]
 800ea8e:	bfb8      	it	lt
 800ea90:	2301      	movlt	r3, #1
 800ea92:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ea94:	2200      	movs	r2, #0
 800ea96:	6042      	str	r2, [r0, #4]
 800ea98:	2204      	movs	r2, #4
 800ea9a:	f102 0614 	add.w	r6, r2, #20
 800ea9e:	429e      	cmp	r6, r3
 800eaa0:	6841      	ldr	r1, [r0, #4]
 800eaa2:	d93d      	bls.n	800eb20 <_dtoa_r+0x318>
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f001 fa49 	bl	800ff3c <_Balloc>
 800eaaa:	9001      	str	r0, [sp, #4]
 800eaac:	2800      	cmp	r0, #0
 800eaae:	d13b      	bne.n	800eb28 <_dtoa_r+0x320>
 800eab0:	4b11      	ldr	r3, [pc, #68]	; (800eaf8 <_dtoa_r+0x2f0>)
 800eab2:	4602      	mov	r2, r0
 800eab4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800eab8:	e6c0      	b.n	800e83c <_dtoa_r+0x34>
 800eaba:	2301      	movs	r3, #1
 800eabc:	e7df      	b.n	800ea7e <_dtoa_r+0x276>
 800eabe:	bf00      	nop
 800eac0:	636f4361 	.word	0x636f4361
 800eac4:	3fd287a7 	.word	0x3fd287a7
 800eac8:	8b60c8b3 	.word	0x8b60c8b3
 800eacc:	3fc68a28 	.word	0x3fc68a28
 800ead0:	509f79fb 	.word	0x509f79fb
 800ead4:	3fd34413 	.word	0x3fd34413
 800ead8:	0801289e 	.word	0x0801289e
 800eadc:	080128b5 	.word	0x080128b5
 800eae0:	7ff00000 	.word	0x7ff00000
 800eae4:	0801289a 	.word	0x0801289a
 800eae8:	08012891 	.word	0x08012891
 800eaec:	08012719 	.word	0x08012719
 800eaf0:	3ff80000 	.word	0x3ff80000
 800eaf4:	08012a88 	.word	0x08012a88
 800eaf8:	08012910 	.word	0x08012910
 800eafc:	2501      	movs	r5, #1
 800eafe:	2300      	movs	r3, #0
 800eb00:	9306      	str	r3, [sp, #24]
 800eb02:	9508      	str	r5, [sp, #32]
 800eb04:	f04f 33ff 	mov.w	r3, #4294967295
 800eb08:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	2312      	movs	r3, #18
 800eb10:	e7b0      	b.n	800ea74 <_dtoa_r+0x26c>
 800eb12:	2301      	movs	r3, #1
 800eb14:	9308      	str	r3, [sp, #32]
 800eb16:	e7f5      	b.n	800eb04 <_dtoa_r+0x2fc>
 800eb18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb1a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800eb1e:	e7b8      	b.n	800ea92 <_dtoa_r+0x28a>
 800eb20:	3101      	adds	r1, #1
 800eb22:	6041      	str	r1, [r0, #4]
 800eb24:	0052      	lsls	r2, r2, #1
 800eb26:	e7b8      	b.n	800ea9a <_dtoa_r+0x292>
 800eb28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eb2a:	9a01      	ldr	r2, [sp, #4]
 800eb2c:	601a      	str	r2, [r3, #0]
 800eb2e:	9b03      	ldr	r3, [sp, #12]
 800eb30:	2b0e      	cmp	r3, #14
 800eb32:	f200 809d 	bhi.w	800ec70 <_dtoa_r+0x468>
 800eb36:	2d00      	cmp	r5, #0
 800eb38:	f000 809a 	beq.w	800ec70 <_dtoa_r+0x468>
 800eb3c:	9b00      	ldr	r3, [sp, #0]
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	dd32      	ble.n	800eba8 <_dtoa_r+0x3a0>
 800eb42:	4ab7      	ldr	r2, [pc, #732]	; (800ee20 <_dtoa_r+0x618>)
 800eb44:	f003 030f 	and.w	r3, r3, #15
 800eb48:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800eb4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800eb50:	9b00      	ldr	r3, [sp, #0]
 800eb52:	05d8      	lsls	r0, r3, #23
 800eb54:	ea4f 1723 	mov.w	r7, r3, asr #4
 800eb58:	d516      	bpl.n	800eb88 <_dtoa_r+0x380>
 800eb5a:	4bb2      	ldr	r3, [pc, #712]	; (800ee24 <_dtoa_r+0x61c>)
 800eb5c:	ec51 0b19 	vmov	r0, r1, d9
 800eb60:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800eb64:	f7f1 fe9a 	bl	800089c <__aeabi_ddiv>
 800eb68:	f007 070f 	and.w	r7, r7, #15
 800eb6c:	4682      	mov	sl, r0
 800eb6e:	468b      	mov	fp, r1
 800eb70:	2503      	movs	r5, #3
 800eb72:	4eac      	ldr	r6, [pc, #688]	; (800ee24 <_dtoa_r+0x61c>)
 800eb74:	b957      	cbnz	r7, 800eb8c <_dtoa_r+0x384>
 800eb76:	4642      	mov	r2, r8
 800eb78:	464b      	mov	r3, r9
 800eb7a:	4650      	mov	r0, sl
 800eb7c:	4659      	mov	r1, fp
 800eb7e:	f7f1 fe8d 	bl	800089c <__aeabi_ddiv>
 800eb82:	4682      	mov	sl, r0
 800eb84:	468b      	mov	fp, r1
 800eb86:	e028      	b.n	800ebda <_dtoa_r+0x3d2>
 800eb88:	2502      	movs	r5, #2
 800eb8a:	e7f2      	b.n	800eb72 <_dtoa_r+0x36a>
 800eb8c:	07f9      	lsls	r1, r7, #31
 800eb8e:	d508      	bpl.n	800eba2 <_dtoa_r+0x39a>
 800eb90:	4640      	mov	r0, r8
 800eb92:	4649      	mov	r1, r9
 800eb94:	e9d6 2300 	ldrd	r2, r3, [r6]
 800eb98:	f7f1 fd56 	bl	8000648 <__aeabi_dmul>
 800eb9c:	3501      	adds	r5, #1
 800eb9e:	4680      	mov	r8, r0
 800eba0:	4689      	mov	r9, r1
 800eba2:	107f      	asrs	r7, r7, #1
 800eba4:	3608      	adds	r6, #8
 800eba6:	e7e5      	b.n	800eb74 <_dtoa_r+0x36c>
 800eba8:	f000 809b 	beq.w	800ece2 <_dtoa_r+0x4da>
 800ebac:	9b00      	ldr	r3, [sp, #0]
 800ebae:	4f9d      	ldr	r7, [pc, #628]	; (800ee24 <_dtoa_r+0x61c>)
 800ebb0:	425e      	negs	r6, r3
 800ebb2:	4b9b      	ldr	r3, [pc, #620]	; (800ee20 <_dtoa_r+0x618>)
 800ebb4:	f006 020f 	and.w	r2, r6, #15
 800ebb8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebc0:	ec51 0b19 	vmov	r0, r1, d9
 800ebc4:	f7f1 fd40 	bl	8000648 <__aeabi_dmul>
 800ebc8:	1136      	asrs	r6, r6, #4
 800ebca:	4682      	mov	sl, r0
 800ebcc:	468b      	mov	fp, r1
 800ebce:	2300      	movs	r3, #0
 800ebd0:	2502      	movs	r5, #2
 800ebd2:	2e00      	cmp	r6, #0
 800ebd4:	d17a      	bne.n	800eccc <_dtoa_r+0x4c4>
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1d3      	bne.n	800eb82 <_dtoa_r+0x37a>
 800ebda:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	f000 8082 	beq.w	800ece6 <_dtoa_r+0x4de>
 800ebe2:	4b91      	ldr	r3, [pc, #580]	; (800ee28 <_dtoa_r+0x620>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	4650      	mov	r0, sl
 800ebe8:	4659      	mov	r1, fp
 800ebea:	f7f1 ff9f 	bl	8000b2c <__aeabi_dcmplt>
 800ebee:	2800      	cmp	r0, #0
 800ebf0:	d079      	beq.n	800ece6 <_dtoa_r+0x4de>
 800ebf2:	9b03      	ldr	r3, [sp, #12]
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d076      	beq.n	800ece6 <_dtoa_r+0x4de>
 800ebf8:	9b02      	ldr	r3, [sp, #8]
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	dd36      	ble.n	800ec6c <_dtoa_r+0x464>
 800ebfe:	9b00      	ldr	r3, [sp, #0]
 800ec00:	4650      	mov	r0, sl
 800ec02:	4659      	mov	r1, fp
 800ec04:	1e5f      	subs	r7, r3, #1
 800ec06:	2200      	movs	r2, #0
 800ec08:	4b88      	ldr	r3, [pc, #544]	; (800ee2c <_dtoa_r+0x624>)
 800ec0a:	f7f1 fd1d 	bl	8000648 <__aeabi_dmul>
 800ec0e:	9e02      	ldr	r6, [sp, #8]
 800ec10:	4682      	mov	sl, r0
 800ec12:	468b      	mov	fp, r1
 800ec14:	3501      	adds	r5, #1
 800ec16:	4628      	mov	r0, r5
 800ec18:	f7f1 fcac 	bl	8000574 <__aeabi_i2d>
 800ec1c:	4652      	mov	r2, sl
 800ec1e:	465b      	mov	r3, fp
 800ec20:	f7f1 fd12 	bl	8000648 <__aeabi_dmul>
 800ec24:	4b82      	ldr	r3, [pc, #520]	; (800ee30 <_dtoa_r+0x628>)
 800ec26:	2200      	movs	r2, #0
 800ec28:	f7f1 fb58 	bl	80002dc <__adddf3>
 800ec2c:	46d0      	mov	r8, sl
 800ec2e:	46d9      	mov	r9, fp
 800ec30:	4682      	mov	sl, r0
 800ec32:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ec36:	2e00      	cmp	r6, #0
 800ec38:	d158      	bne.n	800ecec <_dtoa_r+0x4e4>
 800ec3a:	4b7e      	ldr	r3, [pc, #504]	; (800ee34 <_dtoa_r+0x62c>)
 800ec3c:	2200      	movs	r2, #0
 800ec3e:	4640      	mov	r0, r8
 800ec40:	4649      	mov	r1, r9
 800ec42:	f7f1 fb49 	bl	80002d8 <__aeabi_dsub>
 800ec46:	4652      	mov	r2, sl
 800ec48:	465b      	mov	r3, fp
 800ec4a:	4680      	mov	r8, r0
 800ec4c:	4689      	mov	r9, r1
 800ec4e:	f7f1 ff8b 	bl	8000b68 <__aeabi_dcmpgt>
 800ec52:	2800      	cmp	r0, #0
 800ec54:	f040 8295 	bne.w	800f182 <_dtoa_r+0x97a>
 800ec58:	4652      	mov	r2, sl
 800ec5a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ec5e:	4640      	mov	r0, r8
 800ec60:	4649      	mov	r1, r9
 800ec62:	f7f1 ff63 	bl	8000b2c <__aeabi_dcmplt>
 800ec66:	2800      	cmp	r0, #0
 800ec68:	f040 8289 	bne.w	800f17e <_dtoa_r+0x976>
 800ec6c:	ec5b ab19 	vmov	sl, fp, d9
 800ec70:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ec72:	2b00      	cmp	r3, #0
 800ec74:	f2c0 8148 	blt.w	800ef08 <_dtoa_r+0x700>
 800ec78:	9a00      	ldr	r2, [sp, #0]
 800ec7a:	2a0e      	cmp	r2, #14
 800ec7c:	f300 8144 	bgt.w	800ef08 <_dtoa_r+0x700>
 800ec80:	4b67      	ldr	r3, [pc, #412]	; (800ee20 <_dtoa_r+0x618>)
 800ec82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ec86:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ec8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	f280 80d5 	bge.w	800ee3c <_dtoa_r+0x634>
 800ec92:	9b03      	ldr	r3, [sp, #12]
 800ec94:	2b00      	cmp	r3, #0
 800ec96:	f300 80d1 	bgt.w	800ee3c <_dtoa_r+0x634>
 800ec9a:	f040 826f 	bne.w	800f17c <_dtoa_r+0x974>
 800ec9e:	4b65      	ldr	r3, [pc, #404]	; (800ee34 <_dtoa_r+0x62c>)
 800eca0:	2200      	movs	r2, #0
 800eca2:	4640      	mov	r0, r8
 800eca4:	4649      	mov	r1, r9
 800eca6:	f7f1 fccf 	bl	8000648 <__aeabi_dmul>
 800ecaa:	4652      	mov	r2, sl
 800ecac:	465b      	mov	r3, fp
 800ecae:	f7f1 ff51 	bl	8000b54 <__aeabi_dcmpge>
 800ecb2:	9e03      	ldr	r6, [sp, #12]
 800ecb4:	4637      	mov	r7, r6
 800ecb6:	2800      	cmp	r0, #0
 800ecb8:	f040 8245 	bne.w	800f146 <_dtoa_r+0x93e>
 800ecbc:	9d01      	ldr	r5, [sp, #4]
 800ecbe:	2331      	movs	r3, #49	; 0x31
 800ecc0:	f805 3b01 	strb.w	r3, [r5], #1
 800ecc4:	9b00      	ldr	r3, [sp, #0]
 800ecc6:	3301      	adds	r3, #1
 800ecc8:	9300      	str	r3, [sp, #0]
 800ecca:	e240      	b.n	800f14e <_dtoa_r+0x946>
 800eccc:	07f2      	lsls	r2, r6, #31
 800ecce:	d505      	bpl.n	800ecdc <_dtoa_r+0x4d4>
 800ecd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecd4:	f7f1 fcb8 	bl	8000648 <__aeabi_dmul>
 800ecd8:	3501      	adds	r5, #1
 800ecda:	2301      	movs	r3, #1
 800ecdc:	1076      	asrs	r6, r6, #1
 800ecde:	3708      	adds	r7, #8
 800ece0:	e777      	b.n	800ebd2 <_dtoa_r+0x3ca>
 800ece2:	2502      	movs	r5, #2
 800ece4:	e779      	b.n	800ebda <_dtoa_r+0x3d2>
 800ece6:	9f00      	ldr	r7, [sp, #0]
 800ece8:	9e03      	ldr	r6, [sp, #12]
 800ecea:	e794      	b.n	800ec16 <_dtoa_r+0x40e>
 800ecec:	9901      	ldr	r1, [sp, #4]
 800ecee:	4b4c      	ldr	r3, [pc, #304]	; (800ee20 <_dtoa_r+0x618>)
 800ecf0:	4431      	add	r1, r6
 800ecf2:	910d      	str	r1, [sp, #52]	; 0x34
 800ecf4:	9908      	ldr	r1, [sp, #32]
 800ecf6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ecfa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ecfe:	2900      	cmp	r1, #0
 800ed00:	d043      	beq.n	800ed8a <_dtoa_r+0x582>
 800ed02:	494d      	ldr	r1, [pc, #308]	; (800ee38 <_dtoa_r+0x630>)
 800ed04:	2000      	movs	r0, #0
 800ed06:	f7f1 fdc9 	bl	800089c <__aeabi_ddiv>
 800ed0a:	4652      	mov	r2, sl
 800ed0c:	465b      	mov	r3, fp
 800ed0e:	f7f1 fae3 	bl	80002d8 <__aeabi_dsub>
 800ed12:	9d01      	ldr	r5, [sp, #4]
 800ed14:	4682      	mov	sl, r0
 800ed16:	468b      	mov	fp, r1
 800ed18:	4649      	mov	r1, r9
 800ed1a:	4640      	mov	r0, r8
 800ed1c:	f7f1 ff44 	bl	8000ba8 <__aeabi_d2iz>
 800ed20:	4606      	mov	r6, r0
 800ed22:	f7f1 fc27 	bl	8000574 <__aeabi_i2d>
 800ed26:	4602      	mov	r2, r0
 800ed28:	460b      	mov	r3, r1
 800ed2a:	4640      	mov	r0, r8
 800ed2c:	4649      	mov	r1, r9
 800ed2e:	f7f1 fad3 	bl	80002d8 <__aeabi_dsub>
 800ed32:	3630      	adds	r6, #48	; 0x30
 800ed34:	f805 6b01 	strb.w	r6, [r5], #1
 800ed38:	4652      	mov	r2, sl
 800ed3a:	465b      	mov	r3, fp
 800ed3c:	4680      	mov	r8, r0
 800ed3e:	4689      	mov	r9, r1
 800ed40:	f7f1 fef4 	bl	8000b2c <__aeabi_dcmplt>
 800ed44:	2800      	cmp	r0, #0
 800ed46:	d163      	bne.n	800ee10 <_dtoa_r+0x608>
 800ed48:	4642      	mov	r2, r8
 800ed4a:	464b      	mov	r3, r9
 800ed4c:	4936      	ldr	r1, [pc, #216]	; (800ee28 <_dtoa_r+0x620>)
 800ed4e:	2000      	movs	r0, #0
 800ed50:	f7f1 fac2 	bl	80002d8 <__aeabi_dsub>
 800ed54:	4652      	mov	r2, sl
 800ed56:	465b      	mov	r3, fp
 800ed58:	f7f1 fee8 	bl	8000b2c <__aeabi_dcmplt>
 800ed5c:	2800      	cmp	r0, #0
 800ed5e:	f040 80b5 	bne.w	800eecc <_dtoa_r+0x6c4>
 800ed62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed64:	429d      	cmp	r5, r3
 800ed66:	d081      	beq.n	800ec6c <_dtoa_r+0x464>
 800ed68:	4b30      	ldr	r3, [pc, #192]	; (800ee2c <_dtoa_r+0x624>)
 800ed6a:	2200      	movs	r2, #0
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	4659      	mov	r1, fp
 800ed70:	f7f1 fc6a 	bl	8000648 <__aeabi_dmul>
 800ed74:	4b2d      	ldr	r3, [pc, #180]	; (800ee2c <_dtoa_r+0x624>)
 800ed76:	4682      	mov	sl, r0
 800ed78:	468b      	mov	fp, r1
 800ed7a:	4640      	mov	r0, r8
 800ed7c:	4649      	mov	r1, r9
 800ed7e:	2200      	movs	r2, #0
 800ed80:	f7f1 fc62 	bl	8000648 <__aeabi_dmul>
 800ed84:	4680      	mov	r8, r0
 800ed86:	4689      	mov	r9, r1
 800ed88:	e7c6      	b.n	800ed18 <_dtoa_r+0x510>
 800ed8a:	4650      	mov	r0, sl
 800ed8c:	4659      	mov	r1, fp
 800ed8e:	f7f1 fc5b 	bl	8000648 <__aeabi_dmul>
 800ed92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ed94:	9d01      	ldr	r5, [sp, #4]
 800ed96:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed98:	4682      	mov	sl, r0
 800ed9a:	468b      	mov	fp, r1
 800ed9c:	4649      	mov	r1, r9
 800ed9e:	4640      	mov	r0, r8
 800eda0:	f7f1 ff02 	bl	8000ba8 <__aeabi_d2iz>
 800eda4:	4606      	mov	r6, r0
 800eda6:	f7f1 fbe5 	bl	8000574 <__aeabi_i2d>
 800edaa:	3630      	adds	r6, #48	; 0x30
 800edac:	4602      	mov	r2, r0
 800edae:	460b      	mov	r3, r1
 800edb0:	4640      	mov	r0, r8
 800edb2:	4649      	mov	r1, r9
 800edb4:	f7f1 fa90 	bl	80002d8 <__aeabi_dsub>
 800edb8:	f805 6b01 	strb.w	r6, [r5], #1
 800edbc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800edbe:	429d      	cmp	r5, r3
 800edc0:	4680      	mov	r8, r0
 800edc2:	4689      	mov	r9, r1
 800edc4:	f04f 0200 	mov.w	r2, #0
 800edc8:	d124      	bne.n	800ee14 <_dtoa_r+0x60c>
 800edca:	4b1b      	ldr	r3, [pc, #108]	; (800ee38 <_dtoa_r+0x630>)
 800edcc:	4650      	mov	r0, sl
 800edce:	4659      	mov	r1, fp
 800edd0:	f7f1 fa84 	bl	80002dc <__adddf3>
 800edd4:	4602      	mov	r2, r0
 800edd6:	460b      	mov	r3, r1
 800edd8:	4640      	mov	r0, r8
 800edda:	4649      	mov	r1, r9
 800eddc:	f7f1 fec4 	bl	8000b68 <__aeabi_dcmpgt>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	d173      	bne.n	800eecc <_dtoa_r+0x6c4>
 800ede4:	4652      	mov	r2, sl
 800ede6:	465b      	mov	r3, fp
 800ede8:	4913      	ldr	r1, [pc, #76]	; (800ee38 <_dtoa_r+0x630>)
 800edea:	2000      	movs	r0, #0
 800edec:	f7f1 fa74 	bl	80002d8 <__aeabi_dsub>
 800edf0:	4602      	mov	r2, r0
 800edf2:	460b      	mov	r3, r1
 800edf4:	4640      	mov	r0, r8
 800edf6:	4649      	mov	r1, r9
 800edf8:	f7f1 fe98 	bl	8000b2c <__aeabi_dcmplt>
 800edfc:	2800      	cmp	r0, #0
 800edfe:	f43f af35 	beq.w	800ec6c <_dtoa_r+0x464>
 800ee02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ee04:	1e6b      	subs	r3, r5, #1
 800ee06:	930f      	str	r3, [sp, #60]	; 0x3c
 800ee08:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ee0c:	2b30      	cmp	r3, #48	; 0x30
 800ee0e:	d0f8      	beq.n	800ee02 <_dtoa_r+0x5fa>
 800ee10:	9700      	str	r7, [sp, #0]
 800ee12:	e049      	b.n	800eea8 <_dtoa_r+0x6a0>
 800ee14:	4b05      	ldr	r3, [pc, #20]	; (800ee2c <_dtoa_r+0x624>)
 800ee16:	f7f1 fc17 	bl	8000648 <__aeabi_dmul>
 800ee1a:	4680      	mov	r8, r0
 800ee1c:	4689      	mov	r9, r1
 800ee1e:	e7bd      	b.n	800ed9c <_dtoa_r+0x594>
 800ee20:	08012a88 	.word	0x08012a88
 800ee24:	08012a60 	.word	0x08012a60
 800ee28:	3ff00000 	.word	0x3ff00000
 800ee2c:	40240000 	.word	0x40240000
 800ee30:	401c0000 	.word	0x401c0000
 800ee34:	40140000 	.word	0x40140000
 800ee38:	3fe00000 	.word	0x3fe00000
 800ee3c:	9d01      	ldr	r5, [sp, #4]
 800ee3e:	4656      	mov	r6, sl
 800ee40:	465f      	mov	r7, fp
 800ee42:	4642      	mov	r2, r8
 800ee44:	464b      	mov	r3, r9
 800ee46:	4630      	mov	r0, r6
 800ee48:	4639      	mov	r1, r7
 800ee4a:	f7f1 fd27 	bl	800089c <__aeabi_ddiv>
 800ee4e:	f7f1 feab 	bl	8000ba8 <__aeabi_d2iz>
 800ee52:	4682      	mov	sl, r0
 800ee54:	f7f1 fb8e 	bl	8000574 <__aeabi_i2d>
 800ee58:	4642      	mov	r2, r8
 800ee5a:	464b      	mov	r3, r9
 800ee5c:	f7f1 fbf4 	bl	8000648 <__aeabi_dmul>
 800ee60:	4602      	mov	r2, r0
 800ee62:	460b      	mov	r3, r1
 800ee64:	4630      	mov	r0, r6
 800ee66:	4639      	mov	r1, r7
 800ee68:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ee6c:	f7f1 fa34 	bl	80002d8 <__aeabi_dsub>
 800ee70:	f805 6b01 	strb.w	r6, [r5], #1
 800ee74:	9e01      	ldr	r6, [sp, #4]
 800ee76:	9f03      	ldr	r7, [sp, #12]
 800ee78:	1bae      	subs	r6, r5, r6
 800ee7a:	42b7      	cmp	r7, r6
 800ee7c:	4602      	mov	r2, r0
 800ee7e:	460b      	mov	r3, r1
 800ee80:	d135      	bne.n	800eeee <_dtoa_r+0x6e6>
 800ee82:	f7f1 fa2b 	bl	80002dc <__adddf3>
 800ee86:	4642      	mov	r2, r8
 800ee88:	464b      	mov	r3, r9
 800ee8a:	4606      	mov	r6, r0
 800ee8c:	460f      	mov	r7, r1
 800ee8e:	f7f1 fe6b 	bl	8000b68 <__aeabi_dcmpgt>
 800ee92:	b9d0      	cbnz	r0, 800eeca <_dtoa_r+0x6c2>
 800ee94:	4642      	mov	r2, r8
 800ee96:	464b      	mov	r3, r9
 800ee98:	4630      	mov	r0, r6
 800ee9a:	4639      	mov	r1, r7
 800ee9c:	f7f1 fe3c 	bl	8000b18 <__aeabi_dcmpeq>
 800eea0:	b110      	cbz	r0, 800eea8 <_dtoa_r+0x6a0>
 800eea2:	f01a 0f01 	tst.w	sl, #1
 800eea6:	d110      	bne.n	800eeca <_dtoa_r+0x6c2>
 800eea8:	4620      	mov	r0, r4
 800eeaa:	ee18 1a10 	vmov	r1, s16
 800eeae:	f001 f885 	bl	800ffbc <_Bfree>
 800eeb2:	2300      	movs	r3, #0
 800eeb4:	9800      	ldr	r0, [sp, #0]
 800eeb6:	702b      	strb	r3, [r5, #0]
 800eeb8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eeba:	3001      	adds	r0, #1
 800eebc:	6018      	str	r0, [r3, #0]
 800eebe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	f43f acf1 	beq.w	800e8a8 <_dtoa_r+0xa0>
 800eec6:	601d      	str	r5, [r3, #0]
 800eec8:	e4ee      	b.n	800e8a8 <_dtoa_r+0xa0>
 800eeca:	9f00      	ldr	r7, [sp, #0]
 800eecc:	462b      	mov	r3, r5
 800eece:	461d      	mov	r5, r3
 800eed0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800eed4:	2a39      	cmp	r2, #57	; 0x39
 800eed6:	d106      	bne.n	800eee6 <_dtoa_r+0x6de>
 800eed8:	9a01      	ldr	r2, [sp, #4]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d1f7      	bne.n	800eece <_dtoa_r+0x6c6>
 800eede:	9901      	ldr	r1, [sp, #4]
 800eee0:	2230      	movs	r2, #48	; 0x30
 800eee2:	3701      	adds	r7, #1
 800eee4:	700a      	strb	r2, [r1, #0]
 800eee6:	781a      	ldrb	r2, [r3, #0]
 800eee8:	3201      	adds	r2, #1
 800eeea:	701a      	strb	r2, [r3, #0]
 800eeec:	e790      	b.n	800ee10 <_dtoa_r+0x608>
 800eeee:	4ba6      	ldr	r3, [pc, #664]	; (800f188 <_dtoa_r+0x980>)
 800eef0:	2200      	movs	r2, #0
 800eef2:	f7f1 fba9 	bl	8000648 <__aeabi_dmul>
 800eef6:	2200      	movs	r2, #0
 800eef8:	2300      	movs	r3, #0
 800eefa:	4606      	mov	r6, r0
 800eefc:	460f      	mov	r7, r1
 800eefe:	f7f1 fe0b 	bl	8000b18 <__aeabi_dcmpeq>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d09d      	beq.n	800ee42 <_dtoa_r+0x63a>
 800ef06:	e7cf      	b.n	800eea8 <_dtoa_r+0x6a0>
 800ef08:	9a08      	ldr	r2, [sp, #32]
 800ef0a:	2a00      	cmp	r2, #0
 800ef0c:	f000 80d7 	beq.w	800f0be <_dtoa_r+0x8b6>
 800ef10:	9a06      	ldr	r2, [sp, #24]
 800ef12:	2a01      	cmp	r2, #1
 800ef14:	f300 80ba 	bgt.w	800f08c <_dtoa_r+0x884>
 800ef18:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ef1a:	2a00      	cmp	r2, #0
 800ef1c:	f000 80b2 	beq.w	800f084 <_dtoa_r+0x87c>
 800ef20:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ef24:	9e07      	ldr	r6, [sp, #28]
 800ef26:	9d04      	ldr	r5, [sp, #16]
 800ef28:	9a04      	ldr	r2, [sp, #16]
 800ef2a:	441a      	add	r2, r3
 800ef2c:	9204      	str	r2, [sp, #16]
 800ef2e:	9a05      	ldr	r2, [sp, #20]
 800ef30:	2101      	movs	r1, #1
 800ef32:	441a      	add	r2, r3
 800ef34:	4620      	mov	r0, r4
 800ef36:	9205      	str	r2, [sp, #20]
 800ef38:	f001 f942 	bl	80101c0 <__i2b>
 800ef3c:	4607      	mov	r7, r0
 800ef3e:	2d00      	cmp	r5, #0
 800ef40:	dd0c      	ble.n	800ef5c <_dtoa_r+0x754>
 800ef42:	9b05      	ldr	r3, [sp, #20]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	dd09      	ble.n	800ef5c <_dtoa_r+0x754>
 800ef48:	42ab      	cmp	r3, r5
 800ef4a:	9a04      	ldr	r2, [sp, #16]
 800ef4c:	bfa8      	it	ge
 800ef4e:	462b      	movge	r3, r5
 800ef50:	1ad2      	subs	r2, r2, r3
 800ef52:	9204      	str	r2, [sp, #16]
 800ef54:	9a05      	ldr	r2, [sp, #20]
 800ef56:	1aed      	subs	r5, r5, r3
 800ef58:	1ad3      	subs	r3, r2, r3
 800ef5a:	9305      	str	r3, [sp, #20]
 800ef5c:	9b07      	ldr	r3, [sp, #28]
 800ef5e:	b31b      	cbz	r3, 800efa8 <_dtoa_r+0x7a0>
 800ef60:	9b08      	ldr	r3, [sp, #32]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	f000 80af 	beq.w	800f0c6 <_dtoa_r+0x8be>
 800ef68:	2e00      	cmp	r6, #0
 800ef6a:	dd13      	ble.n	800ef94 <_dtoa_r+0x78c>
 800ef6c:	4639      	mov	r1, r7
 800ef6e:	4632      	mov	r2, r6
 800ef70:	4620      	mov	r0, r4
 800ef72:	f001 f9e5 	bl	8010340 <__pow5mult>
 800ef76:	ee18 2a10 	vmov	r2, s16
 800ef7a:	4601      	mov	r1, r0
 800ef7c:	4607      	mov	r7, r0
 800ef7e:	4620      	mov	r0, r4
 800ef80:	f001 f934 	bl	80101ec <__multiply>
 800ef84:	ee18 1a10 	vmov	r1, s16
 800ef88:	4680      	mov	r8, r0
 800ef8a:	4620      	mov	r0, r4
 800ef8c:	f001 f816 	bl	800ffbc <_Bfree>
 800ef90:	ee08 8a10 	vmov	s16, r8
 800ef94:	9b07      	ldr	r3, [sp, #28]
 800ef96:	1b9a      	subs	r2, r3, r6
 800ef98:	d006      	beq.n	800efa8 <_dtoa_r+0x7a0>
 800ef9a:	ee18 1a10 	vmov	r1, s16
 800ef9e:	4620      	mov	r0, r4
 800efa0:	f001 f9ce 	bl	8010340 <__pow5mult>
 800efa4:	ee08 0a10 	vmov	s16, r0
 800efa8:	2101      	movs	r1, #1
 800efaa:	4620      	mov	r0, r4
 800efac:	f001 f908 	bl	80101c0 <__i2b>
 800efb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800efb2:	2b00      	cmp	r3, #0
 800efb4:	4606      	mov	r6, r0
 800efb6:	f340 8088 	ble.w	800f0ca <_dtoa_r+0x8c2>
 800efba:	461a      	mov	r2, r3
 800efbc:	4601      	mov	r1, r0
 800efbe:	4620      	mov	r0, r4
 800efc0:	f001 f9be 	bl	8010340 <__pow5mult>
 800efc4:	9b06      	ldr	r3, [sp, #24]
 800efc6:	2b01      	cmp	r3, #1
 800efc8:	4606      	mov	r6, r0
 800efca:	f340 8081 	ble.w	800f0d0 <_dtoa_r+0x8c8>
 800efce:	f04f 0800 	mov.w	r8, #0
 800efd2:	6933      	ldr	r3, [r6, #16]
 800efd4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800efd8:	6918      	ldr	r0, [r3, #16]
 800efda:	f001 f8a1 	bl	8010120 <__hi0bits>
 800efde:	f1c0 0020 	rsb	r0, r0, #32
 800efe2:	9b05      	ldr	r3, [sp, #20]
 800efe4:	4418      	add	r0, r3
 800efe6:	f010 001f 	ands.w	r0, r0, #31
 800efea:	f000 8092 	beq.w	800f112 <_dtoa_r+0x90a>
 800efee:	f1c0 0320 	rsb	r3, r0, #32
 800eff2:	2b04      	cmp	r3, #4
 800eff4:	f340 808a 	ble.w	800f10c <_dtoa_r+0x904>
 800eff8:	f1c0 001c 	rsb	r0, r0, #28
 800effc:	9b04      	ldr	r3, [sp, #16]
 800effe:	4403      	add	r3, r0
 800f000:	9304      	str	r3, [sp, #16]
 800f002:	9b05      	ldr	r3, [sp, #20]
 800f004:	4403      	add	r3, r0
 800f006:	4405      	add	r5, r0
 800f008:	9305      	str	r3, [sp, #20]
 800f00a:	9b04      	ldr	r3, [sp, #16]
 800f00c:	2b00      	cmp	r3, #0
 800f00e:	dd07      	ble.n	800f020 <_dtoa_r+0x818>
 800f010:	ee18 1a10 	vmov	r1, s16
 800f014:	461a      	mov	r2, r3
 800f016:	4620      	mov	r0, r4
 800f018:	f001 f9ec 	bl	80103f4 <__lshift>
 800f01c:	ee08 0a10 	vmov	s16, r0
 800f020:	9b05      	ldr	r3, [sp, #20]
 800f022:	2b00      	cmp	r3, #0
 800f024:	dd05      	ble.n	800f032 <_dtoa_r+0x82a>
 800f026:	4631      	mov	r1, r6
 800f028:	461a      	mov	r2, r3
 800f02a:	4620      	mov	r0, r4
 800f02c:	f001 f9e2 	bl	80103f4 <__lshift>
 800f030:	4606      	mov	r6, r0
 800f032:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f034:	2b00      	cmp	r3, #0
 800f036:	d06e      	beq.n	800f116 <_dtoa_r+0x90e>
 800f038:	ee18 0a10 	vmov	r0, s16
 800f03c:	4631      	mov	r1, r6
 800f03e:	f001 fa49 	bl	80104d4 <__mcmp>
 800f042:	2800      	cmp	r0, #0
 800f044:	da67      	bge.n	800f116 <_dtoa_r+0x90e>
 800f046:	9b00      	ldr	r3, [sp, #0]
 800f048:	3b01      	subs	r3, #1
 800f04a:	ee18 1a10 	vmov	r1, s16
 800f04e:	9300      	str	r3, [sp, #0]
 800f050:	220a      	movs	r2, #10
 800f052:	2300      	movs	r3, #0
 800f054:	4620      	mov	r0, r4
 800f056:	f000 ffd3 	bl	8010000 <__multadd>
 800f05a:	9b08      	ldr	r3, [sp, #32]
 800f05c:	ee08 0a10 	vmov	s16, r0
 800f060:	2b00      	cmp	r3, #0
 800f062:	f000 81b1 	beq.w	800f3c8 <_dtoa_r+0xbc0>
 800f066:	2300      	movs	r3, #0
 800f068:	4639      	mov	r1, r7
 800f06a:	220a      	movs	r2, #10
 800f06c:	4620      	mov	r0, r4
 800f06e:	f000 ffc7 	bl	8010000 <__multadd>
 800f072:	9b02      	ldr	r3, [sp, #8]
 800f074:	2b00      	cmp	r3, #0
 800f076:	4607      	mov	r7, r0
 800f078:	f300 808e 	bgt.w	800f198 <_dtoa_r+0x990>
 800f07c:	9b06      	ldr	r3, [sp, #24]
 800f07e:	2b02      	cmp	r3, #2
 800f080:	dc51      	bgt.n	800f126 <_dtoa_r+0x91e>
 800f082:	e089      	b.n	800f198 <_dtoa_r+0x990>
 800f084:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800f086:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f08a:	e74b      	b.n	800ef24 <_dtoa_r+0x71c>
 800f08c:	9b03      	ldr	r3, [sp, #12]
 800f08e:	1e5e      	subs	r6, r3, #1
 800f090:	9b07      	ldr	r3, [sp, #28]
 800f092:	42b3      	cmp	r3, r6
 800f094:	bfbf      	itttt	lt
 800f096:	9b07      	ldrlt	r3, [sp, #28]
 800f098:	9607      	strlt	r6, [sp, #28]
 800f09a:	1af2      	sublt	r2, r6, r3
 800f09c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800f09e:	bfb6      	itet	lt
 800f0a0:	189b      	addlt	r3, r3, r2
 800f0a2:	1b9e      	subge	r6, r3, r6
 800f0a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800f0a6:	9b03      	ldr	r3, [sp, #12]
 800f0a8:	bfb8      	it	lt
 800f0aa:	2600      	movlt	r6, #0
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	bfb7      	itett	lt
 800f0b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800f0b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800f0b8:	1a9d      	sublt	r5, r3, r2
 800f0ba:	2300      	movlt	r3, #0
 800f0bc:	e734      	b.n	800ef28 <_dtoa_r+0x720>
 800f0be:	9e07      	ldr	r6, [sp, #28]
 800f0c0:	9d04      	ldr	r5, [sp, #16]
 800f0c2:	9f08      	ldr	r7, [sp, #32]
 800f0c4:	e73b      	b.n	800ef3e <_dtoa_r+0x736>
 800f0c6:	9a07      	ldr	r2, [sp, #28]
 800f0c8:	e767      	b.n	800ef9a <_dtoa_r+0x792>
 800f0ca:	9b06      	ldr	r3, [sp, #24]
 800f0cc:	2b01      	cmp	r3, #1
 800f0ce:	dc18      	bgt.n	800f102 <_dtoa_r+0x8fa>
 800f0d0:	f1ba 0f00 	cmp.w	sl, #0
 800f0d4:	d115      	bne.n	800f102 <_dtoa_r+0x8fa>
 800f0d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800f0da:	b993      	cbnz	r3, 800f102 <_dtoa_r+0x8fa>
 800f0dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f0e0:	0d1b      	lsrs	r3, r3, #20
 800f0e2:	051b      	lsls	r3, r3, #20
 800f0e4:	b183      	cbz	r3, 800f108 <_dtoa_r+0x900>
 800f0e6:	9b04      	ldr	r3, [sp, #16]
 800f0e8:	3301      	adds	r3, #1
 800f0ea:	9304      	str	r3, [sp, #16]
 800f0ec:	9b05      	ldr	r3, [sp, #20]
 800f0ee:	3301      	adds	r3, #1
 800f0f0:	9305      	str	r3, [sp, #20]
 800f0f2:	f04f 0801 	mov.w	r8, #1
 800f0f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	f47f af6a 	bne.w	800efd2 <_dtoa_r+0x7ca>
 800f0fe:	2001      	movs	r0, #1
 800f100:	e76f      	b.n	800efe2 <_dtoa_r+0x7da>
 800f102:	f04f 0800 	mov.w	r8, #0
 800f106:	e7f6      	b.n	800f0f6 <_dtoa_r+0x8ee>
 800f108:	4698      	mov	r8, r3
 800f10a:	e7f4      	b.n	800f0f6 <_dtoa_r+0x8ee>
 800f10c:	f43f af7d 	beq.w	800f00a <_dtoa_r+0x802>
 800f110:	4618      	mov	r0, r3
 800f112:	301c      	adds	r0, #28
 800f114:	e772      	b.n	800effc <_dtoa_r+0x7f4>
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	dc37      	bgt.n	800f18c <_dtoa_r+0x984>
 800f11c:	9b06      	ldr	r3, [sp, #24]
 800f11e:	2b02      	cmp	r3, #2
 800f120:	dd34      	ble.n	800f18c <_dtoa_r+0x984>
 800f122:	9b03      	ldr	r3, [sp, #12]
 800f124:	9302      	str	r3, [sp, #8]
 800f126:	9b02      	ldr	r3, [sp, #8]
 800f128:	b96b      	cbnz	r3, 800f146 <_dtoa_r+0x93e>
 800f12a:	4631      	mov	r1, r6
 800f12c:	2205      	movs	r2, #5
 800f12e:	4620      	mov	r0, r4
 800f130:	f000 ff66 	bl	8010000 <__multadd>
 800f134:	4601      	mov	r1, r0
 800f136:	4606      	mov	r6, r0
 800f138:	ee18 0a10 	vmov	r0, s16
 800f13c:	f001 f9ca 	bl	80104d4 <__mcmp>
 800f140:	2800      	cmp	r0, #0
 800f142:	f73f adbb 	bgt.w	800ecbc <_dtoa_r+0x4b4>
 800f146:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f148:	9d01      	ldr	r5, [sp, #4]
 800f14a:	43db      	mvns	r3, r3
 800f14c:	9300      	str	r3, [sp, #0]
 800f14e:	f04f 0800 	mov.w	r8, #0
 800f152:	4631      	mov	r1, r6
 800f154:	4620      	mov	r0, r4
 800f156:	f000 ff31 	bl	800ffbc <_Bfree>
 800f15a:	2f00      	cmp	r7, #0
 800f15c:	f43f aea4 	beq.w	800eea8 <_dtoa_r+0x6a0>
 800f160:	f1b8 0f00 	cmp.w	r8, #0
 800f164:	d005      	beq.n	800f172 <_dtoa_r+0x96a>
 800f166:	45b8      	cmp	r8, r7
 800f168:	d003      	beq.n	800f172 <_dtoa_r+0x96a>
 800f16a:	4641      	mov	r1, r8
 800f16c:	4620      	mov	r0, r4
 800f16e:	f000 ff25 	bl	800ffbc <_Bfree>
 800f172:	4639      	mov	r1, r7
 800f174:	4620      	mov	r0, r4
 800f176:	f000 ff21 	bl	800ffbc <_Bfree>
 800f17a:	e695      	b.n	800eea8 <_dtoa_r+0x6a0>
 800f17c:	2600      	movs	r6, #0
 800f17e:	4637      	mov	r7, r6
 800f180:	e7e1      	b.n	800f146 <_dtoa_r+0x93e>
 800f182:	9700      	str	r7, [sp, #0]
 800f184:	4637      	mov	r7, r6
 800f186:	e599      	b.n	800ecbc <_dtoa_r+0x4b4>
 800f188:	40240000 	.word	0x40240000
 800f18c:	9b08      	ldr	r3, [sp, #32]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f000 80ca 	beq.w	800f328 <_dtoa_r+0xb20>
 800f194:	9b03      	ldr	r3, [sp, #12]
 800f196:	9302      	str	r3, [sp, #8]
 800f198:	2d00      	cmp	r5, #0
 800f19a:	dd05      	ble.n	800f1a8 <_dtoa_r+0x9a0>
 800f19c:	4639      	mov	r1, r7
 800f19e:	462a      	mov	r2, r5
 800f1a0:	4620      	mov	r0, r4
 800f1a2:	f001 f927 	bl	80103f4 <__lshift>
 800f1a6:	4607      	mov	r7, r0
 800f1a8:	f1b8 0f00 	cmp.w	r8, #0
 800f1ac:	d05b      	beq.n	800f266 <_dtoa_r+0xa5e>
 800f1ae:	6879      	ldr	r1, [r7, #4]
 800f1b0:	4620      	mov	r0, r4
 800f1b2:	f000 fec3 	bl	800ff3c <_Balloc>
 800f1b6:	4605      	mov	r5, r0
 800f1b8:	b928      	cbnz	r0, 800f1c6 <_dtoa_r+0x9be>
 800f1ba:	4b87      	ldr	r3, [pc, #540]	; (800f3d8 <_dtoa_r+0xbd0>)
 800f1bc:	4602      	mov	r2, r0
 800f1be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800f1c2:	f7ff bb3b 	b.w	800e83c <_dtoa_r+0x34>
 800f1c6:	693a      	ldr	r2, [r7, #16]
 800f1c8:	3202      	adds	r2, #2
 800f1ca:	0092      	lsls	r2, r2, #2
 800f1cc:	f107 010c 	add.w	r1, r7, #12
 800f1d0:	300c      	adds	r0, #12
 800f1d2:	f7fd fde7 	bl	800cda4 <memcpy>
 800f1d6:	2201      	movs	r2, #1
 800f1d8:	4629      	mov	r1, r5
 800f1da:	4620      	mov	r0, r4
 800f1dc:	f001 f90a 	bl	80103f4 <__lshift>
 800f1e0:	9b01      	ldr	r3, [sp, #4]
 800f1e2:	f103 0901 	add.w	r9, r3, #1
 800f1e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800f1ea:	4413      	add	r3, r2
 800f1ec:	9305      	str	r3, [sp, #20]
 800f1ee:	f00a 0301 	and.w	r3, sl, #1
 800f1f2:	46b8      	mov	r8, r7
 800f1f4:	9304      	str	r3, [sp, #16]
 800f1f6:	4607      	mov	r7, r0
 800f1f8:	4631      	mov	r1, r6
 800f1fa:	ee18 0a10 	vmov	r0, s16
 800f1fe:	f7ff fa75 	bl	800e6ec <quorem>
 800f202:	4641      	mov	r1, r8
 800f204:	9002      	str	r0, [sp, #8]
 800f206:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f20a:	ee18 0a10 	vmov	r0, s16
 800f20e:	f001 f961 	bl	80104d4 <__mcmp>
 800f212:	463a      	mov	r2, r7
 800f214:	9003      	str	r0, [sp, #12]
 800f216:	4631      	mov	r1, r6
 800f218:	4620      	mov	r0, r4
 800f21a:	f001 f977 	bl	801050c <__mdiff>
 800f21e:	68c2      	ldr	r2, [r0, #12]
 800f220:	f109 3bff 	add.w	fp, r9, #4294967295
 800f224:	4605      	mov	r5, r0
 800f226:	bb02      	cbnz	r2, 800f26a <_dtoa_r+0xa62>
 800f228:	4601      	mov	r1, r0
 800f22a:	ee18 0a10 	vmov	r0, s16
 800f22e:	f001 f951 	bl	80104d4 <__mcmp>
 800f232:	4602      	mov	r2, r0
 800f234:	4629      	mov	r1, r5
 800f236:	4620      	mov	r0, r4
 800f238:	9207      	str	r2, [sp, #28]
 800f23a:	f000 febf 	bl	800ffbc <_Bfree>
 800f23e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f242:	ea43 0102 	orr.w	r1, r3, r2
 800f246:	9b04      	ldr	r3, [sp, #16]
 800f248:	430b      	orrs	r3, r1
 800f24a:	464d      	mov	r5, r9
 800f24c:	d10f      	bne.n	800f26e <_dtoa_r+0xa66>
 800f24e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f252:	d02a      	beq.n	800f2aa <_dtoa_r+0xaa2>
 800f254:	9b03      	ldr	r3, [sp, #12]
 800f256:	2b00      	cmp	r3, #0
 800f258:	dd02      	ble.n	800f260 <_dtoa_r+0xa58>
 800f25a:	9b02      	ldr	r3, [sp, #8]
 800f25c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f260:	f88b a000 	strb.w	sl, [fp]
 800f264:	e775      	b.n	800f152 <_dtoa_r+0x94a>
 800f266:	4638      	mov	r0, r7
 800f268:	e7ba      	b.n	800f1e0 <_dtoa_r+0x9d8>
 800f26a:	2201      	movs	r2, #1
 800f26c:	e7e2      	b.n	800f234 <_dtoa_r+0xa2c>
 800f26e:	9b03      	ldr	r3, [sp, #12]
 800f270:	2b00      	cmp	r3, #0
 800f272:	db04      	blt.n	800f27e <_dtoa_r+0xa76>
 800f274:	9906      	ldr	r1, [sp, #24]
 800f276:	430b      	orrs	r3, r1
 800f278:	9904      	ldr	r1, [sp, #16]
 800f27a:	430b      	orrs	r3, r1
 800f27c:	d122      	bne.n	800f2c4 <_dtoa_r+0xabc>
 800f27e:	2a00      	cmp	r2, #0
 800f280:	ddee      	ble.n	800f260 <_dtoa_r+0xa58>
 800f282:	ee18 1a10 	vmov	r1, s16
 800f286:	2201      	movs	r2, #1
 800f288:	4620      	mov	r0, r4
 800f28a:	f001 f8b3 	bl	80103f4 <__lshift>
 800f28e:	4631      	mov	r1, r6
 800f290:	ee08 0a10 	vmov	s16, r0
 800f294:	f001 f91e 	bl	80104d4 <__mcmp>
 800f298:	2800      	cmp	r0, #0
 800f29a:	dc03      	bgt.n	800f2a4 <_dtoa_r+0xa9c>
 800f29c:	d1e0      	bne.n	800f260 <_dtoa_r+0xa58>
 800f29e:	f01a 0f01 	tst.w	sl, #1
 800f2a2:	d0dd      	beq.n	800f260 <_dtoa_r+0xa58>
 800f2a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2a8:	d1d7      	bne.n	800f25a <_dtoa_r+0xa52>
 800f2aa:	2339      	movs	r3, #57	; 0x39
 800f2ac:	f88b 3000 	strb.w	r3, [fp]
 800f2b0:	462b      	mov	r3, r5
 800f2b2:	461d      	mov	r5, r3
 800f2b4:	3b01      	subs	r3, #1
 800f2b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f2ba:	2a39      	cmp	r2, #57	; 0x39
 800f2bc:	d071      	beq.n	800f3a2 <_dtoa_r+0xb9a>
 800f2be:	3201      	adds	r2, #1
 800f2c0:	701a      	strb	r2, [r3, #0]
 800f2c2:	e746      	b.n	800f152 <_dtoa_r+0x94a>
 800f2c4:	2a00      	cmp	r2, #0
 800f2c6:	dd07      	ble.n	800f2d8 <_dtoa_r+0xad0>
 800f2c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f2cc:	d0ed      	beq.n	800f2aa <_dtoa_r+0xaa2>
 800f2ce:	f10a 0301 	add.w	r3, sl, #1
 800f2d2:	f88b 3000 	strb.w	r3, [fp]
 800f2d6:	e73c      	b.n	800f152 <_dtoa_r+0x94a>
 800f2d8:	9b05      	ldr	r3, [sp, #20]
 800f2da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f2de:	4599      	cmp	r9, r3
 800f2e0:	d047      	beq.n	800f372 <_dtoa_r+0xb6a>
 800f2e2:	ee18 1a10 	vmov	r1, s16
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	220a      	movs	r2, #10
 800f2ea:	4620      	mov	r0, r4
 800f2ec:	f000 fe88 	bl	8010000 <__multadd>
 800f2f0:	45b8      	cmp	r8, r7
 800f2f2:	ee08 0a10 	vmov	s16, r0
 800f2f6:	f04f 0300 	mov.w	r3, #0
 800f2fa:	f04f 020a 	mov.w	r2, #10
 800f2fe:	4641      	mov	r1, r8
 800f300:	4620      	mov	r0, r4
 800f302:	d106      	bne.n	800f312 <_dtoa_r+0xb0a>
 800f304:	f000 fe7c 	bl	8010000 <__multadd>
 800f308:	4680      	mov	r8, r0
 800f30a:	4607      	mov	r7, r0
 800f30c:	f109 0901 	add.w	r9, r9, #1
 800f310:	e772      	b.n	800f1f8 <_dtoa_r+0x9f0>
 800f312:	f000 fe75 	bl	8010000 <__multadd>
 800f316:	4639      	mov	r1, r7
 800f318:	4680      	mov	r8, r0
 800f31a:	2300      	movs	r3, #0
 800f31c:	220a      	movs	r2, #10
 800f31e:	4620      	mov	r0, r4
 800f320:	f000 fe6e 	bl	8010000 <__multadd>
 800f324:	4607      	mov	r7, r0
 800f326:	e7f1      	b.n	800f30c <_dtoa_r+0xb04>
 800f328:	9b03      	ldr	r3, [sp, #12]
 800f32a:	9302      	str	r3, [sp, #8]
 800f32c:	9d01      	ldr	r5, [sp, #4]
 800f32e:	ee18 0a10 	vmov	r0, s16
 800f332:	4631      	mov	r1, r6
 800f334:	f7ff f9da 	bl	800e6ec <quorem>
 800f338:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f33c:	9b01      	ldr	r3, [sp, #4]
 800f33e:	f805 ab01 	strb.w	sl, [r5], #1
 800f342:	1aea      	subs	r2, r5, r3
 800f344:	9b02      	ldr	r3, [sp, #8]
 800f346:	4293      	cmp	r3, r2
 800f348:	dd09      	ble.n	800f35e <_dtoa_r+0xb56>
 800f34a:	ee18 1a10 	vmov	r1, s16
 800f34e:	2300      	movs	r3, #0
 800f350:	220a      	movs	r2, #10
 800f352:	4620      	mov	r0, r4
 800f354:	f000 fe54 	bl	8010000 <__multadd>
 800f358:	ee08 0a10 	vmov	s16, r0
 800f35c:	e7e7      	b.n	800f32e <_dtoa_r+0xb26>
 800f35e:	9b02      	ldr	r3, [sp, #8]
 800f360:	2b00      	cmp	r3, #0
 800f362:	bfc8      	it	gt
 800f364:	461d      	movgt	r5, r3
 800f366:	9b01      	ldr	r3, [sp, #4]
 800f368:	bfd8      	it	le
 800f36a:	2501      	movle	r5, #1
 800f36c:	441d      	add	r5, r3
 800f36e:	f04f 0800 	mov.w	r8, #0
 800f372:	ee18 1a10 	vmov	r1, s16
 800f376:	2201      	movs	r2, #1
 800f378:	4620      	mov	r0, r4
 800f37a:	f001 f83b 	bl	80103f4 <__lshift>
 800f37e:	4631      	mov	r1, r6
 800f380:	ee08 0a10 	vmov	s16, r0
 800f384:	f001 f8a6 	bl	80104d4 <__mcmp>
 800f388:	2800      	cmp	r0, #0
 800f38a:	dc91      	bgt.n	800f2b0 <_dtoa_r+0xaa8>
 800f38c:	d102      	bne.n	800f394 <_dtoa_r+0xb8c>
 800f38e:	f01a 0f01 	tst.w	sl, #1
 800f392:	d18d      	bne.n	800f2b0 <_dtoa_r+0xaa8>
 800f394:	462b      	mov	r3, r5
 800f396:	461d      	mov	r5, r3
 800f398:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f39c:	2a30      	cmp	r2, #48	; 0x30
 800f39e:	d0fa      	beq.n	800f396 <_dtoa_r+0xb8e>
 800f3a0:	e6d7      	b.n	800f152 <_dtoa_r+0x94a>
 800f3a2:	9a01      	ldr	r2, [sp, #4]
 800f3a4:	429a      	cmp	r2, r3
 800f3a6:	d184      	bne.n	800f2b2 <_dtoa_r+0xaaa>
 800f3a8:	9b00      	ldr	r3, [sp, #0]
 800f3aa:	3301      	adds	r3, #1
 800f3ac:	9300      	str	r3, [sp, #0]
 800f3ae:	2331      	movs	r3, #49	; 0x31
 800f3b0:	7013      	strb	r3, [r2, #0]
 800f3b2:	e6ce      	b.n	800f152 <_dtoa_r+0x94a>
 800f3b4:	4b09      	ldr	r3, [pc, #36]	; (800f3dc <_dtoa_r+0xbd4>)
 800f3b6:	f7ff ba95 	b.w	800e8e4 <_dtoa_r+0xdc>
 800f3ba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	f47f aa6e 	bne.w	800e89e <_dtoa_r+0x96>
 800f3c2:	4b07      	ldr	r3, [pc, #28]	; (800f3e0 <_dtoa_r+0xbd8>)
 800f3c4:	f7ff ba8e 	b.w	800e8e4 <_dtoa_r+0xdc>
 800f3c8:	9b02      	ldr	r3, [sp, #8]
 800f3ca:	2b00      	cmp	r3, #0
 800f3cc:	dcae      	bgt.n	800f32c <_dtoa_r+0xb24>
 800f3ce:	9b06      	ldr	r3, [sp, #24]
 800f3d0:	2b02      	cmp	r3, #2
 800f3d2:	f73f aea8 	bgt.w	800f126 <_dtoa_r+0x91e>
 800f3d6:	e7a9      	b.n	800f32c <_dtoa_r+0xb24>
 800f3d8:	08012910 	.word	0x08012910
 800f3dc:	08012718 	.word	0x08012718
 800f3e0:	08012891 	.word	0x08012891

0800f3e4 <__sflush_r>:
 800f3e4:	898a      	ldrh	r2, [r1, #12]
 800f3e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f3ea:	4605      	mov	r5, r0
 800f3ec:	0710      	lsls	r0, r2, #28
 800f3ee:	460c      	mov	r4, r1
 800f3f0:	d458      	bmi.n	800f4a4 <__sflush_r+0xc0>
 800f3f2:	684b      	ldr	r3, [r1, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	dc05      	bgt.n	800f404 <__sflush_r+0x20>
 800f3f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	dc02      	bgt.n	800f404 <__sflush_r+0x20>
 800f3fe:	2000      	movs	r0, #0
 800f400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f404:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f406:	2e00      	cmp	r6, #0
 800f408:	d0f9      	beq.n	800f3fe <__sflush_r+0x1a>
 800f40a:	2300      	movs	r3, #0
 800f40c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f410:	682f      	ldr	r7, [r5, #0]
 800f412:	602b      	str	r3, [r5, #0]
 800f414:	d032      	beq.n	800f47c <__sflush_r+0x98>
 800f416:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f418:	89a3      	ldrh	r3, [r4, #12]
 800f41a:	075a      	lsls	r2, r3, #29
 800f41c:	d505      	bpl.n	800f42a <__sflush_r+0x46>
 800f41e:	6863      	ldr	r3, [r4, #4]
 800f420:	1ac0      	subs	r0, r0, r3
 800f422:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f424:	b10b      	cbz	r3, 800f42a <__sflush_r+0x46>
 800f426:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f428:	1ac0      	subs	r0, r0, r3
 800f42a:	2300      	movs	r3, #0
 800f42c:	4602      	mov	r2, r0
 800f42e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f430:	6a21      	ldr	r1, [r4, #32]
 800f432:	4628      	mov	r0, r5
 800f434:	47b0      	blx	r6
 800f436:	1c43      	adds	r3, r0, #1
 800f438:	89a3      	ldrh	r3, [r4, #12]
 800f43a:	d106      	bne.n	800f44a <__sflush_r+0x66>
 800f43c:	6829      	ldr	r1, [r5, #0]
 800f43e:	291d      	cmp	r1, #29
 800f440:	d82c      	bhi.n	800f49c <__sflush_r+0xb8>
 800f442:	4a2a      	ldr	r2, [pc, #168]	; (800f4ec <__sflush_r+0x108>)
 800f444:	40ca      	lsrs	r2, r1
 800f446:	07d6      	lsls	r6, r2, #31
 800f448:	d528      	bpl.n	800f49c <__sflush_r+0xb8>
 800f44a:	2200      	movs	r2, #0
 800f44c:	6062      	str	r2, [r4, #4]
 800f44e:	04d9      	lsls	r1, r3, #19
 800f450:	6922      	ldr	r2, [r4, #16]
 800f452:	6022      	str	r2, [r4, #0]
 800f454:	d504      	bpl.n	800f460 <__sflush_r+0x7c>
 800f456:	1c42      	adds	r2, r0, #1
 800f458:	d101      	bne.n	800f45e <__sflush_r+0x7a>
 800f45a:	682b      	ldr	r3, [r5, #0]
 800f45c:	b903      	cbnz	r3, 800f460 <__sflush_r+0x7c>
 800f45e:	6560      	str	r0, [r4, #84]	; 0x54
 800f460:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f462:	602f      	str	r7, [r5, #0]
 800f464:	2900      	cmp	r1, #0
 800f466:	d0ca      	beq.n	800f3fe <__sflush_r+0x1a>
 800f468:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f46c:	4299      	cmp	r1, r3
 800f46e:	d002      	beq.n	800f476 <__sflush_r+0x92>
 800f470:	4628      	mov	r0, r5
 800f472:	f001 fa3b 	bl	80108ec <_free_r>
 800f476:	2000      	movs	r0, #0
 800f478:	6360      	str	r0, [r4, #52]	; 0x34
 800f47a:	e7c1      	b.n	800f400 <__sflush_r+0x1c>
 800f47c:	6a21      	ldr	r1, [r4, #32]
 800f47e:	2301      	movs	r3, #1
 800f480:	4628      	mov	r0, r5
 800f482:	47b0      	blx	r6
 800f484:	1c41      	adds	r1, r0, #1
 800f486:	d1c7      	bne.n	800f418 <__sflush_r+0x34>
 800f488:	682b      	ldr	r3, [r5, #0]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	d0c4      	beq.n	800f418 <__sflush_r+0x34>
 800f48e:	2b1d      	cmp	r3, #29
 800f490:	d001      	beq.n	800f496 <__sflush_r+0xb2>
 800f492:	2b16      	cmp	r3, #22
 800f494:	d101      	bne.n	800f49a <__sflush_r+0xb6>
 800f496:	602f      	str	r7, [r5, #0]
 800f498:	e7b1      	b.n	800f3fe <__sflush_r+0x1a>
 800f49a:	89a3      	ldrh	r3, [r4, #12]
 800f49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4a0:	81a3      	strh	r3, [r4, #12]
 800f4a2:	e7ad      	b.n	800f400 <__sflush_r+0x1c>
 800f4a4:	690f      	ldr	r7, [r1, #16]
 800f4a6:	2f00      	cmp	r7, #0
 800f4a8:	d0a9      	beq.n	800f3fe <__sflush_r+0x1a>
 800f4aa:	0793      	lsls	r3, r2, #30
 800f4ac:	680e      	ldr	r6, [r1, #0]
 800f4ae:	bf08      	it	eq
 800f4b0:	694b      	ldreq	r3, [r1, #20]
 800f4b2:	600f      	str	r7, [r1, #0]
 800f4b4:	bf18      	it	ne
 800f4b6:	2300      	movne	r3, #0
 800f4b8:	eba6 0807 	sub.w	r8, r6, r7
 800f4bc:	608b      	str	r3, [r1, #8]
 800f4be:	f1b8 0f00 	cmp.w	r8, #0
 800f4c2:	dd9c      	ble.n	800f3fe <__sflush_r+0x1a>
 800f4c4:	6a21      	ldr	r1, [r4, #32]
 800f4c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f4c8:	4643      	mov	r3, r8
 800f4ca:	463a      	mov	r2, r7
 800f4cc:	4628      	mov	r0, r5
 800f4ce:	47b0      	blx	r6
 800f4d0:	2800      	cmp	r0, #0
 800f4d2:	dc06      	bgt.n	800f4e2 <__sflush_r+0xfe>
 800f4d4:	89a3      	ldrh	r3, [r4, #12]
 800f4d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f4da:	81a3      	strh	r3, [r4, #12]
 800f4dc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e0:	e78e      	b.n	800f400 <__sflush_r+0x1c>
 800f4e2:	4407      	add	r7, r0
 800f4e4:	eba8 0800 	sub.w	r8, r8, r0
 800f4e8:	e7e9      	b.n	800f4be <__sflush_r+0xda>
 800f4ea:	bf00      	nop
 800f4ec:	20400001 	.word	0x20400001

0800f4f0 <_fflush_r>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	690b      	ldr	r3, [r1, #16]
 800f4f4:	4605      	mov	r5, r0
 800f4f6:	460c      	mov	r4, r1
 800f4f8:	b913      	cbnz	r3, 800f500 <_fflush_r+0x10>
 800f4fa:	2500      	movs	r5, #0
 800f4fc:	4628      	mov	r0, r5
 800f4fe:	bd38      	pop	{r3, r4, r5, pc}
 800f500:	b118      	cbz	r0, 800f50a <_fflush_r+0x1a>
 800f502:	6983      	ldr	r3, [r0, #24]
 800f504:	b90b      	cbnz	r3, 800f50a <_fflush_r+0x1a>
 800f506:	f000 f887 	bl	800f618 <__sinit>
 800f50a:	4b14      	ldr	r3, [pc, #80]	; (800f55c <_fflush_r+0x6c>)
 800f50c:	429c      	cmp	r4, r3
 800f50e:	d11b      	bne.n	800f548 <_fflush_r+0x58>
 800f510:	686c      	ldr	r4, [r5, #4]
 800f512:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f516:	2b00      	cmp	r3, #0
 800f518:	d0ef      	beq.n	800f4fa <_fflush_r+0xa>
 800f51a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f51c:	07d0      	lsls	r0, r2, #31
 800f51e:	d404      	bmi.n	800f52a <_fflush_r+0x3a>
 800f520:	0599      	lsls	r1, r3, #22
 800f522:	d402      	bmi.n	800f52a <_fflush_r+0x3a>
 800f524:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f526:	f000 fc88 	bl	800fe3a <__retarget_lock_acquire_recursive>
 800f52a:	4628      	mov	r0, r5
 800f52c:	4621      	mov	r1, r4
 800f52e:	f7ff ff59 	bl	800f3e4 <__sflush_r>
 800f532:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f534:	07da      	lsls	r2, r3, #31
 800f536:	4605      	mov	r5, r0
 800f538:	d4e0      	bmi.n	800f4fc <_fflush_r+0xc>
 800f53a:	89a3      	ldrh	r3, [r4, #12]
 800f53c:	059b      	lsls	r3, r3, #22
 800f53e:	d4dd      	bmi.n	800f4fc <_fflush_r+0xc>
 800f540:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f542:	f000 fc7b 	bl	800fe3c <__retarget_lock_release_recursive>
 800f546:	e7d9      	b.n	800f4fc <_fflush_r+0xc>
 800f548:	4b05      	ldr	r3, [pc, #20]	; (800f560 <_fflush_r+0x70>)
 800f54a:	429c      	cmp	r4, r3
 800f54c:	d101      	bne.n	800f552 <_fflush_r+0x62>
 800f54e:	68ac      	ldr	r4, [r5, #8]
 800f550:	e7df      	b.n	800f512 <_fflush_r+0x22>
 800f552:	4b04      	ldr	r3, [pc, #16]	; (800f564 <_fflush_r+0x74>)
 800f554:	429c      	cmp	r4, r3
 800f556:	bf08      	it	eq
 800f558:	68ec      	ldreq	r4, [r5, #12]
 800f55a:	e7da      	b.n	800f512 <_fflush_r+0x22>
 800f55c:	08012944 	.word	0x08012944
 800f560:	08012964 	.word	0x08012964
 800f564:	08012924 	.word	0x08012924

0800f568 <std>:
 800f568:	2300      	movs	r3, #0
 800f56a:	b510      	push	{r4, lr}
 800f56c:	4604      	mov	r4, r0
 800f56e:	e9c0 3300 	strd	r3, r3, [r0]
 800f572:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f576:	6083      	str	r3, [r0, #8]
 800f578:	8181      	strh	r1, [r0, #12]
 800f57a:	6643      	str	r3, [r0, #100]	; 0x64
 800f57c:	81c2      	strh	r2, [r0, #14]
 800f57e:	6183      	str	r3, [r0, #24]
 800f580:	4619      	mov	r1, r3
 800f582:	2208      	movs	r2, #8
 800f584:	305c      	adds	r0, #92	; 0x5c
 800f586:	f7fd fc35 	bl	800cdf4 <memset>
 800f58a:	4b05      	ldr	r3, [pc, #20]	; (800f5a0 <std+0x38>)
 800f58c:	6263      	str	r3, [r4, #36]	; 0x24
 800f58e:	4b05      	ldr	r3, [pc, #20]	; (800f5a4 <std+0x3c>)
 800f590:	62a3      	str	r3, [r4, #40]	; 0x28
 800f592:	4b05      	ldr	r3, [pc, #20]	; (800f5a8 <std+0x40>)
 800f594:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f596:	4b05      	ldr	r3, [pc, #20]	; (800f5ac <std+0x44>)
 800f598:	6224      	str	r4, [r4, #32]
 800f59a:	6323      	str	r3, [r4, #48]	; 0x30
 800f59c:	bd10      	pop	{r4, pc}
 800f59e:	bf00      	nop
 800f5a0:	08010d91 	.word	0x08010d91
 800f5a4:	08010db3 	.word	0x08010db3
 800f5a8:	08010deb 	.word	0x08010deb
 800f5ac:	08010e0f 	.word	0x08010e0f

0800f5b0 <_cleanup_r>:
 800f5b0:	4901      	ldr	r1, [pc, #4]	; (800f5b8 <_cleanup_r+0x8>)
 800f5b2:	f000 b8af 	b.w	800f714 <_fwalk_reent>
 800f5b6:	bf00      	nop
 800f5b8:	0800f4f1 	.word	0x0800f4f1

0800f5bc <__sfmoreglue>:
 800f5bc:	b570      	push	{r4, r5, r6, lr}
 800f5be:	2268      	movs	r2, #104	; 0x68
 800f5c0:	1e4d      	subs	r5, r1, #1
 800f5c2:	4355      	muls	r5, r2
 800f5c4:	460e      	mov	r6, r1
 800f5c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f5ca:	f001 f9fb 	bl	80109c4 <_malloc_r>
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	b140      	cbz	r0, 800f5e4 <__sfmoreglue+0x28>
 800f5d2:	2100      	movs	r1, #0
 800f5d4:	e9c0 1600 	strd	r1, r6, [r0]
 800f5d8:	300c      	adds	r0, #12
 800f5da:	60a0      	str	r0, [r4, #8]
 800f5dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f5e0:	f7fd fc08 	bl	800cdf4 <memset>
 800f5e4:	4620      	mov	r0, r4
 800f5e6:	bd70      	pop	{r4, r5, r6, pc}

0800f5e8 <__sfp_lock_acquire>:
 800f5e8:	4801      	ldr	r0, [pc, #4]	; (800f5f0 <__sfp_lock_acquire+0x8>)
 800f5ea:	f000 bc26 	b.w	800fe3a <__retarget_lock_acquire_recursive>
 800f5ee:	bf00      	nop
 800f5f0:	200050e9 	.word	0x200050e9

0800f5f4 <__sfp_lock_release>:
 800f5f4:	4801      	ldr	r0, [pc, #4]	; (800f5fc <__sfp_lock_release+0x8>)
 800f5f6:	f000 bc21 	b.w	800fe3c <__retarget_lock_release_recursive>
 800f5fa:	bf00      	nop
 800f5fc:	200050e9 	.word	0x200050e9

0800f600 <__sinit_lock_acquire>:
 800f600:	4801      	ldr	r0, [pc, #4]	; (800f608 <__sinit_lock_acquire+0x8>)
 800f602:	f000 bc1a 	b.w	800fe3a <__retarget_lock_acquire_recursive>
 800f606:	bf00      	nop
 800f608:	200050ea 	.word	0x200050ea

0800f60c <__sinit_lock_release>:
 800f60c:	4801      	ldr	r0, [pc, #4]	; (800f614 <__sinit_lock_release+0x8>)
 800f60e:	f000 bc15 	b.w	800fe3c <__retarget_lock_release_recursive>
 800f612:	bf00      	nop
 800f614:	200050ea 	.word	0x200050ea

0800f618 <__sinit>:
 800f618:	b510      	push	{r4, lr}
 800f61a:	4604      	mov	r4, r0
 800f61c:	f7ff fff0 	bl	800f600 <__sinit_lock_acquire>
 800f620:	69a3      	ldr	r3, [r4, #24]
 800f622:	b11b      	cbz	r3, 800f62c <__sinit+0x14>
 800f624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f628:	f7ff bff0 	b.w	800f60c <__sinit_lock_release>
 800f62c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f630:	6523      	str	r3, [r4, #80]	; 0x50
 800f632:	4b13      	ldr	r3, [pc, #76]	; (800f680 <__sinit+0x68>)
 800f634:	4a13      	ldr	r2, [pc, #76]	; (800f684 <__sinit+0x6c>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	62a2      	str	r2, [r4, #40]	; 0x28
 800f63a:	42a3      	cmp	r3, r4
 800f63c:	bf04      	itt	eq
 800f63e:	2301      	moveq	r3, #1
 800f640:	61a3      	streq	r3, [r4, #24]
 800f642:	4620      	mov	r0, r4
 800f644:	f000 f820 	bl	800f688 <__sfp>
 800f648:	6060      	str	r0, [r4, #4]
 800f64a:	4620      	mov	r0, r4
 800f64c:	f000 f81c 	bl	800f688 <__sfp>
 800f650:	60a0      	str	r0, [r4, #8]
 800f652:	4620      	mov	r0, r4
 800f654:	f000 f818 	bl	800f688 <__sfp>
 800f658:	2200      	movs	r2, #0
 800f65a:	60e0      	str	r0, [r4, #12]
 800f65c:	2104      	movs	r1, #4
 800f65e:	6860      	ldr	r0, [r4, #4]
 800f660:	f7ff ff82 	bl	800f568 <std>
 800f664:	68a0      	ldr	r0, [r4, #8]
 800f666:	2201      	movs	r2, #1
 800f668:	2109      	movs	r1, #9
 800f66a:	f7ff ff7d 	bl	800f568 <std>
 800f66e:	68e0      	ldr	r0, [r4, #12]
 800f670:	2202      	movs	r2, #2
 800f672:	2112      	movs	r1, #18
 800f674:	f7ff ff78 	bl	800f568 <std>
 800f678:	2301      	movs	r3, #1
 800f67a:	61a3      	str	r3, [r4, #24]
 800f67c:	e7d2      	b.n	800f624 <__sinit+0xc>
 800f67e:	bf00      	nop
 800f680:	08012704 	.word	0x08012704
 800f684:	0800f5b1 	.word	0x0800f5b1

0800f688 <__sfp>:
 800f688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f68a:	4607      	mov	r7, r0
 800f68c:	f7ff ffac 	bl	800f5e8 <__sfp_lock_acquire>
 800f690:	4b1e      	ldr	r3, [pc, #120]	; (800f70c <__sfp+0x84>)
 800f692:	681e      	ldr	r6, [r3, #0]
 800f694:	69b3      	ldr	r3, [r6, #24]
 800f696:	b913      	cbnz	r3, 800f69e <__sfp+0x16>
 800f698:	4630      	mov	r0, r6
 800f69a:	f7ff ffbd 	bl	800f618 <__sinit>
 800f69e:	3648      	adds	r6, #72	; 0x48
 800f6a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f6a4:	3b01      	subs	r3, #1
 800f6a6:	d503      	bpl.n	800f6b0 <__sfp+0x28>
 800f6a8:	6833      	ldr	r3, [r6, #0]
 800f6aa:	b30b      	cbz	r3, 800f6f0 <__sfp+0x68>
 800f6ac:	6836      	ldr	r6, [r6, #0]
 800f6ae:	e7f7      	b.n	800f6a0 <__sfp+0x18>
 800f6b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f6b4:	b9d5      	cbnz	r5, 800f6ec <__sfp+0x64>
 800f6b6:	4b16      	ldr	r3, [pc, #88]	; (800f710 <__sfp+0x88>)
 800f6b8:	60e3      	str	r3, [r4, #12]
 800f6ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f6be:	6665      	str	r5, [r4, #100]	; 0x64
 800f6c0:	f000 fbba 	bl	800fe38 <__retarget_lock_init_recursive>
 800f6c4:	f7ff ff96 	bl	800f5f4 <__sfp_lock_release>
 800f6c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f6cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f6d0:	6025      	str	r5, [r4, #0]
 800f6d2:	61a5      	str	r5, [r4, #24]
 800f6d4:	2208      	movs	r2, #8
 800f6d6:	4629      	mov	r1, r5
 800f6d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f6dc:	f7fd fb8a 	bl	800cdf4 <memset>
 800f6e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f6e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f6ec:	3468      	adds	r4, #104	; 0x68
 800f6ee:	e7d9      	b.n	800f6a4 <__sfp+0x1c>
 800f6f0:	2104      	movs	r1, #4
 800f6f2:	4638      	mov	r0, r7
 800f6f4:	f7ff ff62 	bl	800f5bc <__sfmoreglue>
 800f6f8:	4604      	mov	r4, r0
 800f6fa:	6030      	str	r0, [r6, #0]
 800f6fc:	2800      	cmp	r0, #0
 800f6fe:	d1d5      	bne.n	800f6ac <__sfp+0x24>
 800f700:	f7ff ff78 	bl	800f5f4 <__sfp_lock_release>
 800f704:	230c      	movs	r3, #12
 800f706:	603b      	str	r3, [r7, #0]
 800f708:	e7ee      	b.n	800f6e8 <__sfp+0x60>
 800f70a:	bf00      	nop
 800f70c:	08012704 	.word	0x08012704
 800f710:	ffff0001 	.word	0xffff0001

0800f714 <_fwalk_reent>:
 800f714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f718:	4606      	mov	r6, r0
 800f71a:	4688      	mov	r8, r1
 800f71c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f720:	2700      	movs	r7, #0
 800f722:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f726:	f1b9 0901 	subs.w	r9, r9, #1
 800f72a:	d505      	bpl.n	800f738 <_fwalk_reent+0x24>
 800f72c:	6824      	ldr	r4, [r4, #0]
 800f72e:	2c00      	cmp	r4, #0
 800f730:	d1f7      	bne.n	800f722 <_fwalk_reent+0xe>
 800f732:	4638      	mov	r0, r7
 800f734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f738:	89ab      	ldrh	r3, [r5, #12]
 800f73a:	2b01      	cmp	r3, #1
 800f73c:	d907      	bls.n	800f74e <_fwalk_reent+0x3a>
 800f73e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f742:	3301      	adds	r3, #1
 800f744:	d003      	beq.n	800f74e <_fwalk_reent+0x3a>
 800f746:	4629      	mov	r1, r5
 800f748:	4630      	mov	r0, r6
 800f74a:	47c0      	blx	r8
 800f74c:	4307      	orrs	r7, r0
 800f74e:	3568      	adds	r5, #104	; 0x68
 800f750:	e7e9      	b.n	800f726 <_fwalk_reent+0x12>

0800f752 <rshift>:
 800f752:	6903      	ldr	r3, [r0, #16]
 800f754:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f758:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f75c:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f760:	f100 0414 	add.w	r4, r0, #20
 800f764:	dd45      	ble.n	800f7f2 <rshift+0xa0>
 800f766:	f011 011f 	ands.w	r1, r1, #31
 800f76a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f76e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f772:	d10c      	bne.n	800f78e <rshift+0x3c>
 800f774:	f100 0710 	add.w	r7, r0, #16
 800f778:	4629      	mov	r1, r5
 800f77a:	42b1      	cmp	r1, r6
 800f77c:	d334      	bcc.n	800f7e8 <rshift+0x96>
 800f77e:	1a9b      	subs	r3, r3, r2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	1eea      	subs	r2, r5, #3
 800f784:	4296      	cmp	r6, r2
 800f786:	bf38      	it	cc
 800f788:	2300      	movcc	r3, #0
 800f78a:	4423      	add	r3, r4
 800f78c:	e015      	b.n	800f7ba <rshift+0x68>
 800f78e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f792:	f1c1 0820 	rsb	r8, r1, #32
 800f796:	40cf      	lsrs	r7, r1
 800f798:	f105 0e04 	add.w	lr, r5, #4
 800f79c:	46a1      	mov	r9, r4
 800f79e:	4576      	cmp	r6, lr
 800f7a0:	46f4      	mov	ip, lr
 800f7a2:	d815      	bhi.n	800f7d0 <rshift+0x7e>
 800f7a4:	1a9a      	subs	r2, r3, r2
 800f7a6:	0092      	lsls	r2, r2, #2
 800f7a8:	3a04      	subs	r2, #4
 800f7aa:	3501      	adds	r5, #1
 800f7ac:	42ae      	cmp	r6, r5
 800f7ae:	bf38      	it	cc
 800f7b0:	2200      	movcc	r2, #0
 800f7b2:	18a3      	adds	r3, r4, r2
 800f7b4:	50a7      	str	r7, [r4, r2]
 800f7b6:	b107      	cbz	r7, 800f7ba <rshift+0x68>
 800f7b8:	3304      	adds	r3, #4
 800f7ba:	1b1a      	subs	r2, r3, r4
 800f7bc:	42a3      	cmp	r3, r4
 800f7be:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f7c2:	bf08      	it	eq
 800f7c4:	2300      	moveq	r3, #0
 800f7c6:	6102      	str	r2, [r0, #16]
 800f7c8:	bf08      	it	eq
 800f7ca:	6143      	streq	r3, [r0, #20]
 800f7cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f7d0:	f8dc c000 	ldr.w	ip, [ip]
 800f7d4:	fa0c fc08 	lsl.w	ip, ip, r8
 800f7d8:	ea4c 0707 	orr.w	r7, ip, r7
 800f7dc:	f849 7b04 	str.w	r7, [r9], #4
 800f7e0:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f7e4:	40cf      	lsrs	r7, r1
 800f7e6:	e7da      	b.n	800f79e <rshift+0x4c>
 800f7e8:	f851 cb04 	ldr.w	ip, [r1], #4
 800f7ec:	f847 cf04 	str.w	ip, [r7, #4]!
 800f7f0:	e7c3      	b.n	800f77a <rshift+0x28>
 800f7f2:	4623      	mov	r3, r4
 800f7f4:	e7e1      	b.n	800f7ba <rshift+0x68>

0800f7f6 <__hexdig_fun>:
 800f7f6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f7fa:	2b09      	cmp	r3, #9
 800f7fc:	d802      	bhi.n	800f804 <__hexdig_fun+0xe>
 800f7fe:	3820      	subs	r0, #32
 800f800:	b2c0      	uxtb	r0, r0
 800f802:	4770      	bx	lr
 800f804:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f808:	2b05      	cmp	r3, #5
 800f80a:	d801      	bhi.n	800f810 <__hexdig_fun+0x1a>
 800f80c:	3847      	subs	r0, #71	; 0x47
 800f80e:	e7f7      	b.n	800f800 <__hexdig_fun+0xa>
 800f810:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f814:	2b05      	cmp	r3, #5
 800f816:	d801      	bhi.n	800f81c <__hexdig_fun+0x26>
 800f818:	3827      	subs	r0, #39	; 0x27
 800f81a:	e7f1      	b.n	800f800 <__hexdig_fun+0xa>
 800f81c:	2000      	movs	r0, #0
 800f81e:	4770      	bx	lr

0800f820 <__gethex>:
 800f820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f824:	ed2d 8b02 	vpush	{d8}
 800f828:	b089      	sub	sp, #36	; 0x24
 800f82a:	ee08 0a10 	vmov	s16, r0
 800f82e:	9304      	str	r3, [sp, #16]
 800f830:	4bb4      	ldr	r3, [pc, #720]	; (800fb04 <__gethex+0x2e4>)
 800f832:	681b      	ldr	r3, [r3, #0]
 800f834:	9301      	str	r3, [sp, #4]
 800f836:	4618      	mov	r0, r3
 800f838:	468b      	mov	fp, r1
 800f83a:	4690      	mov	r8, r2
 800f83c:	f7f0 fcf0 	bl	8000220 <strlen>
 800f840:	9b01      	ldr	r3, [sp, #4]
 800f842:	f8db 2000 	ldr.w	r2, [fp]
 800f846:	4403      	add	r3, r0
 800f848:	4682      	mov	sl, r0
 800f84a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f84e:	9305      	str	r3, [sp, #20]
 800f850:	1c93      	adds	r3, r2, #2
 800f852:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f856:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f85a:	32fe      	adds	r2, #254	; 0xfe
 800f85c:	18d1      	adds	r1, r2, r3
 800f85e:	461f      	mov	r7, r3
 800f860:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f864:	9100      	str	r1, [sp, #0]
 800f866:	2830      	cmp	r0, #48	; 0x30
 800f868:	d0f8      	beq.n	800f85c <__gethex+0x3c>
 800f86a:	f7ff ffc4 	bl	800f7f6 <__hexdig_fun>
 800f86e:	4604      	mov	r4, r0
 800f870:	2800      	cmp	r0, #0
 800f872:	d13a      	bne.n	800f8ea <__gethex+0xca>
 800f874:	9901      	ldr	r1, [sp, #4]
 800f876:	4652      	mov	r2, sl
 800f878:	4638      	mov	r0, r7
 800f87a:	f001 facc 	bl	8010e16 <strncmp>
 800f87e:	4605      	mov	r5, r0
 800f880:	2800      	cmp	r0, #0
 800f882:	d168      	bne.n	800f956 <__gethex+0x136>
 800f884:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f888:	eb07 060a 	add.w	r6, r7, sl
 800f88c:	f7ff ffb3 	bl	800f7f6 <__hexdig_fun>
 800f890:	2800      	cmp	r0, #0
 800f892:	d062      	beq.n	800f95a <__gethex+0x13a>
 800f894:	4633      	mov	r3, r6
 800f896:	7818      	ldrb	r0, [r3, #0]
 800f898:	2830      	cmp	r0, #48	; 0x30
 800f89a:	461f      	mov	r7, r3
 800f89c:	f103 0301 	add.w	r3, r3, #1
 800f8a0:	d0f9      	beq.n	800f896 <__gethex+0x76>
 800f8a2:	f7ff ffa8 	bl	800f7f6 <__hexdig_fun>
 800f8a6:	2301      	movs	r3, #1
 800f8a8:	fab0 f480 	clz	r4, r0
 800f8ac:	0964      	lsrs	r4, r4, #5
 800f8ae:	4635      	mov	r5, r6
 800f8b0:	9300      	str	r3, [sp, #0]
 800f8b2:	463a      	mov	r2, r7
 800f8b4:	4616      	mov	r6, r2
 800f8b6:	3201      	adds	r2, #1
 800f8b8:	7830      	ldrb	r0, [r6, #0]
 800f8ba:	f7ff ff9c 	bl	800f7f6 <__hexdig_fun>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d1f8      	bne.n	800f8b4 <__gethex+0x94>
 800f8c2:	9901      	ldr	r1, [sp, #4]
 800f8c4:	4652      	mov	r2, sl
 800f8c6:	4630      	mov	r0, r6
 800f8c8:	f001 faa5 	bl	8010e16 <strncmp>
 800f8cc:	b980      	cbnz	r0, 800f8f0 <__gethex+0xd0>
 800f8ce:	b94d      	cbnz	r5, 800f8e4 <__gethex+0xc4>
 800f8d0:	eb06 050a 	add.w	r5, r6, sl
 800f8d4:	462a      	mov	r2, r5
 800f8d6:	4616      	mov	r6, r2
 800f8d8:	3201      	adds	r2, #1
 800f8da:	7830      	ldrb	r0, [r6, #0]
 800f8dc:	f7ff ff8b 	bl	800f7f6 <__hexdig_fun>
 800f8e0:	2800      	cmp	r0, #0
 800f8e2:	d1f8      	bne.n	800f8d6 <__gethex+0xb6>
 800f8e4:	1bad      	subs	r5, r5, r6
 800f8e6:	00ad      	lsls	r5, r5, #2
 800f8e8:	e004      	b.n	800f8f4 <__gethex+0xd4>
 800f8ea:	2400      	movs	r4, #0
 800f8ec:	4625      	mov	r5, r4
 800f8ee:	e7e0      	b.n	800f8b2 <__gethex+0x92>
 800f8f0:	2d00      	cmp	r5, #0
 800f8f2:	d1f7      	bne.n	800f8e4 <__gethex+0xc4>
 800f8f4:	7833      	ldrb	r3, [r6, #0]
 800f8f6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f8fa:	2b50      	cmp	r3, #80	; 0x50
 800f8fc:	d13b      	bne.n	800f976 <__gethex+0x156>
 800f8fe:	7873      	ldrb	r3, [r6, #1]
 800f900:	2b2b      	cmp	r3, #43	; 0x2b
 800f902:	d02c      	beq.n	800f95e <__gethex+0x13e>
 800f904:	2b2d      	cmp	r3, #45	; 0x2d
 800f906:	d02e      	beq.n	800f966 <__gethex+0x146>
 800f908:	1c71      	adds	r1, r6, #1
 800f90a:	f04f 0900 	mov.w	r9, #0
 800f90e:	7808      	ldrb	r0, [r1, #0]
 800f910:	f7ff ff71 	bl	800f7f6 <__hexdig_fun>
 800f914:	1e43      	subs	r3, r0, #1
 800f916:	b2db      	uxtb	r3, r3
 800f918:	2b18      	cmp	r3, #24
 800f91a:	d82c      	bhi.n	800f976 <__gethex+0x156>
 800f91c:	f1a0 0210 	sub.w	r2, r0, #16
 800f920:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f924:	f7ff ff67 	bl	800f7f6 <__hexdig_fun>
 800f928:	1e43      	subs	r3, r0, #1
 800f92a:	b2db      	uxtb	r3, r3
 800f92c:	2b18      	cmp	r3, #24
 800f92e:	d91d      	bls.n	800f96c <__gethex+0x14c>
 800f930:	f1b9 0f00 	cmp.w	r9, #0
 800f934:	d000      	beq.n	800f938 <__gethex+0x118>
 800f936:	4252      	negs	r2, r2
 800f938:	4415      	add	r5, r2
 800f93a:	f8cb 1000 	str.w	r1, [fp]
 800f93e:	b1e4      	cbz	r4, 800f97a <__gethex+0x15a>
 800f940:	9b00      	ldr	r3, [sp, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	bf14      	ite	ne
 800f946:	2700      	movne	r7, #0
 800f948:	2706      	moveq	r7, #6
 800f94a:	4638      	mov	r0, r7
 800f94c:	b009      	add	sp, #36	; 0x24
 800f94e:	ecbd 8b02 	vpop	{d8}
 800f952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f956:	463e      	mov	r6, r7
 800f958:	4625      	mov	r5, r4
 800f95a:	2401      	movs	r4, #1
 800f95c:	e7ca      	b.n	800f8f4 <__gethex+0xd4>
 800f95e:	f04f 0900 	mov.w	r9, #0
 800f962:	1cb1      	adds	r1, r6, #2
 800f964:	e7d3      	b.n	800f90e <__gethex+0xee>
 800f966:	f04f 0901 	mov.w	r9, #1
 800f96a:	e7fa      	b.n	800f962 <__gethex+0x142>
 800f96c:	230a      	movs	r3, #10
 800f96e:	fb03 0202 	mla	r2, r3, r2, r0
 800f972:	3a10      	subs	r2, #16
 800f974:	e7d4      	b.n	800f920 <__gethex+0x100>
 800f976:	4631      	mov	r1, r6
 800f978:	e7df      	b.n	800f93a <__gethex+0x11a>
 800f97a:	1bf3      	subs	r3, r6, r7
 800f97c:	3b01      	subs	r3, #1
 800f97e:	4621      	mov	r1, r4
 800f980:	2b07      	cmp	r3, #7
 800f982:	dc0b      	bgt.n	800f99c <__gethex+0x17c>
 800f984:	ee18 0a10 	vmov	r0, s16
 800f988:	f000 fad8 	bl	800ff3c <_Balloc>
 800f98c:	4604      	mov	r4, r0
 800f98e:	b940      	cbnz	r0, 800f9a2 <__gethex+0x182>
 800f990:	4b5d      	ldr	r3, [pc, #372]	; (800fb08 <__gethex+0x2e8>)
 800f992:	4602      	mov	r2, r0
 800f994:	21de      	movs	r1, #222	; 0xde
 800f996:	485d      	ldr	r0, [pc, #372]	; (800fb0c <__gethex+0x2ec>)
 800f998:	f001 fa70 	bl	8010e7c <__assert_func>
 800f99c:	3101      	adds	r1, #1
 800f99e:	105b      	asrs	r3, r3, #1
 800f9a0:	e7ee      	b.n	800f980 <__gethex+0x160>
 800f9a2:	f100 0914 	add.w	r9, r0, #20
 800f9a6:	f04f 0b00 	mov.w	fp, #0
 800f9aa:	f1ca 0301 	rsb	r3, sl, #1
 800f9ae:	f8cd 9008 	str.w	r9, [sp, #8]
 800f9b2:	f8cd b000 	str.w	fp, [sp]
 800f9b6:	9306      	str	r3, [sp, #24]
 800f9b8:	42b7      	cmp	r7, r6
 800f9ba:	d340      	bcc.n	800fa3e <__gethex+0x21e>
 800f9bc:	9802      	ldr	r0, [sp, #8]
 800f9be:	9b00      	ldr	r3, [sp, #0]
 800f9c0:	f840 3b04 	str.w	r3, [r0], #4
 800f9c4:	eba0 0009 	sub.w	r0, r0, r9
 800f9c8:	1080      	asrs	r0, r0, #2
 800f9ca:	0146      	lsls	r6, r0, #5
 800f9cc:	6120      	str	r0, [r4, #16]
 800f9ce:	4618      	mov	r0, r3
 800f9d0:	f000 fba6 	bl	8010120 <__hi0bits>
 800f9d4:	1a30      	subs	r0, r6, r0
 800f9d6:	f8d8 6000 	ldr.w	r6, [r8]
 800f9da:	42b0      	cmp	r0, r6
 800f9dc:	dd63      	ble.n	800faa6 <__gethex+0x286>
 800f9de:	1b87      	subs	r7, r0, r6
 800f9e0:	4639      	mov	r1, r7
 800f9e2:	4620      	mov	r0, r4
 800f9e4:	f000 ff4a 	bl	801087c <__any_on>
 800f9e8:	4682      	mov	sl, r0
 800f9ea:	b1a8      	cbz	r0, 800fa18 <__gethex+0x1f8>
 800f9ec:	1e7b      	subs	r3, r7, #1
 800f9ee:	1159      	asrs	r1, r3, #5
 800f9f0:	f003 021f 	and.w	r2, r3, #31
 800f9f4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f9f8:	f04f 0a01 	mov.w	sl, #1
 800f9fc:	fa0a f202 	lsl.w	r2, sl, r2
 800fa00:	420a      	tst	r2, r1
 800fa02:	d009      	beq.n	800fa18 <__gethex+0x1f8>
 800fa04:	4553      	cmp	r3, sl
 800fa06:	dd05      	ble.n	800fa14 <__gethex+0x1f4>
 800fa08:	1eb9      	subs	r1, r7, #2
 800fa0a:	4620      	mov	r0, r4
 800fa0c:	f000 ff36 	bl	801087c <__any_on>
 800fa10:	2800      	cmp	r0, #0
 800fa12:	d145      	bne.n	800faa0 <__gethex+0x280>
 800fa14:	f04f 0a02 	mov.w	sl, #2
 800fa18:	4639      	mov	r1, r7
 800fa1a:	4620      	mov	r0, r4
 800fa1c:	f7ff fe99 	bl	800f752 <rshift>
 800fa20:	443d      	add	r5, r7
 800fa22:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fa26:	42ab      	cmp	r3, r5
 800fa28:	da4c      	bge.n	800fac4 <__gethex+0x2a4>
 800fa2a:	ee18 0a10 	vmov	r0, s16
 800fa2e:	4621      	mov	r1, r4
 800fa30:	f000 fac4 	bl	800ffbc <_Bfree>
 800fa34:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fa36:	2300      	movs	r3, #0
 800fa38:	6013      	str	r3, [r2, #0]
 800fa3a:	27a3      	movs	r7, #163	; 0xa3
 800fa3c:	e785      	b.n	800f94a <__gethex+0x12a>
 800fa3e:	1e73      	subs	r3, r6, #1
 800fa40:	9a05      	ldr	r2, [sp, #20]
 800fa42:	9303      	str	r3, [sp, #12]
 800fa44:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800fa48:	4293      	cmp	r3, r2
 800fa4a:	d019      	beq.n	800fa80 <__gethex+0x260>
 800fa4c:	f1bb 0f20 	cmp.w	fp, #32
 800fa50:	d107      	bne.n	800fa62 <__gethex+0x242>
 800fa52:	9b02      	ldr	r3, [sp, #8]
 800fa54:	9a00      	ldr	r2, [sp, #0]
 800fa56:	f843 2b04 	str.w	r2, [r3], #4
 800fa5a:	9302      	str	r3, [sp, #8]
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	9300      	str	r3, [sp, #0]
 800fa60:	469b      	mov	fp, r3
 800fa62:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800fa66:	f7ff fec6 	bl	800f7f6 <__hexdig_fun>
 800fa6a:	9b00      	ldr	r3, [sp, #0]
 800fa6c:	f000 000f 	and.w	r0, r0, #15
 800fa70:	fa00 f00b 	lsl.w	r0, r0, fp
 800fa74:	4303      	orrs	r3, r0
 800fa76:	9300      	str	r3, [sp, #0]
 800fa78:	f10b 0b04 	add.w	fp, fp, #4
 800fa7c:	9b03      	ldr	r3, [sp, #12]
 800fa7e:	e00d      	b.n	800fa9c <__gethex+0x27c>
 800fa80:	9b03      	ldr	r3, [sp, #12]
 800fa82:	9a06      	ldr	r2, [sp, #24]
 800fa84:	4413      	add	r3, r2
 800fa86:	42bb      	cmp	r3, r7
 800fa88:	d3e0      	bcc.n	800fa4c <__gethex+0x22c>
 800fa8a:	4618      	mov	r0, r3
 800fa8c:	9901      	ldr	r1, [sp, #4]
 800fa8e:	9307      	str	r3, [sp, #28]
 800fa90:	4652      	mov	r2, sl
 800fa92:	f001 f9c0 	bl	8010e16 <strncmp>
 800fa96:	9b07      	ldr	r3, [sp, #28]
 800fa98:	2800      	cmp	r0, #0
 800fa9a:	d1d7      	bne.n	800fa4c <__gethex+0x22c>
 800fa9c:	461e      	mov	r6, r3
 800fa9e:	e78b      	b.n	800f9b8 <__gethex+0x198>
 800faa0:	f04f 0a03 	mov.w	sl, #3
 800faa4:	e7b8      	b.n	800fa18 <__gethex+0x1f8>
 800faa6:	da0a      	bge.n	800fabe <__gethex+0x29e>
 800faa8:	1a37      	subs	r7, r6, r0
 800faaa:	4621      	mov	r1, r4
 800faac:	ee18 0a10 	vmov	r0, s16
 800fab0:	463a      	mov	r2, r7
 800fab2:	f000 fc9f 	bl	80103f4 <__lshift>
 800fab6:	1bed      	subs	r5, r5, r7
 800fab8:	4604      	mov	r4, r0
 800faba:	f100 0914 	add.w	r9, r0, #20
 800fabe:	f04f 0a00 	mov.w	sl, #0
 800fac2:	e7ae      	b.n	800fa22 <__gethex+0x202>
 800fac4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800fac8:	42a8      	cmp	r0, r5
 800faca:	dd72      	ble.n	800fbb2 <__gethex+0x392>
 800facc:	1b45      	subs	r5, r0, r5
 800face:	42ae      	cmp	r6, r5
 800fad0:	dc36      	bgt.n	800fb40 <__gethex+0x320>
 800fad2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	d02a      	beq.n	800fb30 <__gethex+0x310>
 800fada:	2b03      	cmp	r3, #3
 800fadc:	d02c      	beq.n	800fb38 <__gethex+0x318>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d11c      	bne.n	800fb1c <__gethex+0x2fc>
 800fae2:	42ae      	cmp	r6, r5
 800fae4:	d11a      	bne.n	800fb1c <__gethex+0x2fc>
 800fae6:	2e01      	cmp	r6, #1
 800fae8:	d112      	bne.n	800fb10 <__gethex+0x2f0>
 800faea:	9a04      	ldr	r2, [sp, #16]
 800faec:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800faf0:	6013      	str	r3, [r2, #0]
 800faf2:	2301      	movs	r3, #1
 800faf4:	6123      	str	r3, [r4, #16]
 800faf6:	f8c9 3000 	str.w	r3, [r9]
 800fafa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fafc:	2762      	movs	r7, #98	; 0x62
 800fafe:	601c      	str	r4, [r3, #0]
 800fb00:	e723      	b.n	800f94a <__gethex+0x12a>
 800fb02:	bf00      	nop
 800fb04:	080129ec 	.word	0x080129ec
 800fb08:	08012910 	.word	0x08012910
 800fb0c:	08012984 	.word	0x08012984
 800fb10:	1e71      	subs	r1, r6, #1
 800fb12:	4620      	mov	r0, r4
 800fb14:	f000 feb2 	bl	801087c <__any_on>
 800fb18:	2800      	cmp	r0, #0
 800fb1a:	d1e6      	bne.n	800faea <__gethex+0x2ca>
 800fb1c:	ee18 0a10 	vmov	r0, s16
 800fb20:	4621      	mov	r1, r4
 800fb22:	f000 fa4b 	bl	800ffbc <_Bfree>
 800fb26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800fb28:	2300      	movs	r3, #0
 800fb2a:	6013      	str	r3, [r2, #0]
 800fb2c:	2750      	movs	r7, #80	; 0x50
 800fb2e:	e70c      	b.n	800f94a <__gethex+0x12a>
 800fb30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb32:	2b00      	cmp	r3, #0
 800fb34:	d1f2      	bne.n	800fb1c <__gethex+0x2fc>
 800fb36:	e7d8      	b.n	800faea <__gethex+0x2ca>
 800fb38:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d1d5      	bne.n	800faea <__gethex+0x2ca>
 800fb3e:	e7ed      	b.n	800fb1c <__gethex+0x2fc>
 800fb40:	1e6f      	subs	r7, r5, #1
 800fb42:	f1ba 0f00 	cmp.w	sl, #0
 800fb46:	d131      	bne.n	800fbac <__gethex+0x38c>
 800fb48:	b127      	cbz	r7, 800fb54 <__gethex+0x334>
 800fb4a:	4639      	mov	r1, r7
 800fb4c:	4620      	mov	r0, r4
 800fb4e:	f000 fe95 	bl	801087c <__any_on>
 800fb52:	4682      	mov	sl, r0
 800fb54:	117b      	asrs	r3, r7, #5
 800fb56:	2101      	movs	r1, #1
 800fb58:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800fb5c:	f007 071f 	and.w	r7, r7, #31
 800fb60:	fa01 f707 	lsl.w	r7, r1, r7
 800fb64:	421f      	tst	r7, r3
 800fb66:	4629      	mov	r1, r5
 800fb68:	4620      	mov	r0, r4
 800fb6a:	bf18      	it	ne
 800fb6c:	f04a 0a02 	orrne.w	sl, sl, #2
 800fb70:	1b76      	subs	r6, r6, r5
 800fb72:	f7ff fdee 	bl	800f752 <rshift>
 800fb76:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800fb7a:	2702      	movs	r7, #2
 800fb7c:	f1ba 0f00 	cmp.w	sl, #0
 800fb80:	d048      	beq.n	800fc14 <__gethex+0x3f4>
 800fb82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800fb86:	2b02      	cmp	r3, #2
 800fb88:	d015      	beq.n	800fbb6 <__gethex+0x396>
 800fb8a:	2b03      	cmp	r3, #3
 800fb8c:	d017      	beq.n	800fbbe <__gethex+0x39e>
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	d109      	bne.n	800fba6 <__gethex+0x386>
 800fb92:	f01a 0f02 	tst.w	sl, #2
 800fb96:	d006      	beq.n	800fba6 <__gethex+0x386>
 800fb98:	f8d9 0000 	ldr.w	r0, [r9]
 800fb9c:	ea4a 0a00 	orr.w	sl, sl, r0
 800fba0:	f01a 0f01 	tst.w	sl, #1
 800fba4:	d10e      	bne.n	800fbc4 <__gethex+0x3a4>
 800fba6:	f047 0710 	orr.w	r7, r7, #16
 800fbaa:	e033      	b.n	800fc14 <__gethex+0x3f4>
 800fbac:	f04f 0a01 	mov.w	sl, #1
 800fbb0:	e7d0      	b.n	800fb54 <__gethex+0x334>
 800fbb2:	2701      	movs	r7, #1
 800fbb4:	e7e2      	b.n	800fb7c <__gethex+0x35c>
 800fbb6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbb8:	f1c3 0301 	rsb	r3, r3, #1
 800fbbc:	9315      	str	r3, [sp, #84]	; 0x54
 800fbbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	d0f0      	beq.n	800fba6 <__gethex+0x386>
 800fbc4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800fbc8:	f104 0314 	add.w	r3, r4, #20
 800fbcc:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800fbd0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800fbd4:	f04f 0c00 	mov.w	ip, #0
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f853 2b04 	ldr.w	r2, [r3], #4
 800fbde:	f1b2 3fff 	cmp.w	r2, #4294967295
 800fbe2:	d01c      	beq.n	800fc1e <__gethex+0x3fe>
 800fbe4:	3201      	adds	r2, #1
 800fbe6:	6002      	str	r2, [r0, #0]
 800fbe8:	2f02      	cmp	r7, #2
 800fbea:	f104 0314 	add.w	r3, r4, #20
 800fbee:	d13f      	bne.n	800fc70 <__gethex+0x450>
 800fbf0:	f8d8 2000 	ldr.w	r2, [r8]
 800fbf4:	3a01      	subs	r2, #1
 800fbf6:	42b2      	cmp	r2, r6
 800fbf8:	d10a      	bne.n	800fc10 <__gethex+0x3f0>
 800fbfa:	1171      	asrs	r1, r6, #5
 800fbfc:	2201      	movs	r2, #1
 800fbfe:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fc02:	f006 061f 	and.w	r6, r6, #31
 800fc06:	fa02 f606 	lsl.w	r6, r2, r6
 800fc0a:	421e      	tst	r6, r3
 800fc0c:	bf18      	it	ne
 800fc0e:	4617      	movne	r7, r2
 800fc10:	f047 0720 	orr.w	r7, r7, #32
 800fc14:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800fc16:	601c      	str	r4, [r3, #0]
 800fc18:	9b04      	ldr	r3, [sp, #16]
 800fc1a:	601d      	str	r5, [r3, #0]
 800fc1c:	e695      	b.n	800f94a <__gethex+0x12a>
 800fc1e:	4299      	cmp	r1, r3
 800fc20:	f843 cc04 	str.w	ip, [r3, #-4]
 800fc24:	d8d8      	bhi.n	800fbd8 <__gethex+0x3b8>
 800fc26:	68a3      	ldr	r3, [r4, #8]
 800fc28:	459b      	cmp	fp, r3
 800fc2a:	db19      	blt.n	800fc60 <__gethex+0x440>
 800fc2c:	6861      	ldr	r1, [r4, #4]
 800fc2e:	ee18 0a10 	vmov	r0, s16
 800fc32:	3101      	adds	r1, #1
 800fc34:	f000 f982 	bl	800ff3c <_Balloc>
 800fc38:	4681      	mov	r9, r0
 800fc3a:	b918      	cbnz	r0, 800fc44 <__gethex+0x424>
 800fc3c:	4b1a      	ldr	r3, [pc, #104]	; (800fca8 <__gethex+0x488>)
 800fc3e:	4602      	mov	r2, r0
 800fc40:	2184      	movs	r1, #132	; 0x84
 800fc42:	e6a8      	b.n	800f996 <__gethex+0x176>
 800fc44:	6922      	ldr	r2, [r4, #16]
 800fc46:	3202      	adds	r2, #2
 800fc48:	f104 010c 	add.w	r1, r4, #12
 800fc4c:	0092      	lsls	r2, r2, #2
 800fc4e:	300c      	adds	r0, #12
 800fc50:	f7fd f8a8 	bl	800cda4 <memcpy>
 800fc54:	4621      	mov	r1, r4
 800fc56:	ee18 0a10 	vmov	r0, s16
 800fc5a:	f000 f9af 	bl	800ffbc <_Bfree>
 800fc5e:	464c      	mov	r4, r9
 800fc60:	6923      	ldr	r3, [r4, #16]
 800fc62:	1c5a      	adds	r2, r3, #1
 800fc64:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800fc68:	6122      	str	r2, [r4, #16]
 800fc6a:	2201      	movs	r2, #1
 800fc6c:	615a      	str	r2, [r3, #20]
 800fc6e:	e7bb      	b.n	800fbe8 <__gethex+0x3c8>
 800fc70:	6922      	ldr	r2, [r4, #16]
 800fc72:	455a      	cmp	r2, fp
 800fc74:	dd0b      	ble.n	800fc8e <__gethex+0x46e>
 800fc76:	2101      	movs	r1, #1
 800fc78:	4620      	mov	r0, r4
 800fc7a:	f7ff fd6a 	bl	800f752 <rshift>
 800fc7e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800fc82:	3501      	adds	r5, #1
 800fc84:	42ab      	cmp	r3, r5
 800fc86:	f6ff aed0 	blt.w	800fa2a <__gethex+0x20a>
 800fc8a:	2701      	movs	r7, #1
 800fc8c:	e7c0      	b.n	800fc10 <__gethex+0x3f0>
 800fc8e:	f016 061f 	ands.w	r6, r6, #31
 800fc92:	d0fa      	beq.n	800fc8a <__gethex+0x46a>
 800fc94:	4453      	add	r3, sl
 800fc96:	f1c6 0620 	rsb	r6, r6, #32
 800fc9a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800fc9e:	f000 fa3f 	bl	8010120 <__hi0bits>
 800fca2:	42b0      	cmp	r0, r6
 800fca4:	dbe7      	blt.n	800fc76 <__gethex+0x456>
 800fca6:	e7f0      	b.n	800fc8a <__gethex+0x46a>
 800fca8:	08012910 	.word	0x08012910

0800fcac <L_shift>:
 800fcac:	f1c2 0208 	rsb	r2, r2, #8
 800fcb0:	0092      	lsls	r2, r2, #2
 800fcb2:	b570      	push	{r4, r5, r6, lr}
 800fcb4:	f1c2 0620 	rsb	r6, r2, #32
 800fcb8:	6843      	ldr	r3, [r0, #4]
 800fcba:	6804      	ldr	r4, [r0, #0]
 800fcbc:	fa03 f506 	lsl.w	r5, r3, r6
 800fcc0:	432c      	orrs	r4, r5
 800fcc2:	40d3      	lsrs	r3, r2
 800fcc4:	6004      	str	r4, [r0, #0]
 800fcc6:	f840 3f04 	str.w	r3, [r0, #4]!
 800fcca:	4288      	cmp	r0, r1
 800fccc:	d3f4      	bcc.n	800fcb8 <L_shift+0xc>
 800fcce:	bd70      	pop	{r4, r5, r6, pc}

0800fcd0 <__match>:
 800fcd0:	b530      	push	{r4, r5, lr}
 800fcd2:	6803      	ldr	r3, [r0, #0]
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcda:	b914      	cbnz	r4, 800fce2 <__match+0x12>
 800fcdc:	6003      	str	r3, [r0, #0]
 800fcde:	2001      	movs	r0, #1
 800fce0:	bd30      	pop	{r4, r5, pc}
 800fce2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fce6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800fcea:	2d19      	cmp	r5, #25
 800fcec:	bf98      	it	ls
 800fcee:	3220      	addls	r2, #32
 800fcf0:	42a2      	cmp	r2, r4
 800fcf2:	d0f0      	beq.n	800fcd6 <__match+0x6>
 800fcf4:	2000      	movs	r0, #0
 800fcf6:	e7f3      	b.n	800fce0 <__match+0x10>

0800fcf8 <__hexnan>:
 800fcf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcfc:	680b      	ldr	r3, [r1, #0]
 800fcfe:	115e      	asrs	r6, r3, #5
 800fd00:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800fd04:	f013 031f 	ands.w	r3, r3, #31
 800fd08:	b087      	sub	sp, #28
 800fd0a:	bf18      	it	ne
 800fd0c:	3604      	addne	r6, #4
 800fd0e:	2500      	movs	r5, #0
 800fd10:	1f37      	subs	r7, r6, #4
 800fd12:	4690      	mov	r8, r2
 800fd14:	6802      	ldr	r2, [r0, #0]
 800fd16:	9301      	str	r3, [sp, #4]
 800fd18:	4682      	mov	sl, r0
 800fd1a:	f846 5c04 	str.w	r5, [r6, #-4]
 800fd1e:	46b9      	mov	r9, r7
 800fd20:	463c      	mov	r4, r7
 800fd22:	9502      	str	r5, [sp, #8]
 800fd24:	46ab      	mov	fp, r5
 800fd26:	7851      	ldrb	r1, [r2, #1]
 800fd28:	1c53      	adds	r3, r2, #1
 800fd2a:	9303      	str	r3, [sp, #12]
 800fd2c:	b341      	cbz	r1, 800fd80 <__hexnan+0x88>
 800fd2e:	4608      	mov	r0, r1
 800fd30:	9205      	str	r2, [sp, #20]
 800fd32:	9104      	str	r1, [sp, #16]
 800fd34:	f7ff fd5f 	bl	800f7f6 <__hexdig_fun>
 800fd38:	2800      	cmp	r0, #0
 800fd3a:	d14f      	bne.n	800fddc <__hexnan+0xe4>
 800fd3c:	9904      	ldr	r1, [sp, #16]
 800fd3e:	9a05      	ldr	r2, [sp, #20]
 800fd40:	2920      	cmp	r1, #32
 800fd42:	d818      	bhi.n	800fd76 <__hexnan+0x7e>
 800fd44:	9b02      	ldr	r3, [sp, #8]
 800fd46:	459b      	cmp	fp, r3
 800fd48:	dd13      	ble.n	800fd72 <__hexnan+0x7a>
 800fd4a:	454c      	cmp	r4, r9
 800fd4c:	d206      	bcs.n	800fd5c <__hexnan+0x64>
 800fd4e:	2d07      	cmp	r5, #7
 800fd50:	dc04      	bgt.n	800fd5c <__hexnan+0x64>
 800fd52:	462a      	mov	r2, r5
 800fd54:	4649      	mov	r1, r9
 800fd56:	4620      	mov	r0, r4
 800fd58:	f7ff ffa8 	bl	800fcac <L_shift>
 800fd5c:	4544      	cmp	r4, r8
 800fd5e:	d950      	bls.n	800fe02 <__hexnan+0x10a>
 800fd60:	2300      	movs	r3, #0
 800fd62:	f1a4 0904 	sub.w	r9, r4, #4
 800fd66:	f844 3c04 	str.w	r3, [r4, #-4]
 800fd6a:	f8cd b008 	str.w	fp, [sp, #8]
 800fd6e:	464c      	mov	r4, r9
 800fd70:	461d      	mov	r5, r3
 800fd72:	9a03      	ldr	r2, [sp, #12]
 800fd74:	e7d7      	b.n	800fd26 <__hexnan+0x2e>
 800fd76:	2929      	cmp	r1, #41	; 0x29
 800fd78:	d156      	bne.n	800fe28 <__hexnan+0x130>
 800fd7a:	3202      	adds	r2, #2
 800fd7c:	f8ca 2000 	str.w	r2, [sl]
 800fd80:	f1bb 0f00 	cmp.w	fp, #0
 800fd84:	d050      	beq.n	800fe28 <__hexnan+0x130>
 800fd86:	454c      	cmp	r4, r9
 800fd88:	d206      	bcs.n	800fd98 <__hexnan+0xa0>
 800fd8a:	2d07      	cmp	r5, #7
 800fd8c:	dc04      	bgt.n	800fd98 <__hexnan+0xa0>
 800fd8e:	462a      	mov	r2, r5
 800fd90:	4649      	mov	r1, r9
 800fd92:	4620      	mov	r0, r4
 800fd94:	f7ff ff8a 	bl	800fcac <L_shift>
 800fd98:	4544      	cmp	r4, r8
 800fd9a:	d934      	bls.n	800fe06 <__hexnan+0x10e>
 800fd9c:	f1a8 0204 	sub.w	r2, r8, #4
 800fda0:	4623      	mov	r3, r4
 800fda2:	f853 1b04 	ldr.w	r1, [r3], #4
 800fda6:	f842 1f04 	str.w	r1, [r2, #4]!
 800fdaa:	429f      	cmp	r7, r3
 800fdac:	d2f9      	bcs.n	800fda2 <__hexnan+0xaa>
 800fdae:	1b3b      	subs	r3, r7, r4
 800fdb0:	f023 0303 	bic.w	r3, r3, #3
 800fdb4:	3304      	adds	r3, #4
 800fdb6:	3401      	adds	r4, #1
 800fdb8:	3e03      	subs	r6, #3
 800fdba:	42b4      	cmp	r4, r6
 800fdbc:	bf88      	it	hi
 800fdbe:	2304      	movhi	r3, #4
 800fdc0:	4443      	add	r3, r8
 800fdc2:	2200      	movs	r2, #0
 800fdc4:	f843 2b04 	str.w	r2, [r3], #4
 800fdc8:	429f      	cmp	r7, r3
 800fdca:	d2fb      	bcs.n	800fdc4 <__hexnan+0xcc>
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	b91b      	cbnz	r3, 800fdd8 <__hexnan+0xe0>
 800fdd0:	4547      	cmp	r7, r8
 800fdd2:	d127      	bne.n	800fe24 <__hexnan+0x12c>
 800fdd4:	2301      	movs	r3, #1
 800fdd6:	603b      	str	r3, [r7, #0]
 800fdd8:	2005      	movs	r0, #5
 800fdda:	e026      	b.n	800fe2a <__hexnan+0x132>
 800fddc:	3501      	adds	r5, #1
 800fdde:	2d08      	cmp	r5, #8
 800fde0:	f10b 0b01 	add.w	fp, fp, #1
 800fde4:	dd06      	ble.n	800fdf4 <__hexnan+0xfc>
 800fde6:	4544      	cmp	r4, r8
 800fde8:	d9c3      	bls.n	800fd72 <__hexnan+0x7a>
 800fdea:	2300      	movs	r3, #0
 800fdec:	f844 3c04 	str.w	r3, [r4, #-4]
 800fdf0:	2501      	movs	r5, #1
 800fdf2:	3c04      	subs	r4, #4
 800fdf4:	6822      	ldr	r2, [r4, #0]
 800fdf6:	f000 000f 	and.w	r0, r0, #15
 800fdfa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800fdfe:	6022      	str	r2, [r4, #0]
 800fe00:	e7b7      	b.n	800fd72 <__hexnan+0x7a>
 800fe02:	2508      	movs	r5, #8
 800fe04:	e7b5      	b.n	800fd72 <__hexnan+0x7a>
 800fe06:	9b01      	ldr	r3, [sp, #4]
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d0df      	beq.n	800fdcc <__hexnan+0xd4>
 800fe0c:	f04f 32ff 	mov.w	r2, #4294967295
 800fe10:	f1c3 0320 	rsb	r3, r3, #32
 800fe14:	fa22 f303 	lsr.w	r3, r2, r3
 800fe18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800fe1c:	401a      	ands	r2, r3
 800fe1e:	f846 2c04 	str.w	r2, [r6, #-4]
 800fe22:	e7d3      	b.n	800fdcc <__hexnan+0xd4>
 800fe24:	3f04      	subs	r7, #4
 800fe26:	e7d1      	b.n	800fdcc <__hexnan+0xd4>
 800fe28:	2004      	movs	r0, #4
 800fe2a:	b007      	add	sp, #28
 800fe2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fe30 <_localeconv_r>:
 800fe30:	4800      	ldr	r0, [pc, #0]	; (800fe34 <_localeconv_r+0x4>)
 800fe32:	4770      	bx	lr
 800fe34:	20000184 	.word	0x20000184

0800fe38 <__retarget_lock_init_recursive>:
 800fe38:	4770      	bx	lr

0800fe3a <__retarget_lock_acquire_recursive>:
 800fe3a:	4770      	bx	lr

0800fe3c <__retarget_lock_release_recursive>:
 800fe3c:	4770      	bx	lr

0800fe3e <__swhatbuf_r>:
 800fe3e:	b570      	push	{r4, r5, r6, lr}
 800fe40:	460e      	mov	r6, r1
 800fe42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fe46:	2900      	cmp	r1, #0
 800fe48:	b096      	sub	sp, #88	; 0x58
 800fe4a:	4614      	mov	r4, r2
 800fe4c:	461d      	mov	r5, r3
 800fe4e:	da08      	bge.n	800fe62 <__swhatbuf_r+0x24>
 800fe50:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800fe54:	2200      	movs	r2, #0
 800fe56:	602a      	str	r2, [r5, #0]
 800fe58:	061a      	lsls	r2, r3, #24
 800fe5a:	d410      	bmi.n	800fe7e <__swhatbuf_r+0x40>
 800fe5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fe60:	e00e      	b.n	800fe80 <__swhatbuf_r+0x42>
 800fe62:	466a      	mov	r2, sp
 800fe64:	f001 f84a 	bl	8010efc <_fstat_r>
 800fe68:	2800      	cmp	r0, #0
 800fe6a:	dbf1      	blt.n	800fe50 <__swhatbuf_r+0x12>
 800fe6c:	9a01      	ldr	r2, [sp, #4]
 800fe6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fe72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fe76:	425a      	negs	r2, r3
 800fe78:	415a      	adcs	r2, r3
 800fe7a:	602a      	str	r2, [r5, #0]
 800fe7c:	e7ee      	b.n	800fe5c <__swhatbuf_r+0x1e>
 800fe7e:	2340      	movs	r3, #64	; 0x40
 800fe80:	2000      	movs	r0, #0
 800fe82:	6023      	str	r3, [r4, #0]
 800fe84:	b016      	add	sp, #88	; 0x58
 800fe86:	bd70      	pop	{r4, r5, r6, pc}

0800fe88 <__smakebuf_r>:
 800fe88:	898b      	ldrh	r3, [r1, #12]
 800fe8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fe8c:	079d      	lsls	r5, r3, #30
 800fe8e:	4606      	mov	r6, r0
 800fe90:	460c      	mov	r4, r1
 800fe92:	d507      	bpl.n	800fea4 <__smakebuf_r+0x1c>
 800fe94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fe98:	6023      	str	r3, [r4, #0]
 800fe9a:	6123      	str	r3, [r4, #16]
 800fe9c:	2301      	movs	r3, #1
 800fe9e:	6163      	str	r3, [r4, #20]
 800fea0:	b002      	add	sp, #8
 800fea2:	bd70      	pop	{r4, r5, r6, pc}
 800fea4:	ab01      	add	r3, sp, #4
 800fea6:	466a      	mov	r2, sp
 800fea8:	f7ff ffc9 	bl	800fe3e <__swhatbuf_r>
 800feac:	9900      	ldr	r1, [sp, #0]
 800feae:	4605      	mov	r5, r0
 800feb0:	4630      	mov	r0, r6
 800feb2:	f000 fd87 	bl	80109c4 <_malloc_r>
 800feb6:	b948      	cbnz	r0, 800fecc <__smakebuf_r+0x44>
 800feb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800febc:	059a      	lsls	r2, r3, #22
 800febe:	d4ef      	bmi.n	800fea0 <__smakebuf_r+0x18>
 800fec0:	f023 0303 	bic.w	r3, r3, #3
 800fec4:	f043 0302 	orr.w	r3, r3, #2
 800fec8:	81a3      	strh	r3, [r4, #12]
 800feca:	e7e3      	b.n	800fe94 <__smakebuf_r+0xc>
 800fecc:	4b0d      	ldr	r3, [pc, #52]	; (800ff04 <__smakebuf_r+0x7c>)
 800fece:	62b3      	str	r3, [r6, #40]	; 0x28
 800fed0:	89a3      	ldrh	r3, [r4, #12]
 800fed2:	6020      	str	r0, [r4, #0]
 800fed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fed8:	81a3      	strh	r3, [r4, #12]
 800feda:	9b00      	ldr	r3, [sp, #0]
 800fedc:	6163      	str	r3, [r4, #20]
 800fede:	9b01      	ldr	r3, [sp, #4]
 800fee0:	6120      	str	r0, [r4, #16]
 800fee2:	b15b      	cbz	r3, 800fefc <__smakebuf_r+0x74>
 800fee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fee8:	4630      	mov	r0, r6
 800feea:	f001 f819 	bl	8010f20 <_isatty_r>
 800feee:	b128      	cbz	r0, 800fefc <__smakebuf_r+0x74>
 800fef0:	89a3      	ldrh	r3, [r4, #12]
 800fef2:	f023 0303 	bic.w	r3, r3, #3
 800fef6:	f043 0301 	orr.w	r3, r3, #1
 800fefa:	81a3      	strh	r3, [r4, #12]
 800fefc:	89a0      	ldrh	r0, [r4, #12]
 800fefe:	4305      	orrs	r5, r0
 800ff00:	81a5      	strh	r5, [r4, #12]
 800ff02:	e7cd      	b.n	800fea0 <__smakebuf_r+0x18>
 800ff04:	0800f5b1 	.word	0x0800f5b1

0800ff08 <malloc>:
 800ff08:	4b02      	ldr	r3, [pc, #8]	; (800ff14 <malloc+0xc>)
 800ff0a:	4601      	mov	r1, r0
 800ff0c:	6818      	ldr	r0, [r3, #0]
 800ff0e:	f000 bd59 	b.w	80109c4 <_malloc_r>
 800ff12:	bf00      	nop
 800ff14:	2000002c 	.word	0x2000002c

0800ff18 <__ascii_mbtowc>:
 800ff18:	b082      	sub	sp, #8
 800ff1a:	b901      	cbnz	r1, 800ff1e <__ascii_mbtowc+0x6>
 800ff1c:	a901      	add	r1, sp, #4
 800ff1e:	b142      	cbz	r2, 800ff32 <__ascii_mbtowc+0x1a>
 800ff20:	b14b      	cbz	r3, 800ff36 <__ascii_mbtowc+0x1e>
 800ff22:	7813      	ldrb	r3, [r2, #0]
 800ff24:	600b      	str	r3, [r1, #0]
 800ff26:	7812      	ldrb	r2, [r2, #0]
 800ff28:	1e10      	subs	r0, r2, #0
 800ff2a:	bf18      	it	ne
 800ff2c:	2001      	movne	r0, #1
 800ff2e:	b002      	add	sp, #8
 800ff30:	4770      	bx	lr
 800ff32:	4610      	mov	r0, r2
 800ff34:	e7fb      	b.n	800ff2e <__ascii_mbtowc+0x16>
 800ff36:	f06f 0001 	mvn.w	r0, #1
 800ff3a:	e7f8      	b.n	800ff2e <__ascii_mbtowc+0x16>

0800ff3c <_Balloc>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ff40:	4604      	mov	r4, r0
 800ff42:	460d      	mov	r5, r1
 800ff44:	b976      	cbnz	r6, 800ff64 <_Balloc+0x28>
 800ff46:	2010      	movs	r0, #16
 800ff48:	f7ff ffde 	bl	800ff08 <malloc>
 800ff4c:	4602      	mov	r2, r0
 800ff4e:	6260      	str	r0, [r4, #36]	; 0x24
 800ff50:	b920      	cbnz	r0, 800ff5c <_Balloc+0x20>
 800ff52:	4b18      	ldr	r3, [pc, #96]	; (800ffb4 <_Balloc+0x78>)
 800ff54:	4818      	ldr	r0, [pc, #96]	; (800ffb8 <_Balloc+0x7c>)
 800ff56:	2166      	movs	r1, #102	; 0x66
 800ff58:	f000 ff90 	bl	8010e7c <__assert_func>
 800ff5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ff60:	6006      	str	r6, [r0, #0]
 800ff62:	60c6      	str	r6, [r0, #12]
 800ff64:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ff66:	68f3      	ldr	r3, [r6, #12]
 800ff68:	b183      	cbz	r3, 800ff8c <_Balloc+0x50>
 800ff6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff6c:	68db      	ldr	r3, [r3, #12]
 800ff6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ff72:	b9b8      	cbnz	r0, 800ffa4 <_Balloc+0x68>
 800ff74:	2101      	movs	r1, #1
 800ff76:	fa01 f605 	lsl.w	r6, r1, r5
 800ff7a:	1d72      	adds	r2, r6, #5
 800ff7c:	0092      	lsls	r2, r2, #2
 800ff7e:	4620      	mov	r0, r4
 800ff80:	f000 fc9d 	bl	80108be <_calloc_r>
 800ff84:	b160      	cbz	r0, 800ffa0 <_Balloc+0x64>
 800ff86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ff8a:	e00e      	b.n	800ffaa <_Balloc+0x6e>
 800ff8c:	2221      	movs	r2, #33	; 0x21
 800ff8e:	2104      	movs	r1, #4
 800ff90:	4620      	mov	r0, r4
 800ff92:	f000 fc94 	bl	80108be <_calloc_r>
 800ff96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ff98:	60f0      	str	r0, [r6, #12]
 800ff9a:	68db      	ldr	r3, [r3, #12]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d1e4      	bne.n	800ff6a <_Balloc+0x2e>
 800ffa0:	2000      	movs	r0, #0
 800ffa2:	bd70      	pop	{r4, r5, r6, pc}
 800ffa4:	6802      	ldr	r2, [r0, #0]
 800ffa6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ffaa:	2300      	movs	r3, #0
 800ffac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ffb0:	e7f7      	b.n	800ffa2 <_Balloc+0x66>
 800ffb2:	bf00      	nop
 800ffb4:	0801289e 	.word	0x0801289e
 800ffb8:	08012a00 	.word	0x08012a00

0800ffbc <_Bfree>:
 800ffbc:	b570      	push	{r4, r5, r6, lr}
 800ffbe:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ffc0:	4605      	mov	r5, r0
 800ffc2:	460c      	mov	r4, r1
 800ffc4:	b976      	cbnz	r6, 800ffe4 <_Bfree+0x28>
 800ffc6:	2010      	movs	r0, #16
 800ffc8:	f7ff ff9e 	bl	800ff08 <malloc>
 800ffcc:	4602      	mov	r2, r0
 800ffce:	6268      	str	r0, [r5, #36]	; 0x24
 800ffd0:	b920      	cbnz	r0, 800ffdc <_Bfree+0x20>
 800ffd2:	4b09      	ldr	r3, [pc, #36]	; (800fff8 <_Bfree+0x3c>)
 800ffd4:	4809      	ldr	r0, [pc, #36]	; (800fffc <_Bfree+0x40>)
 800ffd6:	218a      	movs	r1, #138	; 0x8a
 800ffd8:	f000 ff50 	bl	8010e7c <__assert_func>
 800ffdc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ffe0:	6006      	str	r6, [r0, #0]
 800ffe2:	60c6      	str	r6, [r0, #12]
 800ffe4:	b13c      	cbz	r4, 800fff6 <_Bfree+0x3a>
 800ffe6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ffe8:	6862      	ldr	r2, [r4, #4]
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fff0:	6021      	str	r1, [r4, #0]
 800fff2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fff6:	bd70      	pop	{r4, r5, r6, pc}
 800fff8:	0801289e 	.word	0x0801289e
 800fffc:	08012a00 	.word	0x08012a00

08010000 <__multadd>:
 8010000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010004:	690d      	ldr	r5, [r1, #16]
 8010006:	4607      	mov	r7, r0
 8010008:	460c      	mov	r4, r1
 801000a:	461e      	mov	r6, r3
 801000c:	f101 0c14 	add.w	ip, r1, #20
 8010010:	2000      	movs	r0, #0
 8010012:	f8dc 3000 	ldr.w	r3, [ip]
 8010016:	b299      	uxth	r1, r3
 8010018:	fb02 6101 	mla	r1, r2, r1, r6
 801001c:	0c1e      	lsrs	r6, r3, #16
 801001e:	0c0b      	lsrs	r3, r1, #16
 8010020:	fb02 3306 	mla	r3, r2, r6, r3
 8010024:	b289      	uxth	r1, r1
 8010026:	3001      	adds	r0, #1
 8010028:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801002c:	4285      	cmp	r5, r0
 801002e:	f84c 1b04 	str.w	r1, [ip], #4
 8010032:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010036:	dcec      	bgt.n	8010012 <__multadd+0x12>
 8010038:	b30e      	cbz	r6, 801007e <__multadd+0x7e>
 801003a:	68a3      	ldr	r3, [r4, #8]
 801003c:	42ab      	cmp	r3, r5
 801003e:	dc19      	bgt.n	8010074 <__multadd+0x74>
 8010040:	6861      	ldr	r1, [r4, #4]
 8010042:	4638      	mov	r0, r7
 8010044:	3101      	adds	r1, #1
 8010046:	f7ff ff79 	bl	800ff3c <_Balloc>
 801004a:	4680      	mov	r8, r0
 801004c:	b928      	cbnz	r0, 801005a <__multadd+0x5a>
 801004e:	4602      	mov	r2, r0
 8010050:	4b0c      	ldr	r3, [pc, #48]	; (8010084 <__multadd+0x84>)
 8010052:	480d      	ldr	r0, [pc, #52]	; (8010088 <__multadd+0x88>)
 8010054:	21b5      	movs	r1, #181	; 0xb5
 8010056:	f000 ff11 	bl	8010e7c <__assert_func>
 801005a:	6922      	ldr	r2, [r4, #16]
 801005c:	3202      	adds	r2, #2
 801005e:	f104 010c 	add.w	r1, r4, #12
 8010062:	0092      	lsls	r2, r2, #2
 8010064:	300c      	adds	r0, #12
 8010066:	f7fc fe9d 	bl	800cda4 <memcpy>
 801006a:	4621      	mov	r1, r4
 801006c:	4638      	mov	r0, r7
 801006e:	f7ff ffa5 	bl	800ffbc <_Bfree>
 8010072:	4644      	mov	r4, r8
 8010074:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010078:	3501      	adds	r5, #1
 801007a:	615e      	str	r6, [r3, #20]
 801007c:	6125      	str	r5, [r4, #16]
 801007e:	4620      	mov	r0, r4
 8010080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010084:	08012910 	.word	0x08012910
 8010088:	08012a00 	.word	0x08012a00

0801008c <__s2b>:
 801008c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010090:	460c      	mov	r4, r1
 8010092:	4615      	mov	r5, r2
 8010094:	461f      	mov	r7, r3
 8010096:	2209      	movs	r2, #9
 8010098:	3308      	adds	r3, #8
 801009a:	4606      	mov	r6, r0
 801009c:	fb93 f3f2 	sdiv	r3, r3, r2
 80100a0:	2100      	movs	r1, #0
 80100a2:	2201      	movs	r2, #1
 80100a4:	429a      	cmp	r2, r3
 80100a6:	db09      	blt.n	80100bc <__s2b+0x30>
 80100a8:	4630      	mov	r0, r6
 80100aa:	f7ff ff47 	bl	800ff3c <_Balloc>
 80100ae:	b940      	cbnz	r0, 80100c2 <__s2b+0x36>
 80100b0:	4602      	mov	r2, r0
 80100b2:	4b19      	ldr	r3, [pc, #100]	; (8010118 <__s2b+0x8c>)
 80100b4:	4819      	ldr	r0, [pc, #100]	; (801011c <__s2b+0x90>)
 80100b6:	21ce      	movs	r1, #206	; 0xce
 80100b8:	f000 fee0 	bl	8010e7c <__assert_func>
 80100bc:	0052      	lsls	r2, r2, #1
 80100be:	3101      	adds	r1, #1
 80100c0:	e7f0      	b.n	80100a4 <__s2b+0x18>
 80100c2:	9b08      	ldr	r3, [sp, #32]
 80100c4:	6143      	str	r3, [r0, #20]
 80100c6:	2d09      	cmp	r5, #9
 80100c8:	f04f 0301 	mov.w	r3, #1
 80100cc:	6103      	str	r3, [r0, #16]
 80100ce:	dd16      	ble.n	80100fe <__s2b+0x72>
 80100d0:	f104 0909 	add.w	r9, r4, #9
 80100d4:	46c8      	mov	r8, r9
 80100d6:	442c      	add	r4, r5
 80100d8:	f818 3b01 	ldrb.w	r3, [r8], #1
 80100dc:	4601      	mov	r1, r0
 80100de:	3b30      	subs	r3, #48	; 0x30
 80100e0:	220a      	movs	r2, #10
 80100e2:	4630      	mov	r0, r6
 80100e4:	f7ff ff8c 	bl	8010000 <__multadd>
 80100e8:	45a0      	cmp	r8, r4
 80100ea:	d1f5      	bne.n	80100d8 <__s2b+0x4c>
 80100ec:	f1a5 0408 	sub.w	r4, r5, #8
 80100f0:	444c      	add	r4, r9
 80100f2:	1b2d      	subs	r5, r5, r4
 80100f4:	1963      	adds	r3, r4, r5
 80100f6:	42bb      	cmp	r3, r7
 80100f8:	db04      	blt.n	8010104 <__s2b+0x78>
 80100fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80100fe:	340a      	adds	r4, #10
 8010100:	2509      	movs	r5, #9
 8010102:	e7f6      	b.n	80100f2 <__s2b+0x66>
 8010104:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010108:	4601      	mov	r1, r0
 801010a:	3b30      	subs	r3, #48	; 0x30
 801010c:	220a      	movs	r2, #10
 801010e:	4630      	mov	r0, r6
 8010110:	f7ff ff76 	bl	8010000 <__multadd>
 8010114:	e7ee      	b.n	80100f4 <__s2b+0x68>
 8010116:	bf00      	nop
 8010118:	08012910 	.word	0x08012910
 801011c:	08012a00 	.word	0x08012a00

08010120 <__hi0bits>:
 8010120:	0c03      	lsrs	r3, r0, #16
 8010122:	041b      	lsls	r3, r3, #16
 8010124:	b9d3      	cbnz	r3, 801015c <__hi0bits+0x3c>
 8010126:	0400      	lsls	r0, r0, #16
 8010128:	2310      	movs	r3, #16
 801012a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801012e:	bf04      	itt	eq
 8010130:	0200      	lsleq	r0, r0, #8
 8010132:	3308      	addeq	r3, #8
 8010134:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8010138:	bf04      	itt	eq
 801013a:	0100      	lsleq	r0, r0, #4
 801013c:	3304      	addeq	r3, #4
 801013e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8010142:	bf04      	itt	eq
 8010144:	0080      	lsleq	r0, r0, #2
 8010146:	3302      	addeq	r3, #2
 8010148:	2800      	cmp	r0, #0
 801014a:	db05      	blt.n	8010158 <__hi0bits+0x38>
 801014c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8010150:	f103 0301 	add.w	r3, r3, #1
 8010154:	bf08      	it	eq
 8010156:	2320      	moveq	r3, #32
 8010158:	4618      	mov	r0, r3
 801015a:	4770      	bx	lr
 801015c:	2300      	movs	r3, #0
 801015e:	e7e4      	b.n	801012a <__hi0bits+0xa>

08010160 <__lo0bits>:
 8010160:	6803      	ldr	r3, [r0, #0]
 8010162:	f013 0207 	ands.w	r2, r3, #7
 8010166:	4601      	mov	r1, r0
 8010168:	d00b      	beq.n	8010182 <__lo0bits+0x22>
 801016a:	07da      	lsls	r2, r3, #31
 801016c:	d423      	bmi.n	80101b6 <__lo0bits+0x56>
 801016e:	0798      	lsls	r0, r3, #30
 8010170:	bf49      	itett	mi
 8010172:	085b      	lsrmi	r3, r3, #1
 8010174:	089b      	lsrpl	r3, r3, #2
 8010176:	2001      	movmi	r0, #1
 8010178:	600b      	strmi	r3, [r1, #0]
 801017a:	bf5c      	itt	pl
 801017c:	600b      	strpl	r3, [r1, #0]
 801017e:	2002      	movpl	r0, #2
 8010180:	4770      	bx	lr
 8010182:	b298      	uxth	r0, r3
 8010184:	b9a8      	cbnz	r0, 80101b2 <__lo0bits+0x52>
 8010186:	0c1b      	lsrs	r3, r3, #16
 8010188:	2010      	movs	r0, #16
 801018a:	b2da      	uxtb	r2, r3
 801018c:	b90a      	cbnz	r2, 8010192 <__lo0bits+0x32>
 801018e:	3008      	adds	r0, #8
 8010190:	0a1b      	lsrs	r3, r3, #8
 8010192:	071a      	lsls	r2, r3, #28
 8010194:	bf04      	itt	eq
 8010196:	091b      	lsreq	r3, r3, #4
 8010198:	3004      	addeq	r0, #4
 801019a:	079a      	lsls	r2, r3, #30
 801019c:	bf04      	itt	eq
 801019e:	089b      	lsreq	r3, r3, #2
 80101a0:	3002      	addeq	r0, #2
 80101a2:	07da      	lsls	r2, r3, #31
 80101a4:	d403      	bmi.n	80101ae <__lo0bits+0x4e>
 80101a6:	085b      	lsrs	r3, r3, #1
 80101a8:	f100 0001 	add.w	r0, r0, #1
 80101ac:	d005      	beq.n	80101ba <__lo0bits+0x5a>
 80101ae:	600b      	str	r3, [r1, #0]
 80101b0:	4770      	bx	lr
 80101b2:	4610      	mov	r0, r2
 80101b4:	e7e9      	b.n	801018a <__lo0bits+0x2a>
 80101b6:	2000      	movs	r0, #0
 80101b8:	4770      	bx	lr
 80101ba:	2020      	movs	r0, #32
 80101bc:	4770      	bx	lr
	...

080101c0 <__i2b>:
 80101c0:	b510      	push	{r4, lr}
 80101c2:	460c      	mov	r4, r1
 80101c4:	2101      	movs	r1, #1
 80101c6:	f7ff feb9 	bl	800ff3c <_Balloc>
 80101ca:	4602      	mov	r2, r0
 80101cc:	b928      	cbnz	r0, 80101da <__i2b+0x1a>
 80101ce:	4b05      	ldr	r3, [pc, #20]	; (80101e4 <__i2b+0x24>)
 80101d0:	4805      	ldr	r0, [pc, #20]	; (80101e8 <__i2b+0x28>)
 80101d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80101d6:	f000 fe51 	bl	8010e7c <__assert_func>
 80101da:	2301      	movs	r3, #1
 80101dc:	6144      	str	r4, [r0, #20]
 80101de:	6103      	str	r3, [r0, #16]
 80101e0:	bd10      	pop	{r4, pc}
 80101e2:	bf00      	nop
 80101e4:	08012910 	.word	0x08012910
 80101e8:	08012a00 	.word	0x08012a00

080101ec <__multiply>:
 80101ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101f0:	4691      	mov	r9, r2
 80101f2:	690a      	ldr	r2, [r1, #16]
 80101f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	bfb8      	it	lt
 80101fc:	460b      	movlt	r3, r1
 80101fe:	460c      	mov	r4, r1
 8010200:	bfbc      	itt	lt
 8010202:	464c      	movlt	r4, r9
 8010204:	4699      	movlt	r9, r3
 8010206:	6927      	ldr	r7, [r4, #16]
 8010208:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801020c:	68a3      	ldr	r3, [r4, #8]
 801020e:	6861      	ldr	r1, [r4, #4]
 8010210:	eb07 060a 	add.w	r6, r7, sl
 8010214:	42b3      	cmp	r3, r6
 8010216:	b085      	sub	sp, #20
 8010218:	bfb8      	it	lt
 801021a:	3101      	addlt	r1, #1
 801021c:	f7ff fe8e 	bl	800ff3c <_Balloc>
 8010220:	b930      	cbnz	r0, 8010230 <__multiply+0x44>
 8010222:	4602      	mov	r2, r0
 8010224:	4b44      	ldr	r3, [pc, #272]	; (8010338 <__multiply+0x14c>)
 8010226:	4845      	ldr	r0, [pc, #276]	; (801033c <__multiply+0x150>)
 8010228:	f240 115d 	movw	r1, #349	; 0x15d
 801022c:	f000 fe26 	bl	8010e7c <__assert_func>
 8010230:	f100 0514 	add.w	r5, r0, #20
 8010234:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8010238:	462b      	mov	r3, r5
 801023a:	2200      	movs	r2, #0
 801023c:	4543      	cmp	r3, r8
 801023e:	d321      	bcc.n	8010284 <__multiply+0x98>
 8010240:	f104 0314 	add.w	r3, r4, #20
 8010244:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8010248:	f109 0314 	add.w	r3, r9, #20
 801024c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8010250:	9202      	str	r2, [sp, #8]
 8010252:	1b3a      	subs	r2, r7, r4
 8010254:	3a15      	subs	r2, #21
 8010256:	f022 0203 	bic.w	r2, r2, #3
 801025a:	3204      	adds	r2, #4
 801025c:	f104 0115 	add.w	r1, r4, #21
 8010260:	428f      	cmp	r7, r1
 8010262:	bf38      	it	cc
 8010264:	2204      	movcc	r2, #4
 8010266:	9201      	str	r2, [sp, #4]
 8010268:	9a02      	ldr	r2, [sp, #8]
 801026a:	9303      	str	r3, [sp, #12]
 801026c:	429a      	cmp	r2, r3
 801026e:	d80c      	bhi.n	801028a <__multiply+0x9e>
 8010270:	2e00      	cmp	r6, #0
 8010272:	dd03      	ble.n	801027c <__multiply+0x90>
 8010274:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8010278:	2b00      	cmp	r3, #0
 801027a:	d05a      	beq.n	8010332 <__multiply+0x146>
 801027c:	6106      	str	r6, [r0, #16]
 801027e:	b005      	add	sp, #20
 8010280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010284:	f843 2b04 	str.w	r2, [r3], #4
 8010288:	e7d8      	b.n	801023c <__multiply+0x50>
 801028a:	f8b3 a000 	ldrh.w	sl, [r3]
 801028e:	f1ba 0f00 	cmp.w	sl, #0
 8010292:	d024      	beq.n	80102de <__multiply+0xf2>
 8010294:	f104 0e14 	add.w	lr, r4, #20
 8010298:	46a9      	mov	r9, r5
 801029a:	f04f 0c00 	mov.w	ip, #0
 801029e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80102a2:	f8d9 1000 	ldr.w	r1, [r9]
 80102a6:	fa1f fb82 	uxth.w	fp, r2
 80102aa:	b289      	uxth	r1, r1
 80102ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80102b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80102b4:	f8d9 2000 	ldr.w	r2, [r9]
 80102b8:	4461      	add	r1, ip
 80102ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102be:	fb0a c20b 	mla	r2, sl, fp, ip
 80102c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80102c6:	b289      	uxth	r1, r1
 80102c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80102cc:	4577      	cmp	r7, lr
 80102ce:	f849 1b04 	str.w	r1, [r9], #4
 80102d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80102d6:	d8e2      	bhi.n	801029e <__multiply+0xb2>
 80102d8:	9a01      	ldr	r2, [sp, #4]
 80102da:	f845 c002 	str.w	ip, [r5, r2]
 80102de:	9a03      	ldr	r2, [sp, #12]
 80102e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80102e4:	3304      	adds	r3, #4
 80102e6:	f1b9 0f00 	cmp.w	r9, #0
 80102ea:	d020      	beq.n	801032e <__multiply+0x142>
 80102ec:	6829      	ldr	r1, [r5, #0]
 80102ee:	f104 0c14 	add.w	ip, r4, #20
 80102f2:	46ae      	mov	lr, r5
 80102f4:	f04f 0a00 	mov.w	sl, #0
 80102f8:	f8bc b000 	ldrh.w	fp, [ip]
 80102fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8010300:	fb09 220b 	mla	r2, r9, fp, r2
 8010304:	4492      	add	sl, r2
 8010306:	b289      	uxth	r1, r1
 8010308:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801030c:	f84e 1b04 	str.w	r1, [lr], #4
 8010310:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010314:	f8be 1000 	ldrh.w	r1, [lr]
 8010318:	0c12      	lsrs	r2, r2, #16
 801031a:	fb09 1102 	mla	r1, r9, r2, r1
 801031e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8010322:	4567      	cmp	r7, ip
 8010324:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8010328:	d8e6      	bhi.n	80102f8 <__multiply+0x10c>
 801032a:	9a01      	ldr	r2, [sp, #4]
 801032c:	50a9      	str	r1, [r5, r2]
 801032e:	3504      	adds	r5, #4
 8010330:	e79a      	b.n	8010268 <__multiply+0x7c>
 8010332:	3e01      	subs	r6, #1
 8010334:	e79c      	b.n	8010270 <__multiply+0x84>
 8010336:	bf00      	nop
 8010338:	08012910 	.word	0x08012910
 801033c:	08012a00 	.word	0x08012a00

08010340 <__pow5mult>:
 8010340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010344:	4615      	mov	r5, r2
 8010346:	f012 0203 	ands.w	r2, r2, #3
 801034a:	4606      	mov	r6, r0
 801034c:	460f      	mov	r7, r1
 801034e:	d007      	beq.n	8010360 <__pow5mult+0x20>
 8010350:	4c25      	ldr	r4, [pc, #148]	; (80103e8 <__pow5mult+0xa8>)
 8010352:	3a01      	subs	r2, #1
 8010354:	2300      	movs	r3, #0
 8010356:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801035a:	f7ff fe51 	bl	8010000 <__multadd>
 801035e:	4607      	mov	r7, r0
 8010360:	10ad      	asrs	r5, r5, #2
 8010362:	d03d      	beq.n	80103e0 <__pow5mult+0xa0>
 8010364:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010366:	b97c      	cbnz	r4, 8010388 <__pow5mult+0x48>
 8010368:	2010      	movs	r0, #16
 801036a:	f7ff fdcd 	bl	800ff08 <malloc>
 801036e:	4602      	mov	r2, r0
 8010370:	6270      	str	r0, [r6, #36]	; 0x24
 8010372:	b928      	cbnz	r0, 8010380 <__pow5mult+0x40>
 8010374:	4b1d      	ldr	r3, [pc, #116]	; (80103ec <__pow5mult+0xac>)
 8010376:	481e      	ldr	r0, [pc, #120]	; (80103f0 <__pow5mult+0xb0>)
 8010378:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801037c:	f000 fd7e 	bl	8010e7c <__assert_func>
 8010380:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010384:	6004      	str	r4, [r0, #0]
 8010386:	60c4      	str	r4, [r0, #12]
 8010388:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801038c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010390:	b94c      	cbnz	r4, 80103a6 <__pow5mult+0x66>
 8010392:	f240 2171 	movw	r1, #625	; 0x271
 8010396:	4630      	mov	r0, r6
 8010398:	f7ff ff12 	bl	80101c0 <__i2b>
 801039c:	2300      	movs	r3, #0
 801039e:	f8c8 0008 	str.w	r0, [r8, #8]
 80103a2:	4604      	mov	r4, r0
 80103a4:	6003      	str	r3, [r0, #0]
 80103a6:	f04f 0900 	mov.w	r9, #0
 80103aa:	07eb      	lsls	r3, r5, #31
 80103ac:	d50a      	bpl.n	80103c4 <__pow5mult+0x84>
 80103ae:	4639      	mov	r1, r7
 80103b0:	4622      	mov	r2, r4
 80103b2:	4630      	mov	r0, r6
 80103b4:	f7ff ff1a 	bl	80101ec <__multiply>
 80103b8:	4639      	mov	r1, r7
 80103ba:	4680      	mov	r8, r0
 80103bc:	4630      	mov	r0, r6
 80103be:	f7ff fdfd 	bl	800ffbc <_Bfree>
 80103c2:	4647      	mov	r7, r8
 80103c4:	106d      	asrs	r5, r5, #1
 80103c6:	d00b      	beq.n	80103e0 <__pow5mult+0xa0>
 80103c8:	6820      	ldr	r0, [r4, #0]
 80103ca:	b938      	cbnz	r0, 80103dc <__pow5mult+0x9c>
 80103cc:	4622      	mov	r2, r4
 80103ce:	4621      	mov	r1, r4
 80103d0:	4630      	mov	r0, r6
 80103d2:	f7ff ff0b 	bl	80101ec <__multiply>
 80103d6:	6020      	str	r0, [r4, #0]
 80103d8:	f8c0 9000 	str.w	r9, [r0]
 80103dc:	4604      	mov	r4, r0
 80103de:	e7e4      	b.n	80103aa <__pow5mult+0x6a>
 80103e0:	4638      	mov	r0, r7
 80103e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80103e6:	bf00      	nop
 80103e8:	08012b50 	.word	0x08012b50
 80103ec:	0801289e 	.word	0x0801289e
 80103f0:	08012a00 	.word	0x08012a00

080103f4 <__lshift>:
 80103f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103f8:	460c      	mov	r4, r1
 80103fa:	6849      	ldr	r1, [r1, #4]
 80103fc:	6923      	ldr	r3, [r4, #16]
 80103fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010402:	68a3      	ldr	r3, [r4, #8]
 8010404:	4607      	mov	r7, r0
 8010406:	4691      	mov	r9, r2
 8010408:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801040c:	f108 0601 	add.w	r6, r8, #1
 8010410:	42b3      	cmp	r3, r6
 8010412:	db0b      	blt.n	801042c <__lshift+0x38>
 8010414:	4638      	mov	r0, r7
 8010416:	f7ff fd91 	bl	800ff3c <_Balloc>
 801041a:	4605      	mov	r5, r0
 801041c:	b948      	cbnz	r0, 8010432 <__lshift+0x3e>
 801041e:	4602      	mov	r2, r0
 8010420:	4b2a      	ldr	r3, [pc, #168]	; (80104cc <__lshift+0xd8>)
 8010422:	482b      	ldr	r0, [pc, #172]	; (80104d0 <__lshift+0xdc>)
 8010424:	f240 11d9 	movw	r1, #473	; 0x1d9
 8010428:	f000 fd28 	bl	8010e7c <__assert_func>
 801042c:	3101      	adds	r1, #1
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	e7ee      	b.n	8010410 <__lshift+0x1c>
 8010432:	2300      	movs	r3, #0
 8010434:	f100 0114 	add.w	r1, r0, #20
 8010438:	f100 0210 	add.w	r2, r0, #16
 801043c:	4618      	mov	r0, r3
 801043e:	4553      	cmp	r3, sl
 8010440:	db37      	blt.n	80104b2 <__lshift+0xbe>
 8010442:	6920      	ldr	r0, [r4, #16]
 8010444:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010448:	f104 0314 	add.w	r3, r4, #20
 801044c:	f019 091f 	ands.w	r9, r9, #31
 8010450:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010454:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8010458:	d02f      	beq.n	80104ba <__lshift+0xc6>
 801045a:	f1c9 0e20 	rsb	lr, r9, #32
 801045e:	468a      	mov	sl, r1
 8010460:	f04f 0c00 	mov.w	ip, #0
 8010464:	681a      	ldr	r2, [r3, #0]
 8010466:	fa02 f209 	lsl.w	r2, r2, r9
 801046a:	ea42 020c 	orr.w	r2, r2, ip
 801046e:	f84a 2b04 	str.w	r2, [sl], #4
 8010472:	f853 2b04 	ldr.w	r2, [r3], #4
 8010476:	4298      	cmp	r0, r3
 8010478:	fa22 fc0e 	lsr.w	ip, r2, lr
 801047c:	d8f2      	bhi.n	8010464 <__lshift+0x70>
 801047e:	1b03      	subs	r3, r0, r4
 8010480:	3b15      	subs	r3, #21
 8010482:	f023 0303 	bic.w	r3, r3, #3
 8010486:	3304      	adds	r3, #4
 8010488:	f104 0215 	add.w	r2, r4, #21
 801048c:	4290      	cmp	r0, r2
 801048e:	bf38      	it	cc
 8010490:	2304      	movcc	r3, #4
 8010492:	f841 c003 	str.w	ip, [r1, r3]
 8010496:	f1bc 0f00 	cmp.w	ip, #0
 801049a:	d001      	beq.n	80104a0 <__lshift+0xac>
 801049c:	f108 0602 	add.w	r6, r8, #2
 80104a0:	3e01      	subs	r6, #1
 80104a2:	4638      	mov	r0, r7
 80104a4:	612e      	str	r6, [r5, #16]
 80104a6:	4621      	mov	r1, r4
 80104a8:	f7ff fd88 	bl	800ffbc <_Bfree>
 80104ac:	4628      	mov	r0, r5
 80104ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80104b6:	3301      	adds	r3, #1
 80104b8:	e7c1      	b.n	801043e <__lshift+0x4a>
 80104ba:	3904      	subs	r1, #4
 80104bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80104c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80104c4:	4298      	cmp	r0, r3
 80104c6:	d8f9      	bhi.n	80104bc <__lshift+0xc8>
 80104c8:	e7ea      	b.n	80104a0 <__lshift+0xac>
 80104ca:	bf00      	nop
 80104cc:	08012910 	.word	0x08012910
 80104d0:	08012a00 	.word	0x08012a00

080104d4 <__mcmp>:
 80104d4:	b530      	push	{r4, r5, lr}
 80104d6:	6902      	ldr	r2, [r0, #16]
 80104d8:	690c      	ldr	r4, [r1, #16]
 80104da:	1b12      	subs	r2, r2, r4
 80104dc:	d10e      	bne.n	80104fc <__mcmp+0x28>
 80104de:	f100 0314 	add.w	r3, r0, #20
 80104e2:	3114      	adds	r1, #20
 80104e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80104e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80104ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80104f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80104f4:	42a5      	cmp	r5, r4
 80104f6:	d003      	beq.n	8010500 <__mcmp+0x2c>
 80104f8:	d305      	bcc.n	8010506 <__mcmp+0x32>
 80104fa:	2201      	movs	r2, #1
 80104fc:	4610      	mov	r0, r2
 80104fe:	bd30      	pop	{r4, r5, pc}
 8010500:	4283      	cmp	r3, r0
 8010502:	d3f3      	bcc.n	80104ec <__mcmp+0x18>
 8010504:	e7fa      	b.n	80104fc <__mcmp+0x28>
 8010506:	f04f 32ff 	mov.w	r2, #4294967295
 801050a:	e7f7      	b.n	80104fc <__mcmp+0x28>

0801050c <__mdiff>:
 801050c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010510:	460c      	mov	r4, r1
 8010512:	4606      	mov	r6, r0
 8010514:	4611      	mov	r1, r2
 8010516:	4620      	mov	r0, r4
 8010518:	4690      	mov	r8, r2
 801051a:	f7ff ffdb 	bl	80104d4 <__mcmp>
 801051e:	1e05      	subs	r5, r0, #0
 8010520:	d110      	bne.n	8010544 <__mdiff+0x38>
 8010522:	4629      	mov	r1, r5
 8010524:	4630      	mov	r0, r6
 8010526:	f7ff fd09 	bl	800ff3c <_Balloc>
 801052a:	b930      	cbnz	r0, 801053a <__mdiff+0x2e>
 801052c:	4b3a      	ldr	r3, [pc, #232]	; (8010618 <__mdiff+0x10c>)
 801052e:	4602      	mov	r2, r0
 8010530:	f240 2132 	movw	r1, #562	; 0x232
 8010534:	4839      	ldr	r0, [pc, #228]	; (801061c <__mdiff+0x110>)
 8010536:	f000 fca1 	bl	8010e7c <__assert_func>
 801053a:	2301      	movs	r3, #1
 801053c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010540:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010544:	bfa4      	itt	ge
 8010546:	4643      	movge	r3, r8
 8010548:	46a0      	movge	r8, r4
 801054a:	4630      	mov	r0, r6
 801054c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010550:	bfa6      	itte	ge
 8010552:	461c      	movge	r4, r3
 8010554:	2500      	movge	r5, #0
 8010556:	2501      	movlt	r5, #1
 8010558:	f7ff fcf0 	bl	800ff3c <_Balloc>
 801055c:	b920      	cbnz	r0, 8010568 <__mdiff+0x5c>
 801055e:	4b2e      	ldr	r3, [pc, #184]	; (8010618 <__mdiff+0x10c>)
 8010560:	4602      	mov	r2, r0
 8010562:	f44f 7110 	mov.w	r1, #576	; 0x240
 8010566:	e7e5      	b.n	8010534 <__mdiff+0x28>
 8010568:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801056c:	6926      	ldr	r6, [r4, #16]
 801056e:	60c5      	str	r5, [r0, #12]
 8010570:	f104 0914 	add.w	r9, r4, #20
 8010574:	f108 0514 	add.w	r5, r8, #20
 8010578:	f100 0e14 	add.w	lr, r0, #20
 801057c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8010580:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8010584:	f108 0210 	add.w	r2, r8, #16
 8010588:	46f2      	mov	sl, lr
 801058a:	2100      	movs	r1, #0
 801058c:	f859 3b04 	ldr.w	r3, [r9], #4
 8010590:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8010594:	fa1f f883 	uxth.w	r8, r3
 8010598:	fa11 f18b 	uxtah	r1, r1, fp
 801059c:	0c1b      	lsrs	r3, r3, #16
 801059e:	eba1 0808 	sub.w	r8, r1, r8
 80105a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80105a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80105aa:	fa1f f888 	uxth.w	r8, r8
 80105ae:	1419      	asrs	r1, r3, #16
 80105b0:	454e      	cmp	r6, r9
 80105b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80105b6:	f84a 3b04 	str.w	r3, [sl], #4
 80105ba:	d8e7      	bhi.n	801058c <__mdiff+0x80>
 80105bc:	1b33      	subs	r3, r6, r4
 80105be:	3b15      	subs	r3, #21
 80105c0:	f023 0303 	bic.w	r3, r3, #3
 80105c4:	3304      	adds	r3, #4
 80105c6:	3415      	adds	r4, #21
 80105c8:	42a6      	cmp	r6, r4
 80105ca:	bf38      	it	cc
 80105cc:	2304      	movcc	r3, #4
 80105ce:	441d      	add	r5, r3
 80105d0:	4473      	add	r3, lr
 80105d2:	469e      	mov	lr, r3
 80105d4:	462e      	mov	r6, r5
 80105d6:	4566      	cmp	r6, ip
 80105d8:	d30e      	bcc.n	80105f8 <__mdiff+0xec>
 80105da:	f10c 0203 	add.w	r2, ip, #3
 80105de:	1b52      	subs	r2, r2, r5
 80105e0:	f022 0203 	bic.w	r2, r2, #3
 80105e4:	3d03      	subs	r5, #3
 80105e6:	45ac      	cmp	ip, r5
 80105e8:	bf38      	it	cc
 80105ea:	2200      	movcc	r2, #0
 80105ec:	441a      	add	r2, r3
 80105ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80105f2:	b17b      	cbz	r3, 8010614 <__mdiff+0x108>
 80105f4:	6107      	str	r7, [r0, #16]
 80105f6:	e7a3      	b.n	8010540 <__mdiff+0x34>
 80105f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80105fc:	fa11 f288 	uxtah	r2, r1, r8
 8010600:	1414      	asrs	r4, r2, #16
 8010602:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8010606:	b292      	uxth	r2, r2
 8010608:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801060c:	f84e 2b04 	str.w	r2, [lr], #4
 8010610:	1421      	asrs	r1, r4, #16
 8010612:	e7e0      	b.n	80105d6 <__mdiff+0xca>
 8010614:	3f01      	subs	r7, #1
 8010616:	e7ea      	b.n	80105ee <__mdiff+0xe2>
 8010618:	08012910 	.word	0x08012910
 801061c:	08012a00 	.word	0x08012a00

08010620 <__ulp>:
 8010620:	b082      	sub	sp, #8
 8010622:	ed8d 0b00 	vstr	d0, [sp]
 8010626:	9b01      	ldr	r3, [sp, #4]
 8010628:	4912      	ldr	r1, [pc, #72]	; (8010674 <__ulp+0x54>)
 801062a:	4019      	ands	r1, r3
 801062c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8010630:	2900      	cmp	r1, #0
 8010632:	dd05      	ble.n	8010640 <__ulp+0x20>
 8010634:	2200      	movs	r2, #0
 8010636:	460b      	mov	r3, r1
 8010638:	ec43 2b10 	vmov	d0, r2, r3
 801063c:	b002      	add	sp, #8
 801063e:	4770      	bx	lr
 8010640:	4249      	negs	r1, r1
 8010642:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8010646:	ea4f 5021 	mov.w	r0, r1, asr #20
 801064a:	f04f 0200 	mov.w	r2, #0
 801064e:	f04f 0300 	mov.w	r3, #0
 8010652:	da04      	bge.n	801065e <__ulp+0x3e>
 8010654:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8010658:	fa41 f300 	asr.w	r3, r1, r0
 801065c:	e7ec      	b.n	8010638 <__ulp+0x18>
 801065e:	f1a0 0114 	sub.w	r1, r0, #20
 8010662:	291e      	cmp	r1, #30
 8010664:	bfda      	itte	le
 8010666:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801066a:	fa20 f101 	lsrle.w	r1, r0, r1
 801066e:	2101      	movgt	r1, #1
 8010670:	460a      	mov	r2, r1
 8010672:	e7e1      	b.n	8010638 <__ulp+0x18>
 8010674:	7ff00000 	.word	0x7ff00000

08010678 <__b2d>:
 8010678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801067a:	6905      	ldr	r5, [r0, #16]
 801067c:	f100 0714 	add.w	r7, r0, #20
 8010680:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010684:	1f2e      	subs	r6, r5, #4
 8010686:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801068a:	4620      	mov	r0, r4
 801068c:	f7ff fd48 	bl	8010120 <__hi0bits>
 8010690:	f1c0 0320 	rsb	r3, r0, #32
 8010694:	280a      	cmp	r0, #10
 8010696:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8010714 <__b2d+0x9c>
 801069a:	600b      	str	r3, [r1, #0]
 801069c:	dc14      	bgt.n	80106c8 <__b2d+0x50>
 801069e:	f1c0 0e0b 	rsb	lr, r0, #11
 80106a2:	fa24 f10e 	lsr.w	r1, r4, lr
 80106a6:	42b7      	cmp	r7, r6
 80106a8:	ea41 030c 	orr.w	r3, r1, ip
 80106ac:	bf34      	ite	cc
 80106ae:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80106b2:	2100      	movcs	r1, #0
 80106b4:	3015      	adds	r0, #21
 80106b6:	fa04 f000 	lsl.w	r0, r4, r0
 80106ba:	fa21 f10e 	lsr.w	r1, r1, lr
 80106be:	ea40 0201 	orr.w	r2, r0, r1
 80106c2:	ec43 2b10 	vmov	d0, r2, r3
 80106c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c8:	42b7      	cmp	r7, r6
 80106ca:	bf3a      	itte	cc
 80106cc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80106d0:	f1a5 0608 	subcc.w	r6, r5, #8
 80106d4:	2100      	movcs	r1, #0
 80106d6:	380b      	subs	r0, #11
 80106d8:	d017      	beq.n	801070a <__b2d+0x92>
 80106da:	f1c0 0c20 	rsb	ip, r0, #32
 80106de:	fa04 f500 	lsl.w	r5, r4, r0
 80106e2:	42be      	cmp	r6, r7
 80106e4:	fa21 f40c 	lsr.w	r4, r1, ip
 80106e8:	ea45 0504 	orr.w	r5, r5, r4
 80106ec:	bf8c      	ite	hi
 80106ee:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80106f2:	2400      	movls	r4, #0
 80106f4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 80106f8:	fa01 f000 	lsl.w	r0, r1, r0
 80106fc:	fa24 f40c 	lsr.w	r4, r4, ip
 8010700:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8010704:	ea40 0204 	orr.w	r2, r0, r4
 8010708:	e7db      	b.n	80106c2 <__b2d+0x4a>
 801070a:	ea44 030c 	orr.w	r3, r4, ip
 801070e:	460a      	mov	r2, r1
 8010710:	e7d7      	b.n	80106c2 <__b2d+0x4a>
 8010712:	bf00      	nop
 8010714:	3ff00000 	.word	0x3ff00000

08010718 <__d2b>:
 8010718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801071c:	4689      	mov	r9, r1
 801071e:	2101      	movs	r1, #1
 8010720:	ec57 6b10 	vmov	r6, r7, d0
 8010724:	4690      	mov	r8, r2
 8010726:	f7ff fc09 	bl	800ff3c <_Balloc>
 801072a:	4604      	mov	r4, r0
 801072c:	b930      	cbnz	r0, 801073c <__d2b+0x24>
 801072e:	4602      	mov	r2, r0
 8010730:	4b25      	ldr	r3, [pc, #148]	; (80107c8 <__d2b+0xb0>)
 8010732:	4826      	ldr	r0, [pc, #152]	; (80107cc <__d2b+0xb4>)
 8010734:	f240 310a 	movw	r1, #778	; 0x30a
 8010738:	f000 fba0 	bl	8010e7c <__assert_func>
 801073c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8010740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8010744:	bb35      	cbnz	r5, 8010794 <__d2b+0x7c>
 8010746:	2e00      	cmp	r6, #0
 8010748:	9301      	str	r3, [sp, #4]
 801074a:	d028      	beq.n	801079e <__d2b+0x86>
 801074c:	4668      	mov	r0, sp
 801074e:	9600      	str	r6, [sp, #0]
 8010750:	f7ff fd06 	bl	8010160 <__lo0bits>
 8010754:	9900      	ldr	r1, [sp, #0]
 8010756:	b300      	cbz	r0, 801079a <__d2b+0x82>
 8010758:	9a01      	ldr	r2, [sp, #4]
 801075a:	f1c0 0320 	rsb	r3, r0, #32
 801075e:	fa02 f303 	lsl.w	r3, r2, r3
 8010762:	430b      	orrs	r3, r1
 8010764:	40c2      	lsrs	r2, r0
 8010766:	6163      	str	r3, [r4, #20]
 8010768:	9201      	str	r2, [sp, #4]
 801076a:	9b01      	ldr	r3, [sp, #4]
 801076c:	61a3      	str	r3, [r4, #24]
 801076e:	2b00      	cmp	r3, #0
 8010770:	bf14      	ite	ne
 8010772:	2202      	movne	r2, #2
 8010774:	2201      	moveq	r2, #1
 8010776:	6122      	str	r2, [r4, #16]
 8010778:	b1d5      	cbz	r5, 80107b0 <__d2b+0x98>
 801077a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801077e:	4405      	add	r5, r0
 8010780:	f8c9 5000 	str.w	r5, [r9]
 8010784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010788:	f8c8 0000 	str.w	r0, [r8]
 801078c:	4620      	mov	r0, r4
 801078e:	b003      	add	sp, #12
 8010790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010798:	e7d5      	b.n	8010746 <__d2b+0x2e>
 801079a:	6161      	str	r1, [r4, #20]
 801079c:	e7e5      	b.n	801076a <__d2b+0x52>
 801079e:	a801      	add	r0, sp, #4
 80107a0:	f7ff fcde 	bl	8010160 <__lo0bits>
 80107a4:	9b01      	ldr	r3, [sp, #4]
 80107a6:	6163      	str	r3, [r4, #20]
 80107a8:	2201      	movs	r2, #1
 80107aa:	6122      	str	r2, [r4, #16]
 80107ac:	3020      	adds	r0, #32
 80107ae:	e7e3      	b.n	8010778 <__d2b+0x60>
 80107b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80107b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80107b8:	f8c9 0000 	str.w	r0, [r9]
 80107bc:	6918      	ldr	r0, [r3, #16]
 80107be:	f7ff fcaf 	bl	8010120 <__hi0bits>
 80107c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80107c6:	e7df      	b.n	8010788 <__d2b+0x70>
 80107c8:	08012910 	.word	0x08012910
 80107cc:	08012a00 	.word	0x08012a00

080107d0 <__ratio>:
 80107d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107d4:	4688      	mov	r8, r1
 80107d6:	4669      	mov	r1, sp
 80107d8:	4681      	mov	r9, r0
 80107da:	f7ff ff4d 	bl	8010678 <__b2d>
 80107de:	a901      	add	r1, sp, #4
 80107e0:	4640      	mov	r0, r8
 80107e2:	ec55 4b10 	vmov	r4, r5, d0
 80107e6:	f7ff ff47 	bl	8010678 <__b2d>
 80107ea:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80107ee:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80107f2:	eba3 0c02 	sub.w	ip, r3, r2
 80107f6:	e9dd 3200 	ldrd	r3, r2, [sp]
 80107fa:	1a9b      	subs	r3, r3, r2
 80107fc:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8010800:	ec51 0b10 	vmov	r0, r1, d0
 8010804:	2b00      	cmp	r3, #0
 8010806:	bfd6      	itet	le
 8010808:	460a      	movle	r2, r1
 801080a:	462a      	movgt	r2, r5
 801080c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010810:	468b      	mov	fp, r1
 8010812:	462f      	mov	r7, r5
 8010814:	bfd4      	ite	le
 8010816:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 801081a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 801081e:	4620      	mov	r0, r4
 8010820:	ee10 2a10 	vmov	r2, s0
 8010824:	465b      	mov	r3, fp
 8010826:	4639      	mov	r1, r7
 8010828:	f7f0 f838 	bl	800089c <__aeabi_ddiv>
 801082c:	ec41 0b10 	vmov	d0, r0, r1
 8010830:	b003      	add	sp, #12
 8010832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010836 <__copybits>:
 8010836:	3901      	subs	r1, #1
 8010838:	b570      	push	{r4, r5, r6, lr}
 801083a:	1149      	asrs	r1, r1, #5
 801083c:	6914      	ldr	r4, [r2, #16]
 801083e:	3101      	adds	r1, #1
 8010840:	f102 0314 	add.w	r3, r2, #20
 8010844:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8010848:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801084c:	1f05      	subs	r5, r0, #4
 801084e:	42a3      	cmp	r3, r4
 8010850:	d30c      	bcc.n	801086c <__copybits+0x36>
 8010852:	1aa3      	subs	r3, r4, r2
 8010854:	3b11      	subs	r3, #17
 8010856:	f023 0303 	bic.w	r3, r3, #3
 801085a:	3211      	adds	r2, #17
 801085c:	42a2      	cmp	r2, r4
 801085e:	bf88      	it	hi
 8010860:	2300      	movhi	r3, #0
 8010862:	4418      	add	r0, r3
 8010864:	2300      	movs	r3, #0
 8010866:	4288      	cmp	r0, r1
 8010868:	d305      	bcc.n	8010876 <__copybits+0x40>
 801086a:	bd70      	pop	{r4, r5, r6, pc}
 801086c:	f853 6b04 	ldr.w	r6, [r3], #4
 8010870:	f845 6f04 	str.w	r6, [r5, #4]!
 8010874:	e7eb      	b.n	801084e <__copybits+0x18>
 8010876:	f840 3b04 	str.w	r3, [r0], #4
 801087a:	e7f4      	b.n	8010866 <__copybits+0x30>

0801087c <__any_on>:
 801087c:	f100 0214 	add.w	r2, r0, #20
 8010880:	6900      	ldr	r0, [r0, #16]
 8010882:	114b      	asrs	r3, r1, #5
 8010884:	4298      	cmp	r0, r3
 8010886:	b510      	push	{r4, lr}
 8010888:	db11      	blt.n	80108ae <__any_on+0x32>
 801088a:	dd0a      	ble.n	80108a2 <__any_on+0x26>
 801088c:	f011 011f 	ands.w	r1, r1, #31
 8010890:	d007      	beq.n	80108a2 <__any_on+0x26>
 8010892:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8010896:	fa24 f001 	lsr.w	r0, r4, r1
 801089a:	fa00 f101 	lsl.w	r1, r0, r1
 801089e:	428c      	cmp	r4, r1
 80108a0:	d10b      	bne.n	80108ba <__any_on+0x3e>
 80108a2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80108a6:	4293      	cmp	r3, r2
 80108a8:	d803      	bhi.n	80108b2 <__any_on+0x36>
 80108aa:	2000      	movs	r0, #0
 80108ac:	bd10      	pop	{r4, pc}
 80108ae:	4603      	mov	r3, r0
 80108b0:	e7f7      	b.n	80108a2 <__any_on+0x26>
 80108b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80108b6:	2900      	cmp	r1, #0
 80108b8:	d0f5      	beq.n	80108a6 <__any_on+0x2a>
 80108ba:	2001      	movs	r0, #1
 80108bc:	e7f6      	b.n	80108ac <__any_on+0x30>

080108be <_calloc_r>:
 80108be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108c0:	fba1 2402 	umull	r2, r4, r1, r2
 80108c4:	b94c      	cbnz	r4, 80108da <_calloc_r+0x1c>
 80108c6:	4611      	mov	r1, r2
 80108c8:	9201      	str	r2, [sp, #4]
 80108ca:	f000 f87b 	bl	80109c4 <_malloc_r>
 80108ce:	9a01      	ldr	r2, [sp, #4]
 80108d0:	4605      	mov	r5, r0
 80108d2:	b930      	cbnz	r0, 80108e2 <_calloc_r+0x24>
 80108d4:	4628      	mov	r0, r5
 80108d6:	b003      	add	sp, #12
 80108d8:	bd30      	pop	{r4, r5, pc}
 80108da:	220c      	movs	r2, #12
 80108dc:	6002      	str	r2, [r0, #0]
 80108de:	2500      	movs	r5, #0
 80108e0:	e7f8      	b.n	80108d4 <_calloc_r+0x16>
 80108e2:	4621      	mov	r1, r4
 80108e4:	f7fc fa86 	bl	800cdf4 <memset>
 80108e8:	e7f4      	b.n	80108d4 <_calloc_r+0x16>
	...

080108ec <_free_r>:
 80108ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80108ee:	2900      	cmp	r1, #0
 80108f0:	d044      	beq.n	801097c <_free_r+0x90>
 80108f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108f6:	9001      	str	r0, [sp, #4]
 80108f8:	2b00      	cmp	r3, #0
 80108fa:	f1a1 0404 	sub.w	r4, r1, #4
 80108fe:	bfb8      	it	lt
 8010900:	18e4      	addlt	r4, r4, r3
 8010902:	f000 fb2f 	bl	8010f64 <__malloc_lock>
 8010906:	4a1e      	ldr	r2, [pc, #120]	; (8010980 <_free_r+0x94>)
 8010908:	9801      	ldr	r0, [sp, #4]
 801090a:	6813      	ldr	r3, [r2, #0]
 801090c:	b933      	cbnz	r3, 801091c <_free_r+0x30>
 801090e:	6063      	str	r3, [r4, #4]
 8010910:	6014      	str	r4, [r2, #0]
 8010912:	b003      	add	sp, #12
 8010914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010918:	f000 bb2a 	b.w	8010f70 <__malloc_unlock>
 801091c:	42a3      	cmp	r3, r4
 801091e:	d908      	bls.n	8010932 <_free_r+0x46>
 8010920:	6825      	ldr	r5, [r4, #0]
 8010922:	1961      	adds	r1, r4, r5
 8010924:	428b      	cmp	r3, r1
 8010926:	bf01      	itttt	eq
 8010928:	6819      	ldreq	r1, [r3, #0]
 801092a:	685b      	ldreq	r3, [r3, #4]
 801092c:	1949      	addeq	r1, r1, r5
 801092e:	6021      	streq	r1, [r4, #0]
 8010930:	e7ed      	b.n	801090e <_free_r+0x22>
 8010932:	461a      	mov	r2, r3
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	b10b      	cbz	r3, 801093c <_free_r+0x50>
 8010938:	42a3      	cmp	r3, r4
 801093a:	d9fa      	bls.n	8010932 <_free_r+0x46>
 801093c:	6811      	ldr	r1, [r2, #0]
 801093e:	1855      	adds	r5, r2, r1
 8010940:	42a5      	cmp	r5, r4
 8010942:	d10b      	bne.n	801095c <_free_r+0x70>
 8010944:	6824      	ldr	r4, [r4, #0]
 8010946:	4421      	add	r1, r4
 8010948:	1854      	adds	r4, r2, r1
 801094a:	42a3      	cmp	r3, r4
 801094c:	6011      	str	r1, [r2, #0]
 801094e:	d1e0      	bne.n	8010912 <_free_r+0x26>
 8010950:	681c      	ldr	r4, [r3, #0]
 8010952:	685b      	ldr	r3, [r3, #4]
 8010954:	6053      	str	r3, [r2, #4]
 8010956:	4421      	add	r1, r4
 8010958:	6011      	str	r1, [r2, #0]
 801095a:	e7da      	b.n	8010912 <_free_r+0x26>
 801095c:	d902      	bls.n	8010964 <_free_r+0x78>
 801095e:	230c      	movs	r3, #12
 8010960:	6003      	str	r3, [r0, #0]
 8010962:	e7d6      	b.n	8010912 <_free_r+0x26>
 8010964:	6825      	ldr	r5, [r4, #0]
 8010966:	1961      	adds	r1, r4, r5
 8010968:	428b      	cmp	r3, r1
 801096a:	bf04      	itt	eq
 801096c:	6819      	ldreq	r1, [r3, #0]
 801096e:	685b      	ldreq	r3, [r3, #4]
 8010970:	6063      	str	r3, [r4, #4]
 8010972:	bf04      	itt	eq
 8010974:	1949      	addeq	r1, r1, r5
 8010976:	6021      	streq	r1, [r4, #0]
 8010978:	6054      	str	r4, [r2, #4]
 801097a:	e7ca      	b.n	8010912 <_free_r+0x26>
 801097c:	b003      	add	sp, #12
 801097e:	bd30      	pop	{r4, r5, pc}
 8010980:	200050ec 	.word	0x200050ec

08010984 <sbrk_aligned>:
 8010984:	b570      	push	{r4, r5, r6, lr}
 8010986:	4e0e      	ldr	r6, [pc, #56]	; (80109c0 <sbrk_aligned+0x3c>)
 8010988:	460c      	mov	r4, r1
 801098a:	6831      	ldr	r1, [r6, #0]
 801098c:	4605      	mov	r5, r0
 801098e:	b911      	cbnz	r1, 8010996 <sbrk_aligned+0x12>
 8010990:	f000 f9ee 	bl	8010d70 <_sbrk_r>
 8010994:	6030      	str	r0, [r6, #0]
 8010996:	4621      	mov	r1, r4
 8010998:	4628      	mov	r0, r5
 801099a:	f000 f9e9 	bl	8010d70 <_sbrk_r>
 801099e:	1c43      	adds	r3, r0, #1
 80109a0:	d00a      	beq.n	80109b8 <sbrk_aligned+0x34>
 80109a2:	1cc4      	adds	r4, r0, #3
 80109a4:	f024 0403 	bic.w	r4, r4, #3
 80109a8:	42a0      	cmp	r0, r4
 80109aa:	d007      	beq.n	80109bc <sbrk_aligned+0x38>
 80109ac:	1a21      	subs	r1, r4, r0
 80109ae:	4628      	mov	r0, r5
 80109b0:	f000 f9de 	bl	8010d70 <_sbrk_r>
 80109b4:	3001      	adds	r0, #1
 80109b6:	d101      	bne.n	80109bc <sbrk_aligned+0x38>
 80109b8:	f04f 34ff 	mov.w	r4, #4294967295
 80109bc:	4620      	mov	r0, r4
 80109be:	bd70      	pop	{r4, r5, r6, pc}
 80109c0:	200050f0 	.word	0x200050f0

080109c4 <_malloc_r>:
 80109c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109c8:	1ccd      	adds	r5, r1, #3
 80109ca:	f025 0503 	bic.w	r5, r5, #3
 80109ce:	3508      	adds	r5, #8
 80109d0:	2d0c      	cmp	r5, #12
 80109d2:	bf38      	it	cc
 80109d4:	250c      	movcc	r5, #12
 80109d6:	2d00      	cmp	r5, #0
 80109d8:	4607      	mov	r7, r0
 80109da:	db01      	blt.n	80109e0 <_malloc_r+0x1c>
 80109dc:	42a9      	cmp	r1, r5
 80109de:	d905      	bls.n	80109ec <_malloc_r+0x28>
 80109e0:	230c      	movs	r3, #12
 80109e2:	603b      	str	r3, [r7, #0]
 80109e4:	2600      	movs	r6, #0
 80109e6:	4630      	mov	r0, r6
 80109e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109ec:	4e2e      	ldr	r6, [pc, #184]	; (8010aa8 <_malloc_r+0xe4>)
 80109ee:	f000 fab9 	bl	8010f64 <__malloc_lock>
 80109f2:	6833      	ldr	r3, [r6, #0]
 80109f4:	461c      	mov	r4, r3
 80109f6:	bb34      	cbnz	r4, 8010a46 <_malloc_r+0x82>
 80109f8:	4629      	mov	r1, r5
 80109fa:	4638      	mov	r0, r7
 80109fc:	f7ff ffc2 	bl	8010984 <sbrk_aligned>
 8010a00:	1c43      	adds	r3, r0, #1
 8010a02:	4604      	mov	r4, r0
 8010a04:	d14d      	bne.n	8010aa2 <_malloc_r+0xde>
 8010a06:	6834      	ldr	r4, [r6, #0]
 8010a08:	4626      	mov	r6, r4
 8010a0a:	2e00      	cmp	r6, #0
 8010a0c:	d140      	bne.n	8010a90 <_malloc_r+0xcc>
 8010a0e:	6823      	ldr	r3, [r4, #0]
 8010a10:	4631      	mov	r1, r6
 8010a12:	4638      	mov	r0, r7
 8010a14:	eb04 0803 	add.w	r8, r4, r3
 8010a18:	f000 f9aa 	bl	8010d70 <_sbrk_r>
 8010a1c:	4580      	cmp	r8, r0
 8010a1e:	d13a      	bne.n	8010a96 <_malloc_r+0xd2>
 8010a20:	6821      	ldr	r1, [r4, #0]
 8010a22:	3503      	adds	r5, #3
 8010a24:	1a6d      	subs	r5, r5, r1
 8010a26:	f025 0503 	bic.w	r5, r5, #3
 8010a2a:	3508      	adds	r5, #8
 8010a2c:	2d0c      	cmp	r5, #12
 8010a2e:	bf38      	it	cc
 8010a30:	250c      	movcc	r5, #12
 8010a32:	4629      	mov	r1, r5
 8010a34:	4638      	mov	r0, r7
 8010a36:	f7ff ffa5 	bl	8010984 <sbrk_aligned>
 8010a3a:	3001      	adds	r0, #1
 8010a3c:	d02b      	beq.n	8010a96 <_malloc_r+0xd2>
 8010a3e:	6823      	ldr	r3, [r4, #0]
 8010a40:	442b      	add	r3, r5
 8010a42:	6023      	str	r3, [r4, #0]
 8010a44:	e00e      	b.n	8010a64 <_malloc_r+0xa0>
 8010a46:	6822      	ldr	r2, [r4, #0]
 8010a48:	1b52      	subs	r2, r2, r5
 8010a4a:	d41e      	bmi.n	8010a8a <_malloc_r+0xc6>
 8010a4c:	2a0b      	cmp	r2, #11
 8010a4e:	d916      	bls.n	8010a7e <_malloc_r+0xba>
 8010a50:	1961      	adds	r1, r4, r5
 8010a52:	42a3      	cmp	r3, r4
 8010a54:	6025      	str	r5, [r4, #0]
 8010a56:	bf18      	it	ne
 8010a58:	6059      	strne	r1, [r3, #4]
 8010a5a:	6863      	ldr	r3, [r4, #4]
 8010a5c:	bf08      	it	eq
 8010a5e:	6031      	streq	r1, [r6, #0]
 8010a60:	5162      	str	r2, [r4, r5]
 8010a62:	604b      	str	r3, [r1, #4]
 8010a64:	4638      	mov	r0, r7
 8010a66:	f104 060b 	add.w	r6, r4, #11
 8010a6a:	f000 fa81 	bl	8010f70 <__malloc_unlock>
 8010a6e:	f026 0607 	bic.w	r6, r6, #7
 8010a72:	1d23      	adds	r3, r4, #4
 8010a74:	1af2      	subs	r2, r6, r3
 8010a76:	d0b6      	beq.n	80109e6 <_malloc_r+0x22>
 8010a78:	1b9b      	subs	r3, r3, r6
 8010a7a:	50a3      	str	r3, [r4, r2]
 8010a7c:	e7b3      	b.n	80109e6 <_malloc_r+0x22>
 8010a7e:	6862      	ldr	r2, [r4, #4]
 8010a80:	42a3      	cmp	r3, r4
 8010a82:	bf0c      	ite	eq
 8010a84:	6032      	streq	r2, [r6, #0]
 8010a86:	605a      	strne	r2, [r3, #4]
 8010a88:	e7ec      	b.n	8010a64 <_malloc_r+0xa0>
 8010a8a:	4623      	mov	r3, r4
 8010a8c:	6864      	ldr	r4, [r4, #4]
 8010a8e:	e7b2      	b.n	80109f6 <_malloc_r+0x32>
 8010a90:	4634      	mov	r4, r6
 8010a92:	6876      	ldr	r6, [r6, #4]
 8010a94:	e7b9      	b.n	8010a0a <_malloc_r+0x46>
 8010a96:	230c      	movs	r3, #12
 8010a98:	603b      	str	r3, [r7, #0]
 8010a9a:	4638      	mov	r0, r7
 8010a9c:	f000 fa68 	bl	8010f70 <__malloc_unlock>
 8010aa0:	e7a1      	b.n	80109e6 <_malloc_r+0x22>
 8010aa2:	6025      	str	r5, [r4, #0]
 8010aa4:	e7de      	b.n	8010a64 <_malloc_r+0xa0>
 8010aa6:	bf00      	nop
 8010aa8:	200050ec 	.word	0x200050ec

08010aac <__sfputc_r>:
 8010aac:	6893      	ldr	r3, [r2, #8]
 8010aae:	3b01      	subs	r3, #1
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	b410      	push	{r4}
 8010ab4:	6093      	str	r3, [r2, #8]
 8010ab6:	da08      	bge.n	8010aca <__sfputc_r+0x1e>
 8010ab8:	6994      	ldr	r4, [r2, #24]
 8010aba:	42a3      	cmp	r3, r4
 8010abc:	db01      	blt.n	8010ac2 <__sfputc_r+0x16>
 8010abe:	290a      	cmp	r1, #10
 8010ac0:	d103      	bne.n	8010aca <__sfputc_r+0x1e>
 8010ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ac6:	f7fd bd51 	b.w	800e56c <__swbuf_r>
 8010aca:	6813      	ldr	r3, [r2, #0]
 8010acc:	1c58      	adds	r0, r3, #1
 8010ace:	6010      	str	r0, [r2, #0]
 8010ad0:	7019      	strb	r1, [r3, #0]
 8010ad2:	4608      	mov	r0, r1
 8010ad4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010ad8:	4770      	bx	lr

08010ada <__sfputs_r>:
 8010ada:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010adc:	4606      	mov	r6, r0
 8010ade:	460f      	mov	r7, r1
 8010ae0:	4614      	mov	r4, r2
 8010ae2:	18d5      	adds	r5, r2, r3
 8010ae4:	42ac      	cmp	r4, r5
 8010ae6:	d101      	bne.n	8010aec <__sfputs_r+0x12>
 8010ae8:	2000      	movs	r0, #0
 8010aea:	e007      	b.n	8010afc <__sfputs_r+0x22>
 8010aec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010af0:	463a      	mov	r2, r7
 8010af2:	4630      	mov	r0, r6
 8010af4:	f7ff ffda 	bl	8010aac <__sfputc_r>
 8010af8:	1c43      	adds	r3, r0, #1
 8010afa:	d1f3      	bne.n	8010ae4 <__sfputs_r+0xa>
 8010afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010b00 <_vfiprintf_r>:
 8010b00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b04:	460d      	mov	r5, r1
 8010b06:	b09d      	sub	sp, #116	; 0x74
 8010b08:	4614      	mov	r4, r2
 8010b0a:	4698      	mov	r8, r3
 8010b0c:	4606      	mov	r6, r0
 8010b0e:	b118      	cbz	r0, 8010b18 <_vfiprintf_r+0x18>
 8010b10:	6983      	ldr	r3, [r0, #24]
 8010b12:	b90b      	cbnz	r3, 8010b18 <_vfiprintf_r+0x18>
 8010b14:	f7fe fd80 	bl	800f618 <__sinit>
 8010b18:	4b89      	ldr	r3, [pc, #548]	; (8010d40 <_vfiprintf_r+0x240>)
 8010b1a:	429d      	cmp	r5, r3
 8010b1c:	d11b      	bne.n	8010b56 <_vfiprintf_r+0x56>
 8010b1e:	6875      	ldr	r5, [r6, #4]
 8010b20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b22:	07d9      	lsls	r1, r3, #31
 8010b24:	d405      	bmi.n	8010b32 <_vfiprintf_r+0x32>
 8010b26:	89ab      	ldrh	r3, [r5, #12]
 8010b28:	059a      	lsls	r2, r3, #22
 8010b2a:	d402      	bmi.n	8010b32 <_vfiprintf_r+0x32>
 8010b2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b2e:	f7ff f984 	bl	800fe3a <__retarget_lock_acquire_recursive>
 8010b32:	89ab      	ldrh	r3, [r5, #12]
 8010b34:	071b      	lsls	r3, r3, #28
 8010b36:	d501      	bpl.n	8010b3c <_vfiprintf_r+0x3c>
 8010b38:	692b      	ldr	r3, [r5, #16]
 8010b3a:	b9eb      	cbnz	r3, 8010b78 <_vfiprintf_r+0x78>
 8010b3c:	4629      	mov	r1, r5
 8010b3e:	4630      	mov	r0, r6
 8010b40:	f7fd fd66 	bl	800e610 <__swsetup_r>
 8010b44:	b1c0      	cbz	r0, 8010b78 <_vfiprintf_r+0x78>
 8010b46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010b48:	07dc      	lsls	r4, r3, #31
 8010b4a:	d50e      	bpl.n	8010b6a <_vfiprintf_r+0x6a>
 8010b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8010b50:	b01d      	add	sp, #116	; 0x74
 8010b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b56:	4b7b      	ldr	r3, [pc, #492]	; (8010d44 <_vfiprintf_r+0x244>)
 8010b58:	429d      	cmp	r5, r3
 8010b5a:	d101      	bne.n	8010b60 <_vfiprintf_r+0x60>
 8010b5c:	68b5      	ldr	r5, [r6, #8]
 8010b5e:	e7df      	b.n	8010b20 <_vfiprintf_r+0x20>
 8010b60:	4b79      	ldr	r3, [pc, #484]	; (8010d48 <_vfiprintf_r+0x248>)
 8010b62:	429d      	cmp	r5, r3
 8010b64:	bf08      	it	eq
 8010b66:	68f5      	ldreq	r5, [r6, #12]
 8010b68:	e7da      	b.n	8010b20 <_vfiprintf_r+0x20>
 8010b6a:	89ab      	ldrh	r3, [r5, #12]
 8010b6c:	0598      	lsls	r0, r3, #22
 8010b6e:	d4ed      	bmi.n	8010b4c <_vfiprintf_r+0x4c>
 8010b70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010b72:	f7ff f963 	bl	800fe3c <__retarget_lock_release_recursive>
 8010b76:	e7e9      	b.n	8010b4c <_vfiprintf_r+0x4c>
 8010b78:	2300      	movs	r3, #0
 8010b7a:	9309      	str	r3, [sp, #36]	; 0x24
 8010b7c:	2320      	movs	r3, #32
 8010b7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010b82:	f8cd 800c 	str.w	r8, [sp, #12]
 8010b86:	2330      	movs	r3, #48	; 0x30
 8010b88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010d4c <_vfiprintf_r+0x24c>
 8010b8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010b90:	f04f 0901 	mov.w	r9, #1
 8010b94:	4623      	mov	r3, r4
 8010b96:	469a      	mov	sl, r3
 8010b98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010b9c:	b10a      	cbz	r2, 8010ba2 <_vfiprintf_r+0xa2>
 8010b9e:	2a25      	cmp	r2, #37	; 0x25
 8010ba0:	d1f9      	bne.n	8010b96 <_vfiprintf_r+0x96>
 8010ba2:	ebba 0b04 	subs.w	fp, sl, r4
 8010ba6:	d00b      	beq.n	8010bc0 <_vfiprintf_r+0xc0>
 8010ba8:	465b      	mov	r3, fp
 8010baa:	4622      	mov	r2, r4
 8010bac:	4629      	mov	r1, r5
 8010bae:	4630      	mov	r0, r6
 8010bb0:	f7ff ff93 	bl	8010ada <__sfputs_r>
 8010bb4:	3001      	adds	r0, #1
 8010bb6:	f000 80aa 	beq.w	8010d0e <_vfiprintf_r+0x20e>
 8010bba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010bbc:	445a      	add	r2, fp
 8010bbe:	9209      	str	r2, [sp, #36]	; 0x24
 8010bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	f000 80a2 	beq.w	8010d0e <_vfiprintf_r+0x20e>
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f04f 32ff 	mov.w	r2, #4294967295
 8010bd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010bd4:	f10a 0a01 	add.w	sl, sl, #1
 8010bd8:	9304      	str	r3, [sp, #16]
 8010bda:	9307      	str	r3, [sp, #28]
 8010bdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010be0:	931a      	str	r3, [sp, #104]	; 0x68
 8010be2:	4654      	mov	r4, sl
 8010be4:	2205      	movs	r2, #5
 8010be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010bea:	4858      	ldr	r0, [pc, #352]	; (8010d4c <_vfiprintf_r+0x24c>)
 8010bec:	f7ef fb20 	bl	8000230 <memchr>
 8010bf0:	9a04      	ldr	r2, [sp, #16]
 8010bf2:	b9d8      	cbnz	r0, 8010c2c <_vfiprintf_r+0x12c>
 8010bf4:	06d1      	lsls	r1, r2, #27
 8010bf6:	bf44      	itt	mi
 8010bf8:	2320      	movmi	r3, #32
 8010bfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010bfe:	0713      	lsls	r3, r2, #28
 8010c00:	bf44      	itt	mi
 8010c02:	232b      	movmi	r3, #43	; 0x2b
 8010c04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010c08:	f89a 3000 	ldrb.w	r3, [sl]
 8010c0c:	2b2a      	cmp	r3, #42	; 0x2a
 8010c0e:	d015      	beq.n	8010c3c <_vfiprintf_r+0x13c>
 8010c10:	9a07      	ldr	r2, [sp, #28]
 8010c12:	4654      	mov	r4, sl
 8010c14:	2000      	movs	r0, #0
 8010c16:	f04f 0c0a 	mov.w	ip, #10
 8010c1a:	4621      	mov	r1, r4
 8010c1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010c20:	3b30      	subs	r3, #48	; 0x30
 8010c22:	2b09      	cmp	r3, #9
 8010c24:	d94e      	bls.n	8010cc4 <_vfiprintf_r+0x1c4>
 8010c26:	b1b0      	cbz	r0, 8010c56 <_vfiprintf_r+0x156>
 8010c28:	9207      	str	r2, [sp, #28]
 8010c2a:	e014      	b.n	8010c56 <_vfiprintf_r+0x156>
 8010c2c:	eba0 0308 	sub.w	r3, r0, r8
 8010c30:	fa09 f303 	lsl.w	r3, r9, r3
 8010c34:	4313      	orrs	r3, r2
 8010c36:	9304      	str	r3, [sp, #16]
 8010c38:	46a2      	mov	sl, r4
 8010c3a:	e7d2      	b.n	8010be2 <_vfiprintf_r+0xe2>
 8010c3c:	9b03      	ldr	r3, [sp, #12]
 8010c3e:	1d19      	adds	r1, r3, #4
 8010c40:	681b      	ldr	r3, [r3, #0]
 8010c42:	9103      	str	r1, [sp, #12]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	bfbb      	ittet	lt
 8010c48:	425b      	neglt	r3, r3
 8010c4a:	f042 0202 	orrlt.w	r2, r2, #2
 8010c4e:	9307      	strge	r3, [sp, #28]
 8010c50:	9307      	strlt	r3, [sp, #28]
 8010c52:	bfb8      	it	lt
 8010c54:	9204      	strlt	r2, [sp, #16]
 8010c56:	7823      	ldrb	r3, [r4, #0]
 8010c58:	2b2e      	cmp	r3, #46	; 0x2e
 8010c5a:	d10c      	bne.n	8010c76 <_vfiprintf_r+0x176>
 8010c5c:	7863      	ldrb	r3, [r4, #1]
 8010c5e:	2b2a      	cmp	r3, #42	; 0x2a
 8010c60:	d135      	bne.n	8010cce <_vfiprintf_r+0x1ce>
 8010c62:	9b03      	ldr	r3, [sp, #12]
 8010c64:	1d1a      	adds	r2, r3, #4
 8010c66:	681b      	ldr	r3, [r3, #0]
 8010c68:	9203      	str	r2, [sp, #12]
 8010c6a:	2b00      	cmp	r3, #0
 8010c6c:	bfb8      	it	lt
 8010c6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010c72:	3402      	adds	r4, #2
 8010c74:	9305      	str	r3, [sp, #20]
 8010c76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010d5c <_vfiprintf_r+0x25c>
 8010c7a:	7821      	ldrb	r1, [r4, #0]
 8010c7c:	2203      	movs	r2, #3
 8010c7e:	4650      	mov	r0, sl
 8010c80:	f7ef fad6 	bl	8000230 <memchr>
 8010c84:	b140      	cbz	r0, 8010c98 <_vfiprintf_r+0x198>
 8010c86:	2340      	movs	r3, #64	; 0x40
 8010c88:	eba0 000a 	sub.w	r0, r0, sl
 8010c8c:	fa03 f000 	lsl.w	r0, r3, r0
 8010c90:	9b04      	ldr	r3, [sp, #16]
 8010c92:	4303      	orrs	r3, r0
 8010c94:	3401      	adds	r4, #1
 8010c96:	9304      	str	r3, [sp, #16]
 8010c98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010c9c:	482c      	ldr	r0, [pc, #176]	; (8010d50 <_vfiprintf_r+0x250>)
 8010c9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010ca2:	2206      	movs	r2, #6
 8010ca4:	f7ef fac4 	bl	8000230 <memchr>
 8010ca8:	2800      	cmp	r0, #0
 8010caa:	d03f      	beq.n	8010d2c <_vfiprintf_r+0x22c>
 8010cac:	4b29      	ldr	r3, [pc, #164]	; (8010d54 <_vfiprintf_r+0x254>)
 8010cae:	bb1b      	cbnz	r3, 8010cf8 <_vfiprintf_r+0x1f8>
 8010cb0:	9b03      	ldr	r3, [sp, #12]
 8010cb2:	3307      	adds	r3, #7
 8010cb4:	f023 0307 	bic.w	r3, r3, #7
 8010cb8:	3308      	adds	r3, #8
 8010cba:	9303      	str	r3, [sp, #12]
 8010cbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010cbe:	443b      	add	r3, r7
 8010cc0:	9309      	str	r3, [sp, #36]	; 0x24
 8010cc2:	e767      	b.n	8010b94 <_vfiprintf_r+0x94>
 8010cc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8010cc8:	460c      	mov	r4, r1
 8010cca:	2001      	movs	r0, #1
 8010ccc:	e7a5      	b.n	8010c1a <_vfiprintf_r+0x11a>
 8010cce:	2300      	movs	r3, #0
 8010cd0:	3401      	adds	r4, #1
 8010cd2:	9305      	str	r3, [sp, #20]
 8010cd4:	4619      	mov	r1, r3
 8010cd6:	f04f 0c0a 	mov.w	ip, #10
 8010cda:	4620      	mov	r0, r4
 8010cdc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ce0:	3a30      	subs	r2, #48	; 0x30
 8010ce2:	2a09      	cmp	r2, #9
 8010ce4:	d903      	bls.n	8010cee <_vfiprintf_r+0x1ee>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d0c5      	beq.n	8010c76 <_vfiprintf_r+0x176>
 8010cea:	9105      	str	r1, [sp, #20]
 8010cec:	e7c3      	b.n	8010c76 <_vfiprintf_r+0x176>
 8010cee:	fb0c 2101 	mla	r1, ip, r1, r2
 8010cf2:	4604      	mov	r4, r0
 8010cf4:	2301      	movs	r3, #1
 8010cf6:	e7f0      	b.n	8010cda <_vfiprintf_r+0x1da>
 8010cf8:	ab03      	add	r3, sp, #12
 8010cfa:	9300      	str	r3, [sp, #0]
 8010cfc:	462a      	mov	r2, r5
 8010cfe:	4b16      	ldr	r3, [pc, #88]	; (8010d58 <_vfiprintf_r+0x258>)
 8010d00:	a904      	add	r1, sp, #16
 8010d02:	4630      	mov	r0, r6
 8010d04:	f7fc f91e 	bl	800cf44 <_printf_float>
 8010d08:	4607      	mov	r7, r0
 8010d0a:	1c78      	adds	r0, r7, #1
 8010d0c:	d1d6      	bne.n	8010cbc <_vfiprintf_r+0x1bc>
 8010d0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010d10:	07d9      	lsls	r1, r3, #31
 8010d12:	d405      	bmi.n	8010d20 <_vfiprintf_r+0x220>
 8010d14:	89ab      	ldrh	r3, [r5, #12]
 8010d16:	059a      	lsls	r2, r3, #22
 8010d18:	d402      	bmi.n	8010d20 <_vfiprintf_r+0x220>
 8010d1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010d1c:	f7ff f88e 	bl	800fe3c <__retarget_lock_release_recursive>
 8010d20:	89ab      	ldrh	r3, [r5, #12]
 8010d22:	065b      	lsls	r3, r3, #25
 8010d24:	f53f af12 	bmi.w	8010b4c <_vfiprintf_r+0x4c>
 8010d28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010d2a:	e711      	b.n	8010b50 <_vfiprintf_r+0x50>
 8010d2c:	ab03      	add	r3, sp, #12
 8010d2e:	9300      	str	r3, [sp, #0]
 8010d30:	462a      	mov	r2, r5
 8010d32:	4b09      	ldr	r3, [pc, #36]	; (8010d58 <_vfiprintf_r+0x258>)
 8010d34:	a904      	add	r1, sp, #16
 8010d36:	4630      	mov	r0, r6
 8010d38:	f7fc fba8 	bl	800d48c <_printf_i>
 8010d3c:	e7e4      	b.n	8010d08 <_vfiprintf_r+0x208>
 8010d3e:	bf00      	nop
 8010d40:	08012944 	.word	0x08012944
 8010d44:	08012964 	.word	0x08012964
 8010d48:	08012924 	.word	0x08012924
 8010d4c:	08012b5c 	.word	0x08012b5c
 8010d50:	08012b66 	.word	0x08012b66
 8010d54:	0800cf45 	.word	0x0800cf45
 8010d58:	08010adb 	.word	0x08010adb
 8010d5c:	08012b62 	.word	0x08012b62

08010d60 <nan>:
 8010d60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010d68 <nan+0x8>
 8010d64:	4770      	bx	lr
 8010d66:	bf00      	nop
 8010d68:	00000000 	.word	0x00000000
 8010d6c:	7ff80000 	.word	0x7ff80000

08010d70 <_sbrk_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d06      	ldr	r5, [pc, #24]	; (8010d8c <_sbrk_r+0x1c>)
 8010d74:	2300      	movs	r3, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	4608      	mov	r0, r1
 8010d7a:	602b      	str	r3, [r5, #0]
 8010d7c:	f7f4 fbe2 	bl	8005544 <_sbrk>
 8010d80:	1c43      	adds	r3, r0, #1
 8010d82:	d102      	bne.n	8010d8a <_sbrk_r+0x1a>
 8010d84:	682b      	ldr	r3, [r5, #0]
 8010d86:	b103      	cbz	r3, 8010d8a <_sbrk_r+0x1a>
 8010d88:	6023      	str	r3, [r4, #0]
 8010d8a:	bd38      	pop	{r3, r4, r5, pc}
 8010d8c:	200050f4 	.word	0x200050f4

08010d90 <__sread>:
 8010d90:	b510      	push	{r4, lr}
 8010d92:	460c      	mov	r4, r1
 8010d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d98:	f000 f8f0 	bl	8010f7c <_read_r>
 8010d9c:	2800      	cmp	r0, #0
 8010d9e:	bfab      	itete	ge
 8010da0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010da2:	89a3      	ldrhlt	r3, [r4, #12]
 8010da4:	181b      	addge	r3, r3, r0
 8010da6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010daa:	bfac      	ite	ge
 8010dac:	6563      	strge	r3, [r4, #84]	; 0x54
 8010dae:	81a3      	strhlt	r3, [r4, #12]
 8010db0:	bd10      	pop	{r4, pc}

08010db2 <__swrite>:
 8010db2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010db6:	461f      	mov	r7, r3
 8010db8:	898b      	ldrh	r3, [r1, #12]
 8010dba:	05db      	lsls	r3, r3, #23
 8010dbc:	4605      	mov	r5, r0
 8010dbe:	460c      	mov	r4, r1
 8010dc0:	4616      	mov	r6, r2
 8010dc2:	d505      	bpl.n	8010dd0 <__swrite+0x1e>
 8010dc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc8:	2302      	movs	r3, #2
 8010dca:	2200      	movs	r2, #0
 8010dcc:	f000 f8b8 	bl	8010f40 <_lseek_r>
 8010dd0:	89a3      	ldrh	r3, [r4, #12]
 8010dd2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dd6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010dda:	81a3      	strh	r3, [r4, #12]
 8010ddc:	4632      	mov	r2, r6
 8010dde:	463b      	mov	r3, r7
 8010de0:	4628      	mov	r0, r5
 8010de2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010de6:	f000 b837 	b.w	8010e58 <_write_r>

08010dea <__sseek>:
 8010dea:	b510      	push	{r4, lr}
 8010dec:	460c      	mov	r4, r1
 8010dee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010df2:	f000 f8a5 	bl	8010f40 <_lseek_r>
 8010df6:	1c43      	adds	r3, r0, #1
 8010df8:	89a3      	ldrh	r3, [r4, #12]
 8010dfa:	bf15      	itete	ne
 8010dfc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dfe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e02:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e06:	81a3      	strheq	r3, [r4, #12]
 8010e08:	bf18      	it	ne
 8010e0a:	81a3      	strhne	r3, [r4, #12]
 8010e0c:	bd10      	pop	{r4, pc}

08010e0e <__sclose>:
 8010e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e12:	f000 b851 	b.w	8010eb8 <_close_r>

08010e16 <strncmp>:
 8010e16:	b510      	push	{r4, lr}
 8010e18:	b17a      	cbz	r2, 8010e3a <strncmp+0x24>
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	3901      	subs	r1, #1
 8010e1e:	1884      	adds	r4, r0, r2
 8010e20:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010e24:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010e28:	4290      	cmp	r0, r2
 8010e2a:	d101      	bne.n	8010e30 <strncmp+0x1a>
 8010e2c:	42a3      	cmp	r3, r4
 8010e2e:	d101      	bne.n	8010e34 <strncmp+0x1e>
 8010e30:	1a80      	subs	r0, r0, r2
 8010e32:	bd10      	pop	{r4, pc}
 8010e34:	2800      	cmp	r0, #0
 8010e36:	d1f3      	bne.n	8010e20 <strncmp+0xa>
 8010e38:	e7fa      	b.n	8010e30 <strncmp+0x1a>
 8010e3a:	4610      	mov	r0, r2
 8010e3c:	e7f9      	b.n	8010e32 <strncmp+0x1c>

08010e3e <__ascii_wctomb>:
 8010e3e:	b149      	cbz	r1, 8010e54 <__ascii_wctomb+0x16>
 8010e40:	2aff      	cmp	r2, #255	; 0xff
 8010e42:	bf85      	ittet	hi
 8010e44:	238a      	movhi	r3, #138	; 0x8a
 8010e46:	6003      	strhi	r3, [r0, #0]
 8010e48:	700a      	strbls	r2, [r1, #0]
 8010e4a:	f04f 30ff 	movhi.w	r0, #4294967295
 8010e4e:	bf98      	it	ls
 8010e50:	2001      	movls	r0, #1
 8010e52:	4770      	bx	lr
 8010e54:	4608      	mov	r0, r1
 8010e56:	4770      	bx	lr

08010e58 <_write_r>:
 8010e58:	b538      	push	{r3, r4, r5, lr}
 8010e5a:	4d07      	ldr	r5, [pc, #28]	; (8010e78 <_write_r+0x20>)
 8010e5c:	4604      	mov	r4, r0
 8010e5e:	4608      	mov	r0, r1
 8010e60:	4611      	mov	r1, r2
 8010e62:	2200      	movs	r2, #0
 8010e64:	602a      	str	r2, [r5, #0]
 8010e66:	461a      	mov	r2, r3
 8010e68:	f7f4 fb1b 	bl	80054a2 <_write>
 8010e6c:	1c43      	adds	r3, r0, #1
 8010e6e:	d102      	bne.n	8010e76 <_write_r+0x1e>
 8010e70:	682b      	ldr	r3, [r5, #0]
 8010e72:	b103      	cbz	r3, 8010e76 <_write_r+0x1e>
 8010e74:	6023      	str	r3, [r4, #0]
 8010e76:	bd38      	pop	{r3, r4, r5, pc}
 8010e78:	200050f4 	.word	0x200050f4

08010e7c <__assert_func>:
 8010e7c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e7e:	4614      	mov	r4, r2
 8010e80:	461a      	mov	r2, r3
 8010e82:	4b09      	ldr	r3, [pc, #36]	; (8010ea8 <__assert_func+0x2c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	4605      	mov	r5, r0
 8010e88:	68d8      	ldr	r0, [r3, #12]
 8010e8a:	b14c      	cbz	r4, 8010ea0 <__assert_func+0x24>
 8010e8c:	4b07      	ldr	r3, [pc, #28]	; (8010eac <__assert_func+0x30>)
 8010e8e:	9100      	str	r1, [sp, #0]
 8010e90:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010e94:	4906      	ldr	r1, [pc, #24]	; (8010eb0 <__assert_func+0x34>)
 8010e96:	462b      	mov	r3, r5
 8010e98:	f000 f81e 	bl	8010ed8 <fiprintf>
 8010e9c:	f000 f880 	bl	8010fa0 <abort>
 8010ea0:	4b04      	ldr	r3, [pc, #16]	; (8010eb4 <__assert_func+0x38>)
 8010ea2:	461c      	mov	r4, r3
 8010ea4:	e7f3      	b.n	8010e8e <__assert_func+0x12>
 8010ea6:	bf00      	nop
 8010ea8:	2000002c 	.word	0x2000002c
 8010eac:	08012b6d 	.word	0x08012b6d
 8010eb0:	08012b7a 	.word	0x08012b7a
 8010eb4:	08012ba8 	.word	0x08012ba8

08010eb8 <_close_r>:
 8010eb8:	b538      	push	{r3, r4, r5, lr}
 8010eba:	4d06      	ldr	r5, [pc, #24]	; (8010ed4 <_close_r+0x1c>)
 8010ebc:	2300      	movs	r3, #0
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	4608      	mov	r0, r1
 8010ec2:	602b      	str	r3, [r5, #0]
 8010ec4:	f7f4 fb09 	bl	80054da <_close>
 8010ec8:	1c43      	adds	r3, r0, #1
 8010eca:	d102      	bne.n	8010ed2 <_close_r+0x1a>
 8010ecc:	682b      	ldr	r3, [r5, #0]
 8010ece:	b103      	cbz	r3, 8010ed2 <_close_r+0x1a>
 8010ed0:	6023      	str	r3, [r4, #0]
 8010ed2:	bd38      	pop	{r3, r4, r5, pc}
 8010ed4:	200050f4 	.word	0x200050f4

08010ed8 <fiprintf>:
 8010ed8:	b40e      	push	{r1, r2, r3}
 8010eda:	b503      	push	{r0, r1, lr}
 8010edc:	4601      	mov	r1, r0
 8010ede:	ab03      	add	r3, sp, #12
 8010ee0:	4805      	ldr	r0, [pc, #20]	; (8010ef8 <fiprintf+0x20>)
 8010ee2:	f853 2b04 	ldr.w	r2, [r3], #4
 8010ee6:	6800      	ldr	r0, [r0, #0]
 8010ee8:	9301      	str	r3, [sp, #4]
 8010eea:	f7ff fe09 	bl	8010b00 <_vfiprintf_r>
 8010eee:	b002      	add	sp, #8
 8010ef0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010ef4:	b003      	add	sp, #12
 8010ef6:	4770      	bx	lr
 8010ef8:	2000002c 	.word	0x2000002c

08010efc <_fstat_r>:
 8010efc:	b538      	push	{r3, r4, r5, lr}
 8010efe:	4d07      	ldr	r5, [pc, #28]	; (8010f1c <_fstat_r+0x20>)
 8010f00:	2300      	movs	r3, #0
 8010f02:	4604      	mov	r4, r0
 8010f04:	4608      	mov	r0, r1
 8010f06:	4611      	mov	r1, r2
 8010f08:	602b      	str	r3, [r5, #0]
 8010f0a:	f7f4 faf2 	bl	80054f2 <_fstat>
 8010f0e:	1c43      	adds	r3, r0, #1
 8010f10:	d102      	bne.n	8010f18 <_fstat_r+0x1c>
 8010f12:	682b      	ldr	r3, [r5, #0]
 8010f14:	b103      	cbz	r3, 8010f18 <_fstat_r+0x1c>
 8010f16:	6023      	str	r3, [r4, #0]
 8010f18:	bd38      	pop	{r3, r4, r5, pc}
 8010f1a:	bf00      	nop
 8010f1c:	200050f4 	.word	0x200050f4

08010f20 <_isatty_r>:
 8010f20:	b538      	push	{r3, r4, r5, lr}
 8010f22:	4d06      	ldr	r5, [pc, #24]	; (8010f3c <_isatty_r+0x1c>)
 8010f24:	2300      	movs	r3, #0
 8010f26:	4604      	mov	r4, r0
 8010f28:	4608      	mov	r0, r1
 8010f2a:	602b      	str	r3, [r5, #0]
 8010f2c:	f7f4 faf1 	bl	8005512 <_isatty>
 8010f30:	1c43      	adds	r3, r0, #1
 8010f32:	d102      	bne.n	8010f3a <_isatty_r+0x1a>
 8010f34:	682b      	ldr	r3, [r5, #0]
 8010f36:	b103      	cbz	r3, 8010f3a <_isatty_r+0x1a>
 8010f38:	6023      	str	r3, [r4, #0]
 8010f3a:	bd38      	pop	{r3, r4, r5, pc}
 8010f3c:	200050f4 	.word	0x200050f4

08010f40 <_lseek_r>:
 8010f40:	b538      	push	{r3, r4, r5, lr}
 8010f42:	4d07      	ldr	r5, [pc, #28]	; (8010f60 <_lseek_r+0x20>)
 8010f44:	4604      	mov	r4, r0
 8010f46:	4608      	mov	r0, r1
 8010f48:	4611      	mov	r1, r2
 8010f4a:	2200      	movs	r2, #0
 8010f4c:	602a      	str	r2, [r5, #0]
 8010f4e:	461a      	mov	r2, r3
 8010f50:	f7f4 faea 	bl	8005528 <_lseek>
 8010f54:	1c43      	adds	r3, r0, #1
 8010f56:	d102      	bne.n	8010f5e <_lseek_r+0x1e>
 8010f58:	682b      	ldr	r3, [r5, #0]
 8010f5a:	b103      	cbz	r3, 8010f5e <_lseek_r+0x1e>
 8010f5c:	6023      	str	r3, [r4, #0]
 8010f5e:	bd38      	pop	{r3, r4, r5, pc}
 8010f60:	200050f4 	.word	0x200050f4

08010f64 <__malloc_lock>:
 8010f64:	4801      	ldr	r0, [pc, #4]	; (8010f6c <__malloc_lock+0x8>)
 8010f66:	f7fe bf68 	b.w	800fe3a <__retarget_lock_acquire_recursive>
 8010f6a:	bf00      	nop
 8010f6c:	200050e8 	.word	0x200050e8

08010f70 <__malloc_unlock>:
 8010f70:	4801      	ldr	r0, [pc, #4]	; (8010f78 <__malloc_unlock+0x8>)
 8010f72:	f7fe bf63 	b.w	800fe3c <__retarget_lock_release_recursive>
 8010f76:	bf00      	nop
 8010f78:	200050e8 	.word	0x200050e8

08010f7c <_read_r>:
 8010f7c:	b538      	push	{r3, r4, r5, lr}
 8010f7e:	4d07      	ldr	r5, [pc, #28]	; (8010f9c <_read_r+0x20>)
 8010f80:	4604      	mov	r4, r0
 8010f82:	4608      	mov	r0, r1
 8010f84:	4611      	mov	r1, r2
 8010f86:	2200      	movs	r2, #0
 8010f88:	602a      	str	r2, [r5, #0]
 8010f8a:	461a      	mov	r2, r3
 8010f8c:	f7f4 fa6c 	bl	8005468 <_read>
 8010f90:	1c43      	adds	r3, r0, #1
 8010f92:	d102      	bne.n	8010f9a <_read_r+0x1e>
 8010f94:	682b      	ldr	r3, [r5, #0]
 8010f96:	b103      	cbz	r3, 8010f9a <_read_r+0x1e>
 8010f98:	6023      	str	r3, [r4, #0]
 8010f9a:	bd38      	pop	{r3, r4, r5, pc}
 8010f9c:	200050f4 	.word	0x200050f4

08010fa0 <abort>:
 8010fa0:	b508      	push	{r3, lr}
 8010fa2:	2006      	movs	r0, #6
 8010fa4:	f000 f82c 	bl	8011000 <raise>
 8010fa8:	2001      	movs	r0, #1
 8010faa:	f7f4 fa53 	bl	8005454 <_exit>

08010fae <_raise_r>:
 8010fae:	291f      	cmp	r1, #31
 8010fb0:	b538      	push	{r3, r4, r5, lr}
 8010fb2:	4604      	mov	r4, r0
 8010fb4:	460d      	mov	r5, r1
 8010fb6:	d904      	bls.n	8010fc2 <_raise_r+0x14>
 8010fb8:	2316      	movs	r3, #22
 8010fba:	6003      	str	r3, [r0, #0]
 8010fbc:	f04f 30ff 	mov.w	r0, #4294967295
 8010fc0:	bd38      	pop	{r3, r4, r5, pc}
 8010fc2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010fc4:	b112      	cbz	r2, 8010fcc <_raise_r+0x1e>
 8010fc6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010fca:	b94b      	cbnz	r3, 8010fe0 <_raise_r+0x32>
 8010fcc:	4620      	mov	r0, r4
 8010fce:	f000 f831 	bl	8011034 <_getpid_r>
 8010fd2:	462a      	mov	r2, r5
 8010fd4:	4601      	mov	r1, r0
 8010fd6:	4620      	mov	r0, r4
 8010fd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010fdc:	f000 b818 	b.w	8011010 <_kill_r>
 8010fe0:	2b01      	cmp	r3, #1
 8010fe2:	d00a      	beq.n	8010ffa <_raise_r+0x4c>
 8010fe4:	1c59      	adds	r1, r3, #1
 8010fe6:	d103      	bne.n	8010ff0 <_raise_r+0x42>
 8010fe8:	2316      	movs	r3, #22
 8010fea:	6003      	str	r3, [r0, #0]
 8010fec:	2001      	movs	r0, #1
 8010fee:	e7e7      	b.n	8010fc0 <_raise_r+0x12>
 8010ff0:	2400      	movs	r4, #0
 8010ff2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010ff6:	4628      	mov	r0, r5
 8010ff8:	4798      	blx	r3
 8010ffa:	2000      	movs	r0, #0
 8010ffc:	e7e0      	b.n	8010fc0 <_raise_r+0x12>
	...

08011000 <raise>:
 8011000:	4b02      	ldr	r3, [pc, #8]	; (801100c <raise+0xc>)
 8011002:	4601      	mov	r1, r0
 8011004:	6818      	ldr	r0, [r3, #0]
 8011006:	f7ff bfd2 	b.w	8010fae <_raise_r>
 801100a:	bf00      	nop
 801100c:	2000002c 	.word	0x2000002c

08011010 <_kill_r>:
 8011010:	b538      	push	{r3, r4, r5, lr}
 8011012:	4d07      	ldr	r5, [pc, #28]	; (8011030 <_kill_r+0x20>)
 8011014:	2300      	movs	r3, #0
 8011016:	4604      	mov	r4, r0
 8011018:	4608      	mov	r0, r1
 801101a:	4611      	mov	r1, r2
 801101c:	602b      	str	r3, [r5, #0]
 801101e:	f7f4 fa09 	bl	8005434 <_kill>
 8011022:	1c43      	adds	r3, r0, #1
 8011024:	d102      	bne.n	801102c <_kill_r+0x1c>
 8011026:	682b      	ldr	r3, [r5, #0]
 8011028:	b103      	cbz	r3, 801102c <_kill_r+0x1c>
 801102a:	6023      	str	r3, [r4, #0]
 801102c:	bd38      	pop	{r3, r4, r5, pc}
 801102e:	bf00      	nop
 8011030:	200050f4 	.word	0x200050f4

08011034 <_getpid_r>:
 8011034:	f7f4 b9f6 	b.w	8005424 <_getpid>

08011038 <round>:
 8011038:	ec51 0b10 	vmov	r0, r1, d0
 801103c:	b570      	push	{r4, r5, r6, lr}
 801103e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8011042:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8011046:	2c13      	cmp	r4, #19
 8011048:	ee10 2a10 	vmov	r2, s0
 801104c:	460b      	mov	r3, r1
 801104e:	dc19      	bgt.n	8011084 <round+0x4c>
 8011050:	2c00      	cmp	r4, #0
 8011052:	da09      	bge.n	8011068 <round+0x30>
 8011054:	3401      	adds	r4, #1
 8011056:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801105a:	d103      	bne.n	8011064 <round+0x2c>
 801105c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8011060:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8011064:	2200      	movs	r2, #0
 8011066:	e028      	b.n	80110ba <round+0x82>
 8011068:	4d15      	ldr	r5, [pc, #84]	; (80110c0 <round+0x88>)
 801106a:	4125      	asrs	r5, r4
 801106c:	ea01 0605 	and.w	r6, r1, r5
 8011070:	4332      	orrs	r2, r6
 8011072:	d00e      	beq.n	8011092 <round+0x5a>
 8011074:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8011078:	fa42 f404 	asr.w	r4, r2, r4
 801107c:	4423      	add	r3, r4
 801107e:	ea23 0305 	bic.w	r3, r3, r5
 8011082:	e7ef      	b.n	8011064 <round+0x2c>
 8011084:	2c33      	cmp	r4, #51	; 0x33
 8011086:	dd07      	ble.n	8011098 <round+0x60>
 8011088:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801108c:	d101      	bne.n	8011092 <round+0x5a>
 801108e:	f7ef f925 	bl	80002dc <__adddf3>
 8011092:	ec41 0b10 	vmov	d0, r0, r1
 8011096:	bd70      	pop	{r4, r5, r6, pc}
 8011098:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801109c:	f04f 35ff 	mov.w	r5, #4294967295
 80110a0:	40f5      	lsrs	r5, r6
 80110a2:	4228      	tst	r0, r5
 80110a4:	d0f5      	beq.n	8011092 <round+0x5a>
 80110a6:	2101      	movs	r1, #1
 80110a8:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80110ac:	fa01 f404 	lsl.w	r4, r1, r4
 80110b0:	1912      	adds	r2, r2, r4
 80110b2:	bf28      	it	cs
 80110b4:	185b      	addcs	r3, r3, r1
 80110b6:	ea22 0205 	bic.w	r2, r2, r5
 80110ba:	4619      	mov	r1, r3
 80110bc:	4610      	mov	r0, r2
 80110be:	e7e8      	b.n	8011092 <round+0x5a>
 80110c0:	000fffff 	.word	0x000fffff

080110c4 <fmaxf>:
 80110c4:	b508      	push	{r3, lr}
 80110c6:	ed2d 8b02 	vpush	{d8}
 80110ca:	eeb0 8a40 	vmov.f32	s16, s0
 80110ce:	eef0 8a60 	vmov.f32	s17, s1
 80110d2:	f000 f82d 	bl	8011130 <__fpclassifyf>
 80110d6:	b148      	cbz	r0, 80110ec <fmaxf+0x28>
 80110d8:	eeb0 0a68 	vmov.f32	s0, s17
 80110dc:	f000 f828 	bl	8011130 <__fpclassifyf>
 80110e0:	b130      	cbz	r0, 80110f0 <fmaxf+0x2c>
 80110e2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80110e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ea:	dc01      	bgt.n	80110f0 <fmaxf+0x2c>
 80110ec:	eeb0 8a68 	vmov.f32	s16, s17
 80110f0:	eeb0 0a48 	vmov.f32	s0, s16
 80110f4:	ecbd 8b02 	vpop	{d8}
 80110f8:	bd08      	pop	{r3, pc}

080110fa <fminf>:
 80110fa:	b508      	push	{r3, lr}
 80110fc:	ed2d 8b02 	vpush	{d8}
 8011100:	eeb0 8a40 	vmov.f32	s16, s0
 8011104:	eef0 8a60 	vmov.f32	s17, s1
 8011108:	f000 f812 	bl	8011130 <__fpclassifyf>
 801110c:	b148      	cbz	r0, 8011122 <fminf+0x28>
 801110e:	eeb0 0a68 	vmov.f32	s0, s17
 8011112:	f000 f80d 	bl	8011130 <__fpclassifyf>
 8011116:	b130      	cbz	r0, 8011126 <fminf+0x2c>
 8011118:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011120:	d401      	bmi.n	8011126 <fminf+0x2c>
 8011122:	eeb0 8a68 	vmov.f32	s16, s17
 8011126:	eeb0 0a48 	vmov.f32	s0, s16
 801112a:	ecbd 8b02 	vpop	{d8}
 801112e:	bd08      	pop	{r3, pc}

08011130 <__fpclassifyf>:
 8011130:	ee10 3a10 	vmov	r3, s0
 8011134:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8011138:	d00d      	beq.n	8011156 <__fpclassifyf+0x26>
 801113a:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 801113e:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 8011142:	d30a      	bcc.n	801115a <__fpclassifyf+0x2a>
 8011144:	4b07      	ldr	r3, [pc, #28]	; (8011164 <__fpclassifyf+0x34>)
 8011146:	1e42      	subs	r2, r0, #1
 8011148:	429a      	cmp	r2, r3
 801114a:	d908      	bls.n	801115e <__fpclassifyf+0x2e>
 801114c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 8011150:	4258      	negs	r0, r3
 8011152:	4158      	adcs	r0, r3
 8011154:	4770      	bx	lr
 8011156:	2002      	movs	r0, #2
 8011158:	4770      	bx	lr
 801115a:	2004      	movs	r0, #4
 801115c:	4770      	bx	lr
 801115e:	2003      	movs	r0, #3
 8011160:	4770      	bx	lr
 8011162:	bf00      	nop
 8011164:	007ffffe 	.word	0x007ffffe

08011168 <exp>:
 8011168:	b538      	push	{r3, r4, r5, lr}
 801116a:	ed2d 8b02 	vpush	{d8}
 801116e:	ec55 4b10 	vmov	r4, r5, d0
 8011172:	f000 f881 	bl	8011278 <__ieee754_exp>
 8011176:	eeb0 8a40 	vmov.f32	s16, s0
 801117a:	eef0 8a60 	vmov.f32	s17, s1
 801117e:	ec45 4b10 	vmov	d0, r4, r5
 8011182:	f000 fab0 	bl	80116e6 <finite>
 8011186:	b168      	cbz	r0, 80111a4 <exp+0x3c>
 8011188:	a317      	add	r3, pc, #92	; (adr r3, 80111e8 <exp+0x80>)
 801118a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118e:	4620      	mov	r0, r4
 8011190:	4629      	mov	r1, r5
 8011192:	f7ef fce9 	bl	8000b68 <__aeabi_dcmpgt>
 8011196:	b160      	cbz	r0, 80111b2 <exp+0x4a>
 8011198:	f7fb fdda 	bl	800cd50 <__errno>
 801119c:	ed9f 8b0e 	vldr	d8, [pc, #56]	; 80111d8 <exp+0x70>
 80111a0:	2322      	movs	r3, #34	; 0x22
 80111a2:	6003      	str	r3, [r0, #0]
 80111a4:	eeb0 0a48 	vmov.f32	s0, s16
 80111a8:	eef0 0a68 	vmov.f32	s1, s17
 80111ac:	ecbd 8b02 	vpop	{d8}
 80111b0:	bd38      	pop	{r3, r4, r5, pc}
 80111b2:	a30f      	add	r3, pc, #60	; (adr r3, 80111f0 <exp+0x88>)
 80111b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111b8:	4620      	mov	r0, r4
 80111ba:	4629      	mov	r1, r5
 80111bc:	f7ef fcb6 	bl	8000b2c <__aeabi_dcmplt>
 80111c0:	2800      	cmp	r0, #0
 80111c2:	d0ef      	beq.n	80111a4 <exp+0x3c>
 80111c4:	f7fb fdc4 	bl	800cd50 <__errno>
 80111c8:	2322      	movs	r3, #34	; 0x22
 80111ca:	ed9f 8b05 	vldr	d8, [pc, #20]	; 80111e0 <exp+0x78>
 80111ce:	6003      	str	r3, [r0, #0]
 80111d0:	e7e8      	b.n	80111a4 <exp+0x3c>
 80111d2:	bf00      	nop
 80111d4:	f3af 8000 	nop.w
 80111d8:	00000000 	.word	0x00000000
 80111dc:	7ff00000 	.word	0x7ff00000
	...
 80111e8:	fefa39ef 	.word	0xfefa39ef
 80111ec:	40862e42 	.word	0x40862e42
 80111f0:	d52d3051 	.word	0xd52d3051
 80111f4:	c0874910 	.word	0xc0874910

080111f8 <fmodf>:
 80111f8:	b508      	push	{r3, lr}
 80111fa:	ed2d 8b02 	vpush	{d8}
 80111fe:	eef0 8a40 	vmov.f32	s17, s0
 8011202:	eeb0 8a60 	vmov.f32	s16, s1
 8011206:	f000 f9b9 	bl	801157c <__ieee754_fmodf>
 801120a:	eef4 8a48 	vcmp.f32	s17, s16
 801120e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011212:	d60c      	bvs.n	801122e <fmodf+0x36>
 8011214:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011234 <fmodf+0x3c>
 8011218:	eeb4 8a68 	vcmp.f32	s16, s17
 801121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011220:	d105      	bne.n	801122e <fmodf+0x36>
 8011222:	f7fb fd95 	bl	800cd50 <__errno>
 8011226:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801122a:	2321      	movs	r3, #33	; 0x21
 801122c:	6003      	str	r3, [r0, #0]
 801122e:	ecbd 8b02 	vpop	{d8}
 8011232:	bd08      	pop	{r3, pc}
 8011234:	00000000 	.word	0x00000000

08011238 <sqrtf>:
 8011238:	b508      	push	{r3, lr}
 801123a:	ed2d 8b02 	vpush	{d8}
 801123e:	eeb0 8a40 	vmov.f32	s16, s0
 8011242:	f000 fa1d 	bl	8011680 <__ieee754_sqrtf>
 8011246:	eeb4 8a48 	vcmp.f32	s16, s16
 801124a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801124e:	d60c      	bvs.n	801126a <sqrtf+0x32>
 8011250:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011270 <sqrtf+0x38>
 8011254:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801125c:	d505      	bpl.n	801126a <sqrtf+0x32>
 801125e:	f7fb fd77 	bl	800cd50 <__errno>
 8011262:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011266:	2321      	movs	r3, #33	; 0x21
 8011268:	6003      	str	r3, [r0, #0]
 801126a:	ecbd 8b02 	vpop	{d8}
 801126e:	bd08      	pop	{r3, pc}
	...

08011278 <__ieee754_exp>:
 8011278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801127c:	ec55 4b10 	vmov	r4, r5, d0
 8011280:	49b5      	ldr	r1, [pc, #724]	; (8011558 <__ieee754_exp+0x2e0>)
 8011282:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011286:	428b      	cmp	r3, r1
 8011288:	ed2d 8b04 	vpush	{d8-d9}
 801128c:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8011290:	d93d      	bls.n	801130e <__ieee754_exp+0x96>
 8011292:	49b2      	ldr	r1, [pc, #712]	; (801155c <__ieee754_exp+0x2e4>)
 8011294:	428b      	cmp	r3, r1
 8011296:	d918      	bls.n	80112ca <__ieee754_exp+0x52>
 8011298:	ee10 3a10 	vmov	r3, s0
 801129c:	f3c5 0213 	ubfx	r2, r5, #0, #20
 80112a0:	4313      	orrs	r3, r2
 80112a2:	d009      	beq.n	80112b8 <__ieee754_exp+0x40>
 80112a4:	ee10 2a10 	vmov	r2, s0
 80112a8:	462b      	mov	r3, r5
 80112aa:	4620      	mov	r0, r4
 80112ac:	4629      	mov	r1, r5
 80112ae:	f7ef f815 	bl	80002dc <__adddf3>
 80112b2:	4604      	mov	r4, r0
 80112b4:	460d      	mov	r5, r1
 80112b6:	e002      	b.n	80112be <__ieee754_exp+0x46>
 80112b8:	b10e      	cbz	r6, 80112be <__ieee754_exp+0x46>
 80112ba:	2400      	movs	r4, #0
 80112bc:	2500      	movs	r5, #0
 80112be:	ecbd 8b04 	vpop	{d8-d9}
 80112c2:	ec45 4b10 	vmov	d0, r4, r5
 80112c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80112ca:	a38d      	add	r3, pc, #564	; (adr r3, 8011500 <__ieee754_exp+0x288>)
 80112cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112d0:	ee10 0a10 	vmov	r0, s0
 80112d4:	4629      	mov	r1, r5
 80112d6:	f7ef fc47 	bl	8000b68 <__aeabi_dcmpgt>
 80112da:	4607      	mov	r7, r0
 80112dc:	b130      	cbz	r0, 80112ec <__ieee754_exp+0x74>
 80112de:	ecbd 8b04 	vpop	{d8-d9}
 80112e2:	2000      	movs	r0, #0
 80112e4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80112e8:	f000 b9f4 	b.w	80116d4 <__math_oflow>
 80112ec:	a386      	add	r3, pc, #536	; (adr r3, 8011508 <__ieee754_exp+0x290>)
 80112ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112f2:	4620      	mov	r0, r4
 80112f4:	4629      	mov	r1, r5
 80112f6:	f7ef fc19 	bl	8000b2c <__aeabi_dcmplt>
 80112fa:	2800      	cmp	r0, #0
 80112fc:	f000 808b 	beq.w	8011416 <__ieee754_exp+0x19e>
 8011300:	ecbd 8b04 	vpop	{d8-d9}
 8011304:	4638      	mov	r0, r7
 8011306:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801130a:	f000 b9da 	b.w	80116c2 <__math_uflow>
 801130e:	4a94      	ldr	r2, [pc, #592]	; (8011560 <__ieee754_exp+0x2e8>)
 8011310:	4293      	cmp	r3, r2
 8011312:	f240 80ac 	bls.w	801146e <__ieee754_exp+0x1f6>
 8011316:	4a93      	ldr	r2, [pc, #588]	; (8011564 <__ieee754_exp+0x2ec>)
 8011318:	4293      	cmp	r3, r2
 801131a:	d87c      	bhi.n	8011416 <__ieee754_exp+0x19e>
 801131c:	4b92      	ldr	r3, [pc, #584]	; (8011568 <__ieee754_exp+0x2f0>)
 801131e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	ee10 0a10 	vmov	r0, s0
 801132a:	4629      	mov	r1, r5
 801132c:	f7ee ffd4 	bl	80002d8 <__aeabi_dsub>
 8011330:	4b8e      	ldr	r3, [pc, #568]	; (801156c <__ieee754_exp+0x2f4>)
 8011332:	00f7      	lsls	r7, r6, #3
 8011334:	443b      	add	r3, r7
 8011336:	ed93 7b00 	vldr	d7, [r3]
 801133a:	f1c6 0a01 	rsb	sl, r6, #1
 801133e:	4680      	mov	r8, r0
 8011340:	4689      	mov	r9, r1
 8011342:	ebaa 0a06 	sub.w	sl, sl, r6
 8011346:	eeb0 8a47 	vmov.f32	s16, s14
 801134a:	eef0 8a67 	vmov.f32	s17, s15
 801134e:	ec53 2b18 	vmov	r2, r3, d8
 8011352:	4640      	mov	r0, r8
 8011354:	4649      	mov	r1, r9
 8011356:	f7ee ffbf 	bl	80002d8 <__aeabi_dsub>
 801135a:	4604      	mov	r4, r0
 801135c:	460d      	mov	r5, r1
 801135e:	4622      	mov	r2, r4
 8011360:	462b      	mov	r3, r5
 8011362:	4620      	mov	r0, r4
 8011364:	4629      	mov	r1, r5
 8011366:	f7ef f96f 	bl	8000648 <__aeabi_dmul>
 801136a:	a369      	add	r3, pc, #420	; (adr r3, 8011510 <__ieee754_exp+0x298>)
 801136c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011370:	4606      	mov	r6, r0
 8011372:	460f      	mov	r7, r1
 8011374:	f7ef f968 	bl	8000648 <__aeabi_dmul>
 8011378:	a367      	add	r3, pc, #412	; (adr r3, 8011518 <__ieee754_exp+0x2a0>)
 801137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801137e:	f7ee ffab 	bl	80002d8 <__aeabi_dsub>
 8011382:	4632      	mov	r2, r6
 8011384:	463b      	mov	r3, r7
 8011386:	f7ef f95f 	bl	8000648 <__aeabi_dmul>
 801138a:	a365      	add	r3, pc, #404	; (adr r3, 8011520 <__ieee754_exp+0x2a8>)
 801138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011390:	f7ee ffa4 	bl	80002dc <__adddf3>
 8011394:	4632      	mov	r2, r6
 8011396:	463b      	mov	r3, r7
 8011398:	f7ef f956 	bl	8000648 <__aeabi_dmul>
 801139c:	a362      	add	r3, pc, #392	; (adr r3, 8011528 <__ieee754_exp+0x2b0>)
 801139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a2:	f7ee ff99 	bl	80002d8 <__aeabi_dsub>
 80113a6:	4632      	mov	r2, r6
 80113a8:	463b      	mov	r3, r7
 80113aa:	f7ef f94d 	bl	8000648 <__aeabi_dmul>
 80113ae:	a360      	add	r3, pc, #384	; (adr r3, 8011530 <__ieee754_exp+0x2b8>)
 80113b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113b4:	f7ee ff92 	bl	80002dc <__adddf3>
 80113b8:	4632      	mov	r2, r6
 80113ba:	463b      	mov	r3, r7
 80113bc:	f7ef f944 	bl	8000648 <__aeabi_dmul>
 80113c0:	4602      	mov	r2, r0
 80113c2:	460b      	mov	r3, r1
 80113c4:	4620      	mov	r0, r4
 80113c6:	4629      	mov	r1, r5
 80113c8:	f7ee ff86 	bl	80002d8 <__aeabi_dsub>
 80113cc:	4602      	mov	r2, r0
 80113ce:	460b      	mov	r3, r1
 80113d0:	4606      	mov	r6, r0
 80113d2:	460f      	mov	r7, r1
 80113d4:	4620      	mov	r0, r4
 80113d6:	4629      	mov	r1, r5
 80113d8:	f7ef f936 	bl	8000648 <__aeabi_dmul>
 80113dc:	ec41 0b19 	vmov	d9, r0, r1
 80113e0:	f1ba 0f00 	cmp.w	sl, #0
 80113e4:	d15d      	bne.n	80114a2 <__ieee754_exp+0x22a>
 80113e6:	2200      	movs	r2, #0
 80113e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80113ec:	4630      	mov	r0, r6
 80113ee:	4639      	mov	r1, r7
 80113f0:	f7ee ff72 	bl	80002d8 <__aeabi_dsub>
 80113f4:	4602      	mov	r2, r0
 80113f6:	460b      	mov	r3, r1
 80113f8:	ec51 0b19 	vmov	r0, r1, d9
 80113fc:	f7ef fa4e 	bl	800089c <__aeabi_ddiv>
 8011400:	4622      	mov	r2, r4
 8011402:	462b      	mov	r3, r5
 8011404:	f7ee ff68 	bl	80002d8 <__aeabi_dsub>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	2000      	movs	r0, #0
 801140e:	4958      	ldr	r1, [pc, #352]	; (8011570 <__ieee754_exp+0x2f8>)
 8011410:	f7ee ff62 	bl	80002d8 <__aeabi_dsub>
 8011414:	e74d      	b.n	80112b2 <__ieee754_exp+0x3a>
 8011416:	4857      	ldr	r0, [pc, #348]	; (8011574 <__ieee754_exp+0x2fc>)
 8011418:	a347      	add	r3, pc, #284	; (adr r3, 8011538 <__ieee754_exp+0x2c0>)
 801141a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801141e:	eb00 06c6 	add.w	r6, r0, r6, lsl #3
 8011422:	4629      	mov	r1, r5
 8011424:	4620      	mov	r0, r4
 8011426:	f7ef f90f 	bl	8000648 <__aeabi_dmul>
 801142a:	e9d6 2300 	ldrd	r2, r3, [r6]
 801142e:	f7ee ff55 	bl	80002dc <__adddf3>
 8011432:	f7ef fbb9 	bl	8000ba8 <__aeabi_d2iz>
 8011436:	4682      	mov	sl, r0
 8011438:	f7ef f89c 	bl	8000574 <__aeabi_i2d>
 801143c:	a340      	add	r3, pc, #256	; (adr r3, 8011540 <__ieee754_exp+0x2c8>)
 801143e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011442:	4606      	mov	r6, r0
 8011444:	460f      	mov	r7, r1
 8011446:	f7ef f8ff 	bl	8000648 <__aeabi_dmul>
 801144a:	4602      	mov	r2, r0
 801144c:	460b      	mov	r3, r1
 801144e:	4620      	mov	r0, r4
 8011450:	4629      	mov	r1, r5
 8011452:	f7ee ff41 	bl	80002d8 <__aeabi_dsub>
 8011456:	a33c      	add	r3, pc, #240	; (adr r3, 8011548 <__ieee754_exp+0x2d0>)
 8011458:	e9d3 2300 	ldrd	r2, r3, [r3]
 801145c:	4680      	mov	r8, r0
 801145e:	4689      	mov	r9, r1
 8011460:	4630      	mov	r0, r6
 8011462:	4639      	mov	r1, r7
 8011464:	f7ef f8f0 	bl	8000648 <__aeabi_dmul>
 8011468:	ec41 0b18 	vmov	d8, r0, r1
 801146c:	e76f      	b.n	801134e <__ieee754_exp+0xd6>
 801146e:	4a42      	ldr	r2, [pc, #264]	; (8011578 <__ieee754_exp+0x300>)
 8011470:	4293      	cmp	r3, r2
 8011472:	d811      	bhi.n	8011498 <__ieee754_exp+0x220>
 8011474:	a336      	add	r3, pc, #216	; (adr r3, 8011550 <__ieee754_exp+0x2d8>)
 8011476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801147a:	ee10 0a10 	vmov	r0, s0
 801147e:	4629      	mov	r1, r5
 8011480:	f7ee ff2c 	bl	80002dc <__adddf3>
 8011484:	4b3a      	ldr	r3, [pc, #232]	; (8011570 <__ieee754_exp+0x2f8>)
 8011486:	2200      	movs	r2, #0
 8011488:	f7ef fb6e 	bl	8000b68 <__aeabi_dcmpgt>
 801148c:	b138      	cbz	r0, 801149e <__ieee754_exp+0x226>
 801148e:	4b38      	ldr	r3, [pc, #224]	; (8011570 <__ieee754_exp+0x2f8>)
 8011490:	2200      	movs	r2, #0
 8011492:	4620      	mov	r0, r4
 8011494:	4629      	mov	r1, r5
 8011496:	e70a      	b.n	80112ae <__ieee754_exp+0x36>
 8011498:	f04f 0a00 	mov.w	sl, #0
 801149c:	e75f      	b.n	801135e <__ieee754_exp+0xe6>
 801149e:	4682      	mov	sl, r0
 80114a0:	e75d      	b.n	801135e <__ieee754_exp+0xe6>
 80114a2:	4632      	mov	r2, r6
 80114a4:	463b      	mov	r3, r7
 80114a6:	2000      	movs	r0, #0
 80114a8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80114ac:	f7ee ff14 	bl	80002d8 <__aeabi_dsub>
 80114b0:	4602      	mov	r2, r0
 80114b2:	460b      	mov	r3, r1
 80114b4:	ec51 0b19 	vmov	r0, r1, d9
 80114b8:	f7ef f9f0 	bl	800089c <__aeabi_ddiv>
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	ec51 0b18 	vmov	r0, r1, d8
 80114c4:	f7ee ff08 	bl	80002d8 <__aeabi_dsub>
 80114c8:	4642      	mov	r2, r8
 80114ca:	464b      	mov	r3, r9
 80114cc:	f7ee ff04 	bl	80002d8 <__aeabi_dsub>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	2000      	movs	r0, #0
 80114d6:	4926      	ldr	r1, [pc, #152]	; (8011570 <__ieee754_exp+0x2f8>)
 80114d8:	f7ee fefe 	bl	80002d8 <__aeabi_dsub>
 80114dc:	f46f 727f 	mvn.w	r2, #1020	; 0x3fc
 80114e0:	4592      	cmp	sl, r2
 80114e2:	db02      	blt.n	80114ea <__ieee754_exp+0x272>
 80114e4:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80114e8:	e6e3      	b.n	80112b2 <__ieee754_exp+0x3a>
 80114ea:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8
 80114ee:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 80114f2:	2200      	movs	r2, #0
 80114f4:	f04f 73b8 	mov.w	r3, #24117248	; 0x1700000
 80114f8:	f7ef f8a6 	bl	8000648 <__aeabi_dmul>
 80114fc:	e6d9      	b.n	80112b2 <__ieee754_exp+0x3a>
 80114fe:	bf00      	nop
 8011500:	fefa39ef 	.word	0xfefa39ef
 8011504:	40862e42 	.word	0x40862e42
 8011508:	d52d3051 	.word	0xd52d3051
 801150c:	c0874910 	.word	0xc0874910
 8011510:	72bea4d0 	.word	0x72bea4d0
 8011514:	3e663769 	.word	0x3e663769
 8011518:	c5d26bf1 	.word	0xc5d26bf1
 801151c:	3ebbbd41 	.word	0x3ebbbd41
 8011520:	af25de2c 	.word	0xaf25de2c
 8011524:	3f11566a 	.word	0x3f11566a
 8011528:	16bebd93 	.word	0x16bebd93
 801152c:	3f66c16c 	.word	0x3f66c16c
 8011530:	5555553e 	.word	0x5555553e
 8011534:	3fc55555 	.word	0x3fc55555
 8011538:	652b82fe 	.word	0x652b82fe
 801153c:	3ff71547 	.word	0x3ff71547
 8011540:	fee00000 	.word	0xfee00000
 8011544:	3fe62e42 	.word	0x3fe62e42
 8011548:	35793c76 	.word	0x35793c76
 801154c:	3dea39ef 	.word	0x3dea39ef
 8011550:	8800759c 	.word	0x8800759c
 8011554:	7e37e43c 	.word	0x7e37e43c
 8011558:	40862e41 	.word	0x40862e41
 801155c:	7fefffff 	.word	0x7fefffff
 8011560:	3fd62e42 	.word	0x3fd62e42
 8011564:	3ff0a2b1 	.word	0x3ff0a2b1
 8011568:	08012bc0 	.word	0x08012bc0
 801156c:	08012bd0 	.word	0x08012bd0
 8011570:	3ff00000 	.word	0x3ff00000
 8011574:	08012bb0 	.word	0x08012bb0
 8011578:	3defffff 	.word	0x3defffff

0801157c <__ieee754_fmodf>:
 801157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801157e:	ee10 5a90 	vmov	r5, s1
 8011582:	f035 4400 	bics.w	r4, r5, #2147483648	; 0x80000000
 8011586:	d009      	beq.n	801159c <__ieee754_fmodf+0x20>
 8011588:	ee10 2a10 	vmov	r2, s0
 801158c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8011590:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011594:	da02      	bge.n	801159c <__ieee754_fmodf+0x20>
 8011596:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 801159a:	dd04      	ble.n	80115a6 <__ieee754_fmodf+0x2a>
 801159c:	ee60 0a20 	vmul.f32	s1, s0, s1
 80115a0:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80115a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115a6:	42a3      	cmp	r3, r4
 80115a8:	dbfc      	blt.n	80115a4 <__ieee754_fmodf+0x28>
 80115aa:	f002 4600 	and.w	r6, r2, #2147483648	; 0x80000000
 80115ae:	d105      	bne.n	80115bc <__ieee754_fmodf+0x40>
 80115b0:	4b32      	ldr	r3, [pc, #200]	; (801167c <__ieee754_fmodf+0x100>)
 80115b2:	eb03 7356 	add.w	r3, r3, r6, lsr #29
 80115b6:	ed93 0a00 	vldr	s0, [r3]
 80115ba:	e7f3      	b.n	80115a4 <__ieee754_fmodf+0x28>
 80115bc:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80115c0:	d13f      	bne.n	8011642 <__ieee754_fmodf+0xc6>
 80115c2:	0219      	lsls	r1, r3, #8
 80115c4:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80115c8:	2900      	cmp	r1, #0
 80115ca:	dc37      	bgt.n	801163c <__ieee754_fmodf+0xc0>
 80115cc:	f015 4fff 	tst.w	r5, #2139095040	; 0x7f800000
 80115d0:	d13d      	bne.n	801164e <__ieee754_fmodf+0xd2>
 80115d2:	0227      	lsls	r7, r4, #8
 80115d4:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 80115d8:	2f00      	cmp	r7, #0
 80115da:	da35      	bge.n	8011648 <__ieee754_fmodf+0xcc>
 80115dc:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 80115e0:	bfbb      	ittet	lt
 80115e2:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80115e6:	1a12      	sublt	r2, r2, r0
 80115e8:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 80115ec:	4093      	lsllt	r3, r2
 80115ee:	bfa8      	it	ge
 80115f0:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 80115f4:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 80115f8:	bfb5      	itete	lt
 80115fa:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 80115fe:	f3c5 0416 	ubfxge	r4, r5, #0, #23
 8011602:	1a52      	sublt	r2, r2, r1
 8011604:	f444 0400 	orrge.w	r4, r4, #8388608	; 0x800000
 8011608:	bfb8      	it	lt
 801160a:	4094      	lsllt	r4, r2
 801160c:	1a40      	subs	r0, r0, r1
 801160e:	1b1a      	subs	r2, r3, r4
 8011610:	bb00      	cbnz	r0, 8011654 <__ieee754_fmodf+0xd8>
 8011612:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8011616:	bf38      	it	cc
 8011618:	4613      	movcc	r3, r2
 801161a:	2b00      	cmp	r3, #0
 801161c:	d0c8      	beq.n	80115b0 <__ieee754_fmodf+0x34>
 801161e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8011622:	db1f      	blt.n	8011664 <__ieee754_fmodf+0xe8>
 8011624:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8011628:	db1f      	blt.n	801166a <__ieee754_fmodf+0xee>
 801162a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 801162e:	317f      	adds	r1, #127	; 0x7f
 8011630:	4333      	orrs	r3, r6
 8011632:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8011636:	ee00 3a10 	vmov	s0, r3
 801163a:	e7b3      	b.n	80115a4 <__ieee754_fmodf+0x28>
 801163c:	3801      	subs	r0, #1
 801163e:	0049      	lsls	r1, r1, #1
 8011640:	e7c2      	b.n	80115c8 <__ieee754_fmodf+0x4c>
 8011642:	15d8      	asrs	r0, r3, #23
 8011644:	387f      	subs	r0, #127	; 0x7f
 8011646:	e7c1      	b.n	80115cc <__ieee754_fmodf+0x50>
 8011648:	3901      	subs	r1, #1
 801164a:	007f      	lsls	r7, r7, #1
 801164c:	e7c4      	b.n	80115d8 <__ieee754_fmodf+0x5c>
 801164e:	15e1      	asrs	r1, r4, #23
 8011650:	397f      	subs	r1, #127	; 0x7f
 8011652:	e7c3      	b.n	80115dc <__ieee754_fmodf+0x60>
 8011654:	2a00      	cmp	r2, #0
 8011656:	da02      	bge.n	801165e <__ieee754_fmodf+0xe2>
 8011658:	005b      	lsls	r3, r3, #1
 801165a:	3801      	subs	r0, #1
 801165c:	e7d7      	b.n	801160e <__ieee754_fmodf+0x92>
 801165e:	d0a7      	beq.n	80115b0 <__ieee754_fmodf+0x34>
 8011660:	0053      	lsls	r3, r2, #1
 8011662:	e7fa      	b.n	801165a <__ieee754_fmodf+0xde>
 8011664:	005b      	lsls	r3, r3, #1
 8011666:	3901      	subs	r1, #1
 8011668:	e7d9      	b.n	801161e <__ieee754_fmodf+0xa2>
 801166a:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 801166e:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8011672:	3182      	adds	r1, #130	; 0x82
 8011674:	410b      	asrs	r3, r1
 8011676:	4333      	orrs	r3, r6
 8011678:	e7dd      	b.n	8011636 <__ieee754_fmodf+0xba>
 801167a:	bf00      	nop
 801167c:	08012be0 	.word	0x08012be0

08011680 <__ieee754_sqrtf>:
 8011680:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011684:	4770      	bx	lr

08011686 <with_errno>:
 8011686:	b570      	push	{r4, r5, r6, lr}
 8011688:	4604      	mov	r4, r0
 801168a:	460d      	mov	r5, r1
 801168c:	4616      	mov	r6, r2
 801168e:	f7fb fb5f 	bl	800cd50 <__errno>
 8011692:	4629      	mov	r1, r5
 8011694:	6006      	str	r6, [r0, #0]
 8011696:	4620      	mov	r0, r4
 8011698:	bd70      	pop	{r4, r5, r6, pc}

0801169a <xflow>:
 801169a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801169c:	4614      	mov	r4, r2
 801169e:	461d      	mov	r5, r3
 80116a0:	b108      	cbz	r0, 80116a6 <xflow+0xc>
 80116a2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80116a6:	e9cd 2300 	strd	r2, r3, [sp]
 80116aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116ae:	4620      	mov	r0, r4
 80116b0:	4629      	mov	r1, r5
 80116b2:	f7ee ffc9 	bl	8000648 <__aeabi_dmul>
 80116b6:	2222      	movs	r2, #34	; 0x22
 80116b8:	b003      	add	sp, #12
 80116ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80116be:	f7ff bfe2 	b.w	8011686 <with_errno>

080116c2 <__math_uflow>:
 80116c2:	b508      	push	{r3, lr}
 80116c4:	2200      	movs	r2, #0
 80116c6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80116ca:	f7ff ffe6 	bl	801169a <xflow>
 80116ce:	ec41 0b10 	vmov	d0, r0, r1
 80116d2:	bd08      	pop	{r3, pc}

080116d4 <__math_oflow>:
 80116d4:	b508      	push	{r3, lr}
 80116d6:	2200      	movs	r2, #0
 80116d8:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 80116dc:	f7ff ffdd 	bl	801169a <xflow>
 80116e0:	ec41 0b10 	vmov	d0, r0, r1
 80116e4:	bd08      	pop	{r3, pc}

080116e6 <finite>:
 80116e6:	b082      	sub	sp, #8
 80116e8:	ed8d 0b00 	vstr	d0, [sp]
 80116ec:	9801      	ldr	r0, [sp, #4]
 80116ee:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80116f2:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80116f6:	0fc0      	lsrs	r0, r0, #31
 80116f8:	b002      	add	sp, #8
 80116fa:	4770      	bx	lr

080116fc <_init>:
 80116fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80116fe:	bf00      	nop
 8011700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011702:	bc08      	pop	{r3}
 8011704:	469e      	mov	lr, r3
 8011706:	4770      	bx	lr

08011708 <_fini>:
 8011708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801170a:	bf00      	nop
 801170c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801170e:	bc08      	pop	{r3}
 8011710:	469e      	mov	lr, r3
 8011712:	4770      	bx	lr
