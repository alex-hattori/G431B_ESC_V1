
G431B_ESC_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097bc  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000042c  080099a0  080099a0  000199a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009dcc  08009dcc  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08009dcc  08009dcc  00019dcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009dd4  08009dd4  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009dd4  08009dd4  00019dd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009dd8  08009dd8  00019dd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08009ddc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000660  200001dc  08009fb8  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  08009fb8  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015dd8  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fd  00000000  00000000  00035fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001488  00000000  00000000  000390e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001320  00000000  00000000  0003a570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002081c  00000000  00000000  0003b890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018488  00000000  00000000  0005c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c9d22  00000000  00000000  00074534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013e256  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  0013e2a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009984 	.word	0x08009984

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001e0 	.word	0x200001e0
 800021c:	08009984 	.word	0x08009984

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	0000      	movs	r0, r0
	...

08000f00 <eeprom_restore>:

static uint32_t const page_nb = 58U; //(uint32_t)FLASH_PAGE_NB-1;
static uint32_t const start_address = 0x08000000UL+58*0x800U; //(FLASH_BASE)+page_nb*(FLASH_PAGE_SIZE);

HAL_StatusTypeDef eeprom_restore(float * float_regs, uint32_t float_size, int * int_regs, uint32_t int_size)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b090      	sub	sp, #64	; 0x40
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
	uint64_t data = 0xDEADBEEF;
 8000f0e:	a33b      	add	r3, pc, #236	; (adr r3, 8000ffc <eeprom_restore+0xfc>)
 8000f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f14:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8000f18:	2300      	movs	r3, #0
 8000f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f1c:	e02c      	b.n	8000f78 <eeprom_restore+0x78>
	{
		memcpy(&data, (uint32_t *)(start_address+32*index), sizeof(uint64_t));
 8000f1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f20:	015b      	lsls	r3, r3, #5
 8000f22:	4a35      	ldr	r2, [pc, #212]	; (8000ff8 <eeprom_restore+0xf8>)
 8000f24:	4413      	add	r3, r2
 8000f26:	4619      	mov	r1, r3
 8000f28:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f2c:	2208      	movs	r2, #8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fff2 	bl	8006f18 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8000f34:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000f38:	4613      	mov	r3, r2
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t temp2 = data>>32;
 8000f3c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	f04f 0300 	mov.w	r3, #0
 8000f48:	000a      	movs	r2, r1
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	4613      	mov	r3, r2
 8000f4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
		float value;
		float value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8000f52:	627b      	str	r3, [r7, #36]	; 0x24
 8000f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8000f56:	623b      	str	r3, [r7, #32]
		float_regs[index] = value;
 8000f58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4413      	add	r3, r2
 8000f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f62:	601a      	str	r2, [r3, #0]
		float_regs[index+1] = value2;
 8000f64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f66:	3301      	adds	r3, #1
 8000f68:	009b      	lsls	r3, r3, #2
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	4413      	add	r3, r2
 8000f6e:	6a3a      	ldr	r2, [r7, #32]
 8000f70:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<float_size;index+=2) // 64 bits
 8000f72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000f74:	3302      	adds	r3, #2
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f7a:	68bb      	ldr	r3, [r7, #8]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d3ce      	bcc.n	8000f1e <eeprom_restore+0x1e>
	}
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8000f80:	2300      	movs	r3, #0
 8000f82:	63bb      	str	r3, [r7, #56]	; 0x38
 8000f84:	e02e      	b.n	8000fe4 <eeprom_restore+0xe4>
	{

		memcpy(&data, (uint32_t *)(start_address+32*(index+float_size)), sizeof(uint64_t));
 8000f86:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	4413      	add	r3, r2
 8000f8c:	015b      	lsls	r3, r3, #5
 8000f8e:	4a1a      	ldr	r2, [pc, #104]	; (8000ff8 <eeprom_restore+0xf8>)
 8000f90:	4413      	add	r3, r2
 8000f92:	4619      	mov	r1, r3
 8000f94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f98:	2208      	movs	r2, #8
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 ffbc 	bl	8006f18 <memcpy>
		uint32_t temp = data&0xFFFFFFFF;
 8000fa0:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000fa4:	4613      	mov	r3, r2
 8000fa6:	61fb      	str	r3, [r7, #28]
		uint32_t temp2 = data>>32;
 8000fa8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8000fac:	f04f 0200 	mov.w	r2, #0
 8000fb0:	f04f 0300 	mov.w	r3, #0
 8000fb4:	000a      	movs	r2, r1
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	4613      	mov	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	69fb      	ldr	r3, [r7, #28]
		int value;
		int value2;
		memcpy(&value,&temp,sizeof(uint32_t));
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	69bb      	ldr	r3, [r7, #24]
		memcpy(&value2,&temp2,sizeof(uint32_t));
 8000fc2:	613b      	str	r3, [r7, #16]
		int_regs[index] = value;
 8000fc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	687a      	ldr	r2, [r7, #4]
 8000fca:	4413      	add	r3, r2
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	601a      	str	r2, [r3, #0]
		int_regs[index+1] = value2;
 8000fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	4413      	add	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	601a      	str	r2, [r3, #0]
	for(uint32_t index=0; index<int_size;index+=2) // 64 bits
 8000fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000fe0:	3302      	adds	r3, #2
 8000fe2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000fe4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d3cc      	bcc.n	8000f86 <eeprom_restore+0x86>
	}

	return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3740      	adds	r7, #64	; 0x40
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	0801d000 	.word	0x0801d000
 8000ffc:	deadbeef 	.word	0xdeadbeef
 8001000:	00000000 	.word	0x00000000

08001004 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b08a      	sub	sp, #40	; 0x28
 8001008:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100a:	f107 0314 	add.w	r3, r7, #20
 800100e:	2200      	movs	r2, #0
 8001010:	601a      	str	r2, [r3, #0]
 8001012:	605a      	str	r2, [r3, #4]
 8001014:	609a      	str	r2, [r3, #8]
 8001016:	60da      	str	r2, [r3, #12]
 8001018:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <MX_GPIO_Init+0xac>)
 800101c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101e:	4a24      	ldr	r2, [pc, #144]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001020:	f043 0304 	orr.w	r3, r3, #4
 8001024:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001026:	4b22      	ldr	r3, [pc, #136]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102a:	f003 0304 	and.w	r3, r3, #4
 800102e:	613b      	str	r3, [r7, #16]
 8001030:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001032:	4b1f      	ldr	r3, [pc, #124]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001034:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001036:	4a1e      	ldr	r2, [pc, #120]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001038:	f043 0320 	orr.w	r3, r3, #32
 800103c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103e:	4b1c      	ldr	r3, [pc, #112]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001040:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001042:	f003 0320 	and.w	r3, r3, #32
 8001046:	60fb      	str	r3, [r7, #12]
 8001048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800104a:	4b19      	ldr	r3, [pc, #100]	; (80010b0 <MX_GPIO_Init+0xac>)
 800104c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800104e:	4a18      	ldr	r2, [pc, #96]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001050:	f043 0302 	orr.w	r3, r3, #2
 8001054:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001056:	4b16      	ldr	r3, [pc, #88]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	f003 0302 	and.w	r3, r3, #2
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	4a12      	ldr	r2, [pc, #72]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001068:	f043 0301 	orr.w	r3, r3, #1
 800106c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <MX_GPIO_Init+0xac>)
 8001070:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	607b      	str	r3, [r7, #4]
 8001078:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800107a:	2200      	movs	r2, #0
 800107c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f001 f9d4 	bl	8002430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800108e:	2301      	movs	r3, #1
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001096:	2300      	movs	r3, #0
 8001098:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800109a:	f107 0314 	add.w	r3, r7, #20
 800109e:	4619      	mov	r1, r3
 80010a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010a4:	f001 f842 	bl	800212c <HAL_GPIO_Init>

}
 80010a8:	bf00      	nop
 80010aa:	3728      	adds	r7, #40	; 0x28
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	40021000 	.word	0x40021000

080010b4 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80010b8:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <MX_I2C1_Init+0x80>)
 80010ba:	4a1f      	ldr	r2, [pc, #124]	; (8001138 <MX_I2C1_Init+0x84>)
 80010bc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0020061A;
 80010be:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <MX_I2C1_Init+0x80>)
 80010c0:	4a1e      	ldr	r2, [pc, #120]	; (800113c <MX_I2C1_Init+0x88>)
 80010c2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80010c4:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <MX_I2C1_Init+0x80>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010ca:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <MX_I2C1_Init+0x80>)
 80010cc:	2201      	movs	r2, #1
 80010ce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010d0:	4b18      	ldr	r3, [pc, #96]	; (8001134 <MX_I2C1_Init+0x80>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <MX_I2C1_Init+0x80>)
 80010d8:	2200      	movs	r2, #0
 80010da:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010dc:	4b15      	ldr	r3, [pc, #84]	; (8001134 <MX_I2C1_Init+0x80>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <MX_I2C1_Init+0x80>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <MX_I2C1_Init+0x80>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ee:	4811      	ldr	r0, [pc, #68]	; (8001134 <MX_I2C1_Init+0x80>)
 80010f0:	f001 f9b6 	bl	8002460 <HAL_I2C_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010fa:	f000 f96d 	bl	80013d8 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010fe:	2100      	movs	r1, #0
 8001100:	480c      	ldr	r0, [pc, #48]	; (8001134 <MX_I2C1_Init+0x80>)
 8001102:	f001 fd1f 	bl	8002b44 <HAL_I2CEx_ConfigAnalogFilter>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800110c:	f000 f964 	bl	80013d8 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001110:	2100      	movs	r1, #0
 8001112:	4808      	ldr	r0, [pc, #32]	; (8001134 <MX_I2C1_Init+0x80>)
 8001114:	f001 fd61 	bl	8002bda <HAL_I2CEx_ConfigDigitalFilter>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800111e:	f000 f95b 	bl	80013d8 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(I2C_FASTMODEPLUS_I2C1);
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <MX_I2C1_Init+0x8c>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	4a06      	ldr	r2, [pc, #24]	; (8001140 <MX_I2C1_Init+0x8c>)
 8001128:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800112c:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800112e:	bf00      	nop
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	200001f8 	.word	0x200001f8
 8001138:	40005400 	.word	0x40005400
 800113c:	0020061a 	.word	0x0020061a
 8001140:	40010000 	.word	0x40010000

08001144 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b08a      	sub	sp, #40	; 0x28
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_I2C_MspInit+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d128      	bne.n	80011b8 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001166:	4b17      	ldr	r3, [pc, #92]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	4a16      	ldr	r2, [pc, #88]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 800116c:	f043 0302 	orr.w	r3, r3, #2
 8001170:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001172:	4b14      	ldr	r3, [pc, #80]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 8001174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	613b      	str	r3, [r7, #16]
 800117c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8-BOOT0     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800117e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001188:	2301      	movs	r3, #1
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001190:	2304      	movs	r3, #4
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	480b      	ldr	r0, [pc, #44]	; (80011c8 <HAL_I2C_MspInit+0x84>)
 800119c:	f000 ffc6 	bl	800212c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80011a0:	4b08      	ldr	r3, [pc, #32]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a4:	4a07      	ldr	r2, [pc, #28]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011aa:	6593      	str	r3, [r2, #88]	; 0x58
 80011ac:	4b05      	ldr	r3, [pc, #20]	; (80011c4 <HAL_I2C_MspInit+0x80>)
 80011ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011b4:	60fb      	str	r3, [r7, #12]
 80011b6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011b8:	bf00      	nop
 80011ba:	3728      	adds	r7, #40	; 0x28
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40005400 	.word	0x40005400
 80011c4:	40021000 	.word	0x40021000
 80011c8:	48000400 	.word	0x48000400

080011cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d2:	f000 fd48 	bl	8001c66 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d6:	f000 f899 	bl	800130c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(100);
 80011da:	2064      	movs	r0, #100	; 0x64
 80011dc:	f000 fdb4 	bl	8001d48 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f7ff ff10 	bl	8001004 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011e4:	f000 fc4a 	bl	8001a7c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011e8:	f000 fade 	bl	80017a8 <MX_TIM1_Init>
  MX_I2C1_Init();
 80011ec:	f7ff ff62 	bl	80010b4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 80011f0:	2201      	movs	r2, #1
 80011f2:	4940      	ldr	r1, [pc, #256]	; (80012f4 <main+0x128>)
 80011f4:	4840      	ldr	r0, [pc, #256]	; (80012f8 <main+0x12c>)
 80011f6:	f004 fa73 	bl	80056e0 <HAL_UART_Receive_IT>
  load_eeprom_regs();
 80011fa:	f000 fcfb 	bl	8001bf4 <load_eeprom_regs>


  /* Turn on PWM */
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	483e      	ldr	r0, [pc, #248]	; (80012fc <main+0x130>)
 8001202:	f002 fe33 	bl	8003e6c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001206:	2104      	movs	r1, #4
 8001208:	483c      	ldr	r0, [pc, #240]	; (80012fc <main+0x130>)
 800120a:	f002 fe2f 	bl	8003e6c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 800120e:	2108      	movs	r1, #8
 8001210:	483a      	ldr	r0, [pc, #232]	; (80012fc <main+0x130>)
 8001212:	f002 fe2b 	bl	8003e6c <HAL_TIM_PWM_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001216:	2100      	movs	r1, #0
 8001218:	4838      	ldr	r0, [pc, #224]	; (80012fc <main+0x130>)
 800121a:	f003 ff27 	bl	800506c <HAL_TIMEx_PWMN_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800121e:	2104      	movs	r1, #4
 8001220:	4836      	ldr	r0, [pc, #216]	; (80012fc <main+0x130>)
 8001222:	f003 ff23 	bl	800506c <HAL_TIMEx_PWMN_Start>
   HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8001226:	2108      	movs	r1, #8
 8001228:	4834      	ldr	r0, [pc, #208]	; (80012fc <main+0x130>)
 800122a:	f003 ff1f 	bl	800506c <HAL_TIMEx_PWMN_Start>
   htim1.Instance->CCR3 = ((htim1.Instance->ARR))*(0.0f);
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <main+0x130>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001234:	ee07 3a90 	vmov	s15, r3
 8001238:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800123c:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8001300 <main+0x134>
 8001240:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001244:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <main+0x130>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800124c:	ee17 2a90 	vmov	r2, s15
 8001250:	63da      	str	r2, [r3, #60]	; 0x3c
   htim1.Instance->CCR1 = ((htim1.Instance->ARR))*(0.0f);
 8001252:	4b2a      	ldr	r3, [pc, #168]	; (80012fc <main+0x130>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001260:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8001300 <main+0x134>
 8001264:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001268:	4b24      	ldr	r3, [pc, #144]	; (80012fc <main+0x130>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
   htim1.Instance->CCR2 = ((htim1.Instance->ARR))*(0.0f);
 8001276:	4b21      	ldr	r3, [pc, #132]	; (80012fc <main+0x130>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127c:	ee07 3a90 	vmov	s15, r3
 8001280:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001284:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8001300 <main+0x134>
 8001288:	ee67 7a87 	vmul.f32	s15, s15, s14
 800128c:	4b1b      	ldr	r3, [pc, #108]	; (80012fc <main+0x130>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001294:	ee17 2a90 	vmov	r2, s15
 8001298:	639a      	str	r2, [r3, #56]	; 0x38
   HAL_TIM_Base_Start_IT(&htim1);
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <main+0x130>)
 800129c:	f002 fd1a 	bl	8003cd4 <HAL_TIM_Base_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
//	printf("Beans %.3f\r\n",3.14f);
	uint16_t i2cAddr = (0x36 & 0x7f) <<1;
 80012a0:	236c      	movs	r3, #108	; 0x6c
 80012a2:	80fb      	strh	r3, [r7, #6]
	        volatile uint16_t      notused       :   4;
	        volatile uint16_t      angle0_7      :   8;
	    } bit;
	} angle_reg_t;
	angle_reg_t data;
	data.raw = 0;
 80012a4:	2300      	movs	r3, #0
 80012a6:	803b      	strh	r3, [r7, #0]
	HAL_I2C_Mem_Read(&hi2c1, i2cAddr,0x0C,I2C_MEMADD_SIZE_8BIT,(uint8_t*)&data.raw, 2,2);
 80012a8:	88f9      	ldrh	r1, [r7, #6]
 80012aa:	2302      	movs	r3, #2
 80012ac:	9302      	str	r3, [sp, #8]
 80012ae:	2302      	movs	r3, #2
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	463b      	mov	r3, r7
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	2301      	movs	r3, #1
 80012b8:	220c      	movs	r2, #12
 80012ba:	4812      	ldr	r0, [pc, #72]	; (8001304 <main+0x138>)
 80012bc:	f001 f960 	bl	8002580 <HAL_I2C_Mem_Read>
	uint16_t angle = ((data.bit.angle8_12<<8)&0xF00)|data.bit.angle0_7;
 80012c0:	883b      	ldrh	r3, [r7, #0]
 80012c2:	f3c3 0303 	ubfx	r3, r3, #0, #4
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	021b      	lsls	r3, r3, #8
 80012ca:	b21b      	sxth	r3, r3
 80012cc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80012d0:	b21a      	sxth	r2, r3
 80012d2:	883b      	ldrh	r3, [r7, #0]
 80012d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b21b      	sxth	r3, r3
 80012dc:	4313      	orrs	r3, r2
 80012de:	b21b      	sxth	r3, r3
 80012e0:	80bb      	strh	r3, [r7, #4]
	printf("%d\r\n",angle);
 80012e2:	88bb      	ldrh	r3, [r7, #4]
 80012e4:	4619      	mov	r1, r3
 80012e6:	4808      	ldr	r0, [pc, #32]	; (8001308 <main+0x13c>)
 80012e8:	f006 fa96 	bl	8007818 <iprintf>
	HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	; 0x64
 80012ee:	f000 fd2b 	bl	8001d48 <HAL_Delay>
  {
 80012f2:	e7d5      	b.n	80012a0 <main+0xd4>
 80012f4:	20000244 	.word	0x20000244
 80012f8:	20000798 	.word	0x20000798
 80012fc:	2000074c 	.word	0x2000074c
 8001300:	00000000 	.word	0x00000000
 8001304:	200001f8 	.word	0x200001f8
 8001308:	080099a0 	.word	0x080099a0

0800130c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b0a4      	sub	sp, #144	; 0x90
 8001310:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001312:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001316:	2238      	movs	r2, #56	; 0x38
 8001318:	2100      	movs	r1, #0
 800131a:	4618      	mov	r0, r3
 800131c:	f005 fe0a 	bl	8006f34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001320:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001324:	2200      	movs	r2, #0
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	605a      	str	r2, [r3, #4]
 800132a:	609a      	str	r2, [r3, #8]
 800132c:	60da      	str	r2, [r3, #12]
 800132e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001330:	463b      	mov	r3, r7
 8001332:	2244      	movs	r2, #68	; 0x44
 8001334:	2100      	movs	r1, #0
 8001336:	4618      	mov	r0, r3
 8001338:	f005 fdfc 	bl	8006f34 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800133c:	2000      	movs	r0, #0
 800133e:	f001 fc99 	bl	8002c74 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001342:	2301      	movs	r3, #1
 8001344:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800134c:	2302      	movs	r3, #2
 800134e:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001350:	2303      	movs	r3, #3
 8001352:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001358:	2354      	movs	r3, #84	; 0x54
 800135a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800135e:	2302      	movs	r3, #2
 8001360:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001364:	2302      	movs	r3, #2
 8001366:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800136a:	2302      	movs	r3, #2
 800136c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001370:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001374:	4618      	mov	r0, r3
 8001376:	f001 fd31 	bl	8002ddc <HAL_RCC_OscConfig>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8001380:	f000 f82a 	bl	80013d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001384:	230f      	movs	r3, #15
 8001386:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001388:	2303      	movs	r3, #3
 800138a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138c:	2300      	movs	r3, #0
 800138e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001390:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8001394:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800139a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800139c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80013a0:	2104      	movs	r1, #4
 80013a2:	4618      	mov	r0, r3
 80013a4:	f002 f832 	bl	800340c <HAL_RCC_ClockConfig>
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80013ae:	f000 f813 	bl	80013d8 <Error_Handler>
  }
  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 80013b2:	2342      	movs	r3, #66	; 0x42
 80013b4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4618      	mov	r0, r3
 80013c2:	f002 fa3f 	bl	8003844 <HAL_RCCEx_PeriphCLKConfig>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80013cc:	f000 f804 	bl	80013d8 <Error_Handler>
  }
}
 80013d0:	bf00      	nop
 80013d2:	3790      	adds	r7, #144	; 0x90
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013dc:	b672      	cpsid	i
}
 80013de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <Error_Handler+0x8>
	...

080013e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ea:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_MspInit+0x44>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ee:	4a0e      	ldr	r2, [pc, #56]	; (8001428 <HAL_MspInit+0x44>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	6613      	str	r3, [r2, #96]	; 0x60
 80013f6:	4b0c      	ldr	r3, [pc, #48]	; (8001428 <HAL_MspInit+0x44>)
 80013f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	607b      	str	r3, [r7, #4]
 8001400:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_MspInit+0x44>)
 8001404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x44>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6593      	str	r3, [r2, #88]	; 0x58
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x44>)
 8001410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800141a:	f001 fccf 	bl	8002dbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	40021000 	.word	0x40021000

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 fc48 	bl	8001d0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET );	// Useful for timing
 8001486:	2200      	movs	r2, #0
 8001488:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800148c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001490:	f000 ffce 	bl	8002430 <HAL_GPIO_WritePin>
	for(int i = 0; i<255; i++){
 8001494:	2300      	movs	r3, #0
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	e005      	b.n	80014a6 <TIM1_UP_TIM16_IRQHandler+0x26>
		int j = i+1;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	3301      	adds	r3, #1
 800149e:	603b      	str	r3, [r7, #0]
	for(int i = 0; i<255; i++){
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3301      	adds	r3, #1
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2bfe      	cmp	r3, #254	; 0xfe
 80014aa:	ddf6      	ble.n	800149a <TIM1_UP_TIM16_IRQHandler+0x1a>
	}
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80014ac:	4806      	ldr	r0, [pc, #24]	; (80014c8 <TIM1_UP_TIM16_IRQHandler+0x48>)
 80014ae:	f002 fddd 	bl	800406c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET );	// Useful for timing
 80014b2:	2201      	movs	r2, #1
 80014b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014bc:	f000 ffb8 	bl	8002430 <HAL_GPIO_WritePin>

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	2000074c 	.word	0x2000074c

080014cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014d2:	4842      	ldr	r0, [pc, #264]	; (80015dc <USART2_IRQHandler+0x110>)
 80014d4:	f004 f94a 	bl	800576c <HAL_UART_IRQHandler>

  char c = Serial2RxBuffer[0];
 80014d8:	4b41      	ldr	r3, [pc, #260]	; (80015e0 <USART2_IRQHandler+0x114>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	71fb      	strb	r3, [r7, #7]
//  update_fsm(&state, c);
  printf("%c\r\n",c);
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	4619      	mov	r1, r3
 80014e2:	4840      	ldr	r0, [pc, #256]	; (80015e4 <USART2_IRQHandler+0x118>)
 80014e4:	f006 f998 	bl	8007818 <iprintf>
  if(c=='m'){
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	2b6d      	cmp	r3, #109	; 0x6d
 80014ec:	d135      	bne.n	800155a <USART2_IRQHandler+0x8e>
	  htim1.Instance->CCR1 = ((htim1.Instance->ARR))*(0.5f); //U
 80014ee:	4b3e      	ldr	r3, [pc, #248]	; (80015e8 <USART2_IRQHandler+0x11c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f4:	ee07 3a90 	vmov	s15, r3
 80014f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80014fc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001500:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001504:	4b38      	ldr	r3, [pc, #224]	; (80015e8 <USART2_IRQHandler+0x11c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800150c:	ee17 2a90 	vmov	r2, s15
 8001510:	635a      	str	r2, [r3, #52]	; 0x34
	  htim1.Instance->CCR2 = ((htim1.Instance->ARR))*(0.8f); //V
 8001512:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <USART2_IRQHandler+0x11c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001518:	ee07 3a90 	vmov	s15, r3
 800151c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001520:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80015ec <USART2_IRQHandler+0x120>
 8001524:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001528:	4b2f      	ldr	r3, [pc, #188]	; (80015e8 <USART2_IRQHandler+0x11c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001530:	ee17 2a90 	vmov	r2, s15
 8001534:	639a      	str	r2, [r3, #56]	; 0x38
	  htim1.Instance->CCR3 = ((htim1.Instance->ARR))*(0.1f); //W
 8001536:	4b2c      	ldr	r3, [pc, #176]	; (80015e8 <USART2_IRQHandler+0x11c>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153c:	ee07 3a90 	vmov	s15, r3
 8001540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001544:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80015f0 <USART2_IRQHandler+0x124>
 8001548:	ee67 7a87 	vmul.f32	s15, s15, s14
 800154c:	4b26      	ldr	r3, [pc, #152]	; (80015e8 <USART2_IRQHandler+0x11c>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001554:	ee17 2a90 	vmov	r2, s15
 8001558:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if(c==27){
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	2b1b      	cmp	r3, #27
 800155e:	d135      	bne.n	80015cc <USART2_IRQHandler+0x100>
	htim1.Instance->CCR3 = ((htim1.Instance->ARR))*(0.0f);
 8001560:	4b21      	ldr	r3, [pc, #132]	; (80015e8 <USART2_IRQHandler+0x11c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001566:	ee07 3a90 	vmov	s15, r3
 800156a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800156e:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80015f4 <USART2_IRQHandler+0x128>
 8001572:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <USART2_IRQHandler+0x11c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800157e:	ee17 2a90 	vmov	r2, s15
 8001582:	63da      	str	r2, [r3, #60]	; 0x3c
	htim1.Instance->CCR1 = ((htim1.Instance->ARR))*(0.0f);
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <USART2_IRQHandler+0x11c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001592:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80015f4 <USART2_IRQHandler+0x128>
 8001596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800159a:	4b13      	ldr	r3, [pc, #76]	; (80015e8 <USART2_IRQHandler+0x11c>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015a2:	ee17 2a90 	vmov	r2, s15
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34
	htim1.Instance->CCR2 = ((htim1.Instance->ARR))*(0.0f);
 80015a8:	4b0f      	ldr	r3, [pc, #60]	; (80015e8 <USART2_IRQHandler+0x11c>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	ee07 3a90 	vmov	s15, r3
 80015b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015b6:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80015f4 <USART2_IRQHandler+0x128>
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	4b0a      	ldr	r3, [pc, #40]	; (80015e8 <USART2_IRQHandler+0x11c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015c6:	ee17 2a90 	vmov	r2, s15
 80015ca:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015cc:	4803      	ldr	r0, [pc, #12]	; (80015dc <USART2_IRQHandler+0x110>)
 80015ce:	f004 f8cd 	bl	800576c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	20000798 	.word	0x20000798
 80015e0:	20000244 	.word	0x20000244
 80015e4:	080099a8 	.word	0x080099a8
 80015e8:	2000074c 	.word	0x2000074c
 80015ec:	3f4ccccd 	.word	0x3f4ccccd
 80015f0:	3dcccccd 	.word	0x3dcccccd
 80015f4:	00000000 	.word	0x00000000

080015f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
	return 1;
 80015fc:	2301      	movs	r3, #1
}
 80015fe:	4618      	mov	r0, r3
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <_kill>:

int _kill(int pid, int sig)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001612:	f005 fc57 	bl	8006ec4 <__errno>
 8001616:	4603      	mov	r3, r0
 8001618:	2216      	movs	r2, #22
 800161a:	601a      	str	r2, [r3, #0]
	return -1;
 800161c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001620:	4618      	mov	r0, r3
 8001622:	3708      	adds	r7, #8
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <_exit>:

void _exit (int status)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b082      	sub	sp, #8
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ffe7 	bl	8001608 <_kill>
	while (1) {}		/* Make sure we hang here */
 800163a:	e7fe      	b.n	800163a <_exit+0x12>

0800163c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b086      	sub	sp, #24
 8001640:	af00      	add	r7, sp, #0
 8001642:	60f8      	str	r0, [r7, #12]
 8001644:	60b9      	str	r1, [r7, #8]
 8001646:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]
 800164c:	e00a      	b.n	8001664 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800164e:	f3af 8000 	nop.w
 8001652:	4601      	mov	r1, r0
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	1c5a      	adds	r2, r3, #1
 8001658:	60ba      	str	r2, [r7, #8]
 800165a:	b2ca      	uxtb	r2, r1
 800165c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
 8001664:	697a      	ldr	r2, [r7, #20]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	429a      	cmp	r2, r3
 800166a:	dbf0      	blt.n	800164e <_read+0x12>
	}

return len;
 800166c:	687b      	ldr	r3, [r7, #4]
}
 800166e:	4618      	mov	r0, r3
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}

08001676 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001676:	b580      	push	{r7, lr}
 8001678:	b086      	sub	sp, #24
 800167a:	af00      	add	r7, sp, #0
 800167c:	60f8      	str	r0, [r7, #12]
 800167e:	60b9      	str	r1, [r7, #8]
 8001680:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001682:	2300      	movs	r3, #0
 8001684:	617b      	str	r3, [r7, #20]
 8001686:	e009      	b.n	800169c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001688:	68bb      	ldr	r3, [r7, #8]
 800168a:	1c5a      	adds	r2, r3, #1
 800168c:	60ba      	str	r2, [r7, #8]
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f000 fa8b 	bl	8001bac <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001696:	697b      	ldr	r3, [r7, #20]
 8001698:	3301      	adds	r3, #1
 800169a:	617b      	str	r3, [r7, #20]
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	dbf1      	blt.n	8001688 <_write+0x12>
	}
	return len;
 80016a4:	687b      	ldr	r3, [r7, #4]
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3718      	adds	r7, #24
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_close>:

int _close(int file)
{
 80016ae:	b480      	push	{r7}
 80016b0:	b083      	sub	sp, #12
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
	return -1;
 80016b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	370c      	adds	r7, #12
 80016be:	46bd      	mov	sp, r7
 80016c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c4:	4770      	bx	lr

080016c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016c6:	b480      	push	{r7}
 80016c8:	b083      	sub	sp, #12
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
 80016ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016d6:	605a      	str	r2, [r3, #4]
	return 0;
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr

080016e6 <_isatty>:

int _isatty(int file)
{
 80016e6:	b480      	push	{r7}
 80016e8:	b083      	sub	sp, #12
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
	return 1;
 80016ee:	2301      	movs	r3, #1
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b085      	sub	sp, #20
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
	return 0;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3714      	adds	r7, #20
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
	...

08001718 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <_sbrk+0x5c>)
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <_sbrk+0x60>)
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800172c:	4b13      	ldr	r3, [pc, #76]	; (800177c <_sbrk+0x64>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d102      	bne.n	800173a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001734:	4b11      	ldr	r3, [pc, #68]	; (800177c <_sbrk+0x64>)
 8001736:	4a12      	ldr	r2, [pc, #72]	; (8001780 <_sbrk+0x68>)
 8001738:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800173a:	4b10      	ldr	r3, [pc, #64]	; (800177c <_sbrk+0x64>)
 800173c:	681a      	ldr	r2, [r3, #0]
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	429a      	cmp	r2, r3
 8001746:	d207      	bcs.n	8001758 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001748:	f005 fbbc 	bl	8006ec4 <__errno>
 800174c:	4603      	mov	r3, r0
 800174e:	220c      	movs	r2, #12
 8001750:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001752:	f04f 33ff 	mov.w	r3, #4294967295
 8001756:	e009      	b.n	800176c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001758:	4b08      	ldr	r3, [pc, #32]	; (800177c <_sbrk+0x64>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800175e:	4b07      	ldr	r3, [pc, #28]	; (800177c <_sbrk+0x64>)
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	4413      	add	r3, r2
 8001766:	4a05      	ldr	r2, [pc, #20]	; (800177c <_sbrk+0x64>)
 8001768:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800176a:	68fb      	ldr	r3, [r7, #12]
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	20008000 	.word	0x20008000
 8001778:	00000400 	.word	0x00000400
 800177c:	20000748 	.word	0x20000748
 8001780:	20000840 	.word	0x20000840

08001784 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b09c      	sub	sp, #112	; 0x70
 80017ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ae:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80017b2:	2200      	movs	r2, #0
 80017b4:	601a      	str	r2, [r3, #0]
 80017b6:	605a      	str	r2, [r3, #4]
 80017b8:	609a      	str	r2, [r3, #8]
 80017ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017c8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
 80017d8:	615a      	str	r2, [r3, #20]
 80017da:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80017dc:	1d3b      	adds	r3, r7, #4
 80017de:	2234      	movs	r2, #52	; 0x34
 80017e0:	2100      	movs	r1, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f005 fba6 	bl	8006f34 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e8:	4b54      	ldr	r3, [pc, #336]	; (800193c <MX_TIM1_Init+0x194>)
 80017ea:	4a55      	ldr	r2, [pc, #340]	; (8001940 <MX_TIM1_Init+0x198>)
 80017ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80017ee:	4b53      	ldr	r3, [pc, #332]	; (800193c <MX_TIM1_Init+0x194>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <MX_TIM1_Init+0x194>)
 80017f6:	2220      	movs	r2, #32
 80017f8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4200;
 80017fa:	4b50      	ldr	r3, [pc, #320]	; (800193c <MX_TIM1_Init+0x194>)
 80017fc:	f241 0268 	movw	r2, #4200	; 0x1068
 8001800:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001802:	4b4e      	ldr	r3, [pc, #312]	; (800193c <MX_TIM1_Init+0x194>)
 8001804:	2200      	movs	r2, #0
 8001806:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 1;
 8001808:	4b4c      	ldr	r3, [pc, #304]	; (800193c <MX_TIM1_Init+0x194>)
 800180a:	2201      	movs	r2, #1
 800180c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800180e:	4b4b      	ldr	r3, [pc, #300]	; (800193c <MX_TIM1_Init+0x194>)
 8001810:	2280      	movs	r2, #128	; 0x80
 8001812:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001814:	4849      	ldr	r0, [pc, #292]	; (800193c <MX_TIM1_Init+0x194>)
 8001816:	f002 fa05 	bl	8003c24 <HAL_TIM_Base_Init>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001820:	f7ff fdda 	bl	80013d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001824:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001828:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800182a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800182e:	4619      	mov	r1, r3
 8001830:	4842      	ldr	r0, [pc, #264]	; (800193c <MX_TIM1_Init+0x194>)
 8001832:	f002 feab 	bl	800458c <HAL_TIM_ConfigClockSource>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800183c:	f7ff fdcc 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001840:	483e      	ldr	r0, [pc, #248]	; (800193c <MX_TIM1_Init+0x194>)
 8001842:	f002 fab1 	bl	8003da8 <HAL_TIM_PWM_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800184c:	f7ff fdc4 	bl	80013d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800185c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001860:	4619      	mov	r1, r3
 8001862:	4836      	ldr	r0, [pc, #216]	; (800193c <MX_TIM1_Init+0x194>)
 8001864:	f003 fcb6 	bl	80051d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800186e:	f7ff fdb3 	bl	80013d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001872:	2370      	movs	r3, #112	; 0x70
 8001874:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800187a:	2302      	movs	r3, #2
 800187c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_LOW;
 800187e:	2308      	movs	r3, #8
 8001880:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8001882:	2304      	movs	r3, #4
 8001884:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001886:	2300      	movs	r3, #0
 8001888:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800188a:	2300      	movs	r3, #0
 800188c:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001892:	2200      	movs	r2, #0
 8001894:	4619      	mov	r1, r3
 8001896:	4829      	ldr	r0, [pc, #164]	; (800193c <MX_TIM1_Init+0x194>)
 8001898:	f002 fd68 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80018a2:	f7ff fd99 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018a6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018aa:	2204      	movs	r2, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4823      	ldr	r0, [pc, #140]	; (800193c <MX_TIM1_Init+0x194>)
 80018b0:	f002 fd5c 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 80018ba:	f7ff fd8d 	bl	80013d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80018c2:	2208      	movs	r2, #8
 80018c4:	4619      	mov	r1, r3
 80018c6:	481d      	ldr	r0, [pc, #116]	; (800193c <MX_TIM1_Init+0x194>)
 80018c8:	f002 fd50 	bl	800436c <HAL_TIM_PWM_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80018d2:	f7ff fd81 	bl	80013d8 <Error_Handler>
  }
  HAL_TIMEx_EnableDeadTimePreload(&htim1);
 80018d6:	4819      	ldr	r0, [pc, #100]	; (800193c <MX_TIM1_Init+0x194>)
 80018d8:	f003 fd9e 	bl	8005418 <HAL_TIMEx_EnableDeadTimePreload>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80018dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80018e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018e6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80018e8:	2300      	movs	r3, #0
 80018ea:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 100;
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018f8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80018fe:	2300      	movs	r3, #0
 8001900:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001906:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001910:	2300      	movs	r3, #0
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001918:	1d3b      	adds	r3, r7, #4
 800191a:	4619      	mov	r1, r3
 800191c:	4807      	ldr	r0, [pc, #28]	; (800193c <MX_TIM1_Init+0x194>)
 800191e:	f003 fcdb 	bl	80052d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM1_Init+0x184>
  {
    Error_Handler();
 8001928:	f7ff fd56 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800192c:	4803      	ldr	r0, [pc, #12]	; (800193c <MX_TIM1_Init+0x194>)
 800192e:	f000 f82f 	bl	8001990 <HAL_TIM_MspPostInit>

}
 8001932:	bf00      	nop
 8001934:	3770      	adds	r7, #112	; 0x70
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	2000074c 	.word	0x2000074c
 8001940:	40012c00 	.word	0x40012c00

08001944 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001944:	b580      	push	{r7, lr}
 8001946:	b084      	sub	sp, #16
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	; (8001988 <HAL_TIM_Base_MspInit+0x44>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d113      	bne.n	800197e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001956:	4b0d      	ldr	r3, [pc, #52]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800195a:	4a0c      	ldr	r2, [pc, #48]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 800195c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001960:	6613      	str	r3, [r2, #96]	; 0x60
 8001962:	4b0a      	ldr	r3, [pc, #40]	; (800198c <HAL_TIM_Base_MspInit+0x48>)
 8001964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800196a:	60fb      	str	r3, [r7, #12]
 800196c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2019      	movs	r0, #25
 8001974:	f000 fae5 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001978:	2019      	movs	r0, #25
 800197a:	f000 fafc 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800197e:	bf00      	nop
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40012c00 	.word	0x40012c00
 800198c:	40021000 	.word	0x40021000

08001990 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	; 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2f      	ldr	r2, [pc, #188]	; (8001a6c <HAL_TIM_MspPostInit+0xdc>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d157      	bne.n	8001a62 <HAL_TIM_MspPostInit+0xd2>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019b2:	4b2f      	ldr	r3, [pc, #188]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019b6:	4a2e      	ldr	r2, [pc, #184]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019be:	4b2c      	ldr	r3, [pc, #176]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019c2:	f003 0304 	and.w	r3, r3, #4
 80019c6:	613b      	str	r3, [r7, #16]
 80019c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ca:	4b29      	ldr	r3, [pc, #164]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019ce:	4a28      	ldr	r2, [pc, #160]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019d0:	f043 0302 	orr.w	r3, r3, #2
 80019d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019d6:	4b26      	ldr	r3, [pc, #152]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	4b23      	ldr	r3, [pc, #140]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019e6:	4a22      	ldr	r2, [pc, #136]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80019ee:	4b20      	ldr	r3, [pc, #128]	; (8001a70 <HAL_TIM_MspPostInit+0xe0>)
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	f003 0301 	and.w	r3, r3, #1
 80019f6:	60bb      	str	r3, [r7, #8]
 80019f8:	68bb      	ldr	r3, [r7, #8]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA12     ------> TIM1_CH2N
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a00:	2302      	movs	r3, #2
 8001a02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a04:	2300      	movs	r3, #0
 8001a06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001a0c:	2304      	movs	r3, #4
 8001a0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	4619      	mov	r1, r3
 8001a16:	4817      	ldr	r0, [pc, #92]	; (8001a74 <HAL_TIM_MspPostInit+0xe4>)
 8001a18:	f000 fb88 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001a2e:	2304      	movs	r3, #4
 8001a30:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a32:	f107 0314 	add.w	r3, r7, #20
 8001a36:	4619      	mov	r1, r3
 8001a38:	480f      	ldr	r0, [pc, #60]	; (8001a78 <HAL_TIM_MspPostInit+0xe8>)
 8001a3a:	f000 fb77 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_12;
 8001a3e:	f44f 53b8 	mov.w	r3, #5888	; 0x1700
 8001a42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001a50:	2306      	movs	r3, #6
 8001a52:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a54:	f107 0314 	add.w	r3, r7, #20
 8001a58:	4619      	mov	r1, r3
 8001a5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a5e:	f000 fb65 	bl	800212c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001a62:	bf00      	nop
 8001a64:	3728      	adds	r7, #40	; 0x28
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40012c00 	.word	0x40012c00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	48000800 	.word	0x48000800
 8001a78:	48000400 	.word	0x48000400

08001a7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a80:	4b22      	ldr	r3, [pc, #136]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001a82:	4a23      	ldr	r2, [pc, #140]	; (8001b10 <MX_USART2_UART_Init+0x94>)
 8001a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 921600;
 8001a86:	4b21      	ldr	r3, [pc, #132]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001a88:	f44f 2261 	mov.w	r2, #921600	; 0xe1000
 8001a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a8e:	4b1f      	ldr	r3, [pc, #124]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a94:	4b1d      	ldr	r3, [pc, #116]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a9a:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001aa0:	4b1a      	ldr	r3, [pc, #104]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001aa2:	220c      	movs	r2, #12
 8001aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001aac:	4b17      	ldr	r3, [pc, #92]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001ab2:	4b16      	ldr	r3, [pc, #88]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001ab8:	4b14      	ldr	r3, [pc, #80]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001abe:	4b13      	ldr	r3, [pc, #76]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ac4:	4811      	ldr	r0, [pc, #68]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001ac6:	f003 fd25 	bl	8005514 <HAL_UART_Init>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001ad0:	f7ff fc82 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ad4:	2100      	movs	r1, #0
 8001ad6:	480d      	ldr	r0, [pc, #52]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001ad8:	f005 f929 	bl	8006d2e <HAL_UARTEx_SetTxFifoThreshold>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001ae2:	f7ff fc79 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	4808      	ldr	r0, [pc, #32]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001aea:	f005 f95e 	bl	8006daa <HAL_UARTEx_SetRxFifoThreshold>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001af4:	f7ff fc70 	bl	80013d8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001af8:	4804      	ldr	r0, [pc, #16]	; (8001b0c <MX_USART2_UART_Init+0x90>)
 8001afa:	f005 f8df 	bl	8006cbc <HAL_UARTEx_DisableFifoMode>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001b04:	f7ff fc68 	bl	80013d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b08:	bf00      	nop
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	20000798 	.word	0x20000798
 8001b10:	40004400 	.word	0x40004400

08001b14 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b08a      	sub	sp, #40	; 0x28
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b1c:	f107 0314 	add.w	r3, r7, #20
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
 8001b24:	605a      	str	r2, [r3, #4]
 8001b26:	609a      	str	r2, [r3, #8]
 8001b28:	60da      	str	r2, [r3, #12]
 8001b2a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a1b      	ldr	r2, [pc, #108]	; (8001ba0 <HAL_UART_MspInit+0x8c>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d12f      	bne.n	8001b96 <HAL_UART_MspInit+0x82>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b36:	4b1b      	ldr	r3, [pc, #108]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3a:	4a1a      	ldr	r2, [pc, #104]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b40:	6593      	str	r3, [r2, #88]	; 0x58
 8001b42:	4b18      	ldr	r3, [pc, #96]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4a:	613b      	str	r3, [r7, #16]
 8001b4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b4e:	4b15      	ldr	r3, [pc, #84]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b52:	4a14      	ldr	r2, [pc, #80]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b54:	f043 0302 	orr.w	r3, r3, #2
 8001b58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001b5a:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <HAL_UART_MspInit+0x90>)
 8001b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	60fb      	str	r3, [r7, #12]
 8001b64:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001b66:	2318      	movs	r3, #24
 8001b68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b72:	2300      	movs	r3, #0
 8001b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b76:	2307      	movs	r3, #7
 8001b78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b7a:	f107 0314 	add.w	r3, r7, #20
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <HAL_UART_MspInit+0x94>)
 8001b82:	f000 fad3 	bl	800212c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	2026      	movs	r0, #38	; 0x26
 8001b8c:	f000 f9d9 	bl	8001f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b90:	2026      	movs	r0, #38	; 0x26
 8001b92:	f000 f9f0 	bl	8001f76 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001b96:	bf00      	nop
 8001b98:	3728      	adds	r7, #40	; 0x28
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	40004400 	.word	0x40004400
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	48000400 	.word	0x48000400

08001bac <__io_putchar>:
  /* USER CODE END USART2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
int __io_putchar(int ch) {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, 0xffff);
 8001bb4:	1d39      	adds	r1, r7, #4
 8001bb6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bba:	2201      	movs	r2, #1
 8001bbc:	4803      	ldr	r0, [pc, #12]	; (8001bcc <__io_putchar+0x20>)
 8001bbe:	f003 fcf9 	bl	80055b4 <HAL_UART_Transmit>
return 0;
 8001bc2:	2300      	movs	r3, #0
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000798 	.word	0x20000798

08001bd0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	HAL_UART_Receive_IT(&huart2, (uint8_t *)Serial2RxBuffer, 1);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4904      	ldr	r1, [pc, #16]	; (8001bec <HAL_UART_RxCpltCallback+0x1c>)
 8001bdc:	4804      	ldr	r0, [pc, #16]	; (8001bf0 <HAL_UART_RxCpltCallback+0x20>)
 8001bde:	f003 fd7f 	bl	80056e0 <HAL_UART_Receive_IT>
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001be2:	bf00      	nop
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20000244 	.word	0x20000244
 8001bf0:	20000798 	.word	0x20000798

08001bf4 <load_eeprom_regs>:
{
	eeprom_store(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
}

void load_eeprom_regs()
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
	eeprom_restore(__float_reg, FLOAT_REG_LEN, __int_reg, INT_REG_LEN);
 8001bf8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bfc:	4a03      	ldr	r2, [pc, #12]	; (8001c0c <load_eeprom_regs+0x18>)
 8001bfe:	2140      	movs	r1, #64	; 0x40
 8001c00:	4803      	ldr	r0, [pc, #12]	; (8001c10 <load_eeprom_regs+0x1c>)
 8001c02:	f7ff f97d 	bl	8000f00 <eeprom_restore>
}
 8001c06:	bf00      	nop
 8001c08:	bd80      	pop	{r7, pc}
 8001c0a:	bf00      	nop
 8001c0c:	20000348 	.word	0x20000348
 8001c10:	20000248 	.word	0x20000248

08001c14 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001c14:	480d      	ldr	r0, [pc, #52]	; (8001c4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001c16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c18:	480d      	ldr	r0, [pc, #52]	; (8001c50 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c1a:	490e      	ldr	r1, [pc, #56]	; (8001c54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c1c:	4a0e      	ldr	r2, [pc, #56]	; (8001c58 <LoopForever+0xe>)
  movs r3, #0
 8001c1e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001c20:	e002      	b.n	8001c28 <LoopCopyDataInit>

08001c22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c26:	3304      	adds	r3, #4

08001c28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c2c:	d3f9      	bcc.n	8001c22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2e:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c30:	4c0b      	ldr	r4, [pc, #44]	; (8001c60 <LoopForever+0x16>)
  movs r3, #0
 8001c32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c34:	e001      	b.n	8001c3a <LoopFillZerobss>

08001c36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c38:	3204      	adds	r2, #4

08001c3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c3c:	d3fb      	bcc.n	8001c36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c3e:	f7ff fda1 	bl	8001784 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c42:	f005 f945 	bl	8006ed0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c46:	f7ff fac1 	bl	80011cc <main>

08001c4a <LoopForever>:

LoopForever:
    b LoopForever
 8001c4a:	e7fe      	b.n	8001c4a <LoopForever>
  ldr   r0, =_estack
 8001c4c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001c50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c54:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001c58:	08009ddc 	.word	0x08009ddc
  ldr r2, =_sbss
 8001c5c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001c60:	2000083c 	.word	0x2000083c

08001c64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c64:	e7fe      	b.n	8001c64 <ADC1_2_IRQHandler>

08001c66 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b082      	sub	sp, #8
 8001c6a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c70:	2003      	movs	r0, #3
 8001c72:	f000 f95b 	bl	8001f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001c76:	2000      	movs	r0, #0
 8001c78:	f000 f80e 	bl	8001c98 <HAL_InitTick>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d002      	beq.n	8001c88 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	71fb      	strb	r3, [r7, #7]
 8001c86:	e001      	b.n	8001c8c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001c88:	f7ff fbac 	bl	80013e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001c8c:	79fb      	ldrb	r3, [r7, #7]

}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <HAL_InitTick+0x68>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d022      	beq.n	8001cf2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001cac:	4b15      	ldr	r3, [pc, #84]	; (8001d04 <HAL_InitTick+0x6c>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b13      	ldr	r3, [pc, #76]	; (8001d00 <HAL_InitTick+0x68>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001cb8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 f966 	bl	8001f92 <HAL_SYSTICK_Config>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d10f      	bne.n	8001cec <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b0f      	cmp	r3, #15
 8001cd0:	d809      	bhi.n	8001ce6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	6879      	ldr	r1, [r7, #4]
 8001cd6:	f04f 30ff 	mov.w	r0, #4294967295
 8001cda:	f000 f932 	bl	8001f42 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_InitTick+0x70>)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	e007      	b.n	8001cf6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	73fb      	strb	r3, [r7, #15]
 8001cea:	e004      	b.n	8001cf6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	e001      	b.n	8001cf6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001cf6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	20000008 	.word	0x20000008
 8001d04:	20000000 	.word	0x20000000
 8001d08:	20000004 	.word	0x20000004

08001d0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <HAL_IncTick+0x1c>)
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	4b05      	ldr	r3, [pc, #20]	; (8001d2c <HAL_IncTick+0x20>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4413      	add	r3, r2
 8001d1a:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_IncTick+0x1c>)
 8001d1c:	6013      	str	r3, [r2, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	20000828 	.word	0x20000828
 8001d2c:	20000008 	.word	0x20000008

08001d30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return uwTick;
 8001d34:	4b03      	ldr	r3, [pc, #12]	; (8001d44 <HAL_GetTick+0x14>)
 8001d36:	681b      	ldr	r3, [r3, #0]
}
 8001d38:	4618      	mov	r0, r3
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000828 	.word	0x20000828

08001d48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d50:	f7ff ffee 	bl	8001d30 <HAL_GetTick>
 8001d54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d60:	d004      	beq.n	8001d6c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_Delay+0x40>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	4413      	add	r3, r2
 8001d6a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d6c:	bf00      	nop
 8001d6e:	f7ff ffdf 	bl	8001d30 <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	68fa      	ldr	r2, [r7, #12]
 8001d7a:	429a      	cmp	r2, r3
 8001d7c:	d8f7      	bhi.n	8001d6e <HAL_Delay+0x26>
  {
  }
}
 8001d7e:	bf00      	nop
 8001d80:	bf00      	nop
 8001d82:	3710      	adds	r7, #16
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	20000008 	.word	0x20000008

08001d8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b085      	sub	sp, #20
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d9c:	4b0c      	ldr	r3, [pc, #48]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001da2:	68ba      	ldr	r2, [r7, #8]
 8001da4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001da8:	4013      	ands	r3, r2
 8001daa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001db4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001db8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dbe:	4a04      	ldr	r2, [pc, #16]	; (8001dd0 <__NVIC_SetPriorityGrouping+0x44>)
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	60d3      	str	r3, [r2, #12]
}
 8001dc4:	bf00      	nop
 8001dc6:	3714      	adds	r7, #20
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr
 8001dd0:	e000ed00 	.word	0xe000ed00

08001dd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <__NVIC_GetPriorityGrouping+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 0307 	and.w	r3, r3, #7
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	e000ed00 	.word	0xe000ed00

08001df0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	db0b      	blt.n	8001e1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	f003 021f 	and.w	r2, r3, #31
 8001e08:	4907      	ldr	r1, [pc, #28]	; (8001e28 <__NVIC_EnableIRQ+0x38>)
 8001e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	2001      	movs	r0, #1
 8001e12:	fa00 f202 	lsl.w	r2, r0, r2
 8001e16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e1a:	bf00      	nop
 8001e1c:	370c      	adds	r7, #12
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e24:	4770      	bx	lr
 8001e26:	bf00      	nop
 8001e28:	e000e100 	.word	0xe000e100

08001e2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f003 0307 	and.w	r3, r3, #7
 8001e92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	f1c3 0307 	rsb	r3, r3, #7
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	bf28      	it	cs
 8001e9e:	2304      	movcs	r3, #4
 8001ea0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2b06      	cmp	r3, #6
 8001ea8:	d902      	bls.n	8001eb0 <NVIC_EncodePriority+0x30>
 8001eaa:	69fb      	ldr	r3, [r7, #28]
 8001eac:	3b03      	subs	r3, #3
 8001eae:	e000      	b.n	8001eb2 <NVIC_EncodePriority+0x32>
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb4:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb8:	69bb      	ldr	r3, [r7, #24]
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	401a      	ands	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ec8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	fa01 f303 	lsl.w	r3, r1, r3
 8001ed2:	43d9      	mvns	r1, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ed8:	4313      	orrs	r3, r2
         );
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ef8:	d301      	bcc.n	8001efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001efa:	2301      	movs	r3, #1
 8001efc:	e00f      	b.n	8001f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001efe:	4a0a      	ldr	r2, [pc, #40]	; (8001f28 <SysTick_Config+0x40>)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	3b01      	subs	r3, #1
 8001f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f06:	210f      	movs	r1, #15
 8001f08:	f04f 30ff 	mov.w	r0, #4294967295
 8001f0c:	f7ff ff8e 	bl	8001e2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f10:	4b05      	ldr	r3, [pc, #20]	; (8001f28 <SysTick_Config+0x40>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f16:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <SysTick_Config+0x40>)
 8001f18:	2207      	movs	r2, #7
 8001f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	e000e010 	.word	0xe000e010

08001f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f7ff ff29 	bl	8001d8c <__NVIC_SetPriorityGrouping>
}
 8001f3a:	bf00      	nop
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	4603      	mov	r3, r0
 8001f4a:	60b9      	str	r1, [r7, #8]
 8001f4c:	607a      	str	r2, [r7, #4]
 8001f4e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001f50:	f7ff ff40 	bl	8001dd4 <__NVIC_GetPriorityGrouping>
 8001f54:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f56:	687a      	ldr	r2, [r7, #4]
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	6978      	ldr	r0, [r7, #20]
 8001f5c:	f7ff ff90 	bl	8001e80 <NVIC_EncodePriority>
 8001f60:	4602      	mov	r2, r0
 8001f62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f66:	4611      	mov	r1, r2
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f7ff ff5f 	bl	8001e2c <__NVIC_SetPriority>
}
 8001f6e:	bf00      	nop
 8001f70:	3718      	adds	r7, #24
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b082      	sub	sp, #8
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f84:	4618      	mov	r0, r3
 8001f86:	f7ff ff33 	bl	8001df0 <__NVIC_EnableIRQ>
}
 8001f8a:	bf00      	nop
 8001f8c:	3708      	adds	r7, #8
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	bd80      	pop	{r7, pc}

08001f92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b082      	sub	sp, #8
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7ff ffa4 	bl	8001ee8 <SysTick_Config>
 8001fa0:	4603      	mov	r3, r0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3708      	adds	r7, #8
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}

08001faa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001faa:	b480      	push	{r7}
 8001fac:	b085      	sub	sp, #20
 8001fae:	af00      	add	r7, sp, #0
 8001fb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	d005      	beq.n	8001fce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2204      	movs	r2, #4
 8001fc6:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	73fb      	strb	r3, [r7, #15]
 8001fcc:	e037      	b.n	800203e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 020e 	bic.w	r2, r2, #14
 8001fdc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 0201 	bic.w	r2, r2, #1
 8001ffc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f003 021f 	and.w	r2, r3, #31
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002016:	687a      	ldr	r2, [r7, #4]
 8002018:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800201a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002020:	2b00      	cmp	r3, #0
 8002022:	d00c      	beq.n	800203e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002028:	681a      	ldr	r2, [r3, #0]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800202e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002032:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002038:	687a      	ldr	r2, [r7, #4]
 800203a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800203c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2201      	movs	r2, #1
 8002042:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3714      	adds	r7, #20
 8002054:	46bd      	mov	sp, r7
 8002056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205a:	4770      	bx	lr

0800205c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b084      	sub	sp, #16
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d00d      	beq.n	8002090 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2204      	movs	r2, #4
 8002078:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2201      	movs	r2, #1
 800207e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e047      	b.n	8002120 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 020e 	bic.w	r2, r2, #14
 800209e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f022 0201 	bic.w	r2, r2, #1
 80020ae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	f003 021f 	and.w	r2, r3, #31
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020cc:	2101      	movs	r1, #1
 80020ce:	fa01 f202 	lsl.w	r2, r1, r2
 80020d2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80020dc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00c      	beq.n	8002100 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020f4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80020fe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	2b00      	cmp	r3, #0
 8002116:	d003      	beq.n	8002120 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
    }
  }
  return status;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
	...

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b087      	sub	sp, #28
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002136:	2300      	movs	r3, #0
 8002138:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800213a:	e15a      	b.n	80023f2 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	2101      	movs	r1, #1
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa01 f303 	lsl.w	r3, r1, r3
 8002148:	4013      	ands	r3, r2
 800214a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 814c 	beq.w	80023ec <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d00b      	beq.n	8002174 <HAL_GPIO_Init+0x48>
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d007      	beq.n	8002174 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002168:	2b11      	cmp	r3, #17
 800216a:	d003      	beq.n	8002174 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b12      	cmp	r3, #18
 8002172:	d130      	bne.n	80021d6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	005b      	lsls	r3, r3, #1
 800217e:	2203      	movs	r2, #3
 8002180:	fa02 f303 	lsl.w	r3, r2, r3
 8002184:	43db      	mvns	r3, r3
 8002186:	693a      	ldr	r2, [r7, #16]
 8002188:	4013      	ands	r3, r2
 800218a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	68da      	ldr	r2, [r3, #12]
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	693a      	ldr	r2, [r7, #16]
 800219a:	4313      	orrs	r3, r2
 800219c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	693a      	ldr	r2, [r7, #16]
 80021a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021aa:	2201      	movs	r2, #1
 80021ac:	697b      	ldr	r3, [r7, #20]
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	693a      	ldr	r2, [r7, #16]
 80021b6:	4013      	ands	r3, r2
 80021b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	091b      	lsrs	r3, r3, #4
 80021c0:	f003 0201 	and.w	r2, r3, #1
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	005b      	lsls	r3, r3, #1
 80021e0:	2203      	movs	r2, #3
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43db      	mvns	r3, r3
 80021e8:	693a      	ldr	r2, [r7, #16]
 80021ea:	4013      	ands	r3, r2
 80021ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	689a      	ldr	r2, [r3, #8]
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	005b      	lsls	r3, r3, #1
 80021f6:	fa02 f303 	lsl.w	r3, r2, r3
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	4313      	orrs	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b02      	cmp	r3, #2
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_Init+0xea>
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	2b12      	cmp	r3, #18
 8002214:	d123      	bne.n	800225e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002222:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	f003 0307 	and.w	r3, r3, #7
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	220f      	movs	r2, #15
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4013      	ands	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	691a      	ldr	r2, [r3, #16]
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	fa02 f303 	lsl.w	r3, r2, r3
 800224a:	693a      	ldr	r2, [r7, #16]
 800224c:	4313      	orrs	r3, r2
 800224e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002250:	697b      	ldr	r3, [r7, #20]
 8002252:	08da      	lsrs	r2, r3, #3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3208      	adds	r2, #8
 8002258:	6939      	ldr	r1, [r7, #16]
 800225a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	005b      	lsls	r3, r3, #1
 8002268:	2203      	movs	r2, #3
 800226a:	fa02 f303 	lsl.w	r3, r2, r3
 800226e:	43db      	mvns	r3, r3
 8002270:	693a      	ldr	r2, [r7, #16]
 8002272:	4013      	ands	r3, r2
 8002274:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	f003 0203 	and.w	r2, r3, #3
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	fa02 f303 	lsl.w	r3, r2, r3
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	4313      	orrs	r3, r2
 800228a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	693a      	ldr	r2, [r7, #16]
 8002290:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 80a6 	beq.w	80023ec <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022a0:	4b5b      	ldr	r3, [pc, #364]	; (8002410 <HAL_GPIO_Init+0x2e4>)
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	4a5a      	ldr	r2, [pc, #360]	; (8002410 <HAL_GPIO_Init+0x2e4>)
 80022a6:	f043 0301 	orr.w	r3, r3, #1
 80022aa:	6613      	str	r3, [r2, #96]	; 0x60
 80022ac:	4b58      	ldr	r3, [pc, #352]	; (8002410 <HAL_GPIO_Init+0x2e4>)
 80022ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022b0:	f003 0301 	and.w	r3, r3, #1
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022b8:	4a56      	ldr	r2, [pc, #344]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	089b      	lsrs	r3, r3, #2
 80022be:	3302      	adds	r3, #2
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	f003 0303 	and.w	r3, r3, #3
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	220f      	movs	r2, #15
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	43db      	mvns	r3, r3
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	4013      	ands	r3, r2
 80022da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80022e2:	d01f      	beq.n	8002324 <HAL_GPIO_Init+0x1f8>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4a4c      	ldr	r2, [pc, #304]	; (8002418 <HAL_GPIO_Init+0x2ec>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d019      	beq.n	8002320 <HAL_GPIO_Init+0x1f4>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	4a4b      	ldr	r2, [pc, #300]	; (800241c <HAL_GPIO_Init+0x2f0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d013      	beq.n	800231c <HAL_GPIO_Init+0x1f0>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4a4a      	ldr	r2, [pc, #296]	; (8002420 <HAL_GPIO_Init+0x2f4>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d00d      	beq.n	8002318 <HAL_GPIO_Init+0x1ec>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a49      	ldr	r2, [pc, #292]	; (8002424 <HAL_GPIO_Init+0x2f8>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d007      	beq.n	8002314 <HAL_GPIO_Init+0x1e8>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a48      	ldr	r2, [pc, #288]	; (8002428 <HAL_GPIO_Init+0x2fc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d101      	bne.n	8002310 <HAL_GPIO_Init+0x1e4>
 800230c:	2305      	movs	r3, #5
 800230e:	e00a      	b.n	8002326 <HAL_GPIO_Init+0x1fa>
 8002310:	2306      	movs	r3, #6
 8002312:	e008      	b.n	8002326 <HAL_GPIO_Init+0x1fa>
 8002314:	2304      	movs	r3, #4
 8002316:	e006      	b.n	8002326 <HAL_GPIO_Init+0x1fa>
 8002318:	2303      	movs	r3, #3
 800231a:	e004      	b.n	8002326 <HAL_GPIO_Init+0x1fa>
 800231c:	2302      	movs	r3, #2
 800231e:	e002      	b.n	8002326 <HAL_GPIO_Init+0x1fa>
 8002320:	2301      	movs	r3, #1
 8002322:	e000      	b.n	8002326 <HAL_GPIO_Init+0x1fa>
 8002324:	2300      	movs	r3, #0
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	f002 0203 	and.w	r2, r2, #3
 800232c:	0092      	lsls	r2, r2, #2
 800232e:	4093      	lsls	r3, r2
 8002330:	693a      	ldr	r2, [r7, #16]
 8002332:	4313      	orrs	r3, r2
 8002334:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002336:	4937      	ldr	r1, [pc, #220]	; (8002414 <HAL_GPIO_Init+0x2e8>)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	089b      	lsrs	r3, r3, #2
 800233c:	3302      	adds	r3, #2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002344:	4b39      	ldr	r3, [pc, #228]	; (800242c <HAL_GPIO_Init+0x300>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	43db      	mvns	r3, r3
 800234e:	693a      	ldr	r2, [r7, #16]
 8002350:	4013      	ands	r3, r2
 8002352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	4313      	orrs	r3, r2
 8002366:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002368:	4a30      	ldr	r2, [pc, #192]	; (800242c <HAL_GPIO_Init+0x300>)
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800236e:	4b2f      	ldr	r3, [pc, #188]	; (800242c <HAL_GPIO_Init+0x300>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	43db      	mvns	r3, r3
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	4013      	ands	r3, r2
 800237c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800238a:	693a      	ldr	r2, [r7, #16]
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002392:	4a26      	ldr	r2, [pc, #152]	; (800242c <HAL_GPIO_Init+0x300>)
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002398:	4b24      	ldr	r3, [pc, #144]	; (800242c <HAL_GPIO_Init+0x300>)
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80023b4:	693a      	ldr	r2, [r7, #16]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80023bc:	4a1b      	ldr	r2, [pc, #108]	; (800242c <HAL_GPIO_Init+0x300>)
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80023c2:	4b1a      	ldr	r3, [pc, #104]	; (800242c <HAL_GPIO_Init+0x300>)
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	43db      	mvns	r3, r3
 80023cc:	693a      	ldr	r2, [r7, #16]
 80023ce:	4013      	ands	r3, r2
 80023d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80023de:	693a      	ldr	r2, [r7, #16]
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80023e6:	4a11      	ldr	r2, [pc, #68]	; (800242c <HAL_GPIO_Init+0x300>)
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	3301      	adds	r3, #1
 80023f0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	fa22 f303 	lsr.w	r3, r2, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f47f ae9d 	bne.w	800213c <HAL_GPIO_Init+0x10>
  }
}
 8002402:	bf00      	nop
 8002404:	bf00      	nop
 8002406:	371c      	adds	r7, #28
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000
 8002414:	40010000 	.word	0x40010000
 8002418:	48000400 	.word	0x48000400
 800241c:	48000800 	.word	0x48000800
 8002420:	48000c00 	.word	0x48000c00
 8002424:	48001000 	.word	0x48001000
 8002428:	48001400 	.word	0x48001400
 800242c:	40010400 	.word	0x40010400

08002430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	460b      	mov	r3, r1
 800243a:	807b      	strh	r3, [r7, #2]
 800243c:	4613      	mov	r3, r2
 800243e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002440:	787b      	ldrb	r3, [r7, #1]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800244c:	e002      	b.n	8002454 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800244e:	887a      	ldrh	r2, [r7, #2]
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002454:	bf00      	nop
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e081      	b.n	8002576 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b00      	cmp	r3, #0
 800247c:	d106      	bne.n	800248c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002486:	6878      	ldr	r0, [r7, #4]
 8002488:	f7fe fe5c 	bl	8001144 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2224      	movs	r2, #36	; 0x24
 8002490:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681a      	ldr	r2, [r3, #0]
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f022 0201 	bic.w	r2, r2, #1
 80024a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685a      	ldr	r2, [r3, #4]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024b0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024c0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d107      	bne.n	80024da <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	689a      	ldr	r2, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	e006      	b.n	80024e8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80024e6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d104      	bne.n	80024fa <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024f8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	687a      	ldr	r2, [r7, #4]
 8002502:	6812      	ldr	r2, [r2, #0]
 8002504:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002508:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800250c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	68da      	ldr	r2, [r3, #12]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800251c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	691a      	ldr	r2, [r3, #16]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
 8002526:	ea42 0103 	orr.w	r1, r2, r3
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	021a      	lsls	r2, r3, #8
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	430a      	orrs	r2, r1
 8002536:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	69d9      	ldr	r1, [r3, #28]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a1a      	ldr	r2, [r3, #32]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	430a      	orrs	r2, r1
 8002546:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	681a      	ldr	r2, [r3, #0]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f042 0201 	orr.w	r2, r2, #1
 8002556:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2220      	movs	r2, #32
 8002562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3708      	adds	r7, #8
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
	...

08002580 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	f040 80fd 	bne.w	80027a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x34>
 80025ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0f1      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Mem_Read+0x4e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0ea      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d6:	f7ff fbab 	bl	8001d30 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2319      	movs	r3, #25
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f95b 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d5      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2222      	movs	r2, #34	; 0x22
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002620:	88f8      	ldrh	r0, [r7, #6]
 8002622:	893a      	ldrh	r2, [r7, #8]
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4603      	mov	r3, r0
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f8bf 	bl	80027b4 <I2C_RequestMemoryRead>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ad      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d90e      	bls.n	8002670 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	b2da      	uxtb	r2, r3
 800265e:	8979      	ldrh	r1, [r7, #10]
 8002660:	4b52      	ldr	r3, [pc, #328]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fa3d 	bl	8002ae8 <I2C_TransferConfig>
 800266e:	e00f      	b.n	8002690 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	b2da      	uxtb	r2, r3
 8002680:	8979      	ldrh	r1, [r7, #10]
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fa2c 	bl	8002ae8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f902 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07c      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d034      	beq.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d130      	bne.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f8d3 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04d      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d90e      	bls.n	8002730 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f9dd 	bl	8002ae8 <I2C_TransferConfig>
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	2300      	movs	r3, #0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 f9cc 	bl	8002ae8 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d19a      	bne.n	8002690 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f920 	bl	80029a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01a      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_I2C_Mem_Read+0x230>)
 8002782:	400b      	ands	r3, r1
 8002784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	80002400 	.word	0x80002400
 80027b0:	fe00e800 	.word	0xfe00e800

080027b4 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <I2C_RequestMemoryRead+0xa4>)
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	2300      	movs	r3, #0
 80027da:	68f8      	ldr	r0, [r7, #12]
 80027dc:	f000 f984 	bl	8002ae8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e0:	69fa      	ldr	r2, [r7, #28]
 80027e2:	69b9      	ldr	r1, [r7, #24]
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f89d 	bl	8002924 <I2C_WaitOnTXISFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80027f0:	2301      	movs	r3, #1
 80027f2:	e02c      	b.n	800284e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f4:	88fb      	ldrh	r3, [r7, #6]
 80027f6:	2b01      	cmp	r3, #1
 80027f8:	d105      	bne.n	8002806 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027fa:	893b      	ldrh	r3, [r7, #8]
 80027fc:	b2da      	uxtb	r2, r3
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
 8002804:	e015      	b.n	8002832 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002806:	893b      	ldrh	r3, [r7, #8]
 8002808:	0a1b      	lsrs	r3, r3, #8
 800280a:	b29b      	uxth	r3, r3
 800280c:	b2da      	uxtb	r2, r3
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002814:	69fa      	ldr	r2, [r7, #28]
 8002816:	69b9      	ldr	r1, [r7, #24]
 8002818:	68f8      	ldr	r0, [r7, #12]
 800281a:	f000 f883 	bl	8002924 <I2C_WaitOnTXISFlagUntilTimeout>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e012      	b.n	800284e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002828:	893b      	ldrh	r3, [r7, #8]
 800282a:	b2da      	uxtb	r2, r3
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002832:	69fb      	ldr	r3, [r7, #28]
 8002834:	9300      	str	r3, [sp, #0]
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	2200      	movs	r2, #0
 800283a:	2140      	movs	r1, #64	; 0x40
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	f000 f831 	bl	80028a4 <I2C_WaitOnFlagUntilTimeout>
 8002842:	4603      	mov	r3, r0
 8002844:	2b00      	cmp	r3, #0
 8002846:	d001      	beq.n	800284c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	3710      	adds	r7, #16
 8002852:	46bd      	mov	sp, r7
 8002854:	bd80      	pop	{r7, pc}
 8002856:	bf00      	nop
 8002858:	80002000 	.word	0x80002000

0800285c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	699b      	ldr	r3, [r3, #24]
 800286a:	f003 0302 	and.w	r3, r3, #2
 800286e:	2b02      	cmp	r3, #2
 8002870:	d103      	bne.n	800287a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2200      	movs	r2, #0
 8002878:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	699b      	ldr	r3, [r3, #24]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d007      	beq.n	8002898 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699a      	ldr	r2, [r3, #24]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f042 0201 	orr.w	r2, r2, #1
 8002896:	619a      	str	r2, [r3, #24]
  }
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	60b9      	str	r1, [r7, #8]
 80028ae:	603b      	str	r3, [r7, #0]
 80028b0:	4613      	mov	r3, r2
 80028b2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028b4:	e022      	b.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028bc:	d01e      	beq.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028be:	f7ff fa37 	bl	8001d30 <HAL_GetTick>
 80028c2:	4602      	mov	r2, r0
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	1ad3      	subs	r3, r2, r3
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d302      	bcc.n	80028d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d113      	bne.n	80028fc <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d8:	f043 0220 	orr.w	r2, r3, #32
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2220      	movs	r2, #32
 80028e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2200      	movs	r2, #0
 80028f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e00f      	b.n	800291c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	699a      	ldr	r2, [r3, #24]
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	4013      	ands	r3, r2
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	429a      	cmp	r2, r3
 800290a:	bf0c      	ite	eq
 800290c:	2301      	moveq	r3, #1
 800290e:	2300      	movne	r3, #0
 8002910:	b2db      	uxtb	r3, r3
 8002912:	461a      	mov	r2, r3
 8002914:	79fb      	ldrb	r3, [r7, #7]
 8002916:	429a      	cmp	r2, r3
 8002918:	d0cd      	beq.n	80028b6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b084      	sub	sp, #16
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002930:	e02c      	b.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	68b9      	ldr	r1, [r7, #8]
 8002936:	68f8      	ldr	r0, [r7, #12]
 8002938:	f000 f870 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e02a      	b.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d01e      	beq.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7ff f9ef 	bl	8001d30 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d113      	bne.n	800298c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002968:	f043 0220 	orr.w	r2, r3, #32
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2220      	movs	r2, #32
 8002974:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	e007      	b.n	800299c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b02      	cmp	r3, #2
 8002998:	d1cb      	bne.n	8002932 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3710      	adds	r7, #16
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}

080029a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b084      	sub	sp, #16
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	60f8      	str	r0, [r7, #12]
 80029ac:	60b9      	str	r1, [r7, #8]
 80029ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029b0:	e028      	b.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	68b9      	ldr	r1, [r7, #8]
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f000 f830 	bl	8002a1c <I2C_IsAcknowledgeFailed>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e026      	b.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029c6:	f7ff f9b3 	bl	8001d30 <HAL_GetTick>
 80029ca:	4602      	mov	r2, r0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	1ad3      	subs	r3, r2, r3
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d302      	bcc.n	80029dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d113      	bne.n	8002a04 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e0:	f043 0220 	orr.w	r2, r3, #32
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	2220      	movs	r2, #32
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e007      	b.n	8002a14 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	f003 0320 	and.w	r3, r3, #32
 8002a0e:	2b20      	cmp	r3, #32
 8002a10:	d1cf      	bne.n	80029b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	60f8      	str	r0, [r7, #12]
 8002a24:	60b9      	str	r1, [r7, #8]
 8002a26:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f003 0310 	and.w	r3, r3, #16
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d151      	bne.n	8002ada <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a36:	e022      	b.n	8002a7e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a3e:	d01e      	beq.n	8002a7e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a40:	f7ff f976 	bl	8001d30 <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d302      	bcc.n	8002a56 <I2C_IsAcknowledgeFailed+0x3a>
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d113      	bne.n	8002a7e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f043 0220 	orr.w	r2, r3, #32
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e02e      	b.n	8002adc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	699b      	ldr	r3, [r3, #24]
 8002a84:	f003 0320 	and.w	r3, r3, #32
 8002a88:	2b20      	cmp	r3, #32
 8002a8a:	d1d5      	bne.n	8002a38 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2210      	movs	r2, #16
 8002a92:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a9c:	68f8      	ldr	r0, [r7, #12]
 8002a9e:	f7ff fedd 	bl	800285c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <I2C_IsAcknowledgeFailed+0xc8>)
 8002aae:	400b      	ands	r3, r1
 8002ab0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	f043 0204 	orr.w	r2, r3, #4
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2220      	movs	r2, #32
 8002ac2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e000      	b.n	8002adc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	fe00e800 	.word	0xfe00e800

08002ae8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b085      	sub	sp, #20
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	60f8      	str	r0, [r7, #12]
 8002af0:	607b      	str	r3, [r7, #4]
 8002af2:	460b      	mov	r3, r1
 8002af4:	817b      	strh	r3, [r7, #10]
 8002af6:	4613      	mov	r3, r2
 8002af8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	0d5b      	lsrs	r3, r3, #21
 8002b04:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002b08:	4b0d      	ldr	r3, [pc, #52]	; (8002b40 <I2C_TransferConfig+0x58>)
 8002b0a:	430b      	orrs	r3, r1
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	ea02 0103 	and.w	r1, r2, r3
 8002b12:	897b      	ldrh	r3, [r7, #10]
 8002b14:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002b18:	7a7b      	ldrb	r3, [r7, #9]
 8002b1a:	041b      	lsls	r3, r3, #16
 8002b1c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8002b20:	431a      	orrs	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	431a      	orrs	r2, r3
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	431a      	orrs	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3c:	4770      	bx	lr
 8002b3e:	bf00      	nop
 8002b40:	03ff63ff 	.word	0x03ff63ff

08002b44 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b20      	cmp	r3, #32
 8002b58:	d138      	bne.n	8002bcc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e032      	b.n	8002bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2224      	movs	r2, #36	; 0x24
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002b96:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	6819      	ldr	r1, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	430a      	orrs	r2, r1
 8002ba6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2220      	movs	r2, #32
 8002bbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2200      	movs	r2, #0
 8002bc4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	e000      	b.n	8002bce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bcc:	2302      	movs	r3, #2
  }
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr

08002bda <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bda:	b480      	push	{r7}
 8002bdc:	b085      	sub	sp, #20
 8002bde:	af00      	add	r7, sp, #0
 8002be0:	6078      	str	r0, [r7, #4]
 8002be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	2b20      	cmp	r3, #32
 8002bee:	d139      	bne.n	8002c64 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d101      	bne.n	8002bfe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	e033      	b.n	8002c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2201      	movs	r2, #1
 8002c02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2224      	movs	r2, #36	; 0x24
 8002c0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0201 	bic.w	r2, r2, #1
 8002c1c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c2c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681a      	ldr	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f042 0201 	orr.w	r2, r2, #1
 8002c4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002c60:	2300      	movs	r3, #0
 8002c62:	e000      	b.n	8002c66 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c64:	2302      	movs	r3, #2
  }
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c74:	b480      	push	{r7}
 8002c76:	b085      	sub	sp, #20
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d141      	bne.n	8002d06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c82:	4b4b      	ldr	r3, [pc, #300]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002c8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8e:	d131      	bne.n	8002cf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c90:	4b47      	ldr	r3, [pc, #284]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c96:	4a46      	ldr	r2, [pc, #280]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ca0:	4b43      	ldr	r3, [pc, #268]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ca8:	4a41      	ldr	r2, [pc, #260]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002caa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002cae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002cb0:	4b40      	ldr	r3, [pc, #256]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2232      	movs	r2, #50	; 0x32
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	4a3f      	ldr	r2, [pc, #252]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	0c9b      	lsrs	r3, r3, #18
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cc6:	e002      	b.n	8002cce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	3b01      	subs	r3, #1
 8002ccc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cce:	4b38      	ldr	r3, [pc, #224]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cda:	d102      	bne.n	8002ce2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d1f2      	bne.n	8002cc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce4:	695b      	ldr	r3, [r3, #20]
 8002ce6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cee:	d158      	bne.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002cf0:	2303      	movs	r3, #3
 8002cf2:	e057      	b.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002cf4:	4b2e      	ldr	r3, [pc, #184]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cfa:	4a2d      	ldr	r2, [pc, #180]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d04:	e04d      	b.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d141      	bne.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002d0e:	4b28      	ldr	r3, [pc, #160]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002d16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d1a:	d131      	bne.n	8002d80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d1c:	4b24      	ldr	r3, [pc, #144]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d22:	4a23      	ldr	r2, [pc, #140]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d2c:	4b20      	ldr	r3, [pc, #128]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d34:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d3c:	4b1d      	ldr	r3, [pc, #116]	; (8002db4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2232      	movs	r2, #50	; 0x32
 8002d42:	fb02 f303 	mul.w	r3, r2, r3
 8002d46:	4a1c      	ldr	r2, [pc, #112]	; (8002db8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d48:	fba2 2303 	umull	r2, r3, r2, r3
 8002d4c:	0c9b      	lsrs	r3, r3, #18
 8002d4e:	3301      	adds	r3, #1
 8002d50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d52:	e002      	b.n	8002d5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d5a:	4b15      	ldr	r3, [pc, #84]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d66:	d102      	bne.n	8002d6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f2      	bne.n	8002d54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d6e:	4b10      	ldr	r3, [pc, #64]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d70:	695b      	ldr	r3, [r3, #20]
 8002d72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d7a:	d112      	bne.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e011      	b.n	8002da4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d80:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d86:	4a0a      	ldr	r2, [pc, #40]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002d90:	e007      	b.n	8002da2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d92:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002d9a:	4a05      	ldr	r2, [pc, #20]	; (8002db0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002da0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002da2:	2300      	movs	r3, #0
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	3714      	adds	r7, #20
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	40007000 	.word	0x40007000
 8002db4:	20000000 	.word	0x20000000
 8002db8:	431bde83 	.word	0x431bde83

08002dbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002dc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dca:	6093      	str	r3, [r2, #8]
}
 8002dcc:	bf00      	nop
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40007000 	.word	0x40007000

08002ddc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b088      	sub	sp, #32
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e306      	b.n	80033fc <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d075      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dfa:	4b97      	ldr	r3, [pc, #604]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e04:	4b94      	ldr	r3, [pc, #592]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b0c      	cmp	r3, #12
 8002e12:	d102      	bne.n	8002e1a <HAL_RCC_OscConfig+0x3e>
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	2b03      	cmp	r3, #3
 8002e18:	d002      	beq.n	8002e20 <HAL_RCC_OscConfig+0x44>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	2b08      	cmp	r3, #8
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b8d      	ldr	r3, [pc, #564]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05b      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x108>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d157      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e2e1      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x74>
 8002e42:	4b85      	ldr	r3, [pc, #532]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a84      	ldr	r2, [pc, #528]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0xb0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x98>
 8002e5a:	4b7f      	ldr	r3, [pc, #508]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a7e      	ldr	r2, [pc, #504]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b7c      	ldr	r3, [pc, #496]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a7b      	ldr	r2, [pc, #492]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xb0>
 8002e74:	4b78      	ldr	r3, [pc, #480]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a77      	ldr	r2, [pc, #476]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b75      	ldr	r3, [pc, #468]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a74      	ldr	r2, [pc, #464]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e94:	f7fe ff4c 	bl	8001d30 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fe ff48 	bl	8001d30 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e2a6      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002eae:	4b6a      	ldr	r3, [pc, #424]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0xc0>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ebc:	f7fe ff38 	bl	8001d30 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fe ff34 	bl	8001d30 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e292      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ed6:	4b60      	ldr	r3, [pc, #384]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xe8>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d075      	beq.n	8002fde <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ef2:	4b59      	ldr	r3, [pc, #356]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002efc:	4b56      	ldr	r3, [pc, #344]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0303 	and.w	r3, r3, #3
 8002f04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	2b0c      	cmp	r3, #12
 8002f0a:	d102      	bne.n	8002f12 <HAL_RCC_OscConfig+0x136>
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d002      	beq.n	8002f18 <HAL_RCC_OscConfig+0x13c>
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b04      	cmp	r3, #4
 8002f16:	d11f      	bne.n	8002f58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f18:	4b4f      	ldr	r3, [pc, #316]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_OscConfig+0x154>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d101      	bne.n	8002f30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e265      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f30:	4b49      	ldr	r3, [pc, #292]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	691b      	ldr	r3, [r3, #16]
 8002f3c:	061b      	lsls	r3, r3, #24
 8002f3e:	4946      	ldr	r1, [pc, #280]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f40:	4313      	orrs	r3, r2
 8002f42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f44:	4b45      	ldr	r3, [pc, #276]	; (800305c <HAL_RCC_OscConfig+0x280>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f7fe fea5 	bl	8001c98 <HAL_InitTick>
 8002f4e:	4603      	mov	r3, r0
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d043      	beq.n	8002fdc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e251      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d023      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f60:	4b3d      	ldr	r3, [pc, #244]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6c:	f7fe fee0 	bl	8001d30 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f72:	e008      	b.n	8002f86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f74:	f7fe fedc 	bl	8001d30 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d901      	bls.n	8002f86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e23a      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d0f0      	beq.n	8002f74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f92:	4b31      	ldr	r3, [pc, #196]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	061b      	lsls	r3, r3, #24
 8002fa0:	492d      	ldr	r1, [pc, #180]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	604b      	str	r3, [r1, #4]
 8002fa6:	e01a      	b.n	8002fde <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fa8:	4b2b      	ldr	r3, [pc, #172]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a2a      	ldr	r2, [pc, #168]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002fb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb4:	f7fe febc 	bl	8001d30 <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fba:	e008      	b.n	8002fce <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fbc:	f7fe feb8 	bl	8001d30 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	2b02      	cmp	r3, #2
 8002fc8:	d901      	bls.n	8002fce <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	e216      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fce:	4b22      	ldr	r3, [pc, #136]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1f0      	bne.n	8002fbc <HAL_RCC_OscConfig+0x1e0>
 8002fda:	e000      	b.n	8002fde <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fdc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0308 	and.w	r3, r3, #8
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d041      	beq.n	800306e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d01c      	beq.n	800302c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ff2:	4b19      	ldr	r3, [pc, #100]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002ff8:	4a17      	ldr	r2, [pc, #92]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003002:	f7fe fe95 	bl	8001d30 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003008:	e008      	b.n	800301c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300a:	f7fe fe91 	bl	8001d30 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d901      	bls.n	800301c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e1ef      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800301c:	4b0e      	ldr	r3, [pc, #56]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003022:	f003 0302 	and.w	r3, r3, #2
 8003026:	2b00      	cmp	r3, #0
 8003028:	d0ef      	beq.n	800300a <HAL_RCC_OscConfig+0x22e>
 800302a:	e020      	b.n	800306e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800302c:	4b0a      	ldr	r3, [pc, #40]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 800302e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003032:	4a09      	ldr	r2, [pc, #36]	; (8003058 <HAL_RCC_OscConfig+0x27c>)
 8003034:	f023 0301 	bic.w	r3, r3, #1
 8003038:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800303c:	f7fe fe78 	bl	8001d30 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003042:	e00d      	b.n	8003060 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003044:	f7fe fe74 	bl	8001d30 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b02      	cmp	r3, #2
 8003050:	d906      	bls.n	8003060 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e1d2      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
 8003056:	bf00      	nop
 8003058:	40021000 	.word	0x40021000
 800305c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003060:	4b8c      	ldr	r3, [pc, #560]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1ea      	bne.n	8003044 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f003 0304 	and.w	r3, r3, #4
 8003076:	2b00      	cmp	r3, #0
 8003078:	f000 80a6 	beq.w	80031c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800307c:	2300      	movs	r3, #0
 800307e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003080:	4b84      	ldr	r3, [pc, #528]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003084:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_RCC_OscConfig+0x2b4>
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x2b6>
 8003090:	2300      	movs	r3, #0
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00d      	beq.n	80030b2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	4b7f      	ldr	r3, [pc, #508]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003098:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800309a:	4a7e      	ldr	r2, [pc, #504]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800309c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a0:	6593      	str	r3, [r2, #88]	; 0x58
 80030a2:	4b7c      	ldr	r3, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80030a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030aa:	60fb      	str	r3, [r7, #12]
 80030ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030ae:	2301      	movs	r3, #1
 80030b0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030b2:	4b79      	ldr	r3, [pc, #484]	; (8003298 <HAL_RCC_OscConfig+0x4bc>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d118      	bne.n	80030f0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030be:	4b76      	ldr	r3, [pc, #472]	; (8003298 <HAL_RCC_OscConfig+0x4bc>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a75      	ldr	r2, [pc, #468]	; (8003298 <HAL_RCC_OscConfig+0x4bc>)
 80030c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ca:	f7fe fe31 	bl	8001d30 <HAL_GetTick>
 80030ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d0:	e008      	b.n	80030e4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d2:	f7fe fe2d 	bl	8001d30 <HAL_GetTick>
 80030d6:	4602      	mov	r2, r0
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d901      	bls.n	80030e4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030e0:	2303      	movs	r3, #3
 80030e2:	e18b      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030e4:	4b6c      	ldr	r3, [pc, #432]	; (8003298 <HAL_RCC_OscConfig+0x4bc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d0f0      	beq.n	80030d2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	689b      	ldr	r3, [r3, #8]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d108      	bne.n	800310a <HAL_RCC_OscConfig+0x32e>
 80030f8:	4b66      	ldr	r3, [pc, #408]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80030fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030fe:	4a65      	ldr	r2, [pc, #404]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003108:	e024      	b.n	8003154 <HAL_RCC_OscConfig+0x378>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d110      	bne.n	8003134 <HAL_RCC_OscConfig+0x358>
 8003112:	4b60      	ldr	r3, [pc, #384]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003118:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f043 0304 	orr.w	r3, r3, #4
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003124:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003128:	4a5a      	ldr	r2, [pc, #360]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800312a:	f043 0301 	orr.w	r3, r3, #1
 800312e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003132:	e00f      	b.n	8003154 <HAL_RCC_OscConfig+0x378>
 8003134:	4b57      	ldr	r3, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800313a:	4a56      	ldr	r2, [pc, #344]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003144:	4b53      	ldr	r3, [pc, #332]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314a:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800314c:	f023 0304 	bic.w	r3, r3, #4
 8003150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d016      	beq.n	800318a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fde8 	bl	8001d30 <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe fde4 	bl	8001d30 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e140      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800317a:	4b46      	ldr	r3, [pc, #280]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800317c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003180:	f003 0302 	and.w	r3, r3, #2
 8003184:	2b00      	cmp	r3, #0
 8003186:	d0ed      	beq.n	8003164 <HAL_RCC_OscConfig+0x388>
 8003188:	e015      	b.n	80031b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318a:	f7fe fdd1 	bl	8001d30 <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003190:	e00a      	b.n	80031a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003192:	f7fe fdcd 	bl	8001d30 <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e129      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80031a8:	4b3a      	ldr	r3, [pc, #232]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80031aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ae:	f003 0302 	and.w	r3, r3, #2
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d1ed      	bne.n	8003192 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b01      	cmp	r3, #1
 80031ba:	d105      	bne.n	80031c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031bc:	4b35      	ldr	r3, [pc, #212]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80031be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031c0:	4a34      	ldr	r2, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80031c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0320 	and.w	r3, r3, #32
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d03c      	beq.n	800324e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d01c      	beq.n	8003216 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031dc:	4b2d      	ldr	r3, [pc, #180]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80031de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80031e2:	4a2c      	ldr	r2, [pc, #176]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 80031e4:	f043 0301 	orr.w	r3, r3, #1
 80031e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe fda0 	bl	8001d30 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031f4:	f7fe fd9c 	bl	8001d30 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e0fa      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003206:	4b23      	ldr	r3, [pc, #140]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0ef      	beq.n	80031f4 <HAL_RCC_OscConfig+0x418>
 8003214:	e01b      	b.n	800324e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003216:	4b1f      	ldr	r3, [pc, #124]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003218:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800321c:	4a1d      	ldr	r2, [pc, #116]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003226:	f7fe fd83 	bl	8001d30 <HAL_GetTick>
 800322a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800322c:	e008      	b.n	8003240 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800322e:	f7fe fd7f 	bl	8001d30 <HAL_GetTick>
 8003232:	4602      	mov	r2, r0
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	1ad3      	subs	r3, r2, r3
 8003238:	2b02      	cmp	r3, #2
 800323a:	d901      	bls.n	8003240 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800323c:	2303      	movs	r3, #3
 800323e:	e0dd      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003240:	4b14      	ldr	r3, [pc, #80]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003242:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1ef      	bne.n	800322e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80d1 	beq.w	80033fa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003258:	4b0e      	ldr	r3, [pc, #56]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b0c      	cmp	r3, #12
 8003262:	f000 808b 	beq.w	800337c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b02      	cmp	r3, #2
 800326c:	d15e      	bne.n	800332c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326e:	4b09      	ldr	r3, [pc, #36]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a08      	ldr	r2, [pc, #32]	; (8003294 <HAL_RCC_OscConfig+0x4b8>)
 8003274:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003278:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800327a:	f7fe fd59 	bl	8001d30 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003280:	e00c      	b.n	800329c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003282:	f7fe fd55 	bl	8001d30 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d905      	bls.n	800329c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e0b3      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
 8003294:	40021000 	.word	0x40021000
 8003298:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800329c:	4b59      	ldr	r3, [pc, #356]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ec      	bne.n	8003282 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032a8:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	4b56      	ldr	r3, [pc, #344]	; (8003408 <HAL_RCC_OscConfig+0x62c>)
 80032ae:	4013      	ands	r3, r2
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6a11      	ldr	r1, [r2, #32]
 80032b4:	687a      	ldr	r2, [r7, #4]
 80032b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032b8:	3a01      	subs	r2, #1
 80032ba:	0112      	lsls	r2, r2, #4
 80032bc:	4311      	orrs	r1, r2
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80032c2:	0212      	lsls	r2, r2, #8
 80032c4:	4311      	orrs	r1, r2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80032ca:	0852      	lsrs	r2, r2, #1
 80032cc:	3a01      	subs	r2, #1
 80032ce:	0552      	lsls	r2, r2, #21
 80032d0:	4311      	orrs	r1, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d6:	0852      	lsrs	r2, r2, #1
 80032d8:	3a01      	subs	r2, #1
 80032da:	0652      	lsls	r2, r2, #25
 80032dc:	4311      	orrs	r1, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80032e2:	06d2      	lsls	r2, r2, #27
 80032e4:	430a      	orrs	r2, r1
 80032e6:	4947      	ldr	r1, [pc, #284]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 80032e8:	4313      	orrs	r3, r2
 80032ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032ec:	4b45      	ldr	r3, [pc, #276]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a44      	ldr	r2, [pc, #272]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 80032f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032f8:	4b42      	ldr	r3, [pc, #264]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	4a41      	ldr	r2, [pc, #260]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 80032fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003302:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003304:	f7fe fd14 	bl	8001d30 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330c:	f7fe fd10 	bl	8001d30 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e06e      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331e:	4b39      	ldr	r3, [pc, #228]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x530>
 800332a:	e066      	b.n	80033fa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332c:	4b35      	ldr	r3, [pc, #212]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a34      	ldr	r2, [pc, #208]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 8003332:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003336:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003338:	4b32      	ldr	r3, [pc, #200]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	4a31      	ldr	r2, [pc, #196]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 800333e:	f023 0303 	bic.w	r3, r3, #3
 8003342:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003344:	4b2f      	ldr	r3, [pc, #188]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	4a2e      	ldr	r2, [pc, #184]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 800334a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003354:	f7fe fcec 	bl	8001d30 <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe fce8 	bl	8001d30 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e046      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800336e:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x580>
 800337a:	e03e      	b.n	80033fa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	69db      	ldr	r3, [r3, #28]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d101      	bne.n	8003388 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e039      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003388:	4b1e      	ldr	r3, [pc, #120]	; (8003404 <HAL_RCC_OscConfig+0x628>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f003 0203 	and.w	r2, r3, #3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	429a      	cmp	r2, r3
 800339a:	d12c      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	3b01      	subs	r3, #1
 80033a8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d123      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d11b      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d113      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ce:	697b      	ldr	r3, [r7, #20]
 80033d0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	3b01      	subs	r3, #1
 80033dc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033de:	429a      	cmp	r2, r3
 80033e0:	d109      	bne.n	80033f6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033e2:	697b      	ldr	r3, [r7, #20]
 80033e4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	085b      	lsrs	r3, r3, #1
 80033ee:	3b01      	subs	r3, #1
 80033f0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033f2:	429a      	cmp	r2, r3
 80033f4:	d001      	beq.n	80033fa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e000      	b.n	80033fc <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80033fa:	2300      	movs	r3, #0
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3720      	adds	r7, #32
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}
 8003404:	40021000 	.word	0x40021000
 8003408:	019f800c 	.word	0x019f800c

0800340c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b086      	sub	sp, #24
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003416:	2300      	movs	r3, #0
 8003418:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d101      	bne.n	8003424 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e11e      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003424:	4b91      	ldr	r3, [pc, #580]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	429a      	cmp	r2, r3
 8003430:	d910      	bls.n	8003454 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003432:	4b8e      	ldr	r3, [pc, #568]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 020f 	bic.w	r2, r3, #15
 800343a:	498c      	ldr	r1, [pc, #560]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	4313      	orrs	r3, r2
 8003440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b8a      	ldr	r3, [pc, #552]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e106      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0301 	and.w	r3, r3, #1
 800345c:	2b00      	cmp	r3, #0
 800345e:	d073      	beq.n	8003548 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	2b03      	cmp	r3, #3
 8003466:	d129      	bne.n	80034bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003468:	4b81      	ldr	r3, [pc, #516]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e0f4      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003478:	f000 f99e 	bl	80037b8 <RCC_GetSysClockFreqFromPLLSource>
 800347c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800347e:	693b      	ldr	r3, [r7, #16]
 8003480:	4a7c      	ldr	r2, [pc, #496]	; (8003674 <HAL_RCC_ClockConfig+0x268>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d93f      	bls.n	8003506 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003486:	4b7a      	ldr	r3, [pc, #488]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800349a:	2b00      	cmp	r3, #0
 800349c:	d033      	beq.n	8003506 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d12f      	bne.n	8003506 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034a6:	4b72      	ldr	r3, [pc, #456]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034ae:	4a70      	ldr	r2, [pc, #448]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80034b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	617b      	str	r3, [r7, #20]
 80034ba:	e024      	b.n	8003506 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d107      	bne.n	80034d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034c4:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e0c6      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034d4:	4b66      	ldr	r3, [pc, #408]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0be      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034e4:	f000 f8ce 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 80034e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	4a61      	ldr	r2, [pc, #388]	; (8003674 <HAL_RCC_ClockConfig+0x268>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d909      	bls.n	8003506 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034f2:	4b5f      	ldr	r3, [pc, #380]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80034fa:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80034fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003500:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003502:	2380      	movs	r3, #128	; 0x80
 8003504:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003506:	4b5a      	ldr	r3, [pc, #360]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f023 0203 	bic.w	r2, r3, #3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	4957      	ldr	r1, [pc, #348]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003514:	4313      	orrs	r3, r2
 8003516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003518:	f7fe fc0a 	bl	8001d30 <HAL_GetTick>
 800351c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351e:	e00a      	b.n	8003536 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003520:	f7fe fc06 	bl	8001d30 <HAL_GetTick>
 8003524:	4602      	mov	r2, r0
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	1ad3      	subs	r3, r2, r3
 800352a:	f241 3288 	movw	r2, #5000	; 0x1388
 800352e:	4293      	cmp	r3, r2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e095      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003536:	4b4e      	ldr	r3, [pc, #312]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f003 020c 	and.w	r2, r3, #12
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	429a      	cmp	r2, r3
 8003546:	d1eb      	bne.n	8003520 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d023      	beq.n	800359c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b43      	ldr	r3, [pc, #268]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	4a42      	ldr	r2, [pc, #264]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003566:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800356a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003578:	4b3d      	ldr	r3, [pc, #244]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003580:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003582:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003586:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003588:	4b39      	ldr	r3, [pc, #228]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 800358a:	689b      	ldr	r3, [r3, #8]
 800358c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	4936      	ldr	r1, [pc, #216]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003596:	4313      	orrs	r3, r2
 8003598:	608b      	str	r3, [r1, #8]
 800359a:	e008      	b.n	80035ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b80      	cmp	r3, #128	; 0x80
 80035a0:	d105      	bne.n	80035ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80035a2:	4b33      	ldr	r3, [pc, #204]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	4a32      	ldr	r2, [pc, #200]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 80035a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80035ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035ae:	4b2f      	ldr	r3, [pc, #188]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 030f 	and.w	r3, r3, #15
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	429a      	cmp	r2, r3
 80035ba:	d21d      	bcs.n	80035f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035bc:	4b2b      	ldr	r3, [pc, #172]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f023 020f 	bic.w	r2, r3, #15
 80035c4:	4929      	ldr	r1, [pc, #164]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 80035c6:	683b      	ldr	r3, [r7, #0]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035cc:	f7fe fbb0 	bl	8001d30 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035d2:	e00a      	b.n	80035ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d4:	f7fe fbac 	bl	8001d30 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e03b      	b.n	8003662 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ea:	4b20      	ldr	r3, [pc, #128]	; (800366c <HAL_RCC_ClockConfig+0x260>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 030f 	and.w	r3, r3, #15
 80035f2:	683a      	ldr	r2, [r7, #0]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d1ed      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b00      	cmp	r3, #0
 8003602:	d008      	beq.n	8003616 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003604:	4b1a      	ldr	r3, [pc, #104]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4917      	ldr	r1, [pc, #92]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003612:	4313      	orrs	r3, r2
 8003614:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0308 	and.w	r3, r3, #8
 800361e:	2b00      	cmp	r3, #0
 8003620:	d009      	beq.n	8003636 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003622:	4b13      	ldr	r3, [pc, #76]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003624:	689b      	ldr	r3, [r3, #8]
 8003626:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	00db      	lsls	r3, r3, #3
 8003630:	490f      	ldr	r1, [pc, #60]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 8003632:	4313      	orrs	r3, r2
 8003634:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003636:	f000 f825 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 800363a:	4602      	mov	r2, r0
 800363c:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <HAL_RCC_ClockConfig+0x264>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	091b      	lsrs	r3, r3, #4
 8003642:	f003 030f 	and.w	r3, r3, #15
 8003646:	490c      	ldr	r1, [pc, #48]	; (8003678 <HAL_RCC_ClockConfig+0x26c>)
 8003648:	5ccb      	ldrb	r3, [r1, r3]
 800364a:	f003 031f 	and.w	r3, r3, #31
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	4a0a      	ldr	r2, [pc, #40]	; (800367c <HAL_RCC_ClockConfig+0x270>)
 8003654:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003656:	4b0a      	ldr	r3, [pc, #40]	; (8003680 <HAL_RCC_ClockConfig+0x274>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f7fe fb1c 	bl	8001c98 <HAL_InitTick>
 8003660:	4603      	mov	r3, r0
}
 8003662:	4618      	mov	r0, r3
 8003664:	3718      	adds	r7, #24
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40022000 	.word	0x40022000
 8003670:	40021000 	.word	0x40021000
 8003674:	04c4b400 	.word	0x04c4b400
 8003678:	080099b0 	.word	0x080099b0
 800367c:	20000000 	.word	0x20000000
 8003680:	20000004 	.word	0x20000004

08003684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003684:	b480      	push	{r7}
 8003686:	b087      	sub	sp, #28
 8003688:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800368a:	4b2c      	ldr	r3, [pc, #176]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 030c 	and.w	r3, r3, #12
 8003692:	2b04      	cmp	r3, #4
 8003694:	d102      	bne.n	800369c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003698:	613b      	str	r3, [r7, #16]
 800369a:	e047      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800369c:	4b27      	ldr	r3, [pc, #156]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	f003 030c 	and.w	r3, r3, #12
 80036a4:	2b08      	cmp	r3, #8
 80036a6:	d102      	bne.n	80036ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80036a8:	4b26      	ldr	r3, [pc, #152]	; (8003744 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036aa:	613b      	str	r3, [r7, #16]
 80036ac:	e03e      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	f003 030c 	and.w	r3, r3, #12
 80036b6:	2b0c      	cmp	r3, #12
 80036b8:	d136      	bne.n	8003728 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80036ba:	4b20      	ldr	r3, [pc, #128]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036bc:	68db      	ldr	r3, [r3, #12]
 80036be:	f003 0303 	and.w	r3, r3, #3
 80036c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c6:	68db      	ldr	r3, [r3, #12]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	3301      	adds	r3, #1
 80036d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d10c      	bne.n	80036f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d8:	4a1a      	ldr	r2, [pc, #104]	; (8003744 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80036e0:	4a16      	ldr	r2, [pc, #88]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e2:	68d2      	ldr	r2, [r2, #12]
 80036e4:	0a12      	lsrs	r2, r2, #8
 80036e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80036ea:	fb02 f303 	mul.w	r3, r2, r3
 80036ee:	617b      	str	r3, [r7, #20]
      break;
 80036f0:	e00c      	b.n	800370c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036f2:	4a13      	ldr	r2, [pc, #76]	; (8003740 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036fa:	4a10      	ldr	r2, [pc, #64]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 80036fc:	68d2      	ldr	r2, [r2, #12]
 80036fe:	0a12      	lsrs	r2, r2, #8
 8003700:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003704:	fb02 f303 	mul.w	r3, r2, r3
 8003708:	617b      	str	r3, [r7, #20]
      break;
 800370a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800370c:	4b0b      	ldr	r3, [pc, #44]	; (800373c <HAL_RCC_GetSysClockFreq+0xb8>)
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	0e5b      	lsrs	r3, r3, #25
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	3301      	adds	r3, #1
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800371c:	697a      	ldr	r2, [r7, #20]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	fbb2 f3f3 	udiv	r3, r2, r3
 8003724:	613b      	str	r3, [r7, #16]
 8003726:	e001      	b.n	800372c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800372c:	693b      	ldr	r3, [r7, #16]
}
 800372e:	4618      	mov	r0, r3
 8003730:	371c      	adds	r7, #28
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	00f42400 	.word	0x00f42400
 8003744:	007a1200 	.word	0x007a1200

08003748 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003748:	b480      	push	{r7}
 800374a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800374c:	4b03      	ldr	r3, [pc, #12]	; (800375c <HAL_RCC_GetHCLKFreq+0x14>)
 800374e:	681b      	ldr	r3, [r3, #0]
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003764:	f7ff fff0 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003768:	4602      	mov	r2, r0
 800376a:	4b06      	ldr	r3, [pc, #24]	; (8003784 <HAL_RCC_GetPCLK1Freq+0x24>)
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	0a1b      	lsrs	r3, r3, #8
 8003770:	f003 0307 	and.w	r3, r3, #7
 8003774:	4904      	ldr	r1, [pc, #16]	; (8003788 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003776:	5ccb      	ldrb	r3, [r1, r3]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003780:	4618      	mov	r0, r3
 8003782:	bd80      	pop	{r7, pc}
 8003784:	40021000 	.word	0x40021000
 8003788:	080099c0 	.word	0x080099c0

0800378c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003790:	f7ff ffda 	bl	8003748 <HAL_RCC_GetHCLKFreq>
 8003794:	4602      	mov	r2, r0
 8003796:	4b06      	ldr	r3, [pc, #24]	; (80037b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	0adb      	lsrs	r3, r3, #11
 800379c:	f003 0307 	and.w	r3, r3, #7
 80037a0:	4904      	ldr	r1, [pc, #16]	; (80037b4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80037a2:	5ccb      	ldrb	r3, [r1, r3]
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	40021000 	.word	0x40021000
 80037b4:	080099c0 	.word	0x080099c0

080037b8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037be:	4b1e      	ldr	r3, [pc, #120]	; (8003838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	f003 0303 	and.w	r3, r3, #3
 80037c6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037c8:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	f003 030f 	and.w	r3, r3, #15
 80037d2:	3301      	adds	r3, #1
 80037d4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	2b03      	cmp	r3, #3
 80037da:	d10c      	bne.n	80037f6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037dc:	4a17      	ldr	r2, [pc, #92]	; (800383c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	4a14      	ldr	r2, [pc, #80]	; (8003838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e6:	68d2      	ldr	r2, [r2, #12]
 80037e8:	0a12      	lsrs	r2, r2, #8
 80037ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037ee:	fb02 f303 	mul.w	r3, r2, r3
 80037f2:	617b      	str	r3, [r7, #20]
    break;
 80037f4:	e00c      	b.n	8003810 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037f6:	4a12      	ldr	r2, [pc, #72]	; (8003840 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80037fe:	4a0e      	ldr	r2, [pc, #56]	; (8003838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003800:	68d2      	ldr	r2, [r2, #12]
 8003802:	0a12      	lsrs	r2, r2, #8
 8003804:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003808:	fb02 f303 	mul.w	r3, r2, r3
 800380c:	617b      	str	r3, [r7, #20]
    break;
 800380e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003810:	4b09      	ldr	r3, [pc, #36]	; (8003838 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	0e5b      	lsrs	r3, r3, #25
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800382a:	687b      	ldr	r3, [r7, #4]
}
 800382c:	4618      	mov	r0, r3
 800382e:	371c      	adds	r7, #28
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr
 8003838:	40021000 	.word	0x40021000
 800383c:	007a1200 	.word	0x007a1200
 8003840:	00f42400 	.word	0x00f42400

08003844 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800384c:	2300      	movs	r3, #0
 800384e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003850:	2300      	movs	r3, #0
 8003852:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800385c:	2b00      	cmp	r3, #0
 800385e:	f000 8098 	beq.w	8003992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003862:	2300      	movs	r3, #0
 8003864:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003866:	4b43      	ldr	r3, [pc, #268]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d10d      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003872:	4b40      	ldr	r3, [pc, #256]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003876:	4a3f      	ldr	r2, [pc, #252]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
 800387e:	4b3d      	ldr	r3, [pc, #244]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003886:	60bb      	str	r3, [r7, #8]
 8003888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800388a:	2301      	movs	r3, #1
 800388c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800388e:	4b3a      	ldr	r3, [pc, #232]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a39      	ldr	r2, [pc, #228]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003898:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800389a:	f7fe fa49 	bl	8001d30 <HAL_GetTick>
 800389e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038a0:	e009      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a2:	f7fe fa45 	bl	8001d30 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	1ad3      	subs	r3, r2, r3
 80038ac:	2b02      	cmp	r3, #2
 80038ae:	d902      	bls.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	74fb      	strb	r3, [r7, #19]
        break;
 80038b4:	e005      	b.n	80038c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80038b6:	4b30      	ldr	r3, [pc, #192]	; (8003978 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0ef      	beq.n	80038a2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d159      	bne.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038c8:	4b2a      	ldr	r3, [pc, #168]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038d2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d01e      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038de:	697a      	ldr	r2, [r7, #20]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d019      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038e4:	4b23      	ldr	r3, [pc, #140]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038ee:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038f0:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a1f      	ldr	r2, [pc, #124]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003906:	4a1b      	ldr	r2, [pc, #108]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800390c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003910:	4a18      	ldr	r2, [pc, #96]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d016      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003922:	f7fe fa05 	bl	8001d30 <HAL_GetTick>
 8003926:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003928:	e00b      	b.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800392a:	f7fe fa01 	bl	8001d30 <HAL_GetTick>
 800392e:	4602      	mov	r2, r0
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	1ad3      	subs	r3, r2, r3
 8003934:	f241 3288 	movw	r2, #5000	; 0x1388
 8003938:	4293      	cmp	r3, r2
 800393a:	d902      	bls.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	74fb      	strb	r3, [r7, #19]
            break;
 8003940:	e006      	b.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003942:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003948:	f003 0302 	and.w	r3, r3, #2
 800394c:	2b00      	cmp	r3, #0
 800394e:	d0ec      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003950:	7cfb      	ldrb	r3, [r7, #19]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d10b      	bne.n	800396e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003956:	4b07      	ldr	r3, [pc, #28]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003964:	4903      	ldr	r1, [pc, #12]	; (8003974 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003966:	4313      	orrs	r3, r2
 8003968:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800396c:	e008      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800396e:	7cfb      	ldrb	r3, [r7, #19]
 8003970:	74bb      	strb	r3, [r7, #18]
 8003972:	e005      	b.n	8003980 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003974:	40021000 	.word	0x40021000
 8003978:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800397c:	7cfb      	ldrb	r3, [r7, #19]
 800397e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003980:	7c7b      	ldrb	r3, [r7, #17]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d105      	bne.n	8003992 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003986:	4ba6      	ldr	r3, [pc, #664]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800398a:	4aa5      	ldr	r2, [pc, #660]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800398c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003990:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 0301 	and.w	r3, r3, #1
 800399a:	2b00      	cmp	r3, #0
 800399c:	d00a      	beq.n	80039b4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800399e:	4ba0      	ldr	r3, [pc, #640]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a4:	f023 0203 	bic.w	r2, r3, #3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	499c      	ldr	r1, [pc, #624]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f003 0302 	and.w	r3, r3, #2
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00a      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c0:	4b97      	ldr	r3, [pc, #604]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c6:	f023 020c 	bic.w	r2, r3, #12
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	4994      	ldr	r1, [pc, #592]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039d0:	4313      	orrs	r3, r2
 80039d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f003 0304 	and.w	r3, r3, #4
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00a      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e2:	4b8f      	ldr	r3, [pc, #572]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039e8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	498b      	ldr	r1, [pc, #556]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0308 	and.w	r3, r3, #8
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a04:	4b86      	ldr	r3, [pc, #536]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a0a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	4983      	ldr	r1, [pc, #524]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a14:	4313      	orrs	r3, r2
 8003a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00a      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a26:	4b7e      	ldr	r3, [pc, #504]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a2c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	497a      	ldr	r1, [pc, #488]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a48:	4b75      	ldr	r3, [pc, #468]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a4e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	4972      	ldr	r1, [pc, #456]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00a      	beq.n	8003a80 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a70:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	4969      	ldr	r1, [pc, #420]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00a      	beq.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a8c:	4b64      	ldr	r3, [pc, #400]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a92:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4961      	ldr	r1, [pc, #388]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d00a      	beq.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003aae:	4b5c      	ldr	r3, [pc, #368]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	4958      	ldr	r1, [pc, #352]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d015      	beq.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ad0:	4b53      	ldr	r3, [pc, #332]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ad6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ade:	4950      	ldr	r1, [pc, #320]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003aee:	d105      	bne.n	8003afc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003af0:	4b4b      	ldr	r3, [pc, #300]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	4a4a      	ldr	r2, [pc, #296]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003af6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003afa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d015      	beq.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b08:	4b45      	ldr	r3, [pc, #276]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b16:	4942      	ldr	r1, [pc, #264]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b22:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b26:	d105      	bne.n	8003b34 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b28:	4b3d      	ldr	r3, [pc, #244]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	4a3c      	ldr	r2, [pc, #240]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b32:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d015      	beq.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b40:	4b37      	ldr	r3, [pc, #220]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b46:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4e:	4934      	ldr	r1, [pc, #208]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b50:	4313      	orrs	r3, r2
 8003b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b5e:	d105      	bne.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b60:	4b2f      	ldr	r3, [pc, #188]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	4a2e      	ldr	r2, [pc, #184]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003b6a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d015      	beq.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003b78:	4b29      	ldr	r3, [pc, #164]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b7e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b86:	4926      	ldr	r1, [pc, #152]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b96:	d105      	bne.n	8003ba4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b98:	4b21      	ldr	r3, [pc, #132]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	4a20      	ldr	r2, [pc, #128]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003b9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ba2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d015      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bb0:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bbe:	4918      	ldr	r1, [pc, #96]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003bce:	d105      	bne.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bd0:	4b13      	ldr	r3, [pc, #76]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	4a12      	ldr	r2, [pc, #72]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003bda:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d015      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	490a      	ldr	r1, [pc, #40]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c06:	d105      	bne.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c08:	4b05      	ldr	r3, [pc, #20]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a04      	ldr	r2, [pc, #16]	; (8003c20 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003c0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003c14:	7cbb      	ldrb	r3, [r7, #18]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3718      	adds	r7, #24
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	40021000 	.word	0x40021000

08003c24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e049      	b.n	8003cca <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fd fe7a 	bl	8001944 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2202      	movs	r2, #2
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	3304      	adds	r3, #4
 8003c60:	4619      	mov	r1, r3
 8003c62:	4610      	mov	r0, r2
 8003c64:	f000 fdba 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
	...

08003cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d001      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e04a      	b.n	8003d82 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2202      	movs	r2, #2
 8003cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68da      	ldr	r2, [r3, #12]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0201 	orr.w	r2, r2, #1
 8003d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	4a21      	ldr	r2, [pc, #132]	; (8003d90 <HAL_TIM_Base_Start_IT+0xbc>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d018      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x6c>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d16:	d013      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x6c>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_TIM_Base_Start_IT+0xc0>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00e      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x6c>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	4a1c      	ldr	r2, [pc, #112]	; (8003d98 <HAL_TIM_Base_Start_IT+0xc4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d009      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x6c>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a1a      	ldr	r2, [pc, #104]	; (8003d9c <HAL_TIM_Base_Start_IT+0xc8>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d004      	beq.n	8003d40 <HAL_TIM_Base_Start_IT+0x6c>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a19      	ldr	r2, [pc, #100]	; (8003da0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d115      	bne.n	8003d6c <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689a      	ldr	r2, [r3, #8]
 8003d46:	4b17      	ldr	r3, [pc, #92]	; (8003da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d48:	4013      	ands	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2b06      	cmp	r3, #6
 8003d50:	d015      	beq.n	8003d7e <HAL_TIM_Base_Start_IT+0xaa>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d58:	d011      	beq.n	8003d7e <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f042 0201 	orr.w	r2, r2, #1
 8003d68:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d6a:	e008      	b.n	8003d7e <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 0201 	orr.w	r2, r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	e000      	b.n	8003d80 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d7e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003d80:	2300      	movs	r3, #0
}
 8003d82:	4618      	mov	r0, r3
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	40012c00 	.word	0x40012c00
 8003d94:	40000400 	.word	0x40000400
 8003d98:	40000800 	.word	0x40000800
 8003d9c:	40013400 	.word	0x40013400
 8003da0:	40014000 	.word	0x40014000
 8003da4:	00010007 	.word	0x00010007

08003da8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e049      	b.n	8003e4e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f841 	bl	8003e56 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 fcf8 	bl	80047dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr
	...

08003e6c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d109      	bne.n	8003e90 <HAL_TIM_PWM_Start+0x24>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	bf14      	ite	ne
 8003e88:	2301      	movne	r3, #1
 8003e8a:	2300      	moveq	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e03c      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d109      	bne.n	8003eaa <HAL_TIM_PWM_Start+0x3e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	bf14      	ite	ne
 8003ea2:	2301      	movne	r3, #1
 8003ea4:	2300      	moveq	r3, #0
 8003ea6:	b2db      	uxtb	r3, r3
 8003ea8:	e02f      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	2b08      	cmp	r3, #8
 8003eae:	d109      	bne.n	8003ec4 <HAL_TIM_PWM_Start+0x58>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	bf14      	ite	ne
 8003ebc:	2301      	movne	r3, #1
 8003ebe:	2300      	moveq	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	e022      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2b0c      	cmp	r3, #12
 8003ec8:	d109      	bne.n	8003ede <HAL_TIM_PWM_Start+0x72>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	bf14      	ite	ne
 8003ed6:	2301      	movne	r3, #1
 8003ed8:	2300      	moveq	r3, #0
 8003eda:	b2db      	uxtb	r3, r3
 8003edc:	e015      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	2b10      	cmp	r3, #16
 8003ee2:	d109      	bne.n	8003ef8 <HAL_TIM_PWM_Start+0x8c>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	2b01      	cmp	r3, #1
 8003eee:	bf14      	ite	ne
 8003ef0:	2301      	movne	r3, #1
 8003ef2:	2300      	moveq	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e008      	b.n	8003f0a <HAL_TIM_PWM_Start+0x9e>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	bf14      	ite	ne
 8003f04:	2301      	movne	r3, #1
 8003f06:	2300      	moveq	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e097      	b.n	8004042 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d104      	bne.n	8003f22 <HAL_TIM_PWM_Start+0xb6>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f20:	e023      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d104      	bne.n	8003f32 <HAL_TIM_PWM_Start+0xc6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f30:	e01b      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	2b08      	cmp	r3, #8
 8003f36:	d104      	bne.n	8003f42 <HAL_TIM_PWM_Start+0xd6>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2202      	movs	r2, #2
 8003f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f40:	e013      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	2b0c      	cmp	r3, #12
 8003f46:	d104      	bne.n	8003f52 <HAL_TIM_PWM_Start+0xe6>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f50:	e00b      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	2b10      	cmp	r3, #16
 8003f56:	d104      	bne.n	8003f62 <HAL_TIM_PWM_Start+0xf6>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f60:	e003      	b.n	8003f6a <HAL_TIM_PWM_Start+0xfe>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2202      	movs	r2, #2
 8003f66:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	6839      	ldr	r1, [r7, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f001 f854 	bl	8005020 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a33      	ldr	r2, [pc, #204]	; (800404c <HAL_TIM_PWM_Start+0x1e0>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d013      	beq.n	8003faa <HAL_TIM_PWM_Start+0x13e>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_TIM_PWM_Start+0x1e4>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d00e      	beq.n	8003faa <HAL_TIM_PWM_Start+0x13e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a30      	ldr	r2, [pc, #192]	; (8004054 <HAL_TIM_PWM_Start+0x1e8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d009      	beq.n	8003faa <HAL_TIM_PWM_Start+0x13e>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a2f      	ldr	r2, [pc, #188]	; (8004058 <HAL_TIM_PWM_Start+0x1ec>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d004      	beq.n	8003faa <HAL_TIM_PWM_Start+0x13e>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a2d      	ldr	r2, [pc, #180]	; (800405c <HAL_TIM_PWM_Start+0x1f0>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d101      	bne.n	8003fae <HAL_TIM_PWM_Start+0x142>
 8003faa:	2301      	movs	r3, #1
 8003fac:	e000      	b.n	8003fb0 <HAL_TIM_PWM_Start+0x144>
 8003fae:	2300      	movs	r3, #0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d007      	beq.n	8003fc4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a20      	ldr	r2, [pc, #128]	; (800404c <HAL_TIM_PWM_Start+0x1e0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d018      	beq.n	8004000 <HAL_TIM_PWM_Start+0x194>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fd6:	d013      	beq.n	8004000 <HAL_TIM_PWM_Start+0x194>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a20      	ldr	r2, [pc, #128]	; (8004060 <HAL_TIM_PWM_Start+0x1f4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d00e      	beq.n	8004000 <HAL_TIM_PWM_Start+0x194>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a1f      	ldr	r2, [pc, #124]	; (8004064 <HAL_TIM_PWM_Start+0x1f8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d009      	beq.n	8004000 <HAL_TIM_PWM_Start+0x194>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a17      	ldr	r2, [pc, #92]	; (8004050 <HAL_TIM_PWM_Start+0x1e4>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d004      	beq.n	8004000 <HAL_TIM_PWM_Start+0x194>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a16      	ldr	r2, [pc, #88]	; (8004054 <HAL_TIM_PWM_Start+0x1e8>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d115      	bne.n	800402c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	4b18      	ldr	r3, [pc, #96]	; (8004068 <HAL_TIM_PWM_Start+0x1fc>)
 8004008:	4013      	ands	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2b06      	cmp	r3, #6
 8004010:	d015      	beq.n	800403e <HAL_TIM_PWM_Start+0x1d2>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d011      	beq.n	800403e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f042 0201 	orr.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402a:	e008      	b.n	800403e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f042 0201 	orr.w	r2, r2, #1
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	e000      	b.n	8004040 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800403e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3710      	adds	r7, #16
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40012c00 	.word	0x40012c00
 8004050:	40013400 	.word	0x40013400
 8004054:	40014000 	.word	0x40014000
 8004058:	40014400 	.word	0x40014400
 800405c:	40014800 	.word	0x40014800
 8004060:	40000400 	.word	0x40000400
 8004064:	40000800 	.word	0x40000800
 8004068:	00010007 	.word	0x00010007

0800406c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0302 	and.w	r3, r3, #2
 800407e:	2b02      	cmp	r3, #2
 8004080:	d122      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	f003 0302 	and.w	r3, r3, #2
 800408c:	2b02      	cmp	r3, #2
 800408e:	d11b      	bne.n	80040c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f06f 0202 	mvn.w	r2, #2
 8004098:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2201      	movs	r2, #1
 800409e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699b      	ldr	r3, [r3, #24]
 80040a6:	f003 0303 	and.w	r3, r3, #3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 fb76 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80040b4:	e005      	b.n	80040c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b6:	6878      	ldr	r0, [r7, #4]
 80040b8:	f000 fb68 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040bc:	6878      	ldr	r0, [r7, #4]
 80040be:	f000 fb79 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d122      	bne.n	800411c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68db      	ldr	r3, [r3, #12]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b04      	cmp	r3, #4
 80040e2:	d11b      	bne.n	800411c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0204 	mvn.w	r2, #4
 80040ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2202      	movs	r2, #2
 80040f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	699b      	ldr	r3, [r3, #24]
 80040fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d003      	beq.n	800410a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 fb4c 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 8004108:	e005      	b.n	8004116 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	f000 fb3e 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 fb4f 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	691b      	ldr	r3, [r3, #16]
 8004122:	f003 0308 	and.w	r3, r3, #8
 8004126:	2b08      	cmp	r3, #8
 8004128:	d122      	bne.n	8004170 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	68db      	ldr	r3, [r3, #12]
 8004130:	f003 0308 	and.w	r3, r3, #8
 8004134:	2b08      	cmp	r3, #8
 8004136:	d11b      	bne.n	8004170 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f06f 0208 	mvn.w	r2, #8
 8004140:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2204      	movs	r2, #4
 8004146:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f003 0303 	and.w	r3, r3, #3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d003      	beq.n	800415e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004156:	6878      	ldr	r0, [r7, #4]
 8004158:	f000 fb22 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 800415c:	e005      	b.n	800416a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f000 fb14 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004164:	6878      	ldr	r0, [r7, #4]
 8004166:	f000 fb25 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	691b      	ldr	r3, [r3, #16]
 8004176:	f003 0310 	and.w	r3, r3, #16
 800417a:	2b10      	cmp	r3, #16
 800417c:	d122      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	f003 0310 	and.w	r3, r3, #16
 8004188:	2b10      	cmp	r3, #16
 800418a:	d11b      	bne.n	80041c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f06f 0210 	mvn.w	r2, #16
 8004194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2208      	movs	r2, #8
 800419a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	69db      	ldr	r3, [r3, #28]
 80041a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d003      	beq.n	80041b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f000 faf8 	bl	80047a0 <HAL_TIM_IC_CaptureCallback>
 80041b0:	e005      	b.n	80041be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f000 faea 	bl	800478c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 fafb 	bl	80047b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2200      	movs	r2, #0
 80041c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	691b      	ldr	r3, [r3, #16]
 80041ca:	f003 0301 	and.w	r3, r3, #1
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d10e      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d107      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f06f 0201 	mvn.w	r2, #1
 80041e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041ea:	6878      	ldr	r0, [r7, #4]
 80041ec:	f000 fac4 	bl	8004778 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041fa:	2b80      	cmp	r3, #128	; 0x80
 80041fc:	d10e      	bne.n	800421c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004208:	2b80      	cmp	r3, #128	; 0x80
 800420a:	d107      	bne.n	800421c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f001 f91b 	bl	8005452 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004226:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f001 f90e 	bl	8005466 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 faa9 	bl	80047c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b20      	cmp	r3, #32
 8004282:	d10e      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0220 	mvn.w	r2, #32
 800429a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f001 f8ce 	bl	800543e <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b0:	d10f      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042c0:	d107      	bne.n	80042d2 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80042ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f001 f8d4 	bl	800547a <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042dc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042e0:	d10f      	bne.n	8004302 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042ec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042f0:	d107      	bne.n	8004302 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80042fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	f001 f8c6 	bl	800548e <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800430c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004310:	d10f      	bne.n	8004332 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800431c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004320:	d107      	bne.n	8004332 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800432a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f001 f8b8 	bl	80054a2 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800433c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004340:	d10f      	bne.n	8004362 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800434c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004350:	d107      	bne.n	8004362 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800435a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f001 f8aa 	bl	80054b6 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004362:	bf00      	nop
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
	...

0800436c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800437e:	2b01      	cmp	r3, #1
 8004380:	d101      	bne.n	8004386 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004382:	2302      	movs	r3, #2
 8004384:	e0fd      	b.n	8004582 <HAL_TIM_PWM_ConfigChannel+0x216>
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2b14      	cmp	r3, #20
 8004392:	f200 80f0 	bhi.w	8004576 <HAL_TIM_PWM_ConfigChannel+0x20a>
 8004396:	a201      	add	r2, pc, #4	; (adr r2, 800439c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439c:	080043f1 	.word	0x080043f1
 80043a0:	08004577 	.word	0x08004577
 80043a4:	08004577 	.word	0x08004577
 80043a8:	08004577 	.word	0x08004577
 80043ac:	08004431 	.word	0x08004431
 80043b0:	08004577 	.word	0x08004577
 80043b4:	08004577 	.word	0x08004577
 80043b8:	08004577 	.word	0x08004577
 80043bc:	08004473 	.word	0x08004473
 80043c0:	08004577 	.word	0x08004577
 80043c4:	08004577 	.word	0x08004577
 80043c8:	08004577 	.word	0x08004577
 80043cc:	080044b3 	.word	0x080044b3
 80043d0:	08004577 	.word	0x08004577
 80043d4:	08004577 	.word	0x08004577
 80043d8:	08004577 	.word	0x08004577
 80043dc:	080044f5 	.word	0x080044f5
 80043e0:	08004577 	.word	0x08004577
 80043e4:	08004577 	.word	0x08004577
 80043e8:	08004577 	.word	0x08004577
 80043ec:	08004535 	.word	0x08004535
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fa80 	bl	80048fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	699a      	ldr	r2, [r3, #24]
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0208 	orr.w	r2, r2, #8
 800440a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	699a      	ldr	r2, [r3, #24]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0204 	bic.w	r2, r2, #4
 800441a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6999      	ldr	r1, [r3, #24]
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	691a      	ldr	r2, [r3, #16]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	430a      	orrs	r2, r1
 800442c:	619a      	str	r2, [r3, #24]
      break;
 800442e:	e0a3      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68b9      	ldr	r1, [r7, #8]
 8004436:	4618      	mov	r0, r3
 8004438:	f000 faf0 	bl	8004a1c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	699a      	ldr	r2, [r3, #24]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800444a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	699a      	ldr	r2, [r3, #24]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800445a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	6999      	ldr	r1, [r3, #24]
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	691b      	ldr	r3, [r3, #16]
 8004466:	021a      	lsls	r2, r3, #8
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	430a      	orrs	r2, r1
 800446e:	619a      	str	r2, [r3, #24]
      break;
 8004470:	e082      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68b9      	ldr	r1, [r7, #8]
 8004478:	4618      	mov	r0, r3
 800447a:	f000 fb59 	bl	8004b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	69da      	ldr	r2, [r3, #28]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f042 0208 	orr.w	r2, r2, #8
 800448c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69da      	ldr	r2, [r3, #28]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f022 0204 	bic.w	r2, r2, #4
 800449c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69d9      	ldr	r1, [r3, #28]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	691a      	ldr	r2, [r3, #16]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	61da      	str	r2, [r3, #28]
      break;
 80044b0:	e062      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f000 fbc1 	bl	8004c40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	69da      	ldr	r2, [r3, #28]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	69d9      	ldr	r1, [r3, #28]
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	021a      	lsls	r2, r3, #8
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	430a      	orrs	r2, r1
 80044f0:	61da      	str	r2, [r3, #28]
      break;
 80044f2:	e041      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	68b9      	ldr	r1, [r7, #8]
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 fc2a 	bl	8004d54 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f042 0208 	orr.w	r2, r2, #8
 800450e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0204 	bic.w	r2, r2, #4
 800451e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	691a      	ldr	r2, [r3, #16]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	430a      	orrs	r2, r1
 8004530:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004532:	e021      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	68b9      	ldr	r1, [r7, #8]
 800453a:	4618      	mov	r0, r3
 800453c:	f000 fc6e 	bl	8004e1c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800454e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800455e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	021a      	lsls	r2, r3, #8
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004574:	e000      	b.n	8004578 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 8004576:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2200      	movs	r2, #0
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004580:	2300      	movs	r3, #0
}
 8004582:	4618      	mov	r0, r3
 8004584:	3710      	adds	r7, #16
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}
 800458a:	bf00      	nop

0800458c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIM_ConfigClockSource+0x18>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e0dd      	b.n	8004760 <HAL_TIM_ConfigClockSource+0x1d4>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80045c2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ce:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68fa      	ldr	r2, [r7, #12]
 80045d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a62      	ldr	r2, [pc, #392]	; (8004768 <HAL_TIM_ConfigClockSource+0x1dc>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	f000 80a9 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 80045e4:	4a60      	ldr	r2, [pc, #384]	; (8004768 <HAL_TIM_ConfigClockSource+0x1dc>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	f200 80ae 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 80045ec:	4a5f      	ldr	r2, [pc, #380]	; (800476c <HAL_TIM_ConfigClockSource+0x1e0>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	f000 80a1 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 80045f4:	4a5d      	ldr	r2, [pc, #372]	; (800476c <HAL_TIM_ConfigClockSource+0x1e0>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	f200 80a6 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 80045fc:	4a5c      	ldr	r2, [pc, #368]	; (8004770 <HAL_TIM_ConfigClockSource+0x1e4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	f000 8099 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 8004604:	4a5a      	ldr	r2, [pc, #360]	; (8004770 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004606:	4293      	cmp	r3, r2
 8004608:	f200 809e 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 800460c:	4a59      	ldr	r2, [pc, #356]	; (8004774 <HAL_TIM_ConfigClockSource+0x1e8>)
 800460e:	4293      	cmp	r3, r2
 8004610:	f000 8091 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 8004614:	4a57      	ldr	r2, [pc, #348]	; (8004774 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	f200 8096 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 800461c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004620:	f000 8089 	beq.w	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 8004624:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004628:	f200 808e 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 800462c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004630:	d03e      	beq.n	80046b0 <HAL_TIM_ConfigClockSource+0x124>
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004636:	f200 8087 	bhi.w	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 800463a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800463e:	f000 8085 	beq.w	800474c <HAL_TIM_ConfigClockSource+0x1c0>
 8004642:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004646:	d87f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004648:	2b70      	cmp	r3, #112	; 0x70
 800464a:	d01a      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0xf6>
 800464c:	2b70      	cmp	r3, #112	; 0x70
 800464e:	d87b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004650:	2b60      	cmp	r3, #96	; 0x60
 8004652:	d050      	beq.n	80046f6 <HAL_TIM_ConfigClockSource+0x16a>
 8004654:	2b60      	cmp	r3, #96	; 0x60
 8004656:	d877      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004658:	2b50      	cmp	r3, #80	; 0x50
 800465a:	d03c      	beq.n	80046d6 <HAL_TIM_ConfigClockSource+0x14a>
 800465c:	2b50      	cmp	r3, #80	; 0x50
 800465e:	d873      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d058      	beq.n	8004716 <HAL_TIM_ConfigClockSource+0x18a>
 8004664:	2b40      	cmp	r3, #64	; 0x40
 8004666:	d86f      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004668:	2b30      	cmp	r3, #48	; 0x30
 800466a:	d064      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 800466c:	2b30      	cmp	r3, #48	; 0x30
 800466e:	d86b      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004670:	2b20      	cmp	r3, #32
 8004672:	d060      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 8004674:	2b20      	cmp	r3, #32
 8004676:	d867      	bhi.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d05c      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
 800467c:	2b10      	cmp	r3, #16
 800467e:	d05a      	beq.n	8004736 <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004680:	e062      	b.n	8004748 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6899      	ldr	r1, [r3, #8]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f000 fca5 	bl	8004fe0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	609a      	str	r2, [r3, #8]
      break;
 80046ae:	e04e      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6818      	ldr	r0, [r3, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	6899      	ldr	r1, [r3, #8]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f000 fc8e 	bl	8004fe0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	689a      	ldr	r2, [r3, #8]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046d2:	609a      	str	r2, [r3, #8]
      break;
 80046d4:	e03b      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6818      	ldr	r0, [r3, #0]
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	68db      	ldr	r3, [r3, #12]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f000 fc00 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	2150      	movs	r1, #80	; 0x50
 80046ee:	4618      	mov	r0, r3
 80046f0:	f000 fc59 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 80046f4:	e02b      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6818      	ldr	r0, [r3, #0]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	6859      	ldr	r1, [r3, #4]
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	461a      	mov	r2, r3
 8004704:	f000 fc1f 	bl	8004f46 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	2160      	movs	r1, #96	; 0x60
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fc49 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004714:	e01b      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6818      	ldr	r0, [r3, #0]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	6859      	ldr	r1, [r3, #4]
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	461a      	mov	r2, r3
 8004724:	f000 fbe0 	bl	8004ee8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2140      	movs	r1, #64	; 0x40
 800472e:	4618      	mov	r0, r3
 8004730:	f000 fc39 	bl	8004fa6 <TIM_ITRx_SetConfig>
      break;
 8004734:	e00b      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	4610      	mov	r0, r2
 8004742:	f000 fc30 	bl	8004fa6 <TIM_ITRx_SetConfig>
        break;
 8004746:	e002      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8004748:	bf00      	nop
 800474a:	e000      	b.n	800474e <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 800474c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}
 8004768:	00100070 	.word	0x00100070
 800476c:	00100040 	.word	0x00100040
 8004770:	00100030 	.word	0x00100030
 8004774:	00100020 	.word	0x00100020

08004778 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800478c:	b480      	push	{r7}
 800478e:	b083      	sub	sp, #12
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr

080047a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b083      	sub	sp, #12
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a8:	bf00      	nop
 80047aa:	370c      	adds	r7, #12
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b083      	sub	sp, #12
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047bc:	bf00      	nop
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047d0:	bf00      	nop
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a3c      	ldr	r2, [pc, #240]	; (80048e0 <TIM_Base_SetConfig+0x104>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00f      	beq.n	8004814 <TIM_Base_SetConfig+0x38>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047fa:	d00b      	beq.n	8004814 <TIM_Base_SetConfig+0x38>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a39      	ldr	r2, [pc, #228]	; (80048e4 <TIM_Base_SetConfig+0x108>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d007      	beq.n	8004814 <TIM_Base_SetConfig+0x38>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a38      	ldr	r2, [pc, #224]	; (80048e8 <TIM_Base_SetConfig+0x10c>)
 8004808:	4293      	cmp	r3, r2
 800480a:	d003      	beq.n	8004814 <TIM_Base_SetConfig+0x38>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	4a37      	ldr	r2, [pc, #220]	; (80048ec <TIM_Base_SetConfig+0x110>)
 8004810:	4293      	cmp	r3, r2
 8004812:	d108      	bne.n	8004826 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800481a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	4313      	orrs	r3, r2
 8004824:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a2d      	ldr	r2, [pc, #180]	; (80048e0 <TIM_Base_SetConfig+0x104>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01b      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004834:	d017      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2a      	ldr	r2, [pc, #168]	; (80048e4 <TIM_Base_SetConfig+0x108>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a29      	ldr	r2, [pc, #164]	; (80048e8 <TIM_Base_SetConfig+0x10c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00f      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a28      	ldr	r2, [pc, #160]	; (80048ec <TIM_Base_SetConfig+0x110>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a27      	ldr	r2, [pc, #156]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a26      	ldr	r2, [pc, #152]	; (80048f4 <TIM_Base_SetConfig+0x118>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0x8a>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a25      	ldr	r2, [pc, #148]	; (80048f8 <TIM_Base_SetConfig+0x11c>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <TIM_Base_SetConfig+0x104>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d00f      	beq.n	80048c4 <TIM_Base_SetConfig+0xe8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a11      	ldr	r2, [pc, #68]	; (80048ec <TIM_Base_SetConfig+0x110>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d00b      	beq.n	80048c4 <TIM_Base_SetConfig+0xe8>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	4a10      	ldr	r2, [pc, #64]	; (80048f0 <TIM_Base_SetConfig+0x114>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d007      	beq.n	80048c4 <TIM_Base_SetConfig+0xe8>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	4a0f      	ldr	r2, [pc, #60]	; (80048f4 <TIM_Base_SetConfig+0x118>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d003      	beq.n	80048c4 <TIM_Base_SetConfig+0xe8>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	4a0e      	ldr	r2, [pc, #56]	; (80048f8 <TIM_Base_SetConfig+0x11c>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d103      	bne.n	80048cc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	615a      	str	r2, [r3, #20]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40012c00 	.word	0x40012c00
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40013400 	.word	0x40013400
 80048f0:	40014000 	.word	0x40014000
 80048f4:	40014400 	.word	0x40014400
 80048f8:	40014800 	.word	0x40014800

080048fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a1b      	ldr	r3, [r3, #32]
 800490a:	f023 0201 	bic.w	r2, r3, #1
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a1b      	ldr	r3, [r3, #32]
 8004916:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	699b      	ldr	r3, [r3, #24]
 8004922:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800492a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800492e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f023 0303 	bic.w	r3, r3, #3
 8004936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	4313      	orrs	r3, r2
 8004940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	f023 0302 	bic.w	r3, r3, #2
 8004948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	689b      	ldr	r3, [r3, #8]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	4313      	orrs	r3, r2
 8004952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a2c      	ldr	r2, [pc, #176]	; (8004a08 <TIM_OC1_SetConfig+0x10c>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d00f      	beq.n	800497c <TIM_OC1_SetConfig+0x80>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a2b      	ldr	r2, [pc, #172]	; (8004a0c <TIM_OC1_SetConfig+0x110>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d00b      	beq.n	800497c <TIM_OC1_SetConfig+0x80>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <TIM_OC1_SetConfig+0x114>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d007      	beq.n	800497c <TIM_OC1_SetConfig+0x80>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	4a29      	ldr	r2, [pc, #164]	; (8004a14 <TIM_OC1_SetConfig+0x118>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d003      	beq.n	800497c <TIM_OC1_SetConfig+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4a28      	ldr	r2, [pc, #160]	; (8004a18 <TIM_OC1_SetConfig+0x11c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	d10c      	bne.n	8004996 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f023 0308 	bic.w	r3, r3, #8
 8004982:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	697a      	ldr	r2, [r7, #20]
 800498a:	4313      	orrs	r3, r2
 800498c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	f023 0304 	bic.w	r3, r3, #4
 8004994:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a1b      	ldr	r2, [pc, #108]	; (8004a08 <TIM_OC1_SetConfig+0x10c>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d00f      	beq.n	80049be <TIM_OC1_SetConfig+0xc2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a1a      	ldr	r2, [pc, #104]	; (8004a0c <TIM_OC1_SetConfig+0x110>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d00b      	beq.n	80049be <TIM_OC1_SetConfig+0xc2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a19      	ldr	r2, [pc, #100]	; (8004a10 <TIM_OC1_SetConfig+0x114>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d007      	beq.n	80049be <TIM_OC1_SetConfig+0xc2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a18      	ldr	r2, [pc, #96]	; (8004a14 <TIM_OC1_SetConfig+0x118>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d003      	beq.n	80049be <TIM_OC1_SetConfig+0xc2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a17      	ldr	r2, [pc, #92]	; (8004a18 <TIM_OC1_SetConfig+0x11c>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d111      	bne.n	80049e2 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	695b      	ldr	r3, [r3, #20]
 80049d2:	693a      	ldr	r2, [r7, #16]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	699b      	ldr	r3, [r3, #24]
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	4313      	orrs	r3, r2
 80049e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	693a      	ldr	r2, [r7, #16]
 80049e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	685a      	ldr	r2, [r3, #4]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	621a      	str	r2, [r3, #32]
}
 80049fc:	bf00      	nop
 80049fe:	371c      	adds	r7, #28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr
 8004a08:	40012c00 	.word	0x40012c00
 8004a0c:	40013400 	.word	0x40013400
 8004a10:	40014000 	.word	0x40014000
 8004a14:	40014400 	.word	0x40014400
 8004a18:	40014800 	.word	0x40014800

08004a1c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b087      	sub	sp, #28
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	f023 0210 	bic.w	r2, r3, #16
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	699b      	ldr	r3, [r3, #24]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f023 0320 	bic.w	r3, r3, #32
 8004a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	697a      	ldr	r2, [r7, #20]
 8004a74:	4313      	orrs	r3, r2
 8004a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a28      	ldr	r2, [pc, #160]	; (8004b1c <TIM_OC2_SetConfig+0x100>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d003      	beq.n	8004a88 <TIM_OC2_SetConfig+0x6c>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	4a27      	ldr	r2, [pc, #156]	; (8004b20 <TIM_OC2_SetConfig+0x104>)
 8004a84:	4293      	cmp	r3, r2
 8004a86:	d10d      	bne.n	8004aa4 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	011b      	lsls	r3, r3, #4
 8004a96:	697a      	ldr	r2, [r7, #20]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	4a1d      	ldr	r2, [pc, #116]	; (8004b1c <TIM_OC2_SetConfig+0x100>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d00f      	beq.n	8004acc <TIM_OC2_SetConfig+0xb0>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	4a1c      	ldr	r2, [pc, #112]	; (8004b20 <TIM_OC2_SetConfig+0x104>)
 8004ab0:	4293      	cmp	r3, r2
 8004ab2:	d00b      	beq.n	8004acc <TIM_OC2_SetConfig+0xb0>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	4a1b      	ldr	r2, [pc, #108]	; (8004b24 <TIM_OC2_SetConfig+0x108>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d007      	beq.n	8004acc <TIM_OC2_SetConfig+0xb0>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4a1a      	ldr	r2, [pc, #104]	; (8004b28 <TIM_OC2_SetConfig+0x10c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d003      	beq.n	8004acc <TIM_OC2_SetConfig+0xb0>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4a19      	ldr	r2, [pc, #100]	; (8004b2c <TIM_OC2_SetConfig+0x110>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d113      	bne.n	8004af4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ad4:	693b      	ldr	r3, [r7, #16]
 8004ad6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ada:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	695b      	ldr	r3, [r3, #20]
 8004ae0:	009b      	lsls	r3, r3, #2
 8004ae2:	693a      	ldr	r2, [r7, #16]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	699b      	ldr	r3, [r3, #24]
 8004aec:	009b      	lsls	r3, r3, #2
 8004aee:	693a      	ldr	r2, [r7, #16]
 8004af0:	4313      	orrs	r3, r2
 8004af2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685a      	ldr	r2, [r3, #4]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	621a      	str	r2, [r3, #32]
}
 8004b0e:	bf00      	nop
 8004b10:	371c      	adds	r7, #28
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	40012c00 	.word	0x40012c00
 8004b20:	40013400 	.word	0x40013400
 8004b24:	40014000 	.word	0x40014000
 8004b28:	40014400 	.word	0x40014400
 8004b2c:	40014800 	.word	0x40014800

08004b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b30:	b480      	push	{r7}
 8004b32:	b087      	sub	sp, #28
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a1b      	ldr	r3, [r3, #32]
 8004b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	69db      	ldr	r3, [r3, #28]
 8004b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f023 0303 	bic.w	r3, r3, #3
 8004b6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	68fa      	ldr	r2, [r7, #12]
 8004b72:	4313      	orrs	r3, r2
 8004b74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	021b      	lsls	r3, r3, #8
 8004b84:	697a      	ldr	r2, [r7, #20]
 8004b86:	4313      	orrs	r3, r2
 8004b88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a27      	ldr	r2, [pc, #156]	; (8004c2c <TIM_OC3_SetConfig+0xfc>)
 8004b8e:	4293      	cmp	r3, r2
 8004b90:	d003      	beq.n	8004b9a <TIM_OC3_SetConfig+0x6a>
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a26      	ldr	r2, [pc, #152]	; (8004c30 <TIM_OC3_SetConfig+0x100>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d10d      	bne.n	8004bb6 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ba0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	021b      	lsls	r3, r3, #8
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004bb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	4a1c      	ldr	r2, [pc, #112]	; (8004c2c <TIM_OC3_SetConfig+0xfc>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d00f      	beq.n	8004bde <TIM_OC3_SetConfig+0xae>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	4a1b      	ldr	r2, [pc, #108]	; (8004c30 <TIM_OC3_SetConfig+0x100>)
 8004bc2:	4293      	cmp	r3, r2
 8004bc4:	d00b      	beq.n	8004bde <TIM_OC3_SetConfig+0xae>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a1a      	ldr	r2, [pc, #104]	; (8004c34 <TIM_OC3_SetConfig+0x104>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d007      	beq.n	8004bde <TIM_OC3_SetConfig+0xae>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a19      	ldr	r2, [pc, #100]	; (8004c38 <TIM_OC3_SetConfig+0x108>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d003      	beq.n	8004bde <TIM_OC3_SetConfig+0xae>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a18      	ldr	r2, [pc, #96]	; (8004c3c <TIM_OC3_SetConfig+0x10c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d113      	bne.n	8004c06 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004be4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	695b      	ldr	r3, [r3, #20]
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	693a      	ldr	r2, [r7, #16]
 8004c02:	4313      	orrs	r3, r2
 8004c04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	693a      	ldr	r2, [r7, #16]
 8004c0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685a      	ldr	r2, [r3, #4]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	697a      	ldr	r2, [r7, #20]
 8004c1e:	621a      	str	r2, [r3, #32]
}
 8004c20:	bf00      	nop
 8004c22:	371c      	adds	r7, #28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2a:	4770      	bx	lr
 8004c2c:	40012c00 	.word	0x40012c00
 8004c30:	40013400 	.word	0x40013400
 8004c34:	40014000 	.word	0x40014000
 8004c38:	40014400 	.word	0x40014400
 8004c3c:	40014800 	.word	0x40014800

08004c40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b087      	sub	sp, #28
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6a1b      	ldr	r3, [r3, #32]
 8004c4e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6a1b      	ldr	r3, [r3, #32]
 8004c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	69db      	ldr	r3, [r3, #28]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c7a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	4313      	orrs	r3, r2
 8004c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	689b      	ldr	r3, [r3, #8]
 8004c94:	031b      	lsls	r3, r3, #12
 8004c96:	697a      	ldr	r2, [r7, #20]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_OC4_SetConfig+0x100>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d003      	beq.n	8004cac <TIM_OC4_SetConfig+0x6c>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <TIM_OC4_SetConfig+0x104>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d10d      	bne.n	8004cc8 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	031b      	lsls	r3, r3, #12
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004cc0:	697b      	ldr	r3, [r7, #20]
 8004cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a1d      	ldr	r2, [pc, #116]	; (8004d40 <TIM_OC4_SetConfig+0x100>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d00f      	beq.n	8004cf0 <TIM_OC4_SetConfig+0xb0>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	4a1c      	ldr	r2, [pc, #112]	; (8004d44 <TIM_OC4_SetConfig+0x104>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d00b      	beq.n	8004cf0 <TIM_OC4_SetConfig+0xb0>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	4a1b      	ldr	r2, [pc, #108]	; (8004d48 <TIM_OC4_SetConfig+0x108>)
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d007      	beq.n	8004cf0 <TIM_OC4_SetConfig+0xb0>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	4a1a      	ldr	r2, [pc, #104]	; (8004d4c <TIM_OC4_SetConfig+0x10c>)
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d003      	beq.n	8004cf0 <TIM_OC4_SetConfig+0xb0>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	4a19      	ldr	r2, [pc, #100]	; (8004d50 <TIM_OC4_SetConfig+0x110>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d113      	bne.n	8004d18 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004cf6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004cfe:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	695b      	ldr	r3, [r3, #20]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	019b      	lsls	r3, r3, #6
 8004d12:	693a      	ldr	r2, [r7, #16]
 8004d14:	4313      	orrs	r3, r2
 8004d16:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	693a      	ldr	r2, [r7, #16]
 8004d1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	685a      	ldr	r2, [r3, #4]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	621a      	str	r2, [r3, #32]
}
 8004d32:	bf00      	nop
 8004d34:	371c      	adds	r7, #28
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	40012c00 	.word	0x40012c00
 8004d44:	40013400 	.word	0x40013400
 8004d48:	40014000 	.word	0x40014000
 8004d4c:	40014400 	.word	0x40014400
 8004d50:	40014800 	.word	0x40014800

08004d54 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b087      	sub	sp, #28
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
 8004d5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
 8004d62:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a1b      	ldr	r3, [r3, #32]
 8004d6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d98:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	041b      	lsls	r3, r3, #16
 8004da0:	693a      	ldr	r2, [r7, #16]
 8004da2:	4313      	orrs	r3, r2
 8004da4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	4a17      	ldr	r2, [pc, #92]	; (8004e08 <TIM_OC5_SetConfig+0xb4>)
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d00f      	beq.n	8004dce <TIM_OC5_SetConfig+0x7a>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	4a16      	ldr	r2, [pc, #88]	; (8004e0c <TIM_OC5_SetConfig+0xb8>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d00b      	beq.n	8004dce <TIM_OC5_SetConfig+0x7a>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	4a15      	ldr	r2, [pc, #84]	; (8004e10 <TIM_OC5_SetConfig+0xbc>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d007      	beq.n	8004dce <TIM_OC5_SetConfig+0x7a>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	4a14      	ldr	r2, [pc, #80]	; (8004e14 <TIM_OC5_SetConfig+0xc0>)
 8004dc2:	4293      	cmp	r3, r2
 8004dc4:	d003      	beq.n	8004dce <TIM_OC5_SetConfig+0x7a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	4a13      	ldr	r2, [pc, #76]	; (8004e18 <TIM_OC5_SetConfig+0xc4>)
 8004dca:	4293      	cmp	r3, r2
 8004dcc:	d109      	bne.n	8004de2 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dd4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	021b      	lsls	r3, r3, #8
 8004ddc:	697a      	ldr	r2, [r7, #20]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	697a      	ldr	r2, [r7, #20]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr
 8004e08:	40012c00 	.word	0x40012c00
 8004e0c:	40013400 	.word	0x40013400
 8004e10:	40014000 	.word	0x40014000
 8004e14:	40014400 	.word	0x40014400
 8004e18:	40014800 	.word	0x40014800

08004e1c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b087      	sub	sp, #28
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
 8004e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6a1b      	ldr	r3, [r3, #32]
 8004e36:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	021b      	lsls	r3, r3, #8
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004e62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	051b      	lsls	r3, r3, #20
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a18      	ldr	r2, [pc, #96]	; (8004ed4 <TIM_OC6_SetConfig+0xb8>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00f      	beq.n	8004e98 <TIM_OC6_SetConfig+0x7c>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a17      	ldr	r2, [pc, #92]	; (8004ed8 <TIM_OC6_SetConfig+0xbc>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d00b      	beq.n	8004e98 <TIM_OC6_SetConfig+0x7c>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a16      	ldr	r2, [pc, #88]	; (8004edc <TIM_OC6_SetConfig+0xc0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d007      	beq.n	8004e98 <TIM_OC6_SetConfig+0x7c>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <TIM_OC6_SetConfig+0xc4>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d003      	beq.n	8004e98 <TIM_OC6_SetConfig+0x7c>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a14      	ldr	r2, [pc, #80]	; (8004ee4 <TIM_OC6_SetConfig+0xc8>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d109      	bne.n	8004eac <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	695b      	ldr	r3, [r3, #20]
 8004ea4:	029b      	lsls	r3, r3, #10
 8004ea6:	697a      	ldr	r2, [r7, #20]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685a      	ldr	r2, [r3, #4]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	693a      	ldr	r2, [r7, #16]
 8004ec4:	621a      	str	r2, [r3, #32]
}
 8004ec6:	bf00      	nop
 8004ec8:	371c      	adds	r7, #28
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	40012c00 	.word	0x40012c00
 8004ed8:	40013400 	.word	0x40013400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400
 8004ee4:	40014800 	.word	0x40014800

08004ee8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b087      	sub	sp, #28
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f0c:	693b      	ldr	r3, [r7, #16]
 8004f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	011b      	lsls	r3, r3, #4
 8004f18:	693a      	ldr	r2, [r7, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	f023 030a 	bic.w	r3, r3, #10
 8004f24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f26:	697a      	ldr	r2, [r7, #20]
 8004f28:	68bb      	ldr	r3, [r7, #8]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b087      	sub	sp, #28
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	60f8      	str	r0, [r7, #12]
 8004f4e:	60b9      	str	r1, [r7, #8]
 8004f50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	6a1b      	ldr	r3, [r3, #32]
 8004f56:	f023 0210 	bic.w	r2, r3, #16
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	699b      	ldr	r3, [r3, #24]
 8004f62:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a1b      	ldr	r3, [r3, #32]
 8004f68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004f70:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	031b      	lsls	r3, r3, #12
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f82:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	011b      	lsls	r3, r3, #4
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr

08004fa6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	6078      	str	r0, [r7, #4]
 8004fae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004fbc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fc0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fc2:	683a      	ldr	r2, [r7, #0]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	f043 0307 	orr.w	r3, r3, #7
 8004fcc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	609a      	str	r2, [r3, #8]
}
 8004fd4:	bf00      	nop
 8004fd6:	3714      	adds	r7, #20
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fde:	4770      	bx	lr

08004fe0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004fe0:	b480      	push	{r7}
 8004fe2:	b087      	sub	sp, #28
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ffa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	021a      	lsls	r2, r3, #8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	431a      	orrs	r2, r3
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	4313      	orrs	r3, r2
 8005008:	697a      	ldr	r2, [r7, #20]
 800500a:	4313      	orrs	r3, r2
 800500c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	697a      	ldr	r2, [r7, #20]
 8005012:	609a      	str	r2, [r3, #8]
}
 8005014:	bf00      	nop
 8005016:	371c      	adds	r7, #28
 8005018:	46bd      	mov	sp, r7
 800501a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501e:	4770      	bx	lr

08005020 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005020:	b480      	push	{r7}
 8005022:	b087      	sub	sp, #28
 8005024:	af00      	add	r7, sp, #0
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	f003 031f 	and.w	r3, r3, #31
 8005032:	2201      	movs	r2, #1
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6a1a      	ldr	r2, [r3, #32]
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	43db      	mvns	r3, r3
 8005042:	401a      	ands	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a1a      	ldr	r2, [r3, #32]
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	f003 031f 	and.w	r3, r3, #31
 8005052:	6879      	ldr	r1, [r7, #4]
 8005054:	fa01 f303 	lsl.w	r3, r1, r3
 8005058:	431a      	orrs	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	621a      	str	r2, [r3, #32]
}
 800505e:	bf00      	nop
 8005060:	371c      	adds	r7, #28
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr
	...

0800506c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <HAL_TIMEx_PWMN_Start+0x24>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005082:	b2db      	uxtb	r3, r3
 8005084:	2b01      	cmp	r3, #1
 8005086:	bf14      	ite	ne
 8005088:	2301      	movne	r3, #1
 800508a:	2300      	moveq	r3, #0
 800508c:	b2db      	uxtb	r3, r3
 800508e:	e022      	b.n	80050d6 <HAL_TIMEx_PWMN_Start+0x6a>
 8005090:	683b      	ldr	r3, [r7, #0]
 8005092:	2b04      	cmp	r3, #4
 8005094:	d109      	bne.n	80050aa <HAL_TIMEx_PWMN_Start+0x3e>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800509c:	b2db      	uxtb	r3, r3
 800509e:	2b01      	cmp	r3, #1
 80050a0:	bf14      	ite	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	2300      	moveq	r3, #0
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	e015      	b.n	80050d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d109      	bne.n	80050c4 <HAL_TIMEx_PWMN_Start+0x58>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80050b6:	b2db      	uxtb	r3, r3
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	bf14      	ite	ne
 80050bc:	2301      	movne	r3, #1
 80050be:	2300      	moveq	r3, #0
 80050c0:	b2db      	uxtb	r3, r3
 80050c2:	e008      	b.n	80050d6 <HAL_TIMEx_PWMN_Start+0x6a>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	bf14      	ite	ne
 80050d0:	2301      	movne	r3, #1
 80050d2:	2300      	moveq	r3, #0
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d001      	beq.n	80050de <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e069      	b.n	80051b2 <HAL_TIMEx_PWMN_Start+0x146>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d104      	bne.n	80050ee <HAL_TIMEx_PWMN_Start+0x82>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2202      	movs	r2, #2
 80050e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050ec:	e013      	b.n	8005116 <HAL_TIMEx_PWMN_Start+0xaa>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b04      	cmp	r3, #4
 80050f2:	d104      	bne.n	80050fe <HAL_TIMEx_PWMN_Start+0x92>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80050fc:	e00b      	b.n	8005116 <HAL_TIMEx_PWMN_Start+0xaa>
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	2b08      	cmp	r3, #8
 8005102:	d104      	bne.n	800510e <HAL_TIMEx_PWMN_Start+0xa2>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800510c:	e003      	b.n	8005116 <HAL_TIMEx_PWMN_Start+0xaa>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2204      	movs	r2, #4
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f000 f9d3 	bl	80054ca <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005132:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a20      	ldr	r2, [pc, #128]	; (80051bc <HAL_TIMEx_PWMN_Start+0x150>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d018      	beq.n	8005170 <HAL_TIMEx_PWMN_Start+0x104>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d013      	beq.n	8005170 <HAL_TIMEx_PWMN_Start+0x104>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a1c      	ldr	r2, [pc, #112]	; (80051c0 <HAL_TIMEx_PWMN_Start+0x154>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d00e      	beq.n	8005170 <HAL_TIMEx_PWMN_Start+0x104>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1b      	ldr	r2, [pc, #108]	; (80051c4 <HAL_TIMEx_PWMN_Start+0x158>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d009      	beq.n	8005170 <HAL_TIMEx_PWMN_Start+0x104>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a19      	ldr	r2, [pc, #100]	; (80051c8 <HAL_TIMEx_PWMN_Start+0x15c>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d004      	beq.n	8005170 <HAL_TIMEx_PWMN_Start+0x104>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a18      	ldr	r2, [pc, #96]	; (80051cc <HAL_TIMEx_PWMN_Start+0x160>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d115      	bne.n	800519c <HAL_TIMEx_PWMN_Start+0x130>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	689a      	ldr	r2, [r3, #8]
 8005176:	4b16      	ldr	r3, [pc, #88]	; (80051d0 <HAL_TIMEx_PWMN_Start+0x164>)
 8005178:	4013      	ands	r3, r2
 800517a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2b06      	cmp	r3, #6
 8005180:	d015      	beq.n	80051ae <HAL_TIMEx_PWMN_Start+0x142>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005188:	d011      	beq.n	80051ae <HAL_TIMEx_PWMN_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	e008      	b.n	80051ae <HAL_TIMEx_PWMN_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	e000      	b.n	80051b0 <HAL_TIMEx_PWMN_Start+0x144>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	40012c00 	.word	0x40012c00
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40013400 	.word	0x40013400
 80051cc:	40014000 	.word	0x40014000
 80051d0:	00010007 	.word	0x00010007

080051d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d101      	bne.n	80051ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80051e8:	2302      	movs	r3, #2
 80051ea:	e065      	b.n	80052b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	4a2c      	ldr	r2, [pc, #176]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d004      	beq.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a2b      	ldr	r2, [pc, #172]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d108      	bne.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005226:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005228:	683b      	ldr	r3, [r7, #0]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	68fa      	ldr	r2, [r7, #12]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005238:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800523c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68fa      	ldr	r2, [r7, #12]
 8005244:	4313      	orrs	r3, r2
 8005246:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	68fa      	ldr	r2, [r7, #12]
 800524e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a1b      	ldr	r2, [pc, #108]	; (80052c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d018      	beq.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005262:	d013      	beq.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a18      	ldr	r2, [pc, #96]	; (80052cc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d00e      	beq.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d009      	beq.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a12      	ldr	r2, [pc, #72]	; (80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d004      	beq.n	800528c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a13      	ldr	r2, [pc, #76]	; (80052d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d10c      	bne.n	80052a6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005292:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	4313      	orrs	r3, r2
 800529c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68ba      	ldr	r2, [r7, #8]
 80052a4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2201      	movs	r2, #1
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3714      	adds	r7, #20
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr
 80052c4:	40012c00 	.word	0x40012c00
 80052c8:	40013400 	.word	0x40013400
 80052cc:	40000400 	.word	0x40000400
 80052d0:	40000800 	.word	0x40000800
 80052d4:	40014000 	.word	0x40014000

080052d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80052e2:	2300      	movs	r3, #0
 80052e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ec:	2b01      	cmp	r3, #1
 80052ee:	d101      	bne.n	80052f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80052f0:	2302      	movs	r3, #2
 80052f2:	e087      	b.n	8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	4313      	orrs	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	4313      	orrs	r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	4313      	orrs	r3, r2
 8005324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4313      	orrs	r3, r2
 8005332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	4313      	orrs	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	4313      	orrs	r3, r2
 800534e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	4313      	orrs	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	699b      	ldr	r3, [r3, #24]
 8005368:	041b      	lsls	r3, r3, #16
 800536a:	4313      	orrs	r3, r2
 800536c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a27      	ldr	r2, [pc, #156]	; (8005410 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d004      	beq.n	8005382 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a25      	ldr	r2, [pc, #148]	; (8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d106      	bne.n	8005390 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a1e      	ldr	r2, [pc, #120]	; (8005410 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005396:	4293      	cmp	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d126      	bne.n	80053f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ae:	051b      	lsls	r3, r3, #20
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	4313      	orrs	r3, r2
 80053c0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053cc:	4313      	orrs	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d004      	beq.n	80053e4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a0d      	ldr	r2, [pc, #52]	; (8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d106      	bne.n	80053f2 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005402:	2300      	movs	r3, #0
}
 8005404:	4618      	mov	r0, r3
 8005406:	3714      	adds	r7, #20
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr
 8005410:	40012c00 	.word	0x40012c00
 8005414:	40013400 	.word	0x40013400

08005418 <HAL_TIMEx_EnableDeadTimePreload>:
  * @brief  Enable deadtime preload
  * @param  htim TIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_EnableDeadTimePreload(TIM_HandleTypeDef *htim)
{
 8005418:	b480      	push	{r7}
 800541a:	b083      	sub	sp, #12
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_BREAK_INSTANCE(htim->Instance));

  SET_BIT(htim->Instance->DTR2, TIM_DTR2_DTPE);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800542e:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr

0800543e <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800543e:	b480      	push	{r7}
 8005440:	b083      	sub	sp, #12
 8005442:	af00      	add	r7, sp, #0
 8005444:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800546e:	bf00      	nop
 8005470:	370c      	adds	r7, #12
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr

0800547a <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800547a:	b480      	push	{r7}
 800547c:	b083      	sub	sp, #12
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005482:	bf00      	nop
 8005484:	370c      	adds	r7, #12
 8005486:	46bd      	mov	sp, r7
 8005488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548c:	4770      	bx	lr

0800548e <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800548e:	b480      	push	{r7}
 8005490:	b083      	sub	sp, #12
 8005492:	af00      	add	r7, sp, #0
 8005494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005496:	bf00      	nop
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b083      	sub	sp, #12
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80054aa:	bf00      	nop
 80054ac:	370c      	adds	r7, #12
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80054b6:	b480      	push	{r7}
 80054b8:	b083      	sub	sp, #12
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80054be:	bf00      	nop
 80054c0:	370c      	adds	r7, #12
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b087      	sub	sp, #28
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	60f8      	str	r0, [r7, #12]
 80054d2:	60b9      	str	r1, [r7, #8]
 80054d4:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f003 031f 	and.w	r3, r3, #31
 80054dc:	2204      	movs	r2, #4
 80054de:	fa02 f303 	lsl.w	r3, r2, r3
 80054e2:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a1a      	ldr	r2, [r3, #32]
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	43db      	mvns	r3, r3
 80054ec:	401a      	ands	r2, r3
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6a1a      	ldr	r2, [r3, #32]
 80054f6:	68bb      	ldr	r3, [r7, #8]
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	6879      	ldr	r1, [r7, #4]
 80054fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005502:	431a      	orrs	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	621a      	str	r2, [r3, #32]
}
 8005508:	bf00      	nop
 800550a:	371c      	adds	r7, #28
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e042      	b.n	80055ac <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552c:	2b00      	cmp	r3, #0
 800552e:	d106      	bne.n	800553e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7fc faeb 	bl	8001b14 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2224      	movs	r2, #36	; 0x24
 8005542:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0201 	bic.w	r2, r2, #1
 8005554:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f000 fb5c 	bl	8005c14 <UART_SetConfig>
 800555c:	4603      	mov	r3, r0
 800555e:	2b01      	cmp	r3, #1
 8005560:	d101      	bne.n	8005566 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	e022      	b.n	80055ac <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	d002      	beq.n	8005574 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 fe1c 	bl	80061ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685a      	ldr	r2, [r3, #4]
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005582:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689a      	ldr	r2, [r3, #8]
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005592:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f042 0201 	orr.w	r2, r2, #1
 80055a2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fea3 	bl	80062f0 <UART_CheckIdleState>
 80055aa:	4603      	mov	r3, r0
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}

080055b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b08a      	sub	sp, #40	; 0x28
 80055b8:	af02      	add	r7, sp, #8
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	603b      	str	r3, [r7, #0]
 80055c0:	4613      	mov	r3, r2
 80055c2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055ca:	2b20      	cmp	r3, #32
 80055cc:	f040 8083 	bne.w	80056d6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d002      	beq.n	80055dc <HAL_UART_Transmit+0x28>
 80055d6:	88fb      	ldrh	r3, [r7, #6]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d101      	bne.n	80055e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e07b      	b.n	80056d8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <HAL_UART_Transmit+0x3a>
 80055ea:	2302      	movs	r3, #2
 80055ec:	e074      	b.n	80056d8 <HAL_UART_Transmit+0x124>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2201      	movs	r2, #1
 80055f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	2200      	movs	r2, #0
 80055fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2221      	movs	r2, #33	; 0x21
 8005602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005606:	f7fc fb93 	bl	8001d30 <HAL_GetTick>
 800560a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	88fa      	ldrh	r2, [r7, #6]
 8005610:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	88fa      	ldrh	r2, [r7, #6]
 8005618:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005624:	d108      	bne.n	8005638 <HAL_UART_Transmit+0x84>
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d104      	bne.n	8005638 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800562e:	2300      	movs	r3, #0
 8005630:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	61bb      	str	r3, [r7, #24]
 8005636:	e003      	b.n	8005640 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800563c:	2300      	movs	r3, #0
 800563e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2200      	movs	r2, #0
 8005644:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005648:	e02c      	b.n	80056a4 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 fe96 	bl	8006386 <UART_WaitOnFlagUntilTimeout>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005660:	2303      	movs	r3, #3
 8005662:	e039      	b.n	80056d8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10b      	bne.n	8005682 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800566a:	69bb      	ldr	r3, [r7, #24]
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005678:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	3302      	adds	r3, #2
 800567e:	61bb      	str	r3, [r7, #24]
 8005680:	e007      	b.n	8005692 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	781a      	ldrb	r2, [r3, #0]
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	3301      	adds	r3, #1
 8005690:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1cc      	bne.n	800564a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	9300      	str	r3, [sp, #0]
 80056b4:	697b      	ldr	r3, [r7, #20]
 80056b6:	2200      	movs	r2, #0
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	68f8      	ldr	r0, [r7, #12]
 80056bc:	f000 fe63 	bl	8006386 <UART_WaitOnFlagUntilTimeout>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d001      	beq.n	80056ca <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e006      	b.n	80056d8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2220      	movs	r2, #32
 80056ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80056d2:	2300      	movs	r3, #0
 80056d4:	e000      	b.n	80056d8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80056d6:	2302      	movs	r3, #2
  }
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3720      	adds	r7, #32
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f4:	2b20      	cmp	r3, #32
 80056f6:	d131      	bne.n	800575c <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d002      	beq.n	8005704 <HAL_UART_Receive_IT+0x24>
 80056fe:	88fb      	ldrh	r3, [r7, #6]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d101      	bne.n	8005708 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005704:	2301      	movs	r3, #1
 8005706:	e02a      	b.n	800575e <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800570e:	2b01      	cmp	r3, #1
 8005710:	d101      	bne.n	8005716 <HAL_UART_Receive_IT+0x36>
 8005712:	2302      	movs	r3, #2
 8005714:	e023      	b.n	800575e <HAL_UART_Receive_IT+0x7e>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2201      	movs	r2, #1
 800571a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2200      	movs	r2, #0
 8005722:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a0f      	ldr	r2, [pc, #60]	; (8005768 <HAL_UART_Receive_IT+0x88>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00e      	beq.n	800574c <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005738:	2b00      	cmp	r3, #0
 800573a:	d007      	beq.n	800574c <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800574a:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800574c:	88fb      	ldrh	r3, [r7, #6]
 800574e:	461a      	mov	r2, r3
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	68f8      	ldr	r0, [r7, #12]
 8005754:	f000 fe98 	bl	8006488 <UART_Start_Receive_IT>
 8005758:	4603      	mov	r3, r0
 800575a:	e000      	b.n	800575e <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800575c:	2302      	movs	r3, #2
  }
}
 800575e:	4618      	mov	r0, r3
 8005760:	3710      	adds	r7, #16
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	40008000 	.word	0x40008000

0800576c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b088      	sub	sp, #32
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	69db      	ldr	r3, [r3, #28]
 800577a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800578c:	69fa      	ldr	r2, [r7, #28]
 800578e:	f640 030f 	movw	r3, #2063	; 0x80f
 8005792:	4013      	ands	r3, r2
 8005794:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d118      	bne.n	80057ce <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f003 0320 	and.w	r3, r3, #32
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d013      	beq.n	80057ce <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	f003 0320 	and.w	r3, r3, #32
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d104      	bne.n	80057ba <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d009      	beq.n	80057ce <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057be:	2b00      	cmp	r3, #0
 80057c0:	f000 81fb 	beq.w	8005bba <HAL_UART_IRQHandler+0x44e>
      {
        huart->RxISR(huart);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	6878      	ldr	r0, [r7, #4]
 80057ca:	4798      	blx	r3
      }
      return;
 80057cc:	e1f5      	b.n	8005bba <HAL_UART_IRQHandler+0x44e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 80ef 	beq.w	80059b4 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80057d6:	697a      	ldr	r2, [r7, #20]
 80057d8:	4b73      	ldr	r3, [pc, #460]	; (80059a8 <HAL_UART_IRQHandler+0x23c>)
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	4b72      	ldr	r3, [pc, #456]	; (80059ac <HAL_UART_IRQHandler+0x240>)
 80057e4:	4013      	ands	r3, r2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f000 80e4 	beq.w	80059b4 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80057ec:	69fb      	ldr	r3, [r7, #28]
 80057ee:	f003 0301 	and.w	r3, r3, #1
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d010      	beq.n	8005818 <HAL_UART_IRQHandler+0xac>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00b      	beq.n	8005818 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	2201      	movs	r2, #1
 8005806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580e:	f043 0201 	orr.w	r2, r3, #1
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0302 	and.w	r3, r3, #2
 800581e:	2b00      	cmp	r3, #0
 8005820:	d010      	beq.n	8005844 <HAL_UART_IRQHandler+0xd8>
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 0301 	and.w	r3, r3, #1
 8005828:	2b00      	cmp	r3, #0
 800582a:	d00b      	beq.n	8005844 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	2202      	movs	r2, #2
 8005832:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800583a:	f043 0204 	orr.w	r2, r3, #4
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d010      	beq.n	8005870 <HAL_UART_IRQHandler+0x104>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00b      	beq.n	8005870 <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2204      	movs	r2, #4
 800585e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005866:	f043 0202 	orr.w	r2, r3, #2
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	f003 0308 	and.w	r3, r3, #8
 8005876:	2b00      	cmp	r3, #0
 8005878:	d015      	beq.n	80058a6 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	f003 0320 	and.w	r3, r3, #32
 8005880:	2b00      	cmp	r3, #0
 8005882:	d104      	bne.n	800588e <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005884:	697a      	ldr	r2, [r7, #20]
 8005886:	4b48      	ldr	r3, [pc, #288]	; (80059a8 <HAL_UART_IRQHandler+0x23c>)
 8005888:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00b      	beq.n	80058a6 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2208      	movs	r2, #8
 8005894:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800589c:	f043 0208 	orr.w	r2, r3, #8
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d011      	beq.n	80058d4 <HAL_UART_IRQHandler+0x168>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00c      	beq.n	80058d4 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80058c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058ca:	f043 0220 	orr.w	r2, r3, #32
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 816f 	beq.w	8005bbe <HAL_UART_IRQHandler+0x452>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f003 0320 	and.w	r3, r3, #32
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d011      	beq.n	800590e <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058ea:	69bb      	ldr	r3, [r7, #24]
 80058ec:	f003 0320 	and.w	r3, r3, #32
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d104      	bne.n	80058fe <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d007      	beq.n	800590e <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	2b00      	cmp	r3, #0
 8005904:	d003      	beq.n	800590e <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005914:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005920:	2b40      	cmp	r3, #64	; 0x40
 8005922:	d004      	beq.n	800592e <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800592a:	2b00      	cmp	r3, #0
 800592c:	d031      	beq.n	8005992 <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 fe68 	bl	8006604 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b40      	cmp	r3, #64	; 0x40
 8005940:	d123      	bne.n	800598a <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005950:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005956:	2b00      	cmp	r3, #0
 8005958:	d013      	beq.n	8005982 <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800595e:	4a14      	ldr	r2, [pc, #80]	; (80059b0 <HAL_UART_IRQHandler+0x244>)
 8005960:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005966:	4618      	mov	r0, r3
 8005968:	f7fc fb78 	bl	800205c <HAL_DMA_Abort_IT>
 800596c:	4603      	mov	r3, r0
 800596e:	2b00      	cmp	r3, #0
 8005970:	d017      	beq.n	80059a2 <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800597c:	4610      	mov	r0, r2
 800597e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005980:	e00f      	b.n	80059a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f000 f930 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005988:	e00b      	b.n	80059a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f92c 	bl	8005be8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005990:	e007      	b.n	80059a2 <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f928 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80059a0:	e10d      	b.n	8005bbe <HAL_UART_IRQHandler+0x452>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a2:	bf00      	nop
    return;
 80059a4:	e10b      	b.n	8005bbe <HAL_UART_IRQHandler+0x452>
 80059a6:	bf00      	nop
 80059a8:	10000001 	.word	0x10000001
 80059ac:	04000120 	.word	0x04000120
 80059b0:	08006669 	.word	0x08006669

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059b8:	2b01      	cmp	r3, #1
 80059ba:	f040 80ab 	bne.w	8005b14 <HAL_UART_IRQHandler+0x3a8>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	f003 0310 	and.w	r3, r3, #16
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80a5 	beq.w	8005b14 <HAL_UART_IRQHandler+0x3a8>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059ca:	69bb      	ldr	r3, [r7, #24]
 80059cc:	f003 0310 	and.w	r3, r3, #16
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	f000 809f 	beq.w	8005b14 <HAL_UART_IRQHandler+0x3a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	2210      	movs	r2, #16
 80059dc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059e8:	2b40      	cmp	r3, #64	; 0x40
 80059ea:	d155      	bne.n	8005a98 <HAL_UART_IRQHandler+0x32c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 80059f6:	893b      	ldrh	r3, [r7, #8]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	f000 80e2 	beq.w	8005bc2 <HAL_UART_IRQHandler+0x456>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a04:	893a      	ldrh	r2, [r7, #8]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	f080 80db 	bcs.w	8005bc2 <HAL_UART_IRQHandler+0x456>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	893a      	ldrh	r2, [r7, #8]
 8005a10:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d12b      	bne.n	8005a7c <HAL_UART_IRQHandler+0x310>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a32:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689a      	ldr	r2, [r3, #8]
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f022 0201 	bic.w	r2, r2, #1
 8005a42:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	689a      	ldr	r2, [r3, #8]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a52:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f022 0210 	bic.w	r2, r2, #16
 8005a70:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a76:	4618      	mov	r0, r3
 8005a78:	f7fc fa97 	bl	8001faa <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a88:	b29b      	uxth	r3, r3
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	b29b      	uxth	r3, r3
 8005a8e:	4619      	mov	r1, r3
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f000 f8b3 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a96:	e094      	b.n	8005bc2 <HAL_UART_IRQHandler+0x456>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ab0:	b29b      	uxth	r3, r3
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	f000 8087 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x45a>
          && (nb_rx_data > 0U))
 8005ab8:	897b      	ldrh	r3, [r7, #10]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f000 8083 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x45a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ace:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	6812      	ldr	r2, [r2, #0]
 8005ada:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ade:	f023 0301 	bic.w	r3, r3, #1
 8005ae2:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2220      	movs	r2, #32
 8005ae8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2200      	movs	r2, #0
 8005af0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f022 0210 	bic.w	r2, r2, #16
 8005b06:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b08:	897b      	ldrh	r3, [r7, #10]
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f875 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b12:	e058      	b.n	8005bc6 <HAL_UART_IRQHandler+0x45a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00d      	beq.n	8005b3a <HAL_UART_IRQHandler+0x3ce>
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d008      	beq.n	8005b3a <HAL_UART_IRQHandler+0x3ce>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005b30:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005b32:	6878      	ldr	r0, [r7, #4]
 8005b34:	f001 f8a4 	bl	8006c80 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005b38:	e048      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005b3a:	69fb      	ldr	r3, [r7, #28]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d012      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3fe>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d104      	bne.n	8005b58 <HAL_UART_IRQHandler+0x3ec>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d008      	beq.n	8005b6a <HAL_UART_IRQHandler+0x3fe>
  {
    if (huart->TxISR != NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d034      	beq.n	8005bca <HAL_UART_IRQHandler+0x45e>
    {
      huart->TxISR(huart);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	4798      	blx	r3
    }
    return;
 8005b68:	e02f      	b.n	8005bca <HAL_UART_IRQHandler+0x45e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b6a:	69fb      	ldr	r3, [r7, #28]
 8005b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d008      	beq.n	8005b86 <HAL_UART_IRQHandler+0x41a>
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d003      	beq.n	8005b86 <HAL_UART_IRQHandler+0x41a>
  {
    UART_EndTransmit_IT(huart);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 fd88 	bl	8006694 <UART_EndTransmit_IT>
    return;
 8005b84:	e022      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d008      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x436>
 8005b90:	69bb      	ldr	r3, [r7, #24]
 8005b92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d003      	beq.n	8005ba2 <HAL_UART_IRQHandler+0x436>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f001 f884 	bl	8006ca8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ba0:	e014      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ba2:	69fb      	ldr	r3, [r7, #28]
 8005ba4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00f      	beq.n	8005bcc <HAL_UART_IRQHandler+0x460>
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	da0c      	bge.n	8005bcc <HAL_UART_IRQHandler+0x460>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f001 f86e 	bl	8006c94 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bb8:	e008      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
      return;
 8005bba:	bf00      	nop
 8005bbc:	e006      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
    return;
 8005bbe:	bf00      	nop
 8005bc0:	e004      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
      return;
 8005bc2:	bf00      	nop
 8005bc4:	e002      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
      return;
 8005bc6:	bf00      	nop
 8005bc8:	e000      	b.n	8005bcc <HAL_UART_IRQHandler+0x460>
    return;
 8005bca:	bf00      	nop
  }
}
 8005bcc:	3720      	adds	r7, #32
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop

08005bd4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b083      	sub	sp, #12
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005bdc:	bf00      	nop
 8005bde:	370c      	adds	r7, #12
 8005be0:	46bd      	mov	sp, r7
 8005be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be6:	4770      	bx	lr

08005be8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005be8:	b480      	push	{r7}
 8005bea:	b083      	sub	sp, #12
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bf0:	bf00      	nop
 8005bf2:	370c      	adds	r7, #12
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfa:	4770      	bx	lr

08005bfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b083      	sub	sp, #12
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
 8005c04:	460b      	mov	r3, r1
 8005c06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c18:	b08c      	sub	sp, #48	; 0x30
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	689a      	ldr	r2, [r3, #8]
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	695b      	ldr	r3, [r3, #20]
 8005c32:	431a      	orrs	r2, r3
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	4bab      	ldr	r3, [pc, #684]	; (8005ef0 <UART_SetConfig+0x2dc>)
 8005c44:	4013      	ands	r3, r2
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	6812      	ldr	r2, [r2, #0]
 8005c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005c5a:	697b      	ldr	r3, [r7, #20]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	430a      	orrs	r2, r1
 8005c64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	699b      	ldr	r3, [r3, #24]
 8005c6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4aa0      	ldr	r2, [pc, #640]	; (8005ef4 <UART_SetConfig+0x2e0>)
 8005c72:	4293      	cmp	r3, r2
 8005c74:	d004      	beq.n	8005c80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6a1b      	ldr	r3, [r3, #32]
 8005c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c80:	697b      	ldr	r3, [r7, #20]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005c8a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005c8e:	697a      	ldr	r2, [r7, #20]
 8005c90:	6812      	ldr	r2, [r2, #0]
 8005c92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c94:	430b      	orrs	r3, r1
 8005c96:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	f023 010f 	bic.w	r1, r3, #15
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	430a      	orrs	r2, r1
 8005cac:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a91      	ldr	r2, [pc, #580]	; (8005ef8 <UART_SetConfig+0x2e4>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d125      	bne.n	8005d04 <UART_SetConfig+0xf0>
 8005cb8:	4b90      	ldr	r3, [pc, #576]	; (8005efc <UART_SetConfig+0x2e8>)
 8005cba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	2b03      	cmp	r3, #3
 8005cc4:	d81a      	bhi.n	8005cfc <UART_SetConfig+0xe8>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0xb8>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005cdd 	.word	0x08005cdd
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005ce5 	.word	0x08005ce5
 8005cd8:	08005cf5 	.word	0x08005cf5
 8005cdc:	2301      	movs	r3, #1
 8005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ce2:	e0d6      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005ce4:	2302      	movs	r3, #2
 8005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cea:	e0d2      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf2:	e0ce      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cfa:	e0ca      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d02:	e0c6      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a7d      	ldr	r2, [pc, #500]	; (8005f00 <UART_SetConfig+0x2ec>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d138      	bne.n	8005d80 <UART_SetConfig+0x16c>
 8005d0e:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <UART_SetConfig+0x2e8>)
 8005d10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d14:	f003 030c 	and.w	r3, r3, #12
 8005d18:	2b0c      	cmp	r3, #12
 8005d1a:	d82d      	bhi.n	8005d78 <UART_SetConfig+0x164>
 8005d1c:	a201      	add	r2, pc, #4	; (adr r2, 8005d24 <UART_SetConfig+0x110>)
 8005d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d22:	bf00      	nop
 8005d24:	08005d59 	.word	0x08005d59
 8005d28:	08005d79 	.word	0x08005d79
 8005d2c:	08005d79 	.word	0x08005d79
 8005d30:	08005d79 	.word	0x08005d79
 8005d34:	08005d69 	.word	0x08005d69
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d79 	.word	0x08005d79
 8005d40:	08005d79 	.word	0x08005d79
 8005d44:	08005d61 	.word	0x08005d61
 8005d48:	08005d79 	.word	0x08005d79
 8005d4c:	08005d79 	.word	0x08005d79
 8005d50:	08005d79 	.word	0x08005d79
 8005d54:	08005d71 	.word	0x08005d71
 8005d58:	2300      	movs	r3, #0
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e098      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005d60:	2302      	movs	r3, #2
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e094      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005d68:	2304      	movs	r3, #4
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e090      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005d70:	2308      	movs	r3, #8
 8005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d76:	e08c      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005d78:	2310      	movs	r3, #16
 8005d7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d7e:	e088      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a5f      	ldr	r2, [pc, #380]	; (8005f04 <UART_SetConfig+0x2f0>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d125      	bne.n	8005dd6 <UART_SetConfig+0x1c2>
 8005d8a:	4b5c      	ldr	r3, [pc, #368]	; (8005efc <UART_SetConfig+0x2e8>)
 8005d8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005d94:	2b30      	cmp	r3, #48	; 0x30
 8005d96:	d016      	beq.n	8005dc6 <UART_SetConfig+0x1b2>
 8005d98:	2b30      	cmp	r3, #48	; 0x30
 8005d9a:	d818      	bhi.n	8005dce <UART_SetConfig+0x1ba>
 8005d9c:	2b20      	cmp	r3, #32
 8005d9e:	d00a      	beq.n	8005db6 <UART_SetConfig+0x1a2>
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d814      	bhi.n	8005dce <UART_SetConfig+0x1ba>
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d002      	beq.n	8005dae <UART_SetConfig+0x19a>
 8005da8:	2b10      	cmp	r3, #16
 8005daa:	d008      	beq.n	8005dbe <UART_SetConfig+0x1aa>
 8005dac:	e00f      	b.n	8005dce <UART_SetConfig+0x1ba>
 8005dae:	2300      	movs	r3, #0
 8005db0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db4:	e06d      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005db6:	2302      	movs	r3, #2
 8005db8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbc:	e069      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005dbe:	2304      	movs	r3, #4
 8005dc0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc4:	e065      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dcc:	e061      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005dce:	2310      	movs	r3, #16
 8005dd0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dd4:	e05d      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a4b      	ldr	r2, [pc, #300]	; (8005f08 <UART_SetConfig+0x2f4>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d125      	bne.n	8005e2c <UART_SetConfig+0x218>
 8005de0:	4b46      	ldr	r3, [pc, #280]	; (8005efc <UART_SetConfig+0x2e8>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005dea:	2bc0      	cmp	r3, #192	; 0xc0
 8005dec:	d016      	beq.n	8005e1c <UART_SetConfig+0x208>
 8005dee:	2bc0      	cmp	r3, #192	; 0xc0
 8005df0:	d818      	bhi.n	8005e24 <UART_SetConfig+0x210>
 8005df2:	2b80      	cmp	r3, #128	; 0x80
 8005df4:	d00a      	beq.n	8005e0c <UART_SetConfig+0x1f8>
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d814      	bhi.n	8005e24 <UART_SetConfig+0x210>
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <UART_SetConfig+0x1f0>
 8005dfe:	2b40      	cmp	r3, #64	; 0x40
 8005e00:	d008      	beq.n	8005e14 <UART_SetConfig+0x200>
 8005e02:	e00f      	b.n	8005e24 <UART_SetConfig+0x210>
 8005e04:	2300      	movs	r3, #0
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	e042      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e12:	e03e      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1a:	e03a      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e22:	e036      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2a:	e032      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a30      	ldr	r2, [pc, #192]	; (8005ef4 <UART_SetConfig+0x2e0>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d12a      	bne.n	8005e8c <UART_SetConfig+0x278>
 8005e36:	4b31      	ldr	r3, [pc, #196]	; (8005efc <UART_SetConfig+0x2e8>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005e40:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e44:	d01a      	beq.n	8005e7c <UART_SetConfig+0x268>
 8005e46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005e4a:	d81b      	bhi.n	8005e84 <UART_SetConfig+0x270>
 8005e4c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e50:	d00c      	beq.n	8005e6c <UART_SetConfig+0x258>
 8005e52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e56:	d815      	bhi.n	8005e84 <UART_SetConfig+0x270>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d003      	beq.n	8005e64 <UART_SetConfig+0x250>
 8005e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e60:	d008      	beq.n	8005e74 <UART_SetConfig+0x260>
 8005e62:	e00f      	b.n	8005e84 <UART_SetConfig+0x270>
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6a:	e012      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e6c:	2302      	movs	r3, #2
 8005e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e72:	e00e      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7a:	e00a      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e82:	e006      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8a:	e002      	b.n	8005e92 <UART_SetConfig+0x27e>
 8005e8c:	2310      	movs	r3, #16
 8005e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4a17      	ldr	r2, [pc, #92]	; (8005ef4 <UART_SetConfig+0x2e0>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	f040 80a8 	bne.w	8005fee <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ea2:	2b08      	cmp	r3, #8
 8005ea4:	d834      	bhi.n	8005f10 <UART_SetConfig+0x2fc>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <UART_SetConfig+0x298>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ed1 	.word	0x08005ed1
 8005eb0:	08005f11 	.word	0x08005f11
 8005eb4:	08005ed9 	.word	0x08005ed9
 8005eb8:	08005f11 	.word	0x08005f11
 8005ebc:	08005edf 	.word	0x08005edf
 8005ec0:	08005f11 	.word	0x08005f11
 8005ec4:	08005f11 	.word	0x08005f11
 8005ec8:	08005f11 	.word	0x08005f11
 8005ecc:	08005ee7 	.word	0x08005ee7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ed0:	f7fd fc46 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8005ed4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ed6:	e021      	b.n	8005f1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ed8:	4b0c      	ldr	r3, [pc, #48]	; (8005f0c <UART_SetConfig+0x2f8>)
 8005eda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005edc:	e01e      	b.n	8005f1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ede:	f7fd fbd1 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8005ee2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ee4:	e01a      	b.n	8005f1c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005ee6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eec:	e016      	b.n	8005f1c <UART_SetConfig+0x308>
 8005eee:	bf00      	nop
 8005ef0:	cfff69f3 	.word	0xcfff69f3
 8005ef4:	40008000 	.word	0x40008000
 8005ef8:	40013800 	.word	0x40013800
 8005efc:	40021000 	.word	0x40021000
 8005f00:	40004400 	.word	0x40004400
 8005f04:	40004800 	.word	0x40004800
 8005f08:	40004c00 	.word	0x40004c00
 8005f0c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005f1a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	f000 812a 	beq.w	8006178 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	4a9e      	ldr	r2, [pc, #632]	; (80061a4 <UART_SetConfig+0x590>)
 8005f2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f2e:	461a      	mov	r2, r3
 8005f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f32:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f36:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f38:	697b      	ldr	r3, [r7, #20]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	005b      	lsls	r3, r3, #1
 8005f40:	4413      	add	r3, r2
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	429a      	cmp	r2, r3
 8005f46:	d305      	bcc.n	8005f54 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	685b      	ldr	r3, [r3, #4]
 8005f4c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005f4e:	69ba      	ldr	r2, [r7, #24]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8005f54:	2301      	movs	r3, #1
 8005f56:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f5a:	e10d      	b.n	8006178 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f5e:	2200      	movs	r2, #0
 8005f60:	60bb      	str	r3, [r7, #8]
 8005f62:	60fa      	str	r2, [r7, #12]
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f68:	4a8e      	ldr	r2, [pc, #568]	; (80061a4 <UART_SetConfig+0x590>)
 8005f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f6e:	b29b      	uxth	r3, r3
 8005f70:	2200      	movs	r2, #0
 8005f72:	603b      	str	r3, [r7, #0]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f7a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f7e:	f7fa fe3b 	bl	8000bf8 <__aeabi_uldivmod>
 8005f82:	4602      	mov	r2, r0
 8005f84:	460b      	mov	r3, r1
 8005f86:	4610      	mov	r0, r2
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f04f 0200 	mov.w	r2, #0
 8005f8e:	f04f 0300 	mov.w	r3, #0
 8005f92:	020b      	lsls	r3, r1, #8
 8005f94:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f98:	0202      	lsls	r2, r0, #8
 8005f9a:	6979      	ldr	r1, [r7, #20]
 8005f9c:	6849      	ldr	r1, [r1, #4]
 8005f9e:	0849      	lsrs	r1, r1, #1
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	460c      	mov	r4, r1
 8005fa4:	4605      	mov	r5, r0
 8005fa6:	eb12 0804 	adds.w	r8, r2, r4
 8005faa:	eb43 0905 	adc.w	r9, r3, r5
 8005fae:	697b      	ldr	r3, [r7, #20]
 8005fb0:	685b      	ldr	r3, [r3, #4]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	469a      	mov	sl, r3
 8005fb6:	4693      	mov	fp, r2
 8005fb8:	4652      	mov	r2, sl
 8005fba:	465b      	mov	r3, fp
 8005fbc:	4640      	mov	r0, r8
 8005fbe:	4649      	mov	r1, r9
 8005fc0:	f7fa fe1a 	bl	8000bf8 <__aeabi_uldivmod>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4613      	mov	r3, r2
 8005fca:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005fd2:	d308      	bcc.n	8005fe6 <UART_SetConfig+0x3d2>
 8005fd4:	6a3b      	ldr	r3, [r7, #32]
 8005fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fda:	d204      	bcs.n	8005fe6 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005fdc:	697b      	ldr	r3, [r7, #20]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	6a3a      	ldr	r2, [r7, #32]
 8005fe2:	60da      	str	r2, [r3, #12]
 8005fe4:	e0c8      	b.n	8006178 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005fec:	e0c4      	b.n	8006178 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	69db      	ldr	r3, [r3, #28]
 8005ff2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ff6:	d168      	bne.n	80060ca <UART_SetConfig+0x4b6>
  {
    switch (clocksource)
 8005ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d828      	bhi.n	8006052 <UART_SetConfig+0x43e>
 8006000:	a201      	add	r2, pc, #4	; (adr r2, 8006008 <UART_SetConfig+0x3f4>)
 8006002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006006:	bf00      	nop
 8006008:	0800602d 	.word	0x0800602d
 800600c:	08006035 	.word	0x08006035
 8006010:	0800603d 	.word	0x0800603d
 8006014:	08006053 	.word	0x08006053
 8006018:	08006043 	.word	0x08006043
 800601c:	08006053 	.word	0x08006053
 8006020:	08006053 	.word	0x08006053
 8006024:	08006053 	.word	0x08006053
 8006028:	0800604b 	.word	0x0800604b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800602c:	f7fd fb98 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8006030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006032:	e014      	b.n	800605e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006034:	f7fd fbaa 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8006038:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800603a:	e010      	b.n	800605e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800603c:	4b5a      	ldr	r3, [pc, #360]	; (80061a8 <UART_SetConfig+0x594>)
 800603e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006040:	e00d      	b.n	800605e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006042:	f7fd fb1f 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8006046:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006048:	e009      	b.n	800605e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800604a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800604e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006050:	e005      	b.n	800605e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8006052:	2300      	movs	r3, #0
 8006054:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006056:	2301      	movs	r3, #1
 8006058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800605c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800605e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006060:	2b00      	cmp	r3, #0
 8006062:	f000 8089 	beq.w	8006178 <UART_SetConfig+0x564>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606a:	4a4e      	ldr	r2, [pc, #312]	; (80061a4 <UART_SetConfig+0x590>)
 800606c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006070:	461a      	mov	r2, r3
 8006072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006074:	fbb3 f3f2 	udiv	r3, r3, r2
 8006078:	005a      	lsls	r2, r3, #1
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	085b      	lsrs	r3, r3, #1
 8006080:	441a      	add	r2, r3
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	fbb2 f3f3 	udiv	r3, r2, r3
 800608a:	b29b      	uxth	r3, r3
 800608c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800608e:	6a3b      	ldr	r3, [r7, #32]
 8006090:	2b0f      	cmp	r3, #15
 8006092:	d916      	bls.n	80060c2 <UART_SetConfig+0x4ae>
 8006094:	6a3b      	ldr	r3, [r7, #32]
 8006096:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800609a:	d212      	bcs.n	80060c2 <UART_SetConfig+0x4ae>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	b29b      	uxth	r3, r3
 80060a0:	f023 030f 	bic.w	r3, r3, #15
 80060a4:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80060a6:	6a3b      	ldr	r3, [r7, #32]
 80060a8:	085b      	lsrs	r3, r3, #1
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	f003 0307 	and.w	r3, r3, #7
 80060b0:	b29a      	uxth	r2, r3
 80060b2:	8bfb      	ldrh	r3, [r7, #30]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	8bfa      	ldrh	r2, [r7, #30]
 80060be:	60da      	str	r2, [r3, #12]
 80060c0:	e05a      	b.n	8006178 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80060c2:	2301      	movs	r3, #1
 80060c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060c8:	e056      	b.n	8006178 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060ca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80060ce:	2b08      	cmp	r3, #8
 80060d0:	d827      	bhi.n	8006122 <UART_SetConfig+0x50e>
 80060d2:	a201      	add	r2, pc, #4	; (adr r2, 80060d8 <UART_SetConfig+0x4c4>)
 80060d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d8:	080060fd 	.word	0x080060fd
 80060dc:	08006105 	.word	0x08006105
 80060e0:	0800610d 	.word	0x0800610d
 80060e4:	08006123 	.word	0x08006123
 80060e8:	08006113 	.word	0x08006113
 80060ec:	08006123 	.word	0x08006123
 80060f0:	08006123 	.word	0x08006123
 80060f4:	08006123 	.word	0x08006123
 80060f8:	0800611b 	.word	0x0800611b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060fc:	f7fd fb30 	bl	8003760 <HAL_RCC_GetPCLK1Freq>
 8006100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006102:	e014      	b.n	800612e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006104:	f7fd fb42 	bl	800378c <HAL_RCC_GetPCLK2Freq>
 8006108:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800610a:	e010      	b.n	800612e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800610c:	4b26      	ldr	r3, [pc, #152]	; (80061a8 <UART_SetConfig+0x594>)
 800610e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006110:	e00d      	b.n	800612e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006112:	f7fd fab7 	bl	8003684 <HAL_RCC_GetSysClockFreq>
 8006116:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006118:	e009      	b.n	800612e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800611a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800611e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006120:	e005      	b.n	800612e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006122:	2300      	movs	r3, #0
 8006124:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006126:	2301      	movs	r3, #1
 8006128:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800612c:	bf00      	nop
    }

    if (pclk != 0U)
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	2b00      	cmp	r3, #0
 8006132:	d021      	beq.n	8006178 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006138:	4a1a      	ldr	r2, [pc, #104]	; (80061a4 <UART_SetConfig+0x590>)
 800613a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800613e:	461a      	mov	r2, r3
 8006140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006142:	fbb3 f2f2 	udiv	r2, r3, r2
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	085b      	lsrs	r3, r3, #1
 800614c:	441a      	add	r2, r3
 800614e:	697b      	ldr	r3, [r7, #20]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	fbb2 f3f3 	udiv	r3, r2, r3
 8006156:	b29b      	uxth	r3, r3
 8006158:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	2b0f      	cmp	r3, #15
 800615e:	d908      	bls.n	8006172 <UART_SetConfig+0x55e>
 8006160:	6a3b      	ldr	r3, [r7, #32]
 8006162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006166:	d204      	bcs.n	8006172 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = usartdiv;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6a3a      	ldr	r2, [r7, #32]
 800616e:	60da      	str	r2, [r3, #12]
 8006170:	e002      	b.n	8006178 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	2201      	movs	r2, #1
 800617c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2201      	movs	r2, #1
 8006184:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	2200      	movs	r2, #0
 800618c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	2200      	movs	r2, #0
 8006192:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006194:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006198:	4618      	mov	r0, r3
 800619a:	3730      	adds	r7, #48	; 0x30
 800619c:	46bd      	mov	sp, r7
 800619e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a2:	bf00      	nop
 80061a4:	080099c8 	.word	0x080099c8
 80061a8:	00f42400 	.word	0x00f42400

080061ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061b8:	f003 0301 	and.w	r3, r3, #1
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d00a      	beq.n	80061d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	430a      	orrs	r2, r1
 80061d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061da:	f003 0302 	and.w	r3, r3, #2
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d00a      	beq.n	80061f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d00a      	beq.n	800621a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	430a      	orrs	r2, r1
 8006218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	430a      	orrs	r2, r1
 800623a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	f003 0310 	and.w	r3, r3, #16
 8006244:	2b00      	cmp	r3, #0
 8006246:	d00a      	beq.n	800625e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	430a      	orrs	r2, r1
 800625c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006262:	f003 0320 	and.w	r3, r3, #32
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	430a      	orrs	r2, r1
 800627e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d01a      	beq.n	80062c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	685b      	ldr	r3, [r3, #4]
 8006292:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062aa:	d10a      	bne.n	80062c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	685b      	ldr	r3, [r3, #4]
 80062b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	430a      	orrs	r2, r1
 80062c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00a      	beq.n	80062e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	430a      	orrs	r2, r1
 80062e2:	605a      	str	r2, [r3, #4]
  }
}
 80062e4:	bf00      	nop
 80062e6:	370c      	adds	r7, #12
 80062e8:	46bd      	mov	sp, r7
 80062ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ee:	4770      	bx	lr

080062f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b086      	sub	sp, #24
 80062f4:	af02      	add	r7, sp, #8
 80062f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006300:	f7fb fd16 	bl	8001d30 <HAL_GetTick>
 8006304:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f003 0308 	and.w	r3, r3, #8
 8006310:	2b08      	cmp	r3, #8
 8006312:	d10e      	bne.n	8006332 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006314:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f000 f82f 	bl	8006386 <UART_WaitOnFlagUntilTimeout>
 8006328:	4603      	mov	r3, r0
 800632a:	2b00      	cmp	r3, #0
 800632c:	d001      	beq.n	8006332 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800632e:	2303      	movs	r3, #3
 8006330:	e025      	b.n	800637e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0304 	and.w	r3, r3, #4
 800633c:	2b04      	cmp	r3, #4
 800633e:	d10e      	bne.n	800635e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006344:	9300      	str	r3, [sp, #0]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f819 	bl	8006386 <UART_WaitOnFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800635a:	2303      	movs	r3, #3
 800635c:	e00f      	b.n	800637e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2220      	movs	r2, #32
 8006362:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2220      	movs	r2, #32
 800636a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	60f8      	str	r0, [r7, #12]
 800638e:	60b9      	str	r1, [r7, #8]
 8006390:	603b      	str	r3, [r7, #0]
 8006392:	4613      	mov	r3, r2
 8006394:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006396:	e062      	b.n	800645e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639e:	d05e      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063a0:	f7fb fcc6 	bl	8001d30 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d302      	bcc.n	80063b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d11d      	bne.n	80063f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063c4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	689a      	ldr	r2, [r3, #8]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f022 0201 	bic.w	r2, r2, #1
 80063d4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	2220      	movs	r2, #32
 80063da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	2220      	movs	r2, #32
 80063e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e045      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0304 	and.w	r3, r3, #4
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d02e      	beq.n	800645e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	69db      	ldr	r3, [r3, #28]
 8006406:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800640a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800640e:	d126      	bne.n	800645e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006418:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	681a      	ldr	r2, [r3, #0]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006428:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	689a      	ldr	r2, [r3, #8]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f022 0201 	bic.w	r2, r2, #1
 8006438:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2220      	movs	r2, #32
 800643e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2220      	movs	r2, #32
 8006446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800645a:	2303      	movs	r3, #3
 800645c:	e00f      	b.n	800647e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69da      	ldr	r2, [r3, #28]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	429a      	cmp	r2, r3
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2300      	movne	r3, #0
 8006472:	b2db      	uxtb	r3, r3
 8006474:	461a      	mov	r2, r3
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	429a      	cmp	r2, r3
 800647a:	d08d      	beq.n	8006398 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3710      	adds	r7, #16
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
	...

08006488 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006488:	b480      	push	{r7}
 800648a:	b085      	sub	sp, #20
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	4613      	mov	r3, r2
 8006494:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	88fa      	ldrh	r2, [r7, #6]
 80064a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2200      	movs	r2, #0
 80064b0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ba:	d10e      	bne.n	80064da <UART_Start_Receive_IT+0x52>
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d105      	bne.n	80064d0 <UART_Start_Receive_IT+0x48>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064ca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064ce:	e02d      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	22ff      	movs	r2, #255	; 0xff
 80064d4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064d8:	e028      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10d      	bne.n	80064fe <UART_Start_Receive_IT+0x76>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d104      	bne.n	80064f4 <UART_Start_Receive_IT+0x6c>
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	22ff      	movs	r2, #255	; 0xff
 80064ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064f2:	e01b      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	227f      	movs	r2, #127	; 0x7f
 80064f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80064fc:	e016      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006506:	d10d      	bne.n	8006524 <UART_Start_Receive_IT+0x9c>
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	691b      	ldr	r3, [r3, #16]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d104      	bne.n	800651a <UART_Start_Receive_IT+0x92>
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	227f      	movs	r2, #127	; 0x7f
 8006514:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006518:	e008      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	223f      	movs	r2, #63	; 0x3f
 800651e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006522:	e003      	b.n	800652c <UART_Start_Receive_IT+0xa4>
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	2200      	movs	r2, #0
 8006528:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2200      	movs	r2, #0
 8006530:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2222      	movs	r2, #34	; 0x22
 8006538:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f042 0201 	orr.w	r2, r2, #1
 800654a:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006554:	d12a      	bne.n	80065ac <UART_Start_Receive_IT+0x124>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800655c:	88fa      	ldrh	r2, [r7, #6]
 800655e:	429a      	cmp	r2, r3
 8006560:	d324      	bcc.n	80065ac <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	689b      	ldr	r3, [r3, #8]
 8006566:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800656a:	d107      	bne.n	800657c <UART_Start_Receive_IT+0xf4>
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d103      	bne.n	800657c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	4a1f      	ldr	r2, [pc, #124]	; (80065f4 <UART_Start_Receive_IT+0x16c>)
 8006578:	671a      	str	r2, [r3, #112]	; 0x70
 800657a:	e002      	b.n	8006582 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	4a1e      	ldr	r2, [pc, #120]	; (80065f8 <UART_Start_Receive_IT+0x170>)
 8006580:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006598:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80065a8:	609a      	str	r2, [r3, #8]
 80065aa:	e01b      	b.n	80065e4 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065b4:	d107      	bne.n	80065c6 <UART_Start_Receive_IT+0x13e>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d103      	bne.n	80065c6 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	4a0e      	ldr	r2, [pc, #56]	; (80065fc <UART_Start_Receive_IT+0x174>)
 80065c2:	671a      	str	r2, [r3, #112]	; 0x70
 80065c4:	e002      	b.n	80065cc <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	4a0d      	ldr	r2, [pc, #52]	; (8006600 <UART_Start_Receive_IT+0x178>)
 80065ca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681a      	ldr	r2, [r3, #0]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80065e2:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80065e4:	2300      	movs	r3, #0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3714      	adds	r7, #20
 80065ea:	46bd      	mov	sp, r7
 80065ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	08006a7d 	.word	0x08006a7d
 80065f8:	08006879 	.word	0x08006879
 80065fc:	080067a1 	.word	0x080067a1
 8006600:	080066c9 	.word	0x080066c9

08006604 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800661a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	6812      	ldr	r2, [r2, #0]
 8006626:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800662a:	f023 0301 	bic.w	r3, r3, #1
 800662e:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006634:	2b01      	cmp	r3, #1
 8006636:	d107      	bne.n	8006648 <UART_EndRxTransfer+0x44>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0210 	bic.w	r2, r2, #16
 8006646:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	671a      	str	r2, [r3, #112]	; 0x70
}
 800665c:	bf00      	nop
 800665e:	370c      	adds	r7, #12
 8006660:	46bd      	mov	sp, r7
 8006662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006666:	4770      	bx	lr

08006668 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006674:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	2200      	movs	r2, #0
 800667a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2200      	movs	r2, #0
 8006682:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006686:	68f8      	ldr	r0, [r7, #12]
 8006688:	f7ff faae 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800668c:	bf00      	nop
 800668e:	3710      	adds	r7, #16
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}

08006694 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b082      	sub	sp, #8
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681a      	ldr	r2, [r3, #0]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066aa:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2220      	movs	r2, #32
 80066b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	2200      	movs	r2, #0
 80066b8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80066ba:	6878      	ldr	r0, [r7, #4]
 80066bc:	f7ff fa8a 	bl	8005bd4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80066c0:	bf00      	nop
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b084      	sub	sp, #16
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80066d6:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066de:	2b22      	cmp	r3, #34	; 0x22
 80066e0:	d152      	bne.n	8006788 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066e8:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066ea:	89bb      	ldrh	r3, [r7, #12]
 80066ec:	b2d9      	uxtb	r1, r3
 80066ee:	89fb      	ldrh	r3, [r7, #14]
 80066f0:	b2da      	uxtb	r2, r3
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066f6:	400a      	ands	r2, r1
 80066f8:	b2d2      	uxtb	r2, r2
 80066fa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006700:	1c5a      	adds	r2, r3, #1
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800670c:	b29b      	uxth	r3, r3
 800670e:	3b01      	subs	r3, #1
 8006710:	b29a      	uxth	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d139      	bne.n	8006798 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	681a      	ldr	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006732:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	689a      	ldr	r2, [r3, #8]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f022 0201 	bic.w	r2, r2, #1
 8006742:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2220      	movs	r2, #32
 8006748:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006756:	2b01      	cmp	r3, #1
 8006758:	d10f      	bne.n	800677a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681a      	ldr	r2, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	f022 0210 	bic.w	r2, r2, #16
 8006768:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f7ff fa42 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
 8006778:	e002      	b.n	8006780 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f7fb fa28 	bl	8001bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006786:	e007      	b.n	8006798 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f042 0208 	orr.w	r2, r2, #8
 8006796:	619a      	str	r2, [r3, #24]
}
 8006798:	bf00      	nop
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80067ae:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b6:	2b22      	cmp	r3, #34	; 0x22
 80067b8:	d152      	bne.n	8006860 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c0:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067c6:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80067c8:	89ba      	ldrh	r2, [r7, #12]
 80067ca:	89fb      	ldrh	r3, [r7, #14]
 80067cc:	4013      	ands	r3, r2
 80067ce:	b29a      	uxth	r2, r3
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d8:	1c9a      	adds	r2, r3, #2
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067e4:	b29b      	uxth	r3, r3
 80067e6:	3b01      	subs	r3, #1
 80067e8:	b29a      	uxth	r2, r3
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d139      	bne.n	8006870 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800680a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689a      	ldr	r2, [r3, #8]
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2220      	movs	r2, #32
 8006820:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800682e:	2b01      	cmp	r3, #1
 8006830:	d10f      	bne.n	8006852 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	681a      	ldr	r2, [r3, #0]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f022 0210 	bic.w	r2, r2, #16
 8006840:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006848:	4619      	mov	r1, r3
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f7ff f9d6 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
 8006850:	e002      	b.n	8006858 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f7fb f9bc 	bl	8001bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800685e:	e007      	b.n	8006870 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	699a      	ldr	r2, [r3, #24]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f042 0208 	orr.w	r2, r2, #8
 800686e:	619a      	str	r2, [r3, #24]
}
 8006870:	bf00      	nop
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b088      	sub	sp, #32
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006886:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	69db      	ldr	r3, [r3, #28]
 800688e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a6:	2b22      	cmp	r3, #34	; 0x22
 80068a8:	f040 80da 	bne.w	8006a60 <UART_RxISR_8BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80068b2:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068b4:	e0aa      	b.n	8006a0c <UART_RxISR_8BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068bc:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80068be:	89bb      	ldrh	r3, [r7, #12]
 80068c0:	b2d9      	uxtb	r1, r3
 80068c2:	8b7b      	ldrh	r3, [r7, #26]
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ca:	400a      	ands	r2, r1
 80068cc:	b2d2      	uxtb	r2, r2
 80068ce:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d4:	1c5a      	adds	r2, r3, #1
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	b29a      	uxth	r2, r3
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	69db      	ldr	r3, [r3, #28]
 80068f2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	f003 0307 	and.w	r3, r3, #7
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d04d      	beq.n	800699a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	f003 0301 	and.w	r3, r3, #1
 8006904:	2b00      	cmp	r3, #0
 8006906:	d010      	beq.n	800692a <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690e:	2b00      	cmp	r3, #0
 8006910:	d00b      	beq.n	800692a <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2201      	movs	r2, #1
 8006918:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006920:	f043 0201 	orr.w	r2, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	f003 0302 	and.w	r3, r3, #2
 8006930:	2b00      	cmp	r3, #0
 8006932:	d010      	beq.n	8006956 <UART_RxISR_8BIT_FIFOEN+0xde>
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d00b      	beq.n	8006956 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2202      	movs	r2, #2
 8006944:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800694c:	f043 0204 	orr.w	r2, r3, #4
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d010      	beq.n	8006982 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f003 0301 	and.w	r3, r3, #1
 8006966:	2b00      	cmp	r3, #0
 8006968:	d00b      	beq.n	8006982 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	2204      	movs	r2, #4
 8006970:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006978:	f043 0202 	orr.w	r2, r3, #2
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d006      	beq.n	800699a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff f92b 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d132      	bne.n	8006a0c <UART_RxISR_8BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80069b4:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689b      	ldr	r3, [r3, #8]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6812      	ldr	r2, [r2, #0]
 80069c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069dc:	2b01      	cmp	r3, #1
 80069de:	d10f      	bne.n	8006a00 <UART_RxISR_8BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f022 0210 	bic.w	r2, r2, #16
 80069ee:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80069f6:	4619      	mov	r1, r3
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff f8ff 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
 80069fe:	e002      	b.n	8006a06 <UART_RxISR_8BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006a00:	6878      	ldr	r0, [r7, #4]
 8006a02:	f7fb f8e5 	bl	8001bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	2200      	movs	r2, #0
 8006a0a:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a0c:	89fb      	ldrh	r3, [r7, #14]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d005      	beq.n	8006a1e <UART_RxISR_8BIT_FIFOEN+0x1a6>
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	f003 0320 	and.w	r3, r3, #32
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f47f af4c 	bne.w	80068b6 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a24:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006a26:	897b      	ldrh	r3, [r7, #10]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d021      	beq.n	8006a70 <UART_RxISR_8BIT_FIFOEN+0x1f8>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006a32:	897a      	ldrh	r2, [r7, #10]
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d21b      	bcs.n	8006a70 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	689a      	ldr	r2, [r3, #8]
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006a46:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a0b      	ldr	r2, [pc, #44]	; (8006a78 <UART_RxISR_8BIT_FIFOEN+0x200>)
 8006a4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f042 0220 	orr.w	r2, r2, #32
 8006a5c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006a5e:	e007      	b.n	8006a70 <UART_RxISR_8BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	699a      	ldr	r2, [r3, #24]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	f042 0208 	orr.w	r2, r2, #8
 8006a6e:	619a      	str	r2, [r3, #24]
}
 8006a70:	bf00      	nop
 8006a72:	3720      	adds	r7, #32
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}
 8006a78:	080066c9 	.word	0x080066c9

08006a7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006a7c:	b580      	push	{r7, lr}
 8006a7e:	b08a      	sub	sp, #40	; 0x28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a8a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	69db      	ldr	r3, [r3, #28]
 8006a92:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aaa:	2b22      	cmp	r3, #34	; 0x22
 8006aac:	f040 80da 	bne.w	8006c64 <UART_RxISR_16BIT_FIFOEN+0x1e8>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ab6:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006ab8:	e0aa      	b.n	8006c10 <UART_RxISR_16BIT_FIFOEN+0x194>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac0:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ac6:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8006ac8:	8aba      	ldrh	r2, [r7, #20]
 8006aca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006acc:	4013      	ands	r3, r2
 8006ace:	b29a      	uxth	r2, r3
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ad8:	1c9a      	adds	r2, r3, #2
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d04d      	beq.n	8006b9e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b04:	f003 0301 	and.w	r3, r3, #1
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0xb2>
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b24:	f043 0201 	orr.w	r2, r3, #1
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	f003 0302 	and.w	r3, r3, #2
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d010      	beq.n	8006b5a <UART_RxISR_16BIT_FIFOEN+0xde>
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	f003 0301 	and.w	r3, r3, #1
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00b      	beq.n	8006b5a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2202      	movs	r2, #2
 8006b48:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b50:	f043 0204 	orr.w	r2, r3, #4
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d010      	beq.n	8006b86 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	f003 0301 	and.w	r3, r3, #1
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00b      	beq.n	8006b86 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	2204      	movs	r2, #4
 8006b74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7c:	f043 0202 	orr.w	r2, r3, #2
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d006      	beq.n	8006b9e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff f829 	bl	8005be8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d132      	bne.n	8006c10 <UART_RxISR_16BIT_FIFOEN+0x194>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	681a      	ldr	r2, [r3, #0]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006bb8:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6812      	ldr	r2, [r2, #0]
 8006bc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006bc8:	f023 0301 	bic.w	r3, r3, #1
 8006bcc:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2220      	movs	r2, #32
 8006bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2200      	movs	r2, #0
 8006bda:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10f      	bne.n	8006c04 <UART_RxISR_16BIT_FIFOEN+0x188>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0210 	bic.w	r2, r2, #16
 8006bf2:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006bfa:	4619      	mov	r1, r3
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f7fe fffd 	bl	8005bfc <HAL_UARTEx_RxEventCallback>
 8006c02:	e002      	b.n	8006c0a <UART_RxISR_16BIT_FIFOEN+0x18e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f7fa ffe3 	bl	8001bd0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c10:	8afb      	ldrh	r3, [r7, #22]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d005      	beq.n	8006c22 <UART_RxISR_16BIT_FIFOEN+0x1a6>
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	f003 0320 	and.w	r3, r3, #32
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f47f af4c 	bne.w	8006aba <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c28:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c2a:	89fb      	ldrh	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d021      	beq.n	8006c74 <UART_RxISR_16BIT_FIFOEN+0x1f8>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c36:	89fa      	ldrh	r2, [r7, #14]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d21b      	bcs.n	8006c74 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	689a      	ldr	r2, [r3, #8]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006c4a:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	4a0b      	ldr	r2, [pc, #44]	; (8006c7c <UART_RxISR_16BIT_FIFOEN+0x200>)
 8006c50:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f042 0220 	orr.w	r2, r2, #32
 8006c60:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c62:	e007      	b.n	8006c74 <UART_RxISR_16BIT_FIFOEN+0x1f8>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	699a      	ldr	r2, [r3, #24]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f042 0208 	orr.w	r2, r2, #8
 8006c72:	619a      	str	r2, [r3, #24]
}
 8006c74:	bf00      	nop
 8006c76:	3728      	adds	r7, #40	; 0x28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	080067a1 	.word	0x080067a1

08006c80 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b083      	sub	sp, #12
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006c88:	bf00      	nop
 8006c8a:	370c      	adds	r7, #12
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c92:	4770      	bx	lr

08006c94 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006c9c:	bf00      	nop
 8006c9e:	370c      	adds	r7, #12
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca6:	4770      	bx	lr

08006ca8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006cb0:	bf00      	nop
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cba:	4770      	bx	lr

08006cbc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_UARTEx_DisableFifoMode+0x16>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e027      	b.n	8006d22 <HAL_UARTEx_DisableFifoMode+0x66>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2224      	movs	r2, #36	; 0x24
 8006cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	681a      	ldr	r2, [r3, #0]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f022 0201 	bic.w	r2, r2, #1
 8006cf8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d00:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2220      	movs	r2, #32
 8006d14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2c:	4770      	bx	lr

08006d2e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b084      	sub	sp, #16
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	6078      	str	r0, [r7, #4]
 8006d36:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d101      	bne.n	8006d46 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006d42:	2302      	movs	r3, #2
 8006d44:	e02d      	b.n	8006da2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2201      	movs	r2, #1
 8006d4a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2224      	movs	r2, #36	; 0x24
 8006d52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f022 0201 	bic.w	r2, r2, #1
 8006d6c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	683a      	ldr	r2, [r7, #0]
 8006d7e:	430a      	orrs	r2, r1
 8006d80:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f850 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68fa      	ldr	r2, [r7, #12]
 8006d8e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2220      	movs	r2, #32
 8006d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3710      	adds	r7, #16
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d101      	bne.n	8006dc2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	e02d      	b.n	8006e1e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2224      	movs	r2, #36	; 0x24
 8006dce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681a      	ldr	r2, [r3, #0]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f022 0201 	bic.w	r2, r2, #1
 8006de8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	430a      	orrs	r2, r1
 8006dfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 f812 	bl	8006e28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006e1c:	2300      	movs	r3, #0
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
	...

08006e28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006e28:	b480      	push	{r7}
 8006e2a:	b085      	sub	sp, #20
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d108      	bne.n	8006e4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006e48:	e031      	b.n	8006eae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006e4a:	2308      	movs	r3, #8
 8006e4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006e4e:	2308      	movs	r3, #8
 8006e50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	0e5b      	lsrs	r3, r3, #25
 8006e5a:	b2db      	uxtb	r3, r3
 8006e5c:	f003 0307 	and.w	r3, r3, #7
 8006e60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	689b      	ldr	r3, [r3, #8]
 8006e68:	0f5b      	lsrs	r3, r3, #29
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	f003 0307 	and.w	r3, r3, #7
 8006e70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e72:	7bbb      	ldrb	r3, [r7, #14]
 8006e74:	7b3a      	ldrb	r2, [r7, #12]
 8006e76:	4911      	ldr	r1, [pc, #68]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e78:	5c8a      	ldrb	r2, [r1, r2]
 8006e7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006e7e:	7b3a      	ldrb	r2, [r7, #12]
 8006e80:	490f      	ldr	r1, [pc, #60]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006e82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006e84:	fb93 f3f2 	sdiv	r3, r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	7b7a      	ldrb	r2, [r7, #13]
 8006e94:	4909      	ldr	r1, [pc, #36]	; (8006ebc <UARTEx_SetNbDataToProcess+0x94>)
 8006e96:	5c8a      	ldrb	r2, [r1, r2]
 8006e98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006e9c:	7b7a      	ldrb	r2, [r7, #13]
 8006e9e:	4908      	ldr	r1, [pc, #32]	; (8006ec0 <UARTEx_SetNbDataToProcess+0x98>)
 8006ea0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006ea2:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ea6:	b29a      	uxth	r2, r3
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006eae:	bf00      	nop
 8006eb0:	3714      	adds	r7, #20
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr
 8006eba:	bf00      	nop
 8006ebc:	080099e0 	.word	0x080099e0
 8006ec0:	080099e8 	.word	0x080099e8

08006ec4 <__errno>:
 8006ec4:	4b01      	ldr	r3, [pc, #4]	; (8006ecc <__errno+0x8>)
 8006ec6:	6818      	ldr	r0, [r3, #0]
 8006ec8:	4770      	bx	lr
 8006eca:	bf00      	nop
 8006ecc:	2000000c 	.word	0x2000000c

08006ed0 <__libc_init_array>:
 8006ed0:	b570      	push	{r4, r5, r6, lr}
 8006ed2:	4d0d      	ldr	r5, [pc, #52]	; (8006f08 <__libc_init_array+0x38>)
 8006ed4:	4c0d      	ldr	r4, [pc, #52]	; (8006f0c <__libc_init_array+0x3c>)
 8006ed6:	1b64      	subs	r4, r4, r5
 8006ed8:	10a4      	asrs	r4, r4, #2
 8006eda:	2600      	movs	r6, #0
 8006edc:	42a6      	cmp	r6, r4
 8006ede:	d109      	bne.n	8006ef4 <__libc_init_array+0x24>
 8006ee0:	4d0b      	ldr	r5, [pc, #44]	; (8006f10 <__libc_init_array+0x40>)
 8006ee2:	4c0c      	ldr	r4, [pc, #48]	; (8006f14 <__libc_init_array+0x44>)
 8006ee4:	f002 fd4e 	bl	8009984 <_init>
 8006ee8:	1b64      	subs	r4, r4, r5
 8006eea:	10a4      	asrs	r4, r4, #2
 8006eec:	2600      	movs	r6, #0
 8006eee:	42a6      	cmp	r6, r4
 8006ef0:	d105      	bne.n	8006efe <__libc_init_array+0x2e>
 8006ef2:	bd70      	pop	{r4, r5, r6, pc}
 8006ef4:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ef8:	4798      	blx	r3
 8006efa:	3601      	adds	r6, #1
 8006efc:	e7ee      	b.n	8006edc <__libc_init_array+0xc>
 8006efe:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f02:	4798      	blx	r3
 8006f04:	3601      	adds	r6, #1
 8006f06:	e7f2      	b.n	8006eee <__libc_init_array+0x1e>
 8006f08:	08009dd4 	.word	0x08009dd4
 8006f0c:	08009dd4 	.word	0x08009dd4
 8006f10:	08009dd4 	.word	0x08009dd4
 8006f14:	08009dd8 	.word	0x08009dd8

08006f18 <memcpy>:
 8006f18:	440a      	add	r2, r1
 8006f1a:	4291      	cmp	r1, r2
 8006f1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f20:	d100      	bne.n	8006f24 <memcpy+0xc>
 8006f22:	4770      	bx	lr
 8006f24:	b510      	push	{r4, lr}
 8006f26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f2e:	4291      	cmp	r1, r2
 8006f30:	d1f9      	bne.n	8006f26 <memcpy+0xe>
 8006f32:	bd10      	pop	{r4, pc}

08006f34 <memset>:
 8006f34:	4402      	add	r2, r0
 8006f36:	4603      	mov	r3, r0
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d100      	bne.n	8006f3e <memset+0xa>
 8006f3c:	4770      	bx	lr
 8006f3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f42:	e7f9      	b.n	8006f38 <memset+0x4>

08006f44 <__cvt>:
 8006f44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f48:	ec55 4b10 	vmov	r4, r5, d0
 8006f4c:	2d00      	cmp	r5, #0
 8006f4e:	460e      	mov	r6, r1
 8006f50:	4619      	mov	r1, r3
 8006f52:	462b      	mov	r3, r5
 8006f54:	bfbb      	ittet	lt
 8006f56:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006f5a:	461d      	movlt	r5, r3
 8006f5c:	2300      	movge	r3, #0
 8006f5e:	232d      	movlt	r3, #45	; 0x2d
 8006f60:	700b      	strb	r3, [r1, #0]
 8006f62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006f64:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006f68:	4691      	mov	r9, r2
 8006f6a:	f023 0820 	bic.w	r8, r3, #32
 8006f6e:	bfbc      	itt	lt
 8006f70:	4622      	movlt	r2, r4
 8006f72:	4614      	movlt	r4, r2
 8006f74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006f78:	d005      	beq.n	8006f86 <__cvt+0x42>
 8006f7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006f7e:	d100      	bne.n	8006f82 <__cvt+0x3e>
 8006f80:	3601      	adds	r6, #1
 8006f82:	2102      	movs	r1, #2
 8006f84:	e000      	b.n	8006f88 <__cvt+0x44>
 8006f86:	2103      	movs	r1, #3
 8006f88:	ab03      	add	r3, sp, #12
 8006f8a:	9301      	str	r3, [sp, #4]
 8006f8c:	ab02      	add	r3, sp, #8
 8006f8e:	9300      	str	r3, [sp, #0]
 8006f90:	ec45 4b10 	vmov	d0, r4, r5
 8006f94:	4653      	mov	r3, sl
 8006f96:	4632      	mov	r2, r6
 8006f98:	f000 fce2 	bl	8007960 <_dtoa_r>
 8006f9c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006fa0:	4607      	mov	r7, r0
 8006fa2:	d102      	bne.n	8006faa <__cvt+0x66>
 8006fa4:	f019 0f01 	tst.w	r9, #1
 8006fa8:	d022      	beq.n	8006ff0 <__cvt+0xac>
 8006faa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006fae:	eb07 0906 	add.w	r9, r7, r6
 8006fb2:	d110      	bne.n	8006fd6 <__cvt+0x92>
 8006fb4:	783b      	ldrb	r3, [r7, #0]
 8006fb6:	2b30      	cmp	r3, #48	; 0x30
 8006fb8:	d10a      	bne.n	8006fd0 <__cvt+0x8c>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	4620      	mov	r0, r4
 8006fc0:	4629      	mov	r1, r5
 8006fc2:	f7f9 fda9 	bl	8000b18 <__aeabi_dcmpeq>
 8006fc6:	b918      	cbnz	r0, 8006fd0 <__cvt+0x8c>
 8006fc8:	f1c6 0601 	rsb	r6, r6, #1
 8006fcc:	f8ca 6000 	str.w	r6, [sl]
 8006fd0:	f8da 3000 	ldr.w	r3, [sl]
 8006fd4:	4499      	add	r9, r3
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	2300      	movs	r3, #0
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4629      	mov	r1, r5
 8006fde:	f7f9 fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 8006fe2:	b108      	cbz	r0, 8006fe8 <__cvt+0xa4>
 8006fe4:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fe8:	2230      	movs	r2, #48	; 0x30
 8006fea:	9b03      	ldr	r3, [sp, #12]
 8006fec:	454b      	cmp	r3, r9
 8006fee:	d307      	bcc.n	8007000 <__cvt+0xbc>
 8006ff0:	9b03      	ldr	r3, [sp, #12]
 8006ff2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ff4:	1bdb      	subs	r3, r3, r7
 8006ff6:	4638      	mov	r0, r7
 8006ff8:	6013      	str	r3, [r2, #0]
 8006ffa:	b004      	add	sp, #16
 8006ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007000:	1c59      	adds	r1, r3, #1
 8007002:	9103      	str	r1, [sp, #12]
 8007004:	701a      	strb	r2, [r3, #0]
 8007006:	e7f0      	b.n	8006fea <__cvt+0xa6>

08007008 <__exponent>:
 8007008:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800700a:	4603      	mov	r3, r0
 800700c:	2900      	cmp	r1, #0
 800700e:	bfb8      	it	lt
 8007010:	4249      	neglt	r1, r1
 8007012:	f803 2b02 	strb.w	r2, [r3], #2
 8007016:	bfb4      	ite	lt
 8007018:	222d      	movlt	r2, #45	; 0x2d
 800701a:	222b      	movge	r2, #43	; 0x2b
 800701c:	2909      	cmp	r1, #9
 800701e:	7042      	strb	r2, [r0, #1]
 8007020:	dd2a      	ble.n	8007078 <__exponent+0x70>
 8007022:	f10d 0407 	add.w	r4, sp, #7
 8007026:	46a4      	mov	ip, r4
 8007028:	270a      	movs	r7, #10
 800702a:	46a6      	mov	lr, r4
 800702c:	460a      	mov	r2, r1
 800702e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007032:	fb07 1516 	mls	r5, r7, r6, r1
 8007036:	3530      	adds	r5, #48	; 0x30
 8007038:	2a63      	cmp	r2, #99	; 0x63
 800703a:	f104 34ff 	add.w	r4, r4, #4294967295
 800703e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007042:	4631      	mov	r1, r6
 8007044:	dcf1      	bgt.n	800702a <__exponent+0x22>
 8007046:	3130      	adds	r1, #48	; 0x30
 8007048:	f1ae 0502 	sub.w	r5, lr, #2
 800704c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007050:	1c44      	adds	r4, r0, #1
 8007052:	4629      	mov	r1, r5
 8007054:	4561      	cmp	r1, ip
 8007056:	d30a      	bcc.n	800706e <__exponent+0x66>
 8007058:	f10d 0209 	add.w	r2, sp, #9
 800705c:	eba2 020e 	sub.w	r2, r2, lr
 8007060:	4565      	cmp	r5, ip
 8007062:	bf88      	it	hi
 8007064:	2200      	movhi	r2, #0
 8007066:	4413      	add	r3, r2
 8007068:	1a18      	subs	r0, r3, r0
 800706a:	b003      	add	sp, #12
 800706c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800706e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007072:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007076:	e7ed      	b.n	8007054 <__exponent+0x4c>
 8007078:	2330      	movs	r3, #48	; 0x30
 800707a:	3130      	adds	r1, #48	; 0x30
 800707c:	7083      	strb	r3, [r0, #2]
 800707e:	70c1      	strb	r1, [r0, #3]
 8007080:	1d03      	adds	r3, r0, #4
 8007082:	e7f1      	b.n	8007068 <__exponent+0x60>

08007084 <_printf_float>:
 8007084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	ed2d 8b02 	vpush	{d8}
 800708c:	b08d      	sub	sp, #52	; 0x34
 800708e:	460c      	mov	r4, r1
 8007090:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007094:	4616      	mov	r6, r2
 8007096:	461f      	mov	r7, r3
 8007098:	4605      	mov	r5, r0
 800709a:	f001 fb45 	bl	8008728 <_localeconv_r>
 800709e:	f8d0 a000 	ldr.w	sl, [r0]
 80070a2:	4650      	mov	r0, sl
 80070a4:	f7f9 f8bc 	bl	8000220 <strlen>
 80070a8:	2300      	movs	r3, #0
 80070aa:	930a      	str	r3, [sp, #40]	; 0x28
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	9305      	str	r3, [sp, #20]
 80070b0:	f8d8 3000 	ldr.w	r3, [r8]
 80070b4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80070b8:	3307      	adds	r3, #7
 80070ba:	f023 0307 	bic.w	r3, r3, #7
 80070be:	f103 0208 	add.w	r2, r3, #8
 80070c2:	f8c8 2000 	str.w	r2, [r8]
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80070ce:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80070d2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80070d6:	9307      	str	r3, [sp, #28]
 80070d8:	f8cd 8018 	str.w	r8, [sp, #24]
 80070dc:	ee08 0a10 	vmov	s16, r0
 80070e0:	4b9f      	ldr	r3, [pc, #636]	; (8007360 <_printf_float+0x2dc>)
 80070e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070e6:	f04f 32ff 	mov.w	r2, #4294967295
 80070ea:	f7f9 fd47 	bl	8000b7c <__aeabi_dcmpun>
 80070ee:	bb88      	cbnz	r0, 8007154 <_printf_float+0xd0>
 80070f0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070f4:	4b9a      	ldr	r3, [pc, #616]	; (8007360 <_printf_float+0x2dc>)
 80070f6:	f04f 32ff 	mov.w	r2, #4294967295
 80070fa:	f7f9 fd21 	bl	8000b40 <__aeabi_dcmple>
 80070fe:	bb48      	cbnz	r0, 8007154 <_printf_float+0xd0>
 8007100:	2200      	movs	r2, #0
 8007102:	2300      	movs	r3, #0
 8007104:	4640      	mov	r0, r8
 8007106:	4649      	mov	r1, r9
 8007108:	f7f9 fd10 	bl	8000b2c <__aeabi_dcmplt>
 800710c:	b110      	cbz	r0, 8007114 <_printf_float+0x90>
 800710e:	232d      	movs	r3, #45	; 0x2d
 8007110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007114:	4b93      	ldr	r3, [pc, #588]	; (8007364 <_printf_float+0x2e0>)
 8007116:	4894      	ldr	r0, [pc, #592]	; (8007368 <_printf_float+0x2e4>)
 8007118:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800711c:	bf94      	ite	ls
 800711e:	4698      	movls	r8, r3
 8007120:	4680      	movhi	r8, r0
 8007122:	2303      	movs	r3, #3
 8007124:	6123      	str	r3, [r4, #16]
 8007126:	9b05      	ldr	r3, [sp, #20]
 8007128:	f023 0204 	bic.w	r2, r3, #4
 800712c:	6022      	str	r2, [r4, #0]
 800712e:	f04f 0900 	mov.w	r9, #0
 8007132:	9700      	str	r7, [sp, #0]
 8007134:	4633      	mov	r3, r6
 8007136:	aa0b      	add	r2, sp, #44	; 0x2c
 8007138:	4621      	mov	r1, r4
 800713a:	4628      	mov	r0, r5
 800713c:	f000 f9d8 	bl	80074f0 <_printf_common>
 8007140:	3001      	adds	r0, #1
 8007142:	f040 8090 	bne.w	8007266 <_printf_float+0x1e2>
 8007146:	f04f 30ff 	mov.w	r0, #4294967295
 800714a:	b00d      	add	sp, #52	; 0x34
 800714c:	ecbd 8b02 	vpop	{d8}
 8007150:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007154:	4642      	mov	r2, r8
 8007156:	464b      	mov	r3, r9
 8007158:	4640      	mov	r0, r8
 800715a:	4649      	mov	r1, r9
 800715c:	f7f9 fd0e 	bl	8000b7c <__aeabi_dcmpun>
 8007160:	b140      	cbz	r0, 8007174 <_printf_float+0xf0>
 8007162:	464b      	mov	r3, r9
 8007164:	2b00      	cmp	r3, #0
 8007166:	bfbc      	itt	lt
 8007168:	232d      	movlt	r3, #45	; 0x2d
 800716a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800716e:	487f      	ldr	r0, [pc, #508]	; (800736c <_printf_float+0x2e8>)
 8007170:	4b7f      	ldr	r3, [pc, #508]	; (8007370 <_printf_float+0x2ec>)
 8007172:	e7d1      	b.n	8007118 <_printf_float+0x94>
 8007174:	6863      	ldr	r3, [r4, #4]
 8007176:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800717a:	9206      	str	r2, [sp, #24]
 800717c:	1c5a      	adds	r2, r3, #1
 800717e:	d13f      	bne.n	8007200 <_printf_float+0x17c>
 8007180:	2306      	movs	r3, #6
 8007182:	6063      	str	r3, [r4, #4]
 8007184:	9b05      	ldr	r3, [sp, #20]
 8007186:	6861      	ldr	r1, [r4, #4]
 8007188:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800718c:	2300      	movs	r3, #0
 800718e:	9303      	str	r3, [sp, #12]
 8007190:	ab0a      	add	r3, sp, #40	; 0x28
 8007192:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007196:	ab09      	add	r3, sp, #36	; 0x24
 8007198:	ec49 8b10 	vmov	d0, r8, r9
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	6022      	str	r2, [r4, #0]
 80071a0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80071a4:	4628      	mov	r0, r5
 80071a6:	f7ff fecd 	bl	8006f44 <__cvt>
 80071aa:	9b06      	ldr	r3, [sp, #24]
 80071ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 80071ae:	2b47      	cmp	r3, #71	; 0x47
 80071b0:	4680      	mov	r8, r0
 80071b2:	d108      	bne.n	80071c6 <_printf_float+0x142>
 80071b4:	1cc8      	adds	r0, r1, #3
 80071b6:	db02      	blt.n	80071be <_printf_float+0x13a>
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	4299      	cmp	r1, r3
 80071bc:	dd41      	ble.n	8007242 <_printf_float+0x1be>
 80071be:	f1ab 0b02 	sub.w	fp, fp, #2
 80071c2:	fa5f fb8b 	uxtb.w	fp, fp
 80071c6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80071ca:	d820      	bhi.n	800720e <_printf_float+0x18a>
 80071cc:	3901      	subs	r1, #1
 80071ce:	465a      	mov	r2, fp
 80071d0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80071d4:	9109      	str	r1, [sp, #36]	; 0x24
 80071d6:	f7ff ff17 	bl	8007008 <__exponent>
 80071da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80071dc:	1813      	adds	r3, r2, r0
 80071de:	2a01      	cmp	r2, #1
 80071e0:	4681      	mov	r9, r0
 80071e2:	6123      	str	r3, [r4, #16]
 80071e4:	dc02      	bgt.n	80071ec <_printf_float+0x168>
 80071e6:	6822      	ldr	r2, [r4, #0]
 80071e8:	07d2      	lsls	r2, r2, #31
 80071ea:	d501      	bpl.n	80071f0 <_printf_float+0x16c>
 80071ec:	3301      	adds	r3, #1
 80071ee:	6123      	str	r3, [r4, #16]
 80071f0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d09c      	beq.n	8007132 <_printf_float+0xae>
 80071f8:	232d      	movs	r3, #45	; 0x2d
 80071fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80071fe:	e798      	b.n	8007132 <_printf_float+0xae>
 8007200:	9a06      	ldr	r2, [sp, #24]
 8007202:	2a47      	cmp	r2, #71	; 0x47
 8007204:	d1be      	bne.n	8007184 <_printf_float+0x100>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1bc      	bne.n	8007184 <_printf_float+0x100>
 800720a:	2301      	movs	r3, #1
 800720c:	e7b9      	b.n	8007182 <_printf_float+0xfe>
 800720e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007212:	d118      	bne.n	8007246 <_printf_float+0x1c2>
 8007214:	2900      	cmp	r1, #0
 8007216:	6863      	ldr	r3, [r4, #4]
 8007218:	dd0b      	ble.n	8007232 <_printf_float+0x1ae>
 800721a:	6121      	str	r1, [r4, #16]
 800721c:	b913      	cbnz	r3, 8007224 <_printf_float+0x1a0>
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	07d0      	lsls	r0, r2, #31
 8007222:	d502      	bpl.n	800722a <_printf_float+0x1a6>
 8007224:	3301      	adds	r3, #1
 8007226:	440b      	add	r3, r1
 8007228:	6123      	str	r3, [r4, #16]
 800722a:	65a1      	str	r1, [r4, #88]	; 0x58
 800722c:	f04f 0900 	mov.w	r9, #0
 8007230:	e7de      	b.n	80071f0 <_printf_float+0x16c>
 8007232:	b913      	cbnz	r3, 800723a <_printf_float+0x1b6>
 8007234:	6822      	ldr	r2, [r4, #0]
 8007236:	07d2      	lsls	r2, r2, #31
 8007238:	d501      	bpl.n	800723e <_printf_float+0x1ba>
 800723a:	3302      	adds	r3, #2
 800723c:	e7f4      	b.n	8007228 <_printf_float+0x1a4>
 800723e:	2301      	movs	r3, #1
 8007240:	e7f2      	b.n	8007228 <_printf_float+0x1a4>
 8007242:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007246:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007248:	4299      	cmp	r1, r3
 800724a:	db05      	blt.n	8007258 <_printf_float+0x1d4>
 800724c:	6823      	ldr	r3, [r4, #0]
 800724e:	6121      	str	r1, [r4, #16]
 8007250:	07d8      	lsls	r0, r3, #31
 8007252:	d5ea      	bpl.n	800722a <_printf_float+0x1a6>
 8007254:	1c4b      	adds	r3, r1, #1
 8007256:	e7e7      	b.n	8007228 <_printf_float+0x1a4>
 8007258:	2900      	cmp	r1, #0
 800725a:	bfd4      	ite	le
 800725c:	f1c1 0202 	rsble	r2, r1, #2
 8007260:	2201      	movgt	r2, #1
 8007262:	4413      	add	r3, r2
 8007264:	e7e0      	b.n	8007228 <_printf_float+0x1a4>
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	055a      	lsls	r2, r3, #21
 800726a:	d407      	bmi.n	800727c <_printf_float+0x1f8>
 800726c:	6923      	ldr	r3, [r4, #16]
 800726e:	4642      	mov	r2, r8
 8007270:	4631      	mov	r1, r6
 8007272:	4628      	mov	r0, r5
 8007274:	47b8      	blx	r7
 8007276:	3001      	adds	r0, #1
 8007278:	d12c      	bne.n	80072d4 <_printf_float+0x250>
 800727a:	e764      	b.n	8007146 <_printf_float+0xc2>
 800727c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007280:	f240 80e0 	bls.w	8007444 <_printf_float+0x3c0>
 8007284:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007288:	2200      	movs	r2, #0
 800728a:	2300      	movs	r3, #0
 800728c:	f7f9 fc44 	bl	8000b18 <__aeabi_dcmpeq>
 8007290:	2800      	cmp	r0, #0
 8007292:	d034      	beq.n	80072fe <_printf_float+0x27a>
 8007294:	4a37      	ldr	r2, [pc, #220]	; (8007374 <_printf_float+0x2f0>)
 8007296:	2301      	movs	r3, #1
 8007298:	4631      	mov	r1, r6
 800729a:	4628      	mov	r0, r5
 800729c:	47b8      	blx	r7
 800729e:	3001      	adds	r0, #1
 80072a0:	f43f af51 	beq.w	8007146 <_printf_float+0xc2>
 80072a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80072a8:	429a      	cmp	r2, r3
 80072aa:	db02      	blt.n	80072b2 <_printf_float+0x22e>
 80072ac:	6823      	ldr	r3, [r4, #0]
 80072ae:	07d8      	lsls	r0, r3, #31
 80072b0:	d510      	bpl.n	80072d4 <_printf_float+0x250>
 80072b2:	ee18 3a10 	vmov	r3, s16
 80072b6:	4652      	mov	r2, sl
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	f43f af41 	beq.w	8007146 <_printf_float+0xc2>
 80072c4:	f04f 0800 	mov.w	r8, #0
 80072c8:	f104 091a 	add.w	r9, r4, #26
 80072cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80072ce:	3b01      	subs	r3, #1
 80072d0:	4543      	cmp	r3, r8
 80072d2:	dc09      	bgt.n	80072e8 <_printf_float+0x264>
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	079b      	lsls	r3, r3, #30
 80072d8:	f100 8105 	bmi.w	80074e6 <_printf_float+0x462>
 80072dc:	68e0      	ldr	r0, [r4, #12]
 80072de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80072e0:	4298      	cmp	r0, r3
 80072e2:	bfb8      	it	lt
 80072e4:	4618      	movlt	r0, r3
 80072e6:	e730      	b.n	800714a <_printf_float+0xc6>
 80072e8:	2301      	movs	r3, #1
 80072ea:	464a      	mov	r2, r9
 80072ec:	4631      	mov	r1, r6
 80072ee:	4628      	mov	r0, r5
 80072f0:	47b8      	blx	r7
 80072f2:	3001      	adds	r0, #1
 80072f4:	f43f af27 	beq.w	8007146 <_printf_float+0xc2>
 80072f8:	f108 0801 	add.w	r8, r8, #1
 80072fc:	e7e6      	b.n	80072cc <_printf_float+0x248>
 80072fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007300:	2b00      	cmp	r3, #0
 8007302:	dc39      	bgt.n	8007378 <_printf_float+0x2f4>
 8007304:	4a1b      	ldr	r2, [pc, #108]	; (8007374 <_printf_float+0x2f0>)
 8007306:	2301      	movs	r3, #1
 8007308:	4631      	mov	r1, r6
 800730a:	4628      	mov	r0, r5
 800730c:	47b8      	blx	r7
 800730e:	3001      	adds	r0, #1
 8007310:	f43f af19 	beq.w	8007146 <_printf_float+0xc2>
 8007314:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007318:	4313      	orrs	r3, r2
 800731a:	d102      	bne.n	8007322 <_printf_float+0x29e>
 800731c:	6823      	ldr	r3, [r4, #0]
 800731e:	07d9      	lsls	r1, r3, #31
 8007320:	d5d8      	bpl.n	80072d4 <_printf_float+0x250>
 8007322:	ee18 3a10 	vmov	r3, s16
 8007326:	4652      	mov	r2, sl
 8007328:	4631      	mov	r1, r6
 800732a:	4628      	mov	r0, r5
 800732c:	47b8      	blx	r7
 800732e:	3001      	adds	r0, #1
 8007330:	f43f af09 	beq.w	8007146 <_printf_float+0xc2>
 8007334:	f04f 0900 	mov.w	r9, #0
 8007338:	f104 0a1a 	add.w	sl, r4, #26
 800733c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800733e:	425b      	negs	r3, r3
 8007340:	454b      	cmp	r3, r9
 8007342:	dc01      	bgt.n	8007348 <_printf_float+0x2c4>
 8007344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007346:	e792      	b.n	800726e <_printf_float+0x1ea>
 8007348:	2301      	movs	r3, #1
 800734a:	4652      	mov	r2, sl
 800734c:	4631      	mov	r1, r6
 800734e:	4628      	mov	r0, r5
 8007350:	47b8      	blx	r7
 8007352:	3001      	adds	r0, #1
 8007354:	f43f aef7 	beq.w	8007146 <_printf_float+0xc2>
 8007358:	f109 0901 	add.w	r9, r9, #1
 800735c:	e7ee      	b.n	800733c <_printf_float+0x2b8>
 800735e:	bf00      	nop
 8007360:	7fefffff 	.word	0x7fefffff
 8007364:	080099f4 	.word	0x080099f4
 8007368:	080099f8 	.word	0x080099f8
 800736c:	08009a00 	.word	0x08009a00
 8007370:	080099fc 	.word	0x080099fc
 8007374:	08009a04 	.word	0x08009a04
 8007378:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800737a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800737c:	429a      	cmp	r2, r3
 800737e:	bfa8      	it	ge
 8007380:	461a      	movge	r2, r3
 8007382:	2a00      	cmp	r2, #0
 8007384:	4691      	mov	r9, r2
 8007386:	dc37      	bgt.n	80073f8 <_printf_float+0x374>
 8007388:	f04f 0b00 	mov.w	fp, #0
 800738c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007390:	f104 021a 	add.w	r2, r4, #26
 8007394:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007396:	9305      	str	r3, [sp, #20]
 8007398:	eba3 0309 	sub.w	r3, r3, r9
 800739c:	455b      	cmp	r3, fp
 800739e:	dc33      	bgt.n	8007408 <_printf_float+0x384>
 80073a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073a4:	429a      	cmp	r2, r3
 80073a6:	db3b      	blt.n	8007420 <_printf_float+0x39c>
 80073a8:	6823      	ldr	r3, [r4, #0]
 80073aa:	07da      	lsls	r2, r3, #31
 80073ac:	d438      	bmi.n	8007420 <_printf_float+0x39c>
 80073ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073b0:	9a05      	ldr	r2, [sp, #20]
 80073b2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073b4:	1a9a      	subs	r2, r3, r2
 80073b6:	eba3 0901 	sub.w	r9, r3, r1
 80073ba:	4591      	cmp	r9, r2
 80073bc:	bfa8      	it	ge
 80073be:	4691      	movge	r9, r2
 80073c0:	f1b9 0f00 	cmp.w	r9, #0
 80073c4:	dc35      	bgt.n	8007432 <_printf_float+0x3ae>
 80073c6:	f04f 0800 	mov.w	r8, #0
 80073ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80073ce:	f104 0a1a 	add.w	sl, r4, #26
 80073d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80073d6:	1a9b      	subs	r3, r3, r2
 80073d8:	eba3 0309 	sub.w	r3, r3, r9
 80073dc:	4543      	cmp	r3, r8
 80073de:	f77f af79 	ble.w	80072d4 <_printf_float+0x250>
 80073e2:	2301      	movs	r3, #1
 80073e4:	4652      	mov	r2, sl
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f aeaa 	beq.w	8007146 <_printf_float+0xc2>
 80073f2:	f108 0801 	add.w	r8, r8, #1
 80073f6:	e7ec      	b.n	80073d2 <_printf_float+0x34e>
 80073f8:	4613      	mov	r3, r2
 80073fa:	4631      	mov	r1, r6
 80073fc:	4642      	mov	r2, r8
 80073fe:	4628      	mov	r0, r5
 8007400:	47b8      	blx	r7
 8007402:	3001      	adds	r0, #1
 8007404:	d1c0      	bne.n	8007388 <_printf_float+0x304>
 8007406:	e69e      	b.n	8007146 <_printf_float+0xc2>
 8007408:	2301      	movs	r3, #1
 800740a:	4631      	mov	r1, r6
 800740c:	4628      	mov	r0, r5
 800740e:	9205      	str	r2, [sp, #20]
 8007410:	47b8      	blx	r7
 8007412:	3001      	adds	r0, #1
 8007414:	f43f ae97 	beq.w	8007146 <_printf_float+0xc2>
 8007418:	9a05      	ldr	r2, [sp, #20]
 800741a:	f10b 0b01 	add.w	fp, fp, #1
 800741e:	e7b9      	b.n	8007394 <_printf_float+0x310>
 8007420:	ee18 3a10 	vmov	r3, s16
 8007424:	4652      	mov	r2, sl
 8007426:	4631      	mov	r1, r6
 8007428:	4628      	mov	r0, r5
 800742a:	47b8      	blx	r7
 800742c:	3001      	adds	r0, #1
 800742e:	d1be      	bne.n	80073ae <_printf_float+0x32a>
 8007430:	e689      	b.n	8007146 <_printf_float+0xc2>
 8007432:	9a05      	ldr	r2, [sp, #20]
 8007434:	464b      	mov	r3, r9
 8007436:	4442      	add	r2, r8
 8007438:	4631      	mov	r1, r6
 800743a:	4628      	mov	r0, r5
 800743c:	47b8      	blx	r7
 800743e:	3001      	adds	r0, #1
 8007440:	d1c1      	bne.n	80073c6 <_printf_float+0x342>
 8007442:	e680      	b.n	8007146 <_printf_float+0xc2>
 8007444:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007446:	2a01      	cmp	r2, #1
 8007448:	dc01      	bgt.n	800744e <_printf_float+0x3ca>
 800744a:	07db      	lsls	r3, r3, #31
 800744c:	d538      	bpl.n	80074c0 <_printf_float+0x43c>
 800744e:	2301      	movs	r3, #1
 8007450:	4642      	mov	r2, r8
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	f43f ae74 	beq.w	8007146 <_printf_float+0xc2>
 800745e:	ee18 3a10 	vmov	r3, s16
 8007462:	4652      	mov	r2, sl
 8007464:	4631      	mov	r1, r6
 8007466:	4628      	mov	r0, r5
 8007468:	47b8      	blx	r7
 800746a:	3001      	adds	r0, #1
 800746c:	f43f ae6b 	beq.w	8007146 <_printf_float+0xc2>
 8007470:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007474:	2200      	movs	r2, #0
 8007476:	2300      	movs	r3, #0
 8007478:	f7f9 fb4e 	bl	8000b18 <__aeabi_dcmpeq>
 800747c:	b9d8      	cbnz	r0, 80074b6 <_printf_float+0x432>
 800747e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007480:	f108 0201 	add.w	r2, r8, #1
 8007484:	3b01      	subs	r3, #1
 8007486:	4631      	mov	r1, r6
 8007488:	4628      	mov	r0, r5
 800748a:	47b8      	blx	r7
 800748c:	3001      	adds	r0, #1
 800748e:	d10e      	bne.n	80074ae <_printf_float+0x42a>
 8007490:	e659      	b.n	8007146 <_printf_float+0xc2>
 8007492:	2301      	movs	r3, #1
 8007494:	4652      	mov	r2, sl
 8007496:	4631      	mov	r1, r6
 8007498:	4628      	mov	r0, r5
 800749a:	47b8      	blx	r7
 800749c:	3001      	adds	r0, #1
 800749e:	f43f ae52 	beq.w	8007146 <_printf_float+0xc2>
 80074a2:	f108 0801 	add.w	r8, r8, #1
 80074a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074a8:	3b01      	subs	r3, #1
 80074aa:	4543      	cmp	r3, r8
 80074ac:	dcf1      	bgt.n	8007492 <_printf_float+0x40e>
 80074ae:	464b      	mov	r3, r9
 80074b0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80074b4:	e6dc      	b.n	8007270 <_printf_float+0x1ec>
 80074b6:	f04f 0800 	mov.w	r8, #0
 80074ba:	f104 0a1a 	add.w	sl, r4, #26
 80074be:	e7f2      	b.n	80074a6 <_printf_float+0x422>
 80074c0:	2301      	movs	r3, #1
 80074c2:	4642      	mov	r2, r8
 80074c4:	e7df      	b.n	8007486 <_printf_float+0x402>
 80074c6:	2301      	movs	r3, #1
 80074c8:	464a      	mov	r2, r9
 80074ca:	4631      	mov	r1, r6
 80074cc:	4628      	mov	r0, r5
 80074ce:	47b8      	blx	r7
 80074d0:	3001      	adds	r0, #1
 80074d2:	f43f ae38 	beq.w	8007146 <_printf_float+0xc2>
 80074d6:	f108 0801 	add.w	r8, r8, #1
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80074de:	1a5b      	subs	r3, r3, r1
 80074e0:	4543      	cmp	r3, r8
 80074e2:	dcf0      	bgt.n	80074c6 <_printf_float+0x442>
 80074e4:	e6fa      	b.n	80072dc <_printf_float+0x258>
 80074e6:	f04f 0800 	mov.w	r8, #0
 80074ea:	f104 0919 	add.w	r9, r4, #25
 80074ee:	e7f4      	b.n	80074da <_printf_float+0x456>

080074f0 <_printf_common>:
 80074f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074f4:	4616      	mov	r6, r2
 80074f6:	4699      	mov	r9, r3
 80074f8:	688a      	ldr	r2, [r1, #8]
 80074fa:	690b      	ldr	r3, [r1, #16]
 80074fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007500:	4293      	cmp	r3, r2
 8007502:	bfb8      	it	lt
 8007504:	4613      	movlt	r3, r2
 8007506:	6033      	str	r3, [r6, #0]
 8007508:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800750c:	4607      	mov	r7, r0
 800750e:	460c      	mov	r4, r1
 8007510:	b10a      	cbz	r2, 8007516 <_printf_common+0x26>
 8007512:	3301      	adds	r3, #1
 8007514:	6033      	str	r3, [r6, #0]
 8007516:	6823      	ldr	r3, [r4, #0]
 8007518:	0699      	lsls	r1, r3, #26
 800751a:	bf42      	ittt	mi
 800751c:	6833      	ldrmi	r3, [r6, #0]
 800751e:	3302      	addmi	r3, #2
 8007520:	6033      	strmi	r3, [r6, #0]
 8007522:	6825      	ldr	r5, [r4, #0]
 8007524:	f015 0506 	ands.w	r5, r5, #6
 8007528:	d106      	bne.n	8007538 <_printf_common+0x48>
 800752a:	f104 0a19 	add.w	sl, r4, #25
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	6832      	ldr	r2, [r6, #0]
 8007532:	1a9b      	subs	r3, r3, r2
 8007534:	42ab      	cmp	r3, r5
 8007536:	dc26      	bgt.n	8007586 <_printf_common+0x96>
 8007538:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800753c:	1e13      	subs	r3, r2, #0
 800753e:	6822      	ldr	r2, [r4, #0]
 8007540:	bf18      	it	ne
 8007542:	2301      	movne	r3, #1
 8007544:	0692      	lsls	r2, r2, #26
 8007546:	d42b      	bmi.n	80075a0 <_printf_common+0xb0>
 8007548:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800754c:	4649      	mov	r1, r9
 800754e:	4638      	mov	r0, r7
 8007550:	47c0      	blx	r8
 8007552:	3001      	adds	r0, #1
 8007554:	d01e      	beq.n	8007594 <_printf_common+0xa4>
 8007556:	6823      	ldr	r3, [r4, #0]
 8007558:	68e5      	ldr	r5, [r4, #12]
 800755a:	6832      	ldr	r2, [r6, #0]
 800755c:	f003 0306 	and.w	r3, r3, #6
 8007560:	2b04      	cmp	r3, #4
 8007562:	bf08      	it	eq
 8007564:	1aad      	subeq	r5, r5, r2
 8007566:	68a3      	ldr	r3, [r4, #8]
 8007568:	6922      	ldr	r2, [r4, #16]
 800756a:	bf0c      	ite	eq
 800756c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007570:	2500      	movne	r5, #0
 8007572:	4293      	cmp	r3, r2
 8007574:	bfc4      	itt	gt
 8007576:	1a9b      	subgt	r3, r3, r2
 8007578:	18ed      	addgt	r5, r5, r3
 800757a:	2600      	movs	r6, #0
 800757c:	341a      	adds	r4, #26
 800757e:	42b5      	cmp	r5, r6
 8007580:	d11a      	bne.n	80075b8 <_printf_common+0xc8>
 8007582:	2000      	movs	r0, #0
 8007584:	e008      	b.n	8007598 <_printf_common+0xa8>
 8007586:	2301      	movs	r3, #1
 8007588:	4652      	mov	r2, sl
 800758a:	4649      	mov	r1, r9
 800758c:	4638      	mov	r0, r7
 800758e:	47c0      	blx	r8
 8007590:	3001      	adds	r0, #1
 8007592:	d103      	bne.n	800759c <_printf_common+0xac>
 8007594:	f04f 30ff 	mov.w	r0, #4294967295
 8007598:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800759c:	3501      	adds	r5, #1
 800759e:	e7c6      	b.n	800752e <_printf_common+0x3e>
 80075a0:	18e1      	adds	r1, r4, r3
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	2030      	movs	r0, #48	; 0x30
 80075a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80075aa:	4422      	add	r2, r4
 80075ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80075b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80075b4:	3302      	adds	r3, #2
 80075b6:	e7c7      	b.n	8007548 <_printf_common+0x58>
 80075b8:	2301      	movs	r3, #1
 80075ba:	4622      	mov	r2, r4
 80075bc:	4649      	mov	r1, r9
 80075be:	4638      	mov	r0, r7
 80075c0:	47c0      	blx	r8
 80075c2:	3001      	adds	r0, #1
 80075c4:	d0e6      	beq.n	8007594 <_printf_common+0xa4>
 80075c6:	3601      	adds	r6, #1
 80075c8:	e7d9      	b.n	800757e <_printf_common+0x8e>
	...

080075cc <_printf_i>:
 80075cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80075d0:	7e0f      	ldrb	r7, [r1, #24]
 80075d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80075d4:	2f78      	cmp	r7, #120	; 0x78
 80075d6:	4691      	mov	r9, r2
 80075d8:	4680      	mov	r8, r0
 80075da:	460c      	mov	r4, r1
 80075dc:	469a      	mov	sl, r3
 80075de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80075e2:	d807      	bhi.n	80075f4 <_printf_i+0x28>
 80075e4:	2f62      	cmp	r7, #98	; 0x62
 80075e6:	d80a      	bhi.n	80075fe <_printf_i+0x32>
 80075e8:	2f00      	cmp	r7, #0
 80075ea:	f000 80d8 	beq.w	800779e <_printf_i+0x1d2>
 80075ee:	2f58      	cmp	r7, #88	; 0x58
 80075f0:	f000 80a3 	beq.w	800773a <_printf_i+0x16e>
 80075f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80075fc:	e03a      	b.n	8007674 <_printf_i+0xa8>
 80075fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007602:	2b15      	cmp	r3, #21
 8007604:	d8f6      	bhi.n	80075f4 <_printf_i+0x28>
 8007606:	a101      	add	r1, pc, #4	; (adr r1, 800760c <_printf_i+0x40>)
 8007608:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800760c:	08007665 	.word	0x08007665
 8007610:	08007679 	.word	0x08007679
 8007614:	080075f5 	.word	0x080075f5
 8007618:	080075f5 	.word	0x080075f5
 800761c:	080075f5 	.word	0x080075f5
 8007620:	080075f5 	.word	0x080075f5
 8007624:	08007679 	.word	0x08007679
 8007628:	080075f5 	.word	0x080075f5
 800762c:	080075f5 	.word	0x080075f5
 8007630:	080075f5 	.word	0x080075f5
 8007634:	080075f5 	.word	0x080075f5
 8007638:	08007785 	.word	0x08007785
 800763c:	080076a9 	.word	0x080076a9
 8007640:	08007767 	.word	0x08007767
 8007644:	080075f5 	.word	0x080075f5
 8007648:	080075f5 	.word	0x080075f5
 800764c:	080077a7 	.word	0x080077a7
 8007650:	080075f5 	.word	0x080075f5
 8007654:	080076a9 	.word	0x080076a9
 8007658:	080075f5 	.word	0x080075f5
 800765c:	080075f5 	.word	0x080075f5
 8007660:	0800776f 	.word	0x0800776f
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	1d1a      	adds	r2, r3, #4
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007674:	2301      	movs	r3, #1
 8007676:	e0a3      	b.n	80077c0 <_printf_i+0x1f4>
 8007678:	6820      	ldr	r0, [r4, #0]
 800767a:	6829      	ldr	r1, [r5, #0]
 800767c:	0606      	lsls	r6, r0, #24
 800767e:	f101 0304 	add.w	r3, r1, #4
 8007682:	d50a      	bpl.n	800769a <_printf_i+0xce>
 8007684:	680e      	ldr	r6, [r1, #0]
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	2e00      	cmp	r6, #0
 800768a:	da03      	bge.n	8007694 <_printf_i+0xc8>
 800768c:	232d      	movs	r3, #45	; 0x2d
 800768e:	4276      	negs	r6, r6
 8007690:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007694:	485e      	ldr	r0, [pc, #376]	; (8007810 <_printf_i+0x244>)
 8007696:	230a      	movs	r3, #10
 8007698:	e019      	b.n	80076ce <_printf_i+0x102>
 800769a:	680e      	ldr	r6, [r1, #0]
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	f010 0f40 	tst.w	r0, #64	; 0x40
 80076a2:	bf18      	it	ne
 80076a4:	b236      	sxthne	r6, r6
 80076a6:	e7ef      	b.n	8007688 <_printf_i+0xbc>
 80076a8:	682b      	ldr	r3, [r5, #0]
 80076aa:	6820      	ldr	r0, [r4, #0]
 80076ac:	1d19      	adds	r1, r3, #4
 80076ae:	6029      	str	r1, [r5, #0]
 80076b0:	0601      	lsls	r1, r0, #24
 80076b2:	d501      	bpl.n	80076b8 <_printf_i+0xec>
 80076b4:	681e      	ldr	r6, [r3, #0]
 80076b6:	e002      	b.n	80076be <_printf_i+0xf2>
 80076b8:	0646      	lsls	r6, r0, #25
 80076ba:	d5fb      	bpl.n	80076b4 <_printf_i+0xe8>
 80076bc:	881e      	ldrh	r6, [r3, #0]
 80076be:	4854      	ldr	r0, [pc, #336]	; (8007810 <_printf_i+0x244>)
 80076c0:	2f6f      	cmp	r7, #111	; 0x6f
 80076c2:	bf0c      	ite	eq
 80076c4:	2308      	moveq	r3, #8
 80076c6:	230a      	movne	r3, #10
 80076c8:	2100      	movs	r1, #0
 80076ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80076ce:	6865      	ldr	r5, [r4, #4]
 80076d0:	60a5      	str	r5, [r4, #8]
 80076d2:	2d00      	cmp	r5, #0
 80076d4:	bfa2      	ittt	ge
 80076d6:	6821      	ldrge	r1, [r4, #0]
 80076d8:	f021 0104 	bicge.w	r1, r1, #4
 80076dc:	6021      	strge	r1, [r4, #0]
 80076de:	b90e      	cbnz	r6, 80076e4 <_printf_i+0x118>
 80076e0:	2d00      	cmp	r5, #0
 80076e2:	d04d      	beq.n	8007780 <_printf_i+0x1b4>
 80076e4:	4615      	mov	r5, r2
 80076e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80076ea:	fb03 6711 	mls	r7, r3, r1, r6
 80076ee:	5dc7      	ldrb	r7, [r0, r7]
 80076f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80076f4:	4637      	mov	r7, r6
 80076f6:	42bb      	cmp	r3, r7
 80076f8:	460e      	mov	r6, r1
 80076fa:	d9f4      	bls.n	80076e6 <_printf_i+0x11a>
 80076fc:	2b08      	cmp	r3, #8
 80076fe:	d10b      	bne.n	8007718 <_printf_i+0x14c>
 8007700:	6823      	ldr	r3, [r4, #0]
 8007702:	07de      	lsls	r6, r3, #31
 8007704:	d508      	bpl.n	8007718 <_printf_i+0x14c>
 8007706:	6923      	ldr	r3, [r4, #16]
 8007708:	6861      	ldr	r1, [r4, #4]
 800770a:	4299      	cmp	r1, r3
 800770c:	bfde      	ittt	le
 800770e:	2330      	movle	r3, #48	; 0x30
 8007710:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007714:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007718:	1b52      	subs	r2, r2, r5
 800771a:	6122      	str	r2, [r4, #16]
 800771c:	f8cd a000 	str.w	sl, [sp]
 8007720:	464b      	mov	r3, r9
 8007722:	aa03      	add	r2, sp, #12
 8007724:	4621      	mov	r1, r4
 8007726:	4640      	mov	r0, r8
 8007728:	f7ff fee2 	bl	80074f0 <_printf_common>
 800772c:	3001      	adds	r0, #1
 800772e:	d14c      	bne.n	80077ca <_printf_i+0x1fe>
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	b004      	add	sp, #16
 8007736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800773a:	4835      	ldr	r0, [pc, #212]	; (8007810 <_printf_i+0x244>)
 800773c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007740:	6829      	ldr	r1, [r5, #0]
 8007742:	6823      	ldr	r3, [r4, #0]
 8007744:	f851 6b04 	ldr.w	r6, [r1], #4
 8007748:	6029      	str	r1, [r5, #0]
 800774a:	061d      	lsls	r5, r3, #24
 800774c:	d514      	bpl.n	8007778 <_printf_i+0x1ac>
 800774e:	07df      	lsls	r7, r3, #31
 8007750:	bf44      	itt	mi
 8007752:	f043 0320 	orrmi.w	r3, r3, #32
 8007756:	6023      	strmi	r3, [r4, #0]
 8007758:	b91e      	cbnz	r6, 8007762 <_printf_i+0x196>
 800775a:	6823      	ldr	r3, [r4, #0]
 800775c:	f023 0320 	bic.w	r3, r3, #32
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	2310      	movs	r3, #16
 8007764:	e7b0      	b.n	80076c8 <_printf_i+0xfc>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	f043 0320 	orr.w	r3, r3, #32
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	2378      	movs	r3, #120	; 0x78
 8007770:	4828      	ldr	r0, [pc, #160]	; (8007814 <_printf_i+0x248>)
 8007772:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007776:	e7e3      	b.n	8007740 <_printf_i+0x174>
 8007778:	0659      	lsls	r1, r3, #25
 800777a:	bf48      	it	mi
 800777c:	b2b6      	uxthmi	r6, r6
 800777e:	e7e6      	b.n	800774e <_printf_i+0x182>
 8007780:	4615      	mov	r5, r2
 8007782:	e7bb      	b.n	80076fc <_printf_i+0x130>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	6826      	ldr	r6, [r4, #0]
 8007788:	6961      	ldr	r1, [r4, #20]
 800778a:	1d18      	adds	r0, r3, #4
 800778c:	6028      	str	r0, [r5, #0]
 800778e:	0635      	lsls	r5, r6, #24
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	d501      	bpl.n	8007798 <_printf_i+0x1cc>
 8007794:	6019      	str	r1, [r3, #0]
 8007796:	e002      	b.n	800779e <_printf_i+0x1d2>
 8007798:	0670      	lsls	r0, r6, #25
 800779a:	d5fb      	bpl.n	8007794 <_printf_i+0x1c8>
 800779c:	8019      	strh	r1, [r3, #0]
 800779e:	2300      	movs	r3, #0
 80077a0:	6123      	str	r3, [r4, #16]
 80077a2:	4615      	mov	r5, r2
 80077a4:	e7ba      	b.n	800771c <_printf_i+0x150>
 80077a6:	682b      	ldr	r3, [r5, #0]
 80077a8:	1d1a      	adds	r2, r3, #4
 80077aa:	602a      	str	r2, [r5, #0]
 80077ac:	681d      	ldr	r5, [r3, #0]
 80077ae:	6862      	ldr	r2, [r4, #4]
 80077b0:	2100      	movs	r1, #0
 80077b2:	4628      	mov	r0, r5
 80077b4:	f7f8 fd3c 	bl	8000230 <memchr>
 80077b8:	b108      	cbz	r0, 80077be <_printf_i+0x1f2>
 80077ba:	1b40      	subs	r0, r0, r5
 80077bc:	6060      	str	r0, [r4, #4]
 80077be:	6863      	ldr	r3, [r4, #4]
 80077c0:	6123      	str	r3, [r4, #16]
 80077c2:	2300      	movs	r3, #0
 80077c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80077c8:	e7a8      	b.n	800771c <_printf_i+0x150>
 80077ca:	6923      	ldr	r3, [r4, #16]
 80077cc:	462a      	mov	r2, r5
 80077ce:	4649      	mov	r1, r9
 80077d0:	4640      	mov	r0, r8
 80077d2:	47d0      	blx	sl
 80077d4:	3001      	adds	r0, #1
 80077d6:	d0ab      	beq.n	8007730 <_printf_i+0x164>
 80077d8:	6823      	ldr	r3, [r4, #0]
 80077da:	079b      	lsls	r3, r3, #30
 80077dc:	d413      	bmi.n	8007806 <_printf_i+0x23a>
 80077de:	68e0      	ldr	r0, [r4, #12]
 80077e0:	9b03      	ldr	r3, [sp, #12]
 80077e2:	4298      	cmp	r0, r3
 80077e4:	bfb8      	it	lt
 80077e6:	4618      	movlt	r0, r3
 80077e8:	e7a4      	b.n	8007734 <_printf_i+0x168>
 80077ea:	2301      	movs	r3, #1
 80077ec:	4632      	mov	r2, r6
 80077ee:	4649      	mov	r1, r9
 80077f0:	4640      	mov	r0, r8
 80077f2:	47d0      	blx	sl
 80077f4:	3001      	adds	r0, #1
 80077f6:	d09b      	beq.n	8007730 <_printf_i+0x164>
 80077f8:	3501      	adds	r5, #1
 80077fa:	68e3      	ldr	r3, [r4, #12]
 80077fc:	9903      	ldr	r1, [sp, #12]
 80077fe:	1a5b      	subs	r3, r3, r1
 8007800:	42ab      	cmp	r3, r5
 8007802:	dcf2      	bgt.n	80077ea <_printf_i+0x21e>
 8007804:	e7eb      	b.n	80077de <_printf_i+0x212>
 8007806:	2500      	movs	r5, #0
 8007808:	f104 0619 	add.w	r6, r4, #25
 800780c:	e7f5      	b.n	80077fa <_printf_i+0x22e>
 800780e:	bf00      	nop
 8007810:	08009a06 	.word	0x08009a06
 8007814:	08009a17 	.word	0x08009a17

08007818 <iprintf>:
 8007818:	b40f      	push	{r0, r1, r2, r3}
 800781a:	4b0a      	ldr	r3, [pc, #40]	; (8007844 <iprintf+0x2c>)
 800781c:	b513      	push	{r0, r1, r4, lr}
 800781e:	681c      	ldr	r4, [r3, #0]
 8007820:	b124      	cbz	r4, 800782c <iprintf+0x14>
 8007822:	69a3      	ldr	r3, [r4, #24]
 8007824:	b913      	cbnz	r3, 800782c <iprintf+0x14>
 8007826:	4620      	mov	r0, r4
 8007828:	f000 fee0 	bl	80085ec <__sinit>
 800782c:	ab05      	add	r3, sp, #20
 800782e:	9a04      	ldr	r2, [sp, #16]
 8007830:	68a1      	ldr	r1, [r4, #8]
 8007832:	9301      	str	r3, [sp, #4]
 8007834:	4620      	mov	r0, r4
 8007836:	f001 fc2b 	bl	8009090 <_vfiprintf_r>
 800783a:	b002      	add	sp, #8
 800783c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007840:	b004      	add	sp, #16
 8007842:	4770      	bx	lr
 8007844:	2000000c 	.word	0x2000000c

08007848 <quorem>:
 8007848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800784c:	6903      	ldr	r3, [r0, #16]
 800784e:	690c      	ldr	r4, [r1, #16]
 8007850:	42a3      	cmp	r3, r4
 8007852:	4607      	mov	r7, r0
 8007854:	f2c0 8081 	blt.w	800795a <quorem+0x112>
 8007858:	3c01      	subs	r4, #1
 800785a:	f101 0814 	add.w	r8, r1, #20
 800785e:	f100 0514 	add.w	r5, r0, #20
 8007862:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007866:	9301      	str	r3, [sp, #4]
 8007868:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800786c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007870:	3301      	adds	r3, #1
 8007872:	429a      	cmp	r2, r3
 8007874:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007878:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800787c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007880:	d331      	bcc.n	80078e6 <quorem+0x9e>
 8007882:	f04f 0e00 	mov.w	lr, #0
 8007886:	4640      	mov	r0, r8
 8007888:	46ac      	mov	ip, r5
 800788a:	46f2      	mov	sl, lr
 800788c:	f850 2b04 	ldr.w	r2, [r0], #4
 8007890:	b293      	uxth	r3, r2
 8007892:	fb06 e303 	mla	r3, r6, r3, lr
 8007896:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800789a:	b29b      	uxth	r3, r3
 800789c:	ebaa 0303 	sub.w	r3, sl, r3
 80078a0:	f8dc a000 	ldr.w	sl, [ip]
 80078a4:	0c12      	lsrs	r2, r2, #16
 80078a6:	fa13 f38a 	uxtah	r3, r3, sl
 80078aa:	fb06 e202 	mla	r2, r6, r2, lr
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	9b00      	ldr	r3, [sp, #0]
 80078b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80078b6:	b292      	uxth	r2, r2
 80078b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80078bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80078c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80078c4:	4581      	cmp	r9, r0
 80078c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078ca:	f84c 3b04 	str.w	r3, [ip], #4
 80078ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80078d2:	d2db      	bcs.n	800788c <quorem+0x44>
 80078d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80078d8:	b92b      	cbnz	r3, 80078e6 <quorem+0x9e>
 80078da:	9b01      	ldr	r3, [sp, #4]
 80078dc:	3b04      	subs	r3, #4
 80078de:	429d      	cmp	r5, r3
 80078e0:	461a      	mov	r2, r3
 80078e2:	d32e      	bcc.n	8007942 <quorem+0xfa>
 80078e4:	613c      	str	r4, [r7, #16]
 80078e6:	4638      	mov	r0, r7
 80078e8:	f001 f9b0 	bl	8008c4c <__mcmp>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	db24      	blt.n	800793a <quorem+0xf2>
 80078f0:	3601      	adds	r6, #1
 80078f2:	4628      	mov	r0, r5
 80078f4:	f04f 0c00 	mov.w	ip, #0
 80078f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80078fc:	f8d0 e000 	ldr.w	lr, [r0]
 8007900:	b293      	uxth	r3, r2
 8007902:	ebac 0303 	sub.w	r3, ip, r3
 8007906:	0c12      	lsrs	r2, r2, #16
 8007908:	fa13 f38e 	uxtah	r3, r3, lr
 800790c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007910:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007914:	b29b      	uxth	r3, r3
 8007916:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800791a:	45c1      	cmp	r9, r8
 800791c:	f840 3b04 	str.w	r3, [r0], #4
 8007920:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007924:	d2e8      	bcs.n	80078f8 <quorem+0xb0>
 8007926:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800792a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800792e:	b922      	cbnz	r2, 800793a <quorem+0xf2>
 8007930:	3b04      	subs	r3, #4
 8007932:	429d      	cmp	r5, r3
 8007934:	461a      	mov	r2, r3
 8007936:	d30a      	bcc.n	800794e <quorem+0x106>
 8007938:	613c      	str	r4, [r7, #16]
 800793a:	4630      	mov	r0, r6
 800793c:	b003      	add	sp, #12
 800793e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007942:	6812      	ldr	r2, [r2, #0]
 8007944:	3b04      	subs	r3, #4
 8007946:	2a00      	cmp	r2, #0
 8007948:	d1cc      	bne.n	80078e4 <quorem+0x9c>
 800794a:	3c01      	subs	r4, #1
 800794c:	e7c7      	b.n	80078de <quorem+0x96>
 800794e:	6812      	ldr	r2, [r2, #0]
 8007950:	3b04      	subs	r3, #4
 8007952:	2a00      	cmp	r2, #0
 8007954:	d1f0      	bne.n	8007938 <quorem+0xf0>
 8007956:	3c01      	subs	r4, #1
 8007958:	e7eb      	b.n	8007932 <quorem+0xea>
 800795a:	2000      	movs	r0, #0
 800795c:	e7ee      	b.n	800793c <quorem+0xf4>
	...

08007960 <_dtoa_r>:
 8007960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007964:	ed2d 8b04 	vpush	{d8-d9}
 8007968:	ec57 6b10 	vmov	r6, r7, d0
 800796c:	b093      	sub	sp, #76	; 0x4c
 800796e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007970:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007974:	9106      	str	r1, [sp, #24]
 8007976:	ee10 aa10 	vmov	sl, s0
 800797a:	4604      	mov	r4, r0
 800797c:	9209      	str	r2, [sp, #36]	; 0x24
 800797e:	930c      	str	r3, [sp, #48]	; 0x30
 8007980:	46bb      	mov	fp, r7
 8007982:	b975      	cbnz	r5, 80079a2 <_dtoa_r+0x42>
 8007984:	2010      	movs	r0, #16
 8007986:	f000 fed7 	bl	8008738 <malloc>
 800798a:	4602      	mov	r2, r0
 800798c:	6260      	str	r0, [r4, #36]	; 0x24
 800798e:	b920      	cbnz	r0, 800799a <_dtoa_r+0x3a>
 8007990:	4ba7      	ldr	r3, [pc, #668]	; (8007c30 <_dtoa_r+0x2d0>)
 8007992:	21ea      	movs	r1, #234	; 0xea
 8007994:	48a7      	ldr	r0, [pc, #668]	; (8007c34 <_dtoa_r+0x2d4>)
 8007996:	f001 fdd1 	bl	800953c <__assert_func>
 800799a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800799e:	6005      	str	r5, [r0, #0]
 80079a0:	60c5      	str	r5, [r0, #12]
 80079a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079a4:	6819      	ldr	r1, [r3, #0]
 80079a6:	b151      	cbz	r1, 80079be <_dtoa_r+0x5e>
 80079a8:	685a      	ldr	r2, [r3, #4]
 80079aa:	604a      	str	r2, [r1, #4]
 80079ac:	2301      	movs	r3, #1
 80079ae:	4093      	lsls	r3, r2
 80079b0:	608b      	str	r3, [r1, #8]
 80079b2:	4620      	mov	r0, r4
 80079b4:	f000 ff08 	bl	80087c8 <_Bfree>
 80079b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80079ba:	2200      	movs	r2, #0
 80079bc:	601a      	str	r2, [r3, #0]
 80079be:	1e3b      	subs	r3, r7, #0
 80079c0:	bfaa      	itet	ge
 80079c2:	2300      	movge	r3, #0
 80079c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80079c8:	f8c8 3000 	strge.w	r3, [r8]
 80079cc:	4b9a      	ldr	r3, [pc, #616]	; (8007c38 <_dtoa_r+0x2d8>)
 80079ce:	bfbc      	itt	lt
 80079d0:	2201      	movlt	r2, #1
 80079d2:	f8c8 2000 	strlt.w	r2, [r8]
 80079d6:	ea33 030b 	bics.w	r3, r3, fp
 80079da:	d11b      	bne.n	8007a14 <_dtoa_r+0xb4>
 80079dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80079de:	f242 730f 	movw	r3, #9999	; 0x270f
 80079e2:	6013      	str	r3, [r2, #0]
 80079e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079e8:	4333      	orrs	r3, r6
 80079ea:	f000 8592 	beq.w	8008512 <_dtoa_r+0xbb2>
 80079ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80079f0:	b963      	cbnz	r3, 8007a0c <_dtoa_r+0xac>
 80079f2:	4b92      	ldr	r3, [pc, #584]	; (8007c3c <_dtoa_r+0x2dc>)
 80079f4:	e022      	b.n	8007a3c <_dtoa_r+0xdc>
 80079f6:	4b92      	ldr	r3, [pc, #584]	; (8007c40 <_dtoa_r+0x2e0>)
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	3308      	adds	r3, #8
 80079fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80079fe:	6013      	str	r3, [r2, #0]
 8007a00:	9801      	ldr	r0, [sp, #4]
 8007a02:	b013      	add	sp, #76	; 0x4c
 8007a04:	ecbd 8b04 	vpop	{d8-d9}
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	4b8b      	ldr	r3, [pc, #556]	; (8007c3c <_dtoa_r+0x2dc>)
 8007a0e:	9301      	str	r3, [sp, #4]
 8007a10:	3303      	adds	r3, #3
 8007a12:	e7f3      	b.n	80079fc <_dtoa_r+0x9c>
 8007a14:	2200      	movs	r2, #0
 8007a16:	2300      	movs	r3, #0
 8007a18:	4650      	mov	r0, sl
 8007a1a:	4659      	mov	r1, fp
 8007a1c:	f7f9 f87c 	bl	8000b18 <__aeabi_dcmpeq>
 8007a20:	ec4b ab19 	vmov	d9, sl, fp
 8007a24:	4680      	mov	r8, r0
 8007a26:	b158      	cbz	r0, 8007a40 <_dtoa_r+0xe0>
 8007a28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 856b 	beq.w	800850c <_dtoa_r+0xbac>
 8007a36:	4883      	ldr	r0, [pc, #524]	; (8007c44 <_dtoa_r+0x2e4>)
 8007a38:	6018      	str	r0, [r3, #0]
 8007a3a:	1e43      	subs	r3, r0, #1
 8007a3c:	9301      	str	r3, [sp, #4]
 8007a3e:	e7df      	b.n	8007a00 <_dtoa_r+0xa0>
 8007a40:	ec4b ab10 	vmov	d0, sl, fp
 8007a44:	aa10      	add	r2, sp, #64	; 0x40
 8007a46:	a911      	add	r1, sp, #68	; 0x44
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f001 f9a5 	bl	8008d98 <__d2b>
 8007a4e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007a52:	ee08 0a10 	vmov	s16, r0
 8007a56:	2d00      	cmp	r5, #0
 8007a58:	f000 8084 	beq.w	8007b64 <_dtoa_r+0x204>
 8007a5c:	ee19 3a90 	vmov	r3, s19
 8007a60:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a64:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007a68:	4656      	mov	r6, sl
 8007a6a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007a6e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007a72:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007a76:	4b74      	ldr	r3, [pc, #464]	; (8007c48 <_dtoa_r+0x2e8>)
 8007a78:	2200      	movs	r2, #0
 8007a7a:	4630      	mov	r0, r6
 8007a7c:	4639      	mov	r1, r7
 8007a7e:	f7f8 fc2b 	bl	80002d8 <__aeabi_dsub>
 8007a82:	a365      	add	r3, pc, #404	; (adr r3, 8007c18 <_dtoa_r+0x2b8>)
 8007a84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a88:	f7f8 fdde 	bl	8000648 <__aeabi_dmul>
 8007a8c:	a364      	add	r3, pc, #400	; (adr r3, 8007c20 <_dtoa_r+0x2c0>)
 8007a8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a92:	f7f8 fc23 	bl	80002dc <__adddf3>
 8007a96:	4606      	mov	r6, r0
 8007a98:	4628      	mov	r0, r5
 8007a9a:	460f      	mov	r7, r1
 8007a9c:	f7f8 fd6a 	bl	8000574 <__aeabi_i2d>
 8007aa0:	a361      	add	r3, pc, #388	; (adr r3, 8007c28 <_dtoa_r+0x2c8>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fdcf 	bl	8000648 <__aeabi_dmul>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	4630      	mov	r0, r6
 8007ab0:	4639      	mov	r1, r7
 8007ab2:	f7f8 fc13 	bl	80002dc <__adddf3>
 8007ab6:	4606      	mov	r6, r0
 8007ab8:	460f      	mov	r7, r1
 8007aba:	f7f9 f875 	bl	8000ba8 <__aeabi_d2iz>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	9000      	str	r0, [sp, #0]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	4639      	mov	r1, r7
 8007ac8:	f7f9 f830 	bl	8000b2c <__aeabi_dcmplt>
 8007acc:	b150      	cbz	r0, 8007ae4 <_dtoa_r+0x184>
 8007ace:	9800      	ldr	r0, [sp, #0]
 8007ad0:	f7f8 fd50 	bl	8000574 <__aeabi_i2d>
 8007ad4:	4632      	mov	r2, r6
 8007ad6:	463b      	mov	r3, r7
 8007ad8:	f7f9 f81e 	bl	8000b18 <__aeabi_dcmpeq>
 8007adc:	b910      	cbnz	r0, 8007ae4 <_dtoa_r+0x184>
 8007ade:	9b00      	ldr	r3, [sp, #0]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	9b00      	ldr	r3, [sp, #0]
 8007ae6:	2b16      	cmp	r3, #22
 8007ae8:	d85a      	bhi.n	8007ba0 <_dtoa_r+0x240>
 8007aea:	9a00      	ldr	r2, [sp, #0]
 8007aec:	4b57      	ldr	r3, [pc, #348]	; (8007c4c <_dtoa_r+0x2ec>)
 8007aee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af6:	ec51 0b19 	vmov	r0, r1, d9
 8007afa:	f7f9 f817 	bl	8000b2c <__aeabi_dcmplt>
 8007afe:	2800      	cmp	r0, #0
 8007b00:	d050      	beq.n	8007ba4 <_dtoa_r+0x244>
 8007b02:	9b00      	ldr	r3, [sp, #0]
 8007b04:	3b01      	subs	r3, #1
 8007b06:	9300      	str	r3, [sp, #0]
 8007b08:	2300      	movs	r3, #0
 8007b0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007b0e:	1b5d      	subs	r5, r3, r5
 8007b10:	1e6b      	subs	r3, r5, #1
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	bf45      	ittet	mi
 8007b16:	f1c5 0301 	rsbmi	r3, r5, #1
 8007b1a:	9304      	strmi	r3, [sp, #16]
 8007b1c:	2300      	movpl	r3, #0
 8007b1e:	2300      	movmi	r3, #0
 8007b20:	bf4c      	ite	mi
 8007b22:	9305      	strmi	r3, [sp, #20]
 8007b24:	9304      	strpl	r3, [sp, #16]
 8007b26:	9b00      	ldr	r3, [sp, #0]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	db3d      	blt.n	8007ba8 <_dtoa_r+0x248>
 8007b2c:	9b05      	ldr	r3, [sp, #20]
 8007b2e:	9a00      	ldr	r2, [sp, #0]
 8007b30:	920a      	str	r2, [sp, #40]	; 0x28
 8007b32:	4413      	add	r3, r2
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	2300      	movs	r3, #0
 8007b38:	9307      	str	r3, [sp, #28]
 8007b3a:	9b06      	ldr	r3, [sp, #24]
 8007b3c:	2b09      	cmp	r3, #9
 8007b3e:	f200 8089 	bhi.w	8007c54 <_dtoa_r+0x2f4>
 8007b42:	2b05      	cmp	r3, #5
 8007b44:	bfc4      	itt	gt
 8007b46:	3b04      	subgt	r3, #4
 8007b48:	9306      	strgt	r3, [sp, #24]
 8007b4a:	9b06      	ldr	r3, [sp, #24]
 8007b4c:	f1a3 0302 	sub.w	r3, r3, #2
 8007b50:	bfcc      	ite	gt
 8007b52:	2500      	movgt	r5, #0
 8007b54:	2501      	movle	r5, #1
 8007b56:	2b03      	cmp	r3, #3
 8007b58:	f200 8087 	bhi.w	8007c6a <_dtoa_r+0x30a>
 8007b5c:	e8df f003 	tbb	[pc, r3]
 8007b60:	59383a2d 	.word	0x59383a2d
 8007b64:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007b68:	441d      	add	r5, r3
 8007b6a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	bfc1      	itttt	gt
 8007b72:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007b76:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007b7a:	fa0b f303 	lslgt.w	r3, fp, r3
 8007b7e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007b82:	bfda      	itte	le
 8007b84:	f1c3 0320 	rsble	r3, r3, #32
 8007b88:	fa06 f003 	lslle.w	r0, r6, r3
 8007b8c:	4318      	orrgt	r0, r3
 8007b8e:	f7f8 fce1 	bl	8000554 <__aeabi_ui2d>
 8007b92:	2301      	movs	r3, #1
 8007b94:	4606      	mov	r6, r0
 8007b96:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007b9a:	3d01      	subs	r5, #1
 8007b9c:	930e      	str	r3, [sp, #56]	; 0x38
 8007b9e:	e76a      	b.n	8007a76 <_dtoa_r+0x116>
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e7b2      	b.n	8007b0a <_dtoa_r+0x1aa>
 8007ba4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ba6:	e7b1      	b.n	8007b0c <_dtoa_r+0x1ac>
 8007ba8:	9b04      	ldr	r3, [sp, #16]
 8007baa:	9a00      	ldr	r2, [sp, #0]
 8007bac:	1a9b      	subs	r3, r3, r2
 8007bae:	9304      	str	r3, [sp, #16]
 8007bb0:	4253      	negs	r3, r2
 8007bb2:	9307      	str	r3, [sp, #28]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	930a      	str	r3, [sp, #40]	; 0x28
 8007bb8:	e7bf      	b.n	8007b3a <_dtoa_r+0x1da>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9308      	str	r3, [sp, #32]
 8007bbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	dc55      	bgt.n	8007c70 <_dtoa_r+0x310>
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	9209      	str	r2, [sp, #36]	; 0x24
 8007bce:	e00c      	b.n	8007bea <_dtoa_r+0x28a>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e7f3      	b.n	8007bbc <_dtoa_r+0x25c>
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd8:	9308      	str	r3, [sp, #32]
 8007bda:	9b00      	ldr	r3, [sp, #0]
 8007bdc:	4413      	add	r3, r2
 8007bde:	9302      	str	r3, [sp, #8]
 8007be0:	3301      	adds	r3, #1
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	9303      	str	r3, [sp, #12]
 8007be6:	bfb8      	it	lt
 8007be8:	2301      	movlt	r3, #1
 8007bea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007bec:	2200      	movs	r2, #0
 8007bee:	6042      	str	r2, [r0, #4]
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	f102 0614 	add.w	r6, r2, #20
 8007bf6:	429e      	cmp	r6, r3
 8007bf8:	6841      	ldr	r1, [r0, #4]
 8007bfa:	d93d      	bls.n	8007c78 <_dtoa_r+0x318>
 8007bfc:	4620      	mov	r0, r4
 8007bfe:	f000 fda3 	bl	8008748 <_Balloc>
 8007c02:	9001      	str	r0, [sp, #4]
 8007c04:	2800      	cmp	r0, #0
 8007c06:	d13b      	bne.n	8007c80 <_dtoa_r+0x320>
 8007c08:	4b11      	ldr	r3, [pc, #68]	; (8007c50 <_dtoa_r+0x2f0>)
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007c10:	e6c0      	b.n	8007994 <_dtoa_r+0x34>
 8007c12:	2301      	movs	r3, #1
 8007c14:	e7df      	b.n	8007bd6 <_dtoa_r+0x276>
 8007c16:	bf00      	nop
 8007c18:	636f4361 	.word	0x636f4361
 8007c1c:	3fd287a7 	.word	0x3fd287a7
 8007c20:	8b60c8b3 	.word	0x8b60c8b3
 8007c24:	3fc68a28 	.word	0x3fc68a28
 8007c28:	509f79fb 	.word	0x509f79fb
 8007c2c:	3fd34413 	.word	0x3fd34413
 8007c30:	08009a35 	.word	0x08009a35
 8007c34:	08009a4c 	.word	0x08009a4c
 8007c38:	7ff00000 	.word	0x7ff00000
 8007c3c:	08009a31 	.word	0x08009a31
 8007c40:	08009a28 	.word	0x08009a28
 8007c44:	08009a05 	.word	0x08009a05
 8007c48:	3ff80000 	.word	0x3ff80000
 8007c4c:	08009ba0 	.word	0x08009ba0
 8007c50:	08009aa7 	.word	0x08009aa7
 8007c54:	2501      	movs	r5, #1
 8007c56:	2300      	movs	r3, #0
 8007c58:	9306      	str	r3, [sp, #24]
 8007c5a:	9508      	str	r5, [sp, #32]
 8007c5c:	f04f 33ff 	mov.w	r3, #4294967295
 8007c60:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c64:	2200      	movs	r2, #0
 8007c66:	2312      	movs	r3, #18
 8007c68:	e7b0      	b.n	8007bcc <_dtoa_r+0x26c>
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	9308      	str	r3, [sp, #32]
 8007c6e:	e7f5      	b.n	8007c5c <_dtoa_r+0x2fc>
 8007c70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c72:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007c76:	e7b8      	b.n	8007bea <_dtoa_r+0x28a>
 8007c78:	3101      	adds	r1, #1
 8007c7a:	6041      	str	r1, [r0, #4]
 8007c7c:	0052      	lsls	r2, r2, #1
 8007c7e:	e7b8      	b.n	8007bf2 <_dtoa_r+0x292>
 8007c80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007c82:	9a01      	ldr	r2, [sp, #4]
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	9b03      	ldr	r3, [sp, #12]
 8007c88:	2b0e      	cmp	r3, #14
 8007c8a:	f200 809d 	bhi.w	8007dc8 <_dtoa_r+0x468>
 8007c8e:	2d00      	cmp	r5, #0
 8007c90:	f000 809a 	beq.w	8007dc8 <_dtoa_r+0x468>
 8007c94:	9b00      	ldr	r3, [sp, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	dd32      	ble.n	8007d00 <_dtoa_r+0x3a0>
 8007c9a:	4ab7      	ldr	r2, [pc, #732]	; (8007f78 <_dtoa_r+0x618>)
 8007c9c:	f003 030f 	and.w	r3, r3, #15
 8007ca0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ca4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ca8:	9b00      	ldr	r3, [sp, #0]
 8007caa:	05d8      	lsls	r0, r3, #23
 8007cac:	ea4f 1723 	mov.w	r7, r3, asr #4
 8007cb0:	d516      	bpl.n	8007ce0 <_dtoa_r+0x380>
 8007cb2:	4bb2      	ldr	r3, [pc, #712]	; (8007f7c <_dtoa_r+0x61c>)
 8007cb4:	ec51 0b19 	vmov	r0, r1, d9
 8007cb8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007cbc:	f7f8 fdee 	bl	800089c <__aeabi_ddiv>
 8007cc0:	f007 070f 	and.w	r7, r7, #15
 8007cc4:	4682      	mov	sl, r0
 8007cc6:	468b      	mov	fp, r1
 8007cc8:	2503      	movs	r5, #3
 8007cca:	4eac      	ldr	r6, [pc, #688]	; (8007f7c <_dtoa_r+0x61c>)
 8007ccc:	b957      	cbnz	r7, 8007ce4 <_dtoa_r+0x384>
 8007cce:	4642      	mov	r2, r8
 8007cd0:	464b      	mov	r3, r9
 8007cd2:	4650      	mov	r0, sl
 8007cd4:	4659      	mov	r1, fp
 8007cd6:	f7f8 fde1 	bl	800089c <__aeabi_ddiv>
 8007cda:	4682      	mov	sl, r0
 8007cdc:	468b      	mov	fp, r1
 8007cde:	e028      	b.n	8007d32 <_dtoa_r+0x3d2>
 8007ce0:	2502      	movs	r5, #2
 8007ce2:	e7f2      	b.n	8007cca <_dtoa_r+0x36a>
 8007ce4:	07f9      	lsls	r1, r7, #31
 8007ce6:	d508      	bpl.n	8007cfa <_dtoa_r+0x39a>
 8007ce8:	4640      	mov	r0, r8
 8007cea:	4649      	mov	r1, r9
 8007cec:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007cf0:	f7f8 fcaa 	bl	8000648 <__aeabi_dmul>
 8007cf4:	3501      	adds	r5, #1
 8007cf6:	4680      	mov	r8, r0
 8007cf8:	4689      	mov	r9, r1
 8007cfa:	107f      	asrs	r7, r7, #1
 8007cfc:	3608      	adds	r6, #8
 8007cfe:	e7e5      	b.n	8007ccc <_dtoa_r+0x36c>
 8007d00:	f000 809b 	beq.w	8007e3a <_dtoa_r+0x4da>
 8007d04:	9b00      	ldr	r3, [sp, #0]
 8007d06:	4f9d      	ldr	r7, [pc, #628]	; (8007f7c <_dtoa_r+0x61c>)
 8007d08:	425e      	negs	r6, r3
 8007d0a:	4b9b      	ldr	r3, [pc, #620]	; (8007f78 <_dtoa_r+0x618>)
 8007d0c:	f006 020f 	and.w	r2, r6, #15
 8007d10:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d18:	ec51 0b19 	vmov	r0, r1, d9
 8007d1c:	f7f8 fc94 	bl	8000648 <__aeabi_dmul>
 8007d20:	1136      	asrs	r6, r6, #4
 8007d22:	4682      	mov	sl, r0
 8007d24:	468b      	mov	fp, r1
 8007d26:	2300      	movs	r3, #0
 8007d28:	2502      	movs	r5, #2
 8007d2a:	2e00      	cmp	r6, #0
 8007d2c:	d17a      	bne.n	8007e24 <_dtoa_r+0x4c4>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d1d3      	bne.n	8007cda <_dtoa_r+0x37a>
 8007d32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	f000 8082 	beq.w	8007e3e <_dtoa_r+0x4de>
 8007d3a:	4b91      	ldr	r3, [pc, #580]	; (8007f80 <_dtoa_r+0x620>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	4650      	mov	r0, sl
 8007d40:	4659      	mov	r1, fp
 8007d42:	f7f8 fef3 	bl	8000b2c <__aeabi_dcmplt>
 8007d46:	2800      	cmp	r0, #0
 8007d48:	d079      	beq.n	8007e3e <_dtoa_r+0x4de>
 8007d4a:	9b03      	ldr	r3, [sp, #12]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d076      	beq.n	8007e3e <_dtoa_r+0x4de>
 8007d50:	9b02      	ldr	r3, [sp, #8]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	dd36      	ble.n	8007dc4 <_dtoa_r+0x464>
 8007d56:	9b00      	ldr	r3, [sp, #0]
 8007d58:	4650      	mov	r0, sl
 8007d5a:	4659      	mov	r1, fp
 8007d5c:	1e5f      	subs	r7, r3, #1
 8007d5e:	2200      	movs	r2, #0
 8007d60:	4b88      	ldr	r3, [pc, #544]	; (8007f84 <_dtoa_r+0x624>)
 8007d62:	f7f8 fc71 	bl	8000648 <__aeabi_dmul>
 8007d66:	9e02      	ldr	r6, [sp, #8]
 8007d68:	4682      	mov	sl, r0
 8007d6a:	468b      	mov	fp, r1
 8007d6c:	3501      	adds	r5, #1
 8007d6e:	4628      	mov	r0, r5
 8007d70:	f7f8 fc00 	bl	8000574 <__aeabi_i2d>
 8007d74:	4652      	mov	r2, sl
 8007d76:	465b      	mov	r3, fp
 8007d78:	f7f8 fc66 	bl	8000648 <__aeabi_dmul>
 8007d7c:	4b82      	ldr	r3, [pc, #520]	; (8007f88 <_dtoa_r+0x628>)
 8007d7e:	2200      	movs	r2, #0
 8007d80:	f7f8 faac 	bl	80002dc <__adddf3>
 8007d84:	46d0      	mov	r8, sl
 8007d86:	46d9      	mov	r9, fp
 8007d88:	4682      	mov	sl, r0
 8007d8a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8007d8e:	2e00      	cmp	r6, #0
 8007d90:	d158      	bne.n	8007e44 <_dtoa_r+0x4e4>
 8007d92:	4b7e      	ldr	r3, [pc, #504]	; (8007f8c <_dtoa_r+0x62c>)
 8007d94:	2200      	movs	r2, #0
 8007d96:	4640      	mov	r0, r8
 8007d98:	4649      	mov	r1, r9
 8007d9a:	f7f8 fa9d 	bl	80002d8 <__aeabi_dsub>
 8007d9e:	4652      	mov	r2, sl
 8007da0:	465b      	mov	r3, fp
 8007da2:	4680      	mov	r8, r0
 8007da4:	4689      	mov	r9, r1
 8007da6:	f7f8 fedf 	bl	8000b68 <__aeabi_dcmpgt>
 8007daa:	2800      	cmp	r0, #0
 8007dac:	f040 8295 	bne.w	80082da <_dtoa_r+0x97a>
 8007db0:	4652      	mov	r2, sl
 8007db2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007db6:	4640      	mov	r0, r8
 8007db8:	4649      	mov	r1, r9
 8007dba:	f7f8 feb7 	bl	8000b2c <__aeabi_dcmplt>
 8007dbe:	2800      	cmp	r0, #0
 8007dc0:	f040 8289 	bne.w	80082d6 <_dtoa_r+0x976>
 8007dc4:	ec5b ab19 	vmov	sl, fp, d9
 8007dc8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f2c0 8148 	blt.w	8008060 <_dtoa_r+0x700>
 8007dd0:	9a00      	ldr	r2, [sp, #0]
 8007dd2:	2a0e      	cmp	r2, #14
 8007dd4:	f300 8144 	bgt.w	8008060 <_dtoa_r+0x700>
 8007dd8:	4b67      	ldr	r3, [pc, #412]	; (8007f78 <_dtoa_r+0x618>)
 8007dda:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dde:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007de2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	f280 80d5 	bge.w	8007f94 <_dtoa_r+0x634>
 8007dea:	9b03      	ldr	r3, [sp, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	f300 80d1 	bgt.w	8007f94 <_dtoa_r+0x634>
 8007df2:	f040 826f 	bne.w	80082d4 <_dtoa_r+0x974>
 8007df6:	4b65      	ldr	r3, [pc, #404]	; (8007f8c <_dtoa_r+0x62c>)
 8007df8:	2200      	movs	r2, #0
 8007dfa:	4640      	mov	r0, r8
 8007dfc:	4649      	mov	r1, r9
 8007dfe:	f7f8 fc23 	bl	8000648 <__aeabi_dmul>
 8007e02:	4652      	mov	r2, sl
 8007e04:	465b      	mov	r3, fp
 8007e06:	f7f8 fea5 	bl	8000b54 <__aeabi_dcmpge>
 8007e0a:	9e03      	ldr	r6, [sp, #12]
 8007e0c:	4637      	mov	r7, r6
 8007e0e:	2800      	cmp	r0, #0
 8007e10:	f040 8245 	bne.w	800829e <_dtoa_r+0x93e>
 8007e14:	9d01      	ldr	r5, [sp, #4]
 8007e16:	2331      	movs	r3, #49	; 0x31
 8007e18:	f805 3b01 	strb.w	r3, [r5], #1
 8007e1c:	9b00      	ldr	r3, [sp, #0]
 8007e1e:	3301      	adds	r3, #1
 8007e20:	9300      	str	r3, [sp, #0]
 8007e22:	e240      	b.n	80082a6 <_dtoa_r+0x946>
 8007e24:	07f2      	lsls	r2, r6, #31
 8007e26:	d505      	bpl.n	8007e34 <_dtoa_r+0x4d4>
 8007e28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007e2c:	f7f8 fc0c 	bl	8000648 <__aeabi_dmul>
 8007e30:	3501      	adds	r5, #1
 8007e32:	2301      	movs	r3, #1
 8007e34:	1076      	asrs	r6, r6, #1
 8007e36:	3708      	adds	r7, #8
 8007e38:	e777      	b.n	8007d2a <_dtoa_r+0x3ca>
 8007e3a:	2502      	movs	r5, #2
 8007e3c:	e779      	b.n	8007d32 <_dtoa_r+0x3d2>
 8007e3e:	9f00      	ldr	r7, [sp, #0]
 8007e40:	9e03      	ldr	r6, [sp, #12]
 8007e42:	e794      	b.n	8007d6e <_dtoa_r+0x40e>
 8007e44:	9901      	ldr	r1, [sp, #4]
 8007e46:	4b4c      	ldr	r3, [pc, #304]	; (8007f78 <_dtoa_r+0x618>)
 8007e48:	4431      	add	r1, r6
 8007e4a:	910d      	str	r1, [sp, #52]	; 0x34
 8007e4c:	9908      	ldr	r1, [sp, #32]
 8007e4e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8007e52:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e56:	2900      	cmp	r1, #0
 8007e58:	d043      	beq.n	8007ee2 <_dtoa_r+0x582>
 8007e5a:	494d      	ldr	r1, [pc, #308]	; (8007f90 <_dtoa_r+0x630>)
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f7f8 fd1d 	bl	800089c <__aeabi_ddiv>
 8007e62:	4652      	mov	r2, sl
 8007e64:	465b      	mov	r3, fp
 8007e66:	f7f8 fa37 	bl	80002d8 <__aeabi_dsub>
 8007e6a:	9d01      	ldr	r5, [sp, #4]
 8007e6c:	4682      	mov	sl, r0
 8007e6e:	468b      	mov	fp, r1
 8007e70:	4649      	mov	r1, r9
 8007e72:	4640      	mov	r0, r8
 8007e74:	f7f8 fe98 	bl	8000ba8 <__aeabi_d2iz>
 8007e78:	4606      	mov	r6, r0
 8007e7a:	f7f8 fb7b 	bl	8000574 <__aeabi_i2d>
 8007e7e:	4602      	mov	r2, r0
 8007e80:	460b      	mov	r3, r1
 8007e82:	4640      	mov	r0, r8
 8007e84:	4649      	mov	r1, r9
 8007e86:	f7f8 fa27 	bl	80002d8 <__aeabi_dsub>
 8007e8a:	3630      	adds	r6, #48	; 0x30
 8007e8c:	f805 6b01 	strb.w	r6, [r5], #1
 8007e90:	4652      	mov	r2, sl
 8007e92:	465b      	mov	r3, fp
 8007e94:	4680      	mov	r8, r0
 8007e96:	4689      	mov	r9, r1
 8007e98:	f7f8 fe48 	bl	8000b2c <__aeabi_dcmplt>
 8007e9c:	2800      	cmp	r0, #0
 8007e9e:	d163      	bne.n	8007f68 <_dtoa_r+0x608>
 8007ea0:	4642      	mov	r2, r8
 8007ea2:	464b      	mov	r3, r9
 8007ea4:	4936      	ldr	r1, [pc, #216]	; (8007f80 <_dtoa_r+0x620>)
 8007ea6:	2000      	movs	r0, #0
 8007ea8:	f7f8 fa16 	bl	80002d8 <__aeabi_dsub>
 8007eac:	4652      	mov	r2, sl
 8007eae:	465b      	mov	r3, fp
 8007eb0:	f7f8 fe3c 	bl	8000b2c <__aeabi_dcmplt>
 8007eb4:	2800      	cmp	r0, #0
 8007eb6:	f040 80b5 	bne.w	8008024 <_dtoa_r+0x6c4>
 8007eba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007ebc:	429d      	cmp	r5, r3
 8007ebe:	d081      	beq.n	8007dc4 <_dtoa_r+0x464>
 8007ec0:	4b30      	ldr	r3, [pc, #192]	; (8007f84 <_dtoa_r+0x624>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	4650      	mov	r0, sl
 8007ec6:	4659      	mov	r1, fp
 8007ec8:	f7f8 fbbe 	bl	8000648 <__aeabi_dmul>
 8007ecc:	4b2d      	ldr	r3, [pc, #180]	; (8007f84 <_dtoa_r+0x624>)
 8007ece:	4682      	mov	sl, r0
 8007ed0:	468b      	mov	fp, r1
 8007ed2:	4640      	mov	r0, r8
 8007ed4:	4649      	mov	r1, r9
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	f7f8 fbb6 	bl	8000648 <__aeabi_dmul>
 8007edc:	4680      	mov	r8, r0
 8007ede:	4689      	mov	r9, r1
 8007ee0:	e7c6      	b.n	8007e70 <_dtoa_r+0x510>
 8007ee2:	4650      	mov	r0, sl
 8007ee4:	4659      	mov	r1, fp
 8007ee6:	f7f8 fbaf 	bl	8000648 <__aeabi_dmul>
 8007eea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007eec:	9d01      	ldr	r5, [sp, #4]
 8007eee:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ef0:	4682      	mov	sl, r0
 8007ef2:	468b      	mov	fp, r1
 8007ef4:	4649      	mov	r1, r9
 8007ef6:	4640      	mov	r0, r8
 8007ef8:	f7f8 fe56 	bl	8000ba8 <__aeabi_d2iz>
 8007efc:	4606      	mov	r6, r0
 8007efe:	f7f8 fb39 	bl	8000574 <__aeabi_i2d>
 8007f02:	3630      	adds	r6, #48	; 0x30
 8007f04:	4602      	mov	r2, r0
 8007f06:	460b      	mov	r3, r1
 8007f08:	4640      	mov	r0, r8
 8007f0a:	4649      	mov	r1, r9
 8007f0c:	f7f8 f9e4 	bl	80002d8 <__aeabi_dsub>
 8007f10:	f805 6b01 	strb.w	r6, [r5], #1
 8007f14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007f16:	429d      	cmp	r5, r3
 8007f18:	4680      	mov	r8, r0
 8007f1a:	4689      	mov	r9, r1
 8007f1c:	f04f 0200 	mov.w	r2, #0
 8007f20:	d124      	bne.n	8007f6c <_dtoa_r+0x60c>
 8007f22:	4b1b      	ldr	r3, [pc, #108]	; (8007f90 <_dtoa_r+0x630>)
 8007f24:	4650      	mov	r0, sl
 8007f26:	4659      	mov	r1, fp
 8007f28:	f7f8 f9d8 	bl	80002dc <__adddf3>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	460b      	mov	r3, r1
 8007f30:	4640      	mov	r0, r8
 8007f32:	4649      	mov	r1, r9
 8007f34:	f7f8 fe18 	bl	8000b68 <__aeabi_dcmpgt>
 8007f38:	2800      	cmp	r0, #0
 8007f3a:	d173      	bne.n	8008024 <_dtoa_r+0x6c4>
 8007f3c:	4652      	mov	r2, sl
 8007f3e:	465b      	mov	r3, fp
 8007f40:	4913      	ldr	r1, [pc, #76]	; (8007f90 <_dtoa_r+0x630>)
 8007f42:	2000      	movs	r0, #0
 8007f44:	f7f8 f9c8 	bl	80002d8 <__aeabi_dsub>
 8007f48:	4602      	mov	r2, r0
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	4640      	mov	r0, r8
 8007f4e:	4649      	mov	r1, r9
 8007f50:	f7f8 fdec 	bl	8000b2c <__aeabi_dcmplt>
 8007f54:	2800      	cmp	r0, #0
 8007f56:	f43f af35 	beq.w	8007dc4 <_dtoa_r+0x464>
 8007f5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007f5c:	1e6b      	subs	r3, r5, #1
 8007f5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007f60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007f64:	2b30      	cmp	r3, #48	; 0x30
 8007f66:	d0f8      	beq.n	8007f5a <_dtoa_r+0x5fa>
 8007f68:	9700      	str	r7, [sp, #0]
 8007f6a:	e049      	b.n	8008000 <_dtoa_r+0x6a0>
 8007f6c:	4b05      	ldr	r3, [pc, #20]	; (8007f84 <_dtoa_r+0x624>)
 8007f6e:	f7f8 fb6b 	bl	8000648 <__aeabi_dmul>
 8007f72:	4680      	mov	r8, r0
 8007f74:	4689      	mov	r9, r1
 8007f76:	e7bd      	b.n	8007ef4 <_dtoa_r+0x594>
 8007f78:	08009ba0 	.word	0x08009ba0
 8007f7c:	08009b78 	.word	0x08009b78
 8007f80:	3ff00000 	.word	0x3ff00000
 8007f84:	40240000 	.word	0x40240000
 8007f88:	401c0000 	.word	0x401c0000
 8007f8c:	40140000 	.word	0x40140000
 8007f90:	3fe00000 	.word	0x3fe00000
 8007f94:	9d01      	ldr	r5, [sp, #4]
 8007f96:	4656      	mov	r6, sl
 8007f98:	465f      	mov	r7, fp
 8007f9a:	4642      	mov	r2, r8
 8007f9c:	464b      	mov	r3, r9
 8007f9e:	4630      	mov	r0, r6
 8007fa0:	4639      	mov	r1, r7
 8007fa2:	f7f8 fc7b 	bl	800089c <__aeabi_ddiv>
 8007fa6:	f7f8 fdff 	bl	8000ba8 <__aeabi_d2iz>
 8007faa:	4682      	mov	sl, r0
 8007fac:	f7f8 fae2 	bl	8000574 <__aeabi_i2d>
 8007fb0:	4642      	mov	r2, r8
 8007fb2:	464b      	mov	r3, r9
 8007fb4:	f7f8 fb48 	bl	8000648 <__aeabi_dmul>
 8007fb8:	4602      	mov	r2, r0
 8007fba:	460b      	mov	r3, r1
 8007fbc:	4630      	mov	r0, r6
 8007fbe:	4639      	mov	r1, r7
 8007fc0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8007fc4:	f7f8 f988 	bl	80002d8 <__aeabi_dsub>
 8007fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8007fcc:	9e01      	ldr	r6, [sp, #4]
 8007fce:	9f03      	ldr	r7, [sp, #12]
 8007fd0:	1bae      	subs	r6, r5, r6
 8007fd2:	42b7      	cmp	r7, r6
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	d135      	bne.n	8008046 <_dtoa_r+0x6e6>
 8007fda:	f7f8 f97f 	bl	80002dc <__adddf3>
 8007fde:	4642      	mov	r2, r8
 8007fe0:	464b      	mov	r3, r9
 8007fe2:	4606      	mov	r6, r0
 8007fe4:	460f      	mov	r7, r1
 8007fe6:	f7f8 fdbf 	bl	8000b68 <__aeabi_dcmpgt>
 8007fea:	b9d0      	cbnz	r0, 8008022 <_dtoa_r+0x6c2>
 8007fec:	4642      	mov	r2, r8
 8007fee:	464b      	mov	r3, r9
 8007ff0:	4630      	mov	r0, r6
 8007ff2:	4639      	mov	r1, r7
 8007ff4:	f7f8 fd90 	bl	8000b18 <__aeabi_dcmpeq>
 8007ff8:	b110      	cbz	r0, 8008000 <_dtoa_r+0x6a0>
 8007ffa:	f01a 0f01 	tst.w	sl, #1
 8007ffe:	d110      	bne.n	8008022 <_dtoa_r+0x6c2>
 8008000:	4620      	mov	r0, r4
 8008002:	ee18 1a10 	vmov	r1, s16
 8008006:	f000 fbdf 	bl	80087c8 <_Bfree>
 800800a:	2300      	movs	r3, #0
 800800c:	9800      	ldr	r0, [sp, #0]
 800800e:	702b      	strb	r3, [r5, #0]
 8008010:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008012:	3001      	adds	r0, #1
 8008014:	6018      	str	r0, [r3, #0]
 8008016:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008018:	2b00      	cmp	r3, #0
 800801a:	f43f acf1 	beq.w	8007a00 <_dtoa_r+0xa0>
 800801e:	601d      	str	r5, [r3, #0]
 8008020:	e4ee      	b.n	8007a00 <_dtoa_r+0xa0>
 8008022:	9f00      	ldr	r7, [sp, #0]
 8008024:	462b      	mov	r3, r5
 8008026:	461d      	mov	r5, r3
 8008028:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800802c:	2a39      	cmp	r2, #57	; 0x39
 800802e:	d106      	bne.n	800803e <_dtoa_r+0x6de>
 8008030:	9a01      	ldr	r2, [sp, #4]
 8008032:	429a      	cmp	r2, r3
 8008034:	d1f7      	bne.n	8008026 <_dtoa_r+0x6c6>
 8008036:	9901      	ldr	r1, [sp, #4]
 8008038:	2230      	movs	r2, #48	; 0x30
 800803a:	3701      	adds	r7, #1
 800803c:	700a      	strb	r2, [r1, #0]
 800803e:	781a      	ldrb	r2, [r3, #0]
 8008040:	3201      	adds	r2, #1
 8008042:	701a      	strb	r2, [r3, #0]
 8008044:	e790      	b.n	8007f68 <_dtoa_r+0x608>
 8008046:	4ba6      	ldr	r3, [pc, #664]	; (80082e0 <_dtoa_r+0x980>)
 8008048:	2200      	movs	r2, #0
 800804a:	f7f8 fafd 	bl	8000648 <__aeabi_dmul>
 800804e:	2200      	movs	r2, #0
 8008050:	2300      	movs	r3, #0
 8008052:	4606      	mov	r6, r0
 8008054:	460f      	mov	r7, r1
 8008056:	f7f8 fd5f 	bl	8000b18 <__aeabi_dcmpeq>
 800805a:	2800      	cmp	r0, #0
 800805c:	d09d      	beq.n	8007f9a <_dtoa_r+0x63a>
 800805e:	e7cf      	b.n	8008000 <_dtoa_r+0x6a0>
 8008060:	9a08      	ldr	r2, [sp, #32]
 8008062:	2a00      	cmp	r2, #0
 8008064:	f000 80d7 	beq.w	8008216 <_dtoa_r+0x8b6>
 8008068:	9a06      	ldr	r2, [sp, #24]
 800806a:	2a01      	cmp	r2, #1
 800806c:	f300 80ba 	bgt.w	80081e4 <_dtoa_r+0x884>
 8008070:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008072:	2a00      	cmp	r2, #0
 8008074:	f000 80b2 	beq.w	80081dc <_dtoa_r+0x87c>
 8008078:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800807c:	9e07      	ldr	r6, [sp, #28]
 800807e:	9d04      	ldr	r5, [sp, #16]
 8008080:	9a04      	ldr	r2, [sp, #16]
 8008082:	441a      	add	r2, r3
 8008084:	9204      	str	r2, [sp, #16]
 8008086:	9a05      	ldr	r2, [sp, #20]
 8008088:	2101      	movs	r1, #1
 800808a:	441a      	add	r2, r3
 800808c:	4620      	mov	r0, r4
 800808e:	9205      	str	r2, [sp, #20]
 8008090:	f000 fc52 	bl	8008938 <__i2b>
 8008094:	4607      	mov	r7, r0
 8008096:	2d00      	cmp	r5, #0
 8008098:	dd0c      	ble.n	80080b4 <_dtoa_r+0x754>
 800809a:	9b05      	ldr	r3, [sp, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	dd09      	ble.n	80080b4 <_dtoa_r+0x754>
 80080a0:	42ab      	cmp	r3, r5
 80080a2:	9a04      	ldr	r2, [sp, #16]
 80080a4:	bfa8      	it	ge
 80080a6:	462b      	movge	r3, r5
 80080a8:	1ad2      	subs	r2, r2, r3
 80080aa:	9204      	str	r2, [sp, #16]
 80080ac:	9a05      	ldr	r2, [sp, #20]
 80080ae:	1aed      	subs	r5, r5, r3
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	9305      	str	r3, [sp, #20]
 80080b4:	9b07      	ldr	r3, [sp, #28]
 80080b6:	b31b      	cbz	r3, 8008100 <_dtoa_r+0x7a0>
 80080b8:	9b08      	ldr	r3, [sp, #32]
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	f000 80af 	beq.w	800821e <_dtoa_r+0x8be>
 80080c0:	2e00      	cmp	r6, #0
 80080c2:	dd13      	ble.n	80080ec <_dtoa_r+0x78c>
 80080c4:	4639      	mov	r1, r7
 80080c6:	4632      	mov	r2, r6
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 fcf5 	bl	8008ab8 <__pow5mult>
 80080ce:	ee18 2a10 	vmov	r2, s16
 80080d2:	4601      	mov	r1, r0
 80080d4:	4607      	mov	r7, r0
 80080d6:	4620      	mov	r0, r4
 80080d8:	f000 fc44 	bl	8008964 <__multiply>
 80080dc:	ee18 1a10 	vmov	r1, s16
 80080e0:	4680      	mov	r8, r0
 80080e2:	4620      	mov	r0, r4
 80080e4:	f000 fb70 	bl	80087c8 <_Bfree>
 80080e8:	ee08 8a10 	vmov	s16, r8
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	1b9a      	subs	r2, r3, r6
 80080f0:	d006      	beq.n	8008100 <_dtoa_r+0x7a0>
 80080f2:	ee18 1a10 	vmov	r1, s16
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 fcde 	bl	8008ab8 <__pow5mult>
 80080fc:	ee08 0a10 	vmov	s16, r0
 8008100:	2101      	movs	r1, #1
 8008102:	4620      	mov	r0, r4
 8008104:	f000 fc18 	bl	8008938 <__i2b>
 8008108:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800810a:	2b00      	cmp	r3, #0
 800810c:	4606      	mov	r6, r0
 800810e:	f340 8088 	ble.w	8008222 <_dtoa_r+0x8c2>
 8008112:	461a      	mov	r2, r3
 8008114:	4601      	mov	r1, r0
 8008116:	4620      	mov	r0, r4
 8008118:	f000 fcce 	bl	8008ab8 <__pow5mult>
 800811c:	9b06      	ldr	r3, [sp, #24]
 800811e:	2b01      	cmp	r3, #1
 8008120:	4606      	mov	r6, r0
 8008122:	f340 8081 	ble.w	8008228 <_dtoa_r+0x8c8>
 8008126:	f04f 0800 	mov.w	r8, #0
 800812a:	6933      	ldr	r3, [r6, #16]
 800812c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008130:	6918      	ldr	r0, [r3, #16]
 8008132:	f000 fbb1 	bl	8008898 <__hi0bits>
 8008136:	f1c0 0020 	rsb	r0, r0, #32
 800813a:	9b05      	ldr	r3, [sp, #20]
 800813c:	4418      	add	r0, r3
 800813e:	f010 001f 	ands.w	r0, r0, #31
 8008142:	f000 8092 	beq.w	800826a <_dtoa_r+0x90a>
 8008146:	f1c0 0320 	rsb	r3, r0, #32
 800814a:	2b04      	cmp	r3, #4
 800814c:	f340 808a 	ble.w	8008264 <_dtoa_r+0x904>
 8008150:	f1c0 001c 	rsb	r0, r0, #28
 8008154:	9b04      	ldr	r3, [sp, #16]
 8008156:	4403      	add	r3, r0
 8008158:	9304      	str	r3, [sp, #16]
 800815a:	9b05      	ldr	r3, [sp, #20]
 800815c:	4403      	add	r3, r0
 800815e:	4405      	add	r5, r0
 8008160:	9305      	str	r3, [sp, #20]
 8008162:	9b04      	ldr	r3, [sp, #16]
 8008164:	2b00      	cmp	r3, #0
 8008166:	dd07      	ble.n	8008178 <_dtoa_r+0x818>
 8008168:	ee18 1a10 	vmov	r1, s16
 800816c:	461a      	mov	r2, r3
 800816e:	4620      	mov	r0, r4
 8008170:	f000 fcfc 	bl	8008b6c <__lshift>
 8008174:	ee08 0a10 	vmov	s16, r0
 8008178:	9b05      	ldr	r3, [sp, #20]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dd05      	ble.n	800818a <_dtoa_r+0x82a>
 800817e:	4631      	mov	r1, r6
 8008180:	461a      	mov	r2, r3
 8008182:	4620      	mov	r0, r4
 8008184:	f000 fcf2 	bl	8008b6c <__lshift>
 8008188:	4606      	mov	r6, r0
 800818a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800818c:	2b00      	cmp	r3, #0
 800818e:	d06e      	beq.n	800826e <_dtoa_r+0x90e>
 8008190:	ee18 0a10 	vmov	r0, s16
 8008194:	4631      	mov	r1, r6
 8008196:	f000 fd59 	bl	8008c4c <__mcmp>
 800819a:	2800      	cmp	r0, #0
 800819c:	da67      	bge.n	800826e <_dtoa_r+0x90e>
 800819e:	9b00      	ldr	r3, [sp, #0]
 80081a0:	3b01      	subs	r3, #1
 80081a2:	ee18 1a10 	vmov	r1, s16
 80081a6:	9300      	str	r3, [sp, #0]
 80081a8:	220a      	movs	r2, #10
 80081aa:	2300      	movs	r3, #0
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 fb2d 	bl	800880c <__multadd>
 80081b2:	9b08      	ldr	r3, [sp, #32]
 80081b4:	ee08 0a10 	vmov	s16, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	f000 81b1 	beq.w	8008520 <_dtoa_r+0xbc0>
 80081be:	2300      	movs	r3, #0
 80081c0:	4639      	mov	r1, r7
 80081c2:	220a      	movs	r2, #10
 80081c4:	4620      	mov	r0, r4
 80081c6:	f000 fb21 	bl	800880c <__multadd>
 80081ca:	9b02      	ldr	r3, [sp, #8]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	4607      	mov	r7, r0
 80081d0:	f300 808e 	bgt.w	80082f0 <_dtoa_r+0x990>
 80081d4:	9b06      	ldr	r3, [sp, #24]
 80081d6:	2b02      	cmp	r3, #2
 80081d8:	dc51      	bgt.n	800827e <_dtoa_r+0x91e>
 80081da:	e089      	b.n	80082f0 <_dtoa_r+0x990>
 80081dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80081de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80081e2:	e74b      	b.n	800807c <_dtoa_r+0x71c>
 80081e4:	9b03      	ldr	r3, [sp, #12]
 80081e6:	1e5e      	subs	r6, r3, #1
 80081e8:	9b07      	ldr	r3, [sp, #28]
 80081ea:	42b3      	cmp	r3, r6
 80081ec:	bfbf      	itttt	lt
 80081ee:	9b07      	ldrlt	r3, [sp, #28]
 80081f0:	9607      	strlt	r6, [sp, #28]
 80081f2:	1af2      	sublt	r2, r6, r3
 80081f4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80081f6:	bfb6      	itet	lt
 80081f8:	189b      	addlt	r3, r3, r2
 80081fa:	1b9e      	subge	r6, r3, r6
 80081fc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80081fe:	9b03      	ldr	r3, [sp, #12]
 8008200:	bfb8      	it	lt
 8008202:	2600      	movlt	r6, #0
 8008204:	2b00      	cmp	r3, #0
 8008206:	bfb7      	itett	lt
 8008208:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800820c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008210:	1a9d      	sublt	r5, r3, r2
 8008212:	2300      	movlt	r3, #0
 8008214:	e734      	b.n	8008080 <_dtoa_r+0x720>
 8008216:	9e07      	ldr	r6, [sp, #28]
 8008218:	9d04      	ldr	r5, [sp, #16]
 800821a:	9f08      	ldr	r7, [sp, #32]
 800821c:	e73b      	b.n	8008096 <_dtoa_r+0x736>
 800821e:	9a07      	ldr	r2, [sp, #28]
 8008220:	e767      	b.n	80080f2 <_dtoa_r+0x792>
 8008222:	9b06      	ldr	r3, [sp, #24]
 8008224:	2b01      	cmp	r3, #1
 8008226:	dc18      	bgt.n	800825a <_dtoa_r+0x8fa>
 8008228:	f1ba 0f00 	cmp.w	sl, #0
 800822c:	d115      	bne.n	800825a <_dtoa_r+0x8fa>
 800822e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008232:	b993      	cbnz	r3, 800825a <_dtoa_r+0x8fa>
 8008234:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008238:	0d1b      	lsrs	r3, r3, #20
 800823a:	051b      	lsls	r3, r3, #20
 800823c:	b183      	cbz	r3, 8008260 <_dtoa_r+0x900>
 800823e:	9b04      	ldr	r3, [sp, #16]
 8008240:	3301      	adds	r3, #1
 8008242:	9304      	str	r3, [sp, #16]
 8008244:	9b05      	ldr	r3, [sp, #20]
 8008246:	3301      	adds	r3, #1
 8008248:	9305      	str	r3, [sp, #20]
 800824a:	f04f 0801 	mov.w	r8, #1
 800824e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008250:	2b00      	cmp	r3, #0
 8008252:	f47f af6a 	bne.w	800812a <_dtoa_r+0x7ca>
 8008256:	2001      	movs	r0, #1
 8008258:	e76f      	b.n	800813a <_dtoa_r+0x7da>
 800825a:	f04f 0800 	mov.w	r8, #0
 800825e:	e7f6      	b.n	800824e <_dtoa_r+0x8ee>
 8008260:	4698      	mov	r8, r3
 8008262:	e7f4      	b.n	800824e <_dtoa_r+0x8ee>
 8008264:	f43f af7d 	beq.w	8008162 <_dtoa_r+0x802>
 8008268:	4618      	mov	r0, r3
 800826a:	301c      	adds	r0, #28
 800826c:	e772      	b.n	8008154 <_dtoa_r+0x7f4>
 800826e:	9b03      	ldr	r3, [sp, #12]
 8008270:	2b00      	cmp	r3, #0
 8008272:	dc37      	bgt.n	80082e4 <_dtoa_r+0x984>
 8008274:	9b06      	ldr	r3, [sp, #24]
 8008276:	2b02      	cmp	r3, #2
 8008278:	dd34      	ble.n	80082e4 <_dtoa_r+0x984>
 800827a:	9b03      	ldr	r3, [sp, #12]
 800827c:	9302      	str	r3, [sp, #8]
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	b96b      	cbnz	r3, 800829e <_dtoa_r+0x93e>
 8008282:	4631      	mov	r1, r6
 8008284:	2205      	movs	r2, #5
 8008286:	4620      	mov	r0, r4
 8008288:	f000 fac0 	bl	800880c <__multadd>
 800828c:	4601      	mov	r1, r0
 800828e:	4606      	mov	r6, r0
 8008290:	ee18 0a10 	vmov	r0, s16
 8008294:	f000 fcda 	bl	8008c4c <__mcmp>
 8008298:	2800      	cmp	r0, #0
 800829a:	f73f adbb 	bgt.w	8007e14 <_dtoa_r+0x4b4>
 800829e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80082a0:	9d01      	ldr	r5, [sp, #4]
 80082a2:	43db      	mvns	r3, r3
 80082a4:	9300      	str	r3, [sp, #0]
 80082a6:	f04f 0800 	mov.w	r8, #0
 80082aa:	4631      	mov	r1, r6
 80082ac:	4620      	mov	r0, r4
 80082ae:	f000 fa8b 	bl	80087c8 <_Bfree>
 80082b2:	2f00      	cmp	r7, #0
 80082b4:	f43f aea4 	beq.w	8008000 <_dtoa_r+0x6a0>
 80082b8:	f1b8 0f00 	cmp.w	r8, #0
 80082bc:	d005      	beq.n	80082ca <_dtoa_r+0x96a>
 80082be:	45b8      	cmp	r8, r7
 80082c0:	d003      	beq.n	80082ca <_dtoa_r+0x96a>
 80082c2:	4641      	mov	r1, r8
 80082c4:	4620      	mov	r0, r4
 80082c6:	f000 fa7f 	bl	80087c8 <_Bfree>
 80082ca:	4639      	mov	r1, r7
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 fa7b 	bl	80087c8 <_Bfree>
 80082d2:	e695      	b.n	8008000 <_dtoa_r+0x6a0>
 80082d4:	2600      	movs	r6, #0
 80082d6:	4637      	mov	r7, r6
 80082d8:	e7e1      	b.n	800829e <_dtoa_r+0x93e>
 80082da:	9700      	str	r7, [sp, #0]
 80082dc:	4637      	mov	r7, r6
 80082de:	e599      	b.n	8007e14 <_dtoa_r+0x4b4>
 80082e0:	40240000 	.word	0x40240000
 80082e4:	9b08      	ldr	r3, [sp, #32]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80ca 	beq.w	8008480 <_dtoa_r+0xb20>
 80082ec:	9b03      	ldr	r3, [sp, #12]
 80082ee:	9302      	str	r3, [sp, #8]
 80082f0:	2d00      	cmp	r5, #0
 80082f2:	dd05      	ble.n	8008300 <_dtoa_r+0x9a0>
 80082f4:	4639      	mov	r1, r7
 80082f6:	462a      	mov	r2, r5
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 fc37 	bl	8008b6c <__lshift>
 80082fe:	4607      	mov	r7, r0
 8008300:	f1b8 0f00 	cmp.w	r8, #0
 8008304:	d05b      	beq.n	80083be <_dtoa_r+0xa5e>
 8008306:	6879      	ldr	r1, [r7, #4]
 8008308:	4620      	mov	r0, r4
 800830a:	f000 fa1d 	bl	8008748 <_Balloc>
 800830e:	4605      	mov	r5, r0
 8008310:	b928      	cbnz	r0, 800831e <_dtoa_r+0x9be>
 8008312:	4b87      	ldr	r3, [pc, #540]	; (8008530 <_dtoa_r+0xbd0>)
 8008314:	4602      	mov	r2, r0
 8008316:	f240 21ea 	movw	r1, #746	; 0x2ea
 800831a:	f7ff bb3b 	b.w	8007994 <_dtoa_r+0x34>
 800831e:	693a      	ldr	r2, [r7, #16]
 8008320:	3202      	adds	r2, #2
 8008322:	0092      	lsls	r2, r2, #2
 8008324:	f107 010c 	add.w	r1, r7, #12
 8008328:	300c      	adds	r0, #12
 800832a:	f7fe fdf5 	bl	8006f18 <memcpy>
 800832e:	2201      	movs	r2, #1
 8008330:	4629      	mov	r1, r5
 8008332:	4620      	mov	r0, r4
 8008334:	f000 fc1a 	bl	8008b6c <__lshift>
 8008338:	9b01      	ldr	r3, [sp, #4]
 800833a:	f103 0901 	add.w	r9, r3, #1
 800833e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008342:	4413      	add	r3, r2
 8008344:	9305      	str	r3, [sp, #20]
 8008346:	f00a 0301 	and.w	r3, sl, #1
 800834a:	46b8      	mov	r8, r7
 800834c:	9304      	str	r3, [sp, #16]
 800834e:	4607      	mov	r7, r0
 8008350:	4631      	mov	r1, r6
 8008352:	ee18 0a10 	vmov	r0, s16
 8008356:	f7ff fa77 	bl	8007848 <quorem>
 800835a:	4641      	mov	r1, r8
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008362:	ee18 0a10 	vmov	r0, s16
 8008366:	f000 fc71 	bl	8008c4c <__mcmp>
 800836a:	463a      	mov	r2, r7
 800836c:	9003      	str	r0, [sp, #12]
 800836e:	4631      	mov	r1, r6
 8008370:	4620      	mov	r0, r4
 8008372:	f000 fc87 	bl	8008c84 <__mdiff>
 8008376:	68c2      	ldr	r2, [r0, #12]
 8008378:	f109 3bff 	add.w	fp, r9, #4294967295
 800837c:	4605      	mov	r5, r0
 800837e:	bb02      	cbnz	r2, 80083c2 <_dtoa_r+0xa62>
 8008380:	4601      	mov	r1, r0
 8008382:	ee18 0a10 	vmov	r0, s16
 8008386:	f000 fc61 	bl	8008c4c <__mcmp>
 800838a:	4602      	mov	r2, r0
 800838c:	4629      	mov	r1, r5
 800838e:	4620      	mov	r0, r4
 8008390:	9207      	str	r2, [sp, #28]
 8008392:	f000 fa19 	bl	80087c8 <_Bfree>
 8008396:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800839a:	ea43 0102 	orr.w	r1, r3, r2
 800839e:	9b04      	ldr	r3, [sp, #16]
 80083a0:	430b      	orrs	r3, r1
 80083a2:	464d      	mov	r5, r9
 80083a4:	d10f      	bne.n	80083c6 <_dtoa_r+0xa66>
 80083a6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80083aa:	d02a      	beq.n	8008402 <_dtoa_r+0xaa2>
 80083ac:	9b03      	ldr	r3, [sp, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dd02      	ble.n	80083b8 <_dtoa_r+0xa58>
 80083b2:	9b02      	ldr	r3, [sp, #8]
 80083b4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80083b8:	f88b a000 	strb.w	sl, [fp]
 80083bc:	e775      	b.n	80082aa <_dtoa_r+0x94a>
 80083be:	4638      	mov	r0, r7
 80083c0:	e7ba      	b.n	8008338 <_dtoa_r+0x9d8>
 80083c2:	2201      	movs	r2, #1
 80083c4:	e7e2      	b.n	800838c <_dtoa_r+0xa2c>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	db04      	blt.n	80083d6 <_dtoa_r+0xa76>
 80083cc:	9906      	ldr	r1, [sp, #24]
 80083ce:	430b      	orrs	r3, r1
 80083d0:	9904      	ldr	r1, [sp, #16]
 80083d2:	430b      	orrs	r3, r1
 80083d4:	d122      	bne.n	800841c <_dtoa_r+0xabc>
 80083d6:	2a00      	cmp	r2, #0
 80083d8:	ddee      	ble.n	80083b8 <_dtoa_r+0xa58>
 80083da:	ee18 1a10 	vmov	r1, s16
 80083de:	2201      	movs	r2, #1
 80083e0:	4620      	mov	r0, r4
 80083e2:	f000 fbc3 	bl	8008b6c <__lshift>
 80083e6:	4631      	mov	r1, r6
 80083e8:	ee08 0a10 	vmov	s16, r0
 80083ec:	f000 fc2e 	bl	8008c4c <__mcmp>
 80083f0:	2800      	cmp	r0, #0
 80083f2:	dc03      	bgt.n	80083fc <_dtoa_r+0xa9c>
 80083f4:	d1e0      	bne.n	80083b8 <_dtoa_r+0xa58>
 80083f6:	f01a 0f01 	tst.w	sl, #1
 80083fa:	d0dd      	beq.n	80083b8 <_dtoa_r+0xa58>
 80083fc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008400:	d1d7      	bne.n	80083b2 <_dtoa_r+0xa52>
 8008402:	2339      	movs	r3, #57	; 0x39
 8008404:	f88b 3000 	strb.w	r3, [fp]
 8008408:	462b      	mov	r3, r5
 800840a:	461d      	mov	r5, r3
 800840c:	3b01      	subs	r3, #1
 800840e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008412:	2a39      	cmp	r2, #57	; 0x39
 8008414:	d071      	beq.n	80084fa <_dtoa_r+0xb9a>
 8008416:	3201      	adds	r2, #1
 8008418:	701a      	strb	r2, [r3, #0]
 800841a:	e746      	b.n	80082aa <_dtoa_r+0x94a>
 800841c:	2a00      	cmp	r2, #0
 800841e:	dd07      	ble.n	8008430 <_dtoa_r+0xad0>
 8008420:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008424:	d0ed      	beq.n	8008402 <_dtoa_r+0xaa2>
 8008426:	f10a 0301 	add.w	r3, sl, #1
 800842a:	f88b 3000 	strb.w	r3, [fp]
 800842e:	e73c      	b.n	80082aa <_dtoa_r+0x94a>
 8008430:	9b05      	ldr	r3, [sp, #20]
 8008432:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008436:	4599      	cmp	r9, r3
 8008438:	d047      	beq.n	80084ca <_dtoa_r+0xb6a>
 800843a:	ee18 1a10 	vmov	r1, s16
 800843e:	2300      	movs	r3, #0
 8008440:	220a      	movs	r2, #10
 8008442:	4620      	mov	r0, r4
 8008444:	f000 f9e2 	bl	800880c <__multadd>
 8008448:	45b8      	cmp	r8, r7
 800844a:	ee08 0a10 	vmov	s16, r0
 800844e:	f04f 0300 	mov.w	r3, #0
 8008452:	f04f 020a 	mov.w	r2, #10
 8008456:	4641      	mov	r1, r8
 8008458:	4620      	mov	r0, r4
 800845a:	d106      	bne.n	800846a <_dtoa_r+0xb0a>
 800845c:	f000 f9d6 	bl	800880c <__multadd>
 8008460:	4680      	mov	r8, r0
 8008462:	4607      	mov	r7, r0
 8008464:	f109 0901 	add.w	r9, r9, #1
 8008468:	e772      	b.n	8008350 <_dtoa_r+0x9f0>
 800846a:	f000 f9cf 	bl	800880c <__multadd>
 800846e:	4639      	mov	r1, r7
 8008470:	4680      	mov	r8, r0
 8008472:	2300      	movs	r3, #0
 8008474:	220a      	movs	r2, #10
 8008476:	4620      	mov	r0, r4
 8008478:	f000 f9c8 	bl	800880c <__multadd>
 800847c:	4607      	mov	r7, r0
 800847e:	e7f1      	b.n	8008464 <_dtoa_r+0xb04>
 8008480:	9b03      	ldr	r3, [sp, #12]
 8008482:	9302      	str	r3, [sp, #8]
 8008484:	9d01      	ldr	r5, [sp, #4]
 8008486:	ee18 0a10 	vmov	r0, s16
 800848a:	4631      	mov	r1, r6
 800848c:	f7ff f9dc 	bl	8007848 <quorem>
 8008490:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008494:	9b01      	ldr	r3, [sp, #4]
 8008496:	f805 ab01 	strb.w	sl, [r5], #1
 800849a:	1aea      	subs	r2, r5, r3
 800849c:	9b02      	ldr	r3, [sp, #8]
 800849e:	4293      	cmp	r3, r2
 80084a0:	dd09      	ble.n	80084b6 <_dtoa_r+0xb56>
 80084a2:	ee18 1a10 	vmov	r1, s16
 80084a6:	2300      	movs	r3, #0
 80084a8:	220a      	movs	r2, #10
 80084aa:	4620      	mov	r0, r4
 80084ac:	f000 f9ae 	bl	800880c <__multadd>
 80084b0:	ee08 0a10 	vmov	s16, r0
 80084b4:	e7e7      	b.n	8008486 <_dtoa_r+0xb26>
 80084b6:	9b02      	ldr	r3, [sp, #8]
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	bfc8      	it	gt
 80084bc:	461d      	movgt	r5, r3
 80084be:	9b01      	ldr	r3, [sp, #4]
 80084c0:	bfd8      	it	le
 80084c2:	2501      	movle	r5, #1
 80084c4:	441d      	add	r5, r3
 80084c6:	f04f 0800 	mov.w	r8, #0
 80084ca:	ee18 1a10 	vmov	r1, s16
 80084ce:	2201      	movs	r2, #1
 80084d0:	4620      	mov	r0, r4
 80084d2:	f000 fb4b 	bl	8008b6c <__lshift>
 80084d6:	4631      	mov	r1, r6
 80084d8:	ee08 0a10 	vmov	s16, r0
 80084dc:	f000 fbb6 	bl	8008c4c <__mcmp>
 80084e0:	2800      	cmp	r0, #0
 80084e2:	dc91      	bgt.n	8008408 <_dtoa_r+0xaa8>
 80084e4:	d102      	bne.n	80084ec <_dtoa_r+0xb8c>
 80084e6:	f01a 0f01 	tst.w	sl, #1
 80084ea:	d18d      	bne.n	8008408 <_dtoa_r+0xaa8>
 80084ec:	462b      	mov	r3, r5
 80084ee:	461d      	mov	r5, r3
 80084f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80084f4:	2a30      	cmp	r2, #48	; 0x30
 80084f6:	d0fa      	beq.n	80084ee <_dtoa_r+0xb8e>
 80084f8:	e6d7      	b.n	80082aa <_dtoa_r+0x94a>
 80084fa:	9a01      	ldr	r2, [sp, #4]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d184      	bne.n	800840a <_dtoa_r+0xaaa>
 8008500:	9b00      	ldr	r3, [sp, #0]
 8008502:	3301      	adds	r3, #1
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	2331      	movs	r3, #49	; 0x31
 8008508:	7013      	strb	r3, [r2, #0]
 800850a:	e6ce      	b.n	80082aa <_dtoa_r+0x94a>
 800850c:	4b09      	ldr	r3, [pc, #36]	; (8008534 <_dtoa_r+0xbd4>)
 800850e:	f7ff ba95 	b.w	8007a3c <_dtoa_r+0xdc>
 8008512:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008514:	2b00      	cmp	r3, #0
 8008516:	f47f aa6e 	bne.w	80079f6 <_dtoa_r+0x96>
 800851a:	4b07      	ldr	r3, [pc, #28]	; (8008538 <_dtoa_r+0xbd8>)
 800851c:	f7ff ba8e 	b.w	8007a3c <_dtoa_r+0xdc>
 8008520:	9b02      	ldr	r3, [sp, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	dcae      	bgt.n	8008484 <_dtoa_r+0xb24>
 8008526:	9b06      	ldr	r3, [sp, #24]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f73f aea8 	bgt.w	800827e <_dtoa_r+0x91e>
 800852e:	e7a9      	b.n	8008484 <_dtoa_r+0xb24>
 8008530:	08009aa7 	.word	0x08009aa7
 8008534:	08009a04 	.word	0x08009a04
 8008538:	08009a28 	.word	0x08009a28

0800853c <std>:
 800853c:	2300      	movs	r3, #0
 800853e:	b510      	push	{r4, lr}
 8008540:	4604      	mov	r4, r0
 8008542:	e9c0 3300 	strd	r3, r3, [r0]
 8008546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800854a:	6083      	str	r3, [r0, #8]
 800854c:	8181      	strh	r1, [r0, #12]
 800854e:	6643      	str	r3, [r0, #100]	; 0x64
 8008550:	81c2      	strh	r2, [r0, #14]
 8008552:	6183      	str	r3, [r0, #24]
 8008554:	4619      	mov	r1, r3
 8008556:	2208      	movs	r2, #8
 8008558:	305c      	adds	r0, #92	; 0x5c
 800855a:	f7fe fceb 	bl	8006f34 <memset>
 800855e:	4b05      	ldr	r3, [pc, #20]	; (8008574 <std+0x38>)
 8008560:	6263      	str	r3, [r4, #36]	; 0x24
 8008562:	4b05      	ldr	r3, [pc, #20]	; (8008578 <std+0x3c>)
 8008564:	62a3      	str	r3, [r4, #40]	; 0x28
 8008566:	4b05      	ldr	r3, [pc, #20]	; (800857c <std+0x40>)
 8008568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800856a:	4b05      	ldr	r3, [pc, #20]	; (8008580 <std+0x44>)
 800856c:	6224      	str	r4, [r4, #32]
 800856e:	6323      	str	r3, [r4, #48]	; 0x30
 8008570:	bd10      	pop	{r4, pc}
 8008572:	bf00      	nop
 8008574:	08009311 	.word	0x08009311
 8008578:	08009333 	.word	0x08009333
 800857c:	0800936b 	.word	0x0800936b
 8008580:	0800938f 	.word	0x0800938f

08008584 <_cleanup_r>:
 8008584:	4901      	ldr	r1, [pc, #4]	; (800858c <_cleanup_r+0x8>)
 8008586:	f000 b8af 	b.w	80086e8 <_fwalk_reent>
 800858a:	bf00      	nop
 800858c:	080096a5 	.word	0x080096a5

08008590 <__sfmoreglue>:
 8008590:	b570      	push	{r4, r5, r6, lr}
 8008592:	2268      	movs	r2, #104	; 0x68
 8008594:	1e4d      	subs	r5, r1, #1
 8008596:	4355      	muls	r5, r2
 8008598:	460e      	mov	r6, r1
 800859a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800859e:	f000 fcd9 	bl	8008f54 <_malloc_r>
 80085a2:	4604      	mov	r4, r0
 80085a4:	b140      	cbz	r0, 80085b8 <__sfmoreglue+0x28>
 80085a6:	2100      	movs	r1, #0
 80085a8:	e9c0 1600 	strd	r1, r6, [r0]
 80085ac:	300c      	adds	r0, #12
 80085ae:	60a0      	str	r0, [r4, #8]
 80085b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80085b4:	f7fe fcbe 	bl	8006f34 <memset>
 80085b8:	4620      	mov	r0, r4
 80085ba:	bd70      	pop	{r4, r5, r6, pc}

080085bc <__sfp_lock_acquire>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__sfp_lock_acquire+0x8>)
 80085be:	f000 b8b8 	b.w	8008732 <__retarget_lock_acquire_recursive>
 80085c2:	bf00      	nop
 80085c4:	2000082d 	.word	0x2000082d

080085c8 <__sfp_lock_release>:
 80085c8:	4801      	ldr	r0, [pc, #4]	; (80085d0 <__sfp_lock_release+0x8>)
 80085ca:	f000 b8b3 	b.w	8008734 <__retarget_lock_release_recursive>
 80085ce:	bf00      	nop
 80085d0:	2000082d 	.word	0x2000082d

080085d4 <__sinit_lock_acquire>:
 80085d4:	4801      	ldr	r0, [pc, #4]	; (80085dc <__sinit_lock_acquire+0x8>)
 80085d6:	f000 b8ac 	b.w	8008732 <__retarget_lock_acquire_recursive>
 80085da:	bf00      	nop
 80085dc:	2000082e 	.word	0x2000082e

080085e0 <__sinit_lock_release>:
 80085e0:	4801      	ldr	r0, [pc, #4]	; (80085e8 <__sinit_lock_release+0x8>)
 80085e2:	f000 b8a7 	b.w	8008734 <__retarget_lock_release_recursive>
 80085e6:	bf00      	nop
 80085e8:	2000082e 	.word	0x2000082e

080085ec <__sinit>:
 80085ec:	b510      	push	{r4, lr}
 80085ee:	4604      	mov	r4, r0
 80085f0:	f7ff fff0 	bl	80085d4 <__sinit_lock_acquire>
 80085f4:	69a3      	ldr	r3, [r4, #24]
 80085f6:	b11b      	cbz	r3, 8008600 <__sinit+0x14>
 80085f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085fc:	f7ff bff0 	b.w	80085e0 <__sinit_lock_release>
 8008600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008604:	6523      	str	r3, [r4, #80]	; 0x50
 8008606:	4b13      	ldr	r3, [pc, #76]	; (8008654 <__sinit+0x68>)
 8008608:	4a13      	ldr	r2, [pc, #76]	; (8008658 <__sinit+0x6c>)
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	62a2      	str	r2, [r4, #40]	; 0x28
 800860e:	42a3      	cmp	r3, r4
 8008610:	bf04      	itt	eq
 8008612:	2301      	moveq	r3, #1
 8008614:	61a3      	streq	r3, [r4, #24]
 8008616:	4620      	mov	r0, r4
 8008618:	f000 f820 	bl	800865c <__sfp>
 800861c:	6060      	str	r0, [r4, #4]
 800861e:	4620      	mov	r0, r4
 8008620:	f000 f81c 	bl	800865c <__sfp>
 8008624:	60a0      	str	r0, [r4, #8]
 8008626:	4620      	mov	r0, r4
 8008628:	f000 f818 	bl	800865c <__sfp>
 800862c:	2200      	movs	r2, #0
 800862e:	60e0      	str	r0, [r4, #12]
 8008630:	2104      	movs	r1, #4
 8008632:	6860      	ldr	r0, [r4, #4]
 8008634:	f7ff ff82 	bl	800853c <std>
 8008638:	68a0      	ldr	r0, [r4, #8]
 800863a:	2201      	movs	r2, #1
 800863c:	2109      	movs	r1, #9
 800863e:	f7ff ff7d 	bl	800853c <std>
 8008642:	68e0      	ldr	r0, [r4, #12]
 8008644:	2202      	movs	r2, #2
 8008646:	2112      	movs	r1, #18
 8008648:	f7ff ff78 	bl	800853c <std>
 800864c:	2301      	movs	r3, #1
 800864e:	61a3      	str	r3, [r4, #24]
 8008650:	e7d2      	b.n	80085f8 <__sinit+0xc>
 8008652:	bf00      	nop
 8008654:	080099f0 	.word	0x080099f0
 8008658:	08008585 	.word	0x08008585

0800865c <__sfp>:
 800865c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800865e:	4607      	mov	r7, r0
 8008660:	f7ff ffac 	bl	80085bc <__sfp_lock_acquire>
 8008664:	4b1e      	ldr	r3, [pc, #120]	; (80086e0 <__sfp+0x84>)
 8008666:	681e      	ldr	r6, [r3, #0]
 8008668:	69b3      	ldr	r3, [r6, #24]
 800866a:	b913      	cbnz	r3, 8008672 <__sfp+0x16>
 800866c:	4630      	mov	r0, r6
 800866e:	f7ff ffbd 	bl	80085ec <__sinit>
 8008672:	3648      	adds	r6, #72	; 0x48
 8008674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008678:	3b01      	subs	r3, #1
 800867a:	d503      	bpl.n	8008684 <__sfp+0x28>
 800867c:	6833      	ldr	r3, [r6, #0]
 800867e:	b30b      	cbz	r3, 80086c4 <__sfp+0x68>
 8008680:	6836      	ldr	r6, [r6, #0]
 8008682:	e7f7      	b.n	8008674 <__sfp+0x18>
 8008684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008688:	b9d5      	cbnz	r5, 80086c0 <__sfp+0x64>
 800868a:	4b16      	ldr	r3, [pc, #88]	; (80086e4 <__sfp+0x88>)
 800868c:	60e3      	str	r3, [r4, #12]
 800868e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008692:	6665      	str	r5, [r4, #100]	; 0x64
 8008694:	f000 f84c 	bl	8008730 <__retarget_lock_init_recursive>
 8008698:	f7ff ff96 	bl	80085c8 <__sfp_lock_release>
 800869c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80086a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80086a4:	6025      	str	r5, [r4, #0]
 80086a6:	61a5      	str	r5, [r4, #24]
 80086a8:	2208      	movs	r2, #8
 80086aa:	4629      	mov	r1, r5
 80086ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80086b0:	f7fe fc40 	bl	8006f34 <memset>
 80086b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80086b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80086bc:	4620      	mov	r0, r4
 80086be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086c0:	3468      	adds	r4, #104	; 0x68
 80086c2:	e7d9      	b.n	8008678 <__sfp+0x1c>
 80086c4:	2104      	movs	r1, #4
 80086c6:	4638      	mov	r0, r7
 80086c8:	f7ff ff62 	bl	8008590 <__sfmoreglue>
 80086cc:	4604      	mov	r4, r0
 80086ce:	6030      	str	r0, [r6, #0]
 80086d0:	2800      	cmp	r0, #0
 80086d2:	d1d5      	bne.n	8008680 <__sfp+0x24>
 80086d4:	f7ff ff78 	bl	80085c8 <__sfp_lock_release>
 80086d8:	230c      	movs	r3, #12
 80086da:	603b      	str	r3, [r7, #0]
 80086dc:	e7ee      	b.n	80086bc <__sfp+0x60>
 80086de:	bf00      	nop
 80086e0:	080099f0 	.word	0x080099f0
 80086e4:	ffff0001 	.word	0xffff0001

080086e8 <_fwalk_reent>:
 80086e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086ec:	4606      	mov	r6, r0
 80086ee:	4688      	mov	r8, r1
 80086f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80086f4:	2700      	movs	r7, #0
 80086f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80086fa:	f1b9 0901 	subs.w	r9, r9, #1
 80086fe:	d505      	bpl.n	800870c <_fwalk_reent+0x24>
 8008700:	6824      	ldr	r4, [r4, #0]
 8008702:	2c00      	cmp	r4, #0
 8008704:	d1f7      	bne.n	80086f6 <_fwalk_reent+0xe>
 8008706:	4638      	mov	r0, r7
 8008708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800870c:	89ab      	ldrh	r3, [r5, #12]
 800870e:	2b01      	cmp	r3, #1
 8008710:	d907      	bls.n	8008722 <_fwalk_reent+0x3a>
 8008712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008716:	3301      	adds	r3, #1
 8008718:	d003      	beq.n	8008722 <_fwalk_reent+0x3a>
 800871a:	4629      	mov	r1, r5
 800871c:	4630      	mov	r0, r6
 800871e:	47c0      	blx	r8
 8008720:	4307      	orrs	r7, r0
 8008722:	3568      	adds	r5, #104	; 0x68
 8008724:	e7e9      	b.n	80086fa <_fwalk_reent+0x12>
	...

08008728 <_localeconv_r>:
 8008728:	4800      	ldr	r0, [pc, #0]	; (800872c <_localeconv_r+0x4>)
 800872a:	4770      	bx	lr
 800872c:	20000160 	.word	0x20000160

08008730 <__retarget_lock_init_recursive>:
 8008730:	4770      	bx	lr

08008732 <__retarget_lock_acquire_recursive>:
 8008732:	4770      	bx	lr

08008734 <__retarget_lock_release_recursive>:
 8008734:	4770      	bx	lr
	...

08008738 <malloc>:
 8008738:	4b02      	ldr	r3, [pc, #8]	; (8008744 <malloc+0xc>)
 800873a:	4601      	mov	r1, r0
 800873c:	6818      	ldr	r0, [r3, #0]
 800873e:	f000 bc09 	b.w	8008f54 <_malloc_r>
 8008742:	bf00      	nop
 8008744:	2000000c 	.word	0x2000000c

08008748 <_Balloc>:
 8008748:	b570      	push	{r4, r5, r6, lr}
 800874a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800874c:	4604      	mov	r4, r0
 800874e:	460d      	mov	r5, r1
 8008750:	b976      	cbnz	r6, 8008770 <_Balloc+0x28>
 8008752:	2010      	movs	r0, #16
 8008754:	f7ff fff0 	bl	8008738 <malloc>
 8008758:	4602      	mov	r2, r0
 800875a:	6260      	str	r0, [r4, #36]	; 0x24
 800875c:	b920      	cbnz	r0, 8008768 <_Balloc+0x20>
 800875e:	4b18      	ldr	r3, [pc, #96]	; (80087c0 <_Balloc+0x78>)
 8008760:	4818      	ldr	r0, [pc, #96]	; (80087c4 <_Balloc+0x7c>)
 8008762:	2166      	movs	r1, #102	; 0x66
 8008764:	f000 feea 	bl	800953c <__assert_func>
 8008768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800876c:	6006      	str	r6, [r0, #0]
 800876e:	60c6      	str	r6, [r0, #12]
 8008770:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008772:	68f3      	ldr	r3, [r6, #12]
 8008774:	b183      	cbz	r3, 8008798 <_Balloc+0x50>
 8008776:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008778:	68db      	ldr	r3, [r3, #12]
 800877a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800877e:	b9b8      	cbnz	r0, 80087b0 <_Balloc+0x68>
 8008780:	2101      	movs	r1, #1
 8008782:	fa01 f605 	lsl.w	r6, r1, r5
 8008786:	1d72      	adds	r2, r6, #5
 8008788:	0092      	lsls	r2, r2, #2
 800878a:	4620      	mov	r0, r4
 800878c:	f000 fb60 	bl	8008e50 <_calloc_r>
 8008790:	b160      	cbz	r0, 80087ac <_Balloc+0x64>
 8008792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008796:	e00e      	b.n	80087b6 <_Balloc+0x6e>
 8008798:	2221      	movs	r2, #33	; 0x21
 800879a:	2104      	movs	r1, #4
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fb57 	bl	8008e50 <_calloc_r>
 80087a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087a4:	60f0      	str	r0, [r6, #12]
 80087a6:	68db      	ldr	r3, [r3, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1e4      	bne.n	8008776 <_Balloc+0x2e>
 80087ac:	2000      	movs	r0, #0
 80087ae:	bd70      	pop	{r4, r5, r6, pc}
 80087b0:	6802      	ldr	r2, [r0, #0]
 80087b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087b6:	2300      	movs	r3, #0
 80087b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80087bc:	e7f7      	b.n	80087ae <_Balloc+0x66>
 80087be:	bf00      	nop
 80087c0:	08009a35 	.word	0x08009a35
 80087c4:	08009b18 	.word	0x08009b18

080087c8 <_Bfree>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80087cc:	4605      	mov	r5, r0
 80087ce:	460c      	mov	r4, r1
 80087d0:	b976      	cbnz	r6, 80087f0 <_Bfree+0x28>
 80087d2:	2010      	movs	r0, #16
 80087d4:	f7ff ffb0 	bl	8008738 <malloc>
 80087d8:	4602      	mov	r2, r0
 80087da:	6268      	str	r0, [r5, #36]	; 0x24
 80087dc:	b920      	cbnz	r0, 80087e8 <_Bfree+0x20>
 80087de:	4b09      	ldr	r3, [pc, #36]	; (8008804 <_Bfree+0x3c>)
 80087e0:	4809      	ldr	r0, [pc, #36]	; (8008808 <_Bfree+0x40>)
 80087e2:	218a      	movs	r1, #138	; 0x8a
 80087e4:	f000 feaa 	bl	800953c <__assert_func>
 80087e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087ec:	6006      	str	r6, [r0, #0]
 80087ee:	60c6      	str	r6, [r0, #12]
 80087f0:	b13c      	cbz	r4, 8008802 <_Bfree+0x3a>
 80087f2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80087f4:	6862      	ldr	r2, [r4, #4]
 80087f6:	68db      	ldr	r3, [r3, #12]
 80087f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80087fc:	6021      	str	r1, [r4, #0]
 80087fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008802:	bd70      	pop	{r4, r5, r6, pc}
 8008804:	08009a35 	.word	0x08009a35
 8008808:	08009b18 	.word	0x08009b18

0800880c <__multadd>:
 800880c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008810:	690d      	ldr	r5, [r1, #16]
 8008812:	4607      	mov	r7, r0
 8008814:	460c      	mov	r4, r1
 8008816:	461e      	mov	r6, r3
 8008818:	f101 0c14 	add.w	ip, r1, #20
 800881c:	2000      	movs	r0, #0
 800881e:	f8dc 3000 	ldr.w	r3, [ip]
 8008822:	b299      	uxth	r1, r3
 8008824:	fb02 6101 	mla	r1, r2, r1, r6
 8008828:	0c1e      	lsrs	r6, r3, #16
 800882a:	0c0b      	lsrs	r3, r1, #16
 800882c:	fb02 3306 	mla	r3, r2, r6, r3
 8008830:	b289      	uxth	r1, r1
 8008832:	3001      	adds	r0, #1
 8008834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008838:	4285      	cmp	r5, r0
 800883a:	f84c 1b04 	str.w	r1, [ip], #4
 800883e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008842:	dcec      	bgt.n	800881e <__multadd+0x12>
 8008844:	b30e      	cbz	r6, 800888a <__multadd+0x7e>
 8008846:	68a3      	ldr	r3, [r4, #8]
 8008848:	42ab      	cmp	r3, r5
 800884a:	dc19      	bgt.n	8008880 <__multadd+0x74>
 800884c:	6861      	ldr	r1, [r4, #4]
 800884e:	4638      	mov	r0, r7
 8008850:	3101      	adds	r1, #1
 8008852:	f7ff ff79 	bl	8008748 <_Balloc>
 8008856:	4680      	mov	r8, r0
 8008858:	b928      	cbnz	r0, 8008866 <__multadd+0x5a>
 800885a:	4602      	mov	r2, r0
 800885c:	4b0c      	ldr	r3, [pc, #48]	; (8008890 <__multadd+0x84>)
 800885e:	480d      	ldr	r0, [pc, #52]	; (8008894 <__multadd+0x88>)
 8008860:	21b5      	movs	r1, #181	; 0xb5
 8008862:	f000 fe6b 	bl	800953c <__assert_func>
 8008866:	6922      	ldr	r2, [r4, #16]
 8008868:	3202      	adds	r2, #2
 800886a:	f104 010c 	add.w	r1, r4, #12
 800886e:	0092      	lsls	r2, r2, #2
 8008870:	300c      	adds	r0, #12
 8008872:	f7fe fb51 	bl	8006f18 <memcpy>
 8008876:	4621      	mov	r1, r4
 8008878:	4638      	mov	r0, r7
 800887a:	f7ff ffa5 	bl	80087c8 <_Bfree>
 800887e:	4644      	mov	r4, r8
 8008880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008884:	3501      	adds	r5, #1
 8008886:	615e      	str	r6, [r3, #20]
 8008888:	6125      	str	r5, [r4, #16]
 800888a:	4620      	mov	r0, r4
 800888c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008890:	08009aa7 	.word	0x08009aa7
 8008894:	08009b18 	.word	0x08009b18

08008898 <__hi0bits>:
 8008898:	0c03      	lsrs	r3, r0, #16
 800889a:	041b      	lsls	r3, r3, #16
 800889c:	b9d3      	cbnz	r3, 80088d4 <__hi0bits+0x3c>
 800889e:	0400      	lsls	r0, r0, #16
 80088a0:	2310      	movs	r3, #16
 80088a2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80088a6:	bf04      	itt	eq
 80088a8:	0200      	lsleq	r0, r0, #8
 80088aa:	3308      	addeq	r3, #8
 80088ac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80088b0:	bf04      	itt	eq
 80088b2:	0100      	lsleq	r0, r0, #4
 80088b4:	3304      	addeq	r3, #4
 80088b6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80088ba:	bf04      	itt	eq
 80088bc:	0080      	lsleq	r0, r0, #2
 80088be:	3302      	addeq	r3, #2
 80088c0:	2800      	cmp	r0, #0
 80088c2:	db05      	blt.n	80088d0 <__hi0bits+0x38>
 80088c4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80088c8:	f103 0301 	add.w	r3, r3, #1
 80088cc:	bf08      	it	eq
 80088ce:	2320      	moveq	r3, #32
 80088d0:	4618      	mov	r0, r3
 80088d2:	4770      	bx	lr
 80088d4:	2300      	movs	r3, #0
 80088d6:	e7e4      	b.n	80088a2 <__hi0bits+0xa>

080088d8 <__lo0bits>:
 80088d8:	6803      	ldr	r3, [r0, #0]
 80088da:	f013 0207 	ands.w	r2, r3, #7
 80088de:	4601      	mov	r1, r0
 80088e0:	d00b      	beq.n	80088fa <__lo0bits+0x22>
 80088e2:	07da      	lsls	r2, r3, #31
 80088e4:	d423      	bmi.n	800892e <__lo0bits+0x56>
 80088e6:	0798      	lsls	r0, r3, #30
 80088e8:	bf49      	itett	mi
 80088ea:	085b      	lsrmi	r3, r3, #1
 80088ec:	089b      	lsrpl	r3, r3, #2
 80088ee:	2001      	movmi	r0, #1
 80088f0:	600b      	strmi	r3, [r1, #0]
 80088f2:	bf5c      	itt	pl
 80088f4:	600b      	strpl	r3, [r1, #0]
 80088f6:	2002      	movpl	r0, #2
 80088f8:	4770      	bx	lr
 80088fa:	b298      	uxth	r0, r3
 80088fc:	b9a8      	cbnz	r0, 800892a <__lo0bits+0x52>
 80088fe:	0c1b      	lsrs	r3, r3, #16
 8008900:	2010      	movs	r0, #16
 8008902:	b2da      	uxtb	r2, r3
 8008904:	b90a      	cbnz	r2, 800890a <__lo0bits+0x32>
 8008906:	3008      	adds	r0, #8
 8008908:	0a1b      	lsrs	r3, r3, #8
 800890a:	071a      	lsls	r2, r3, #28
 800890c:	bf04      	itt	eq
 800890e:	091b      	lsreq	r3, r3, #4
 8008910:	3004      	addeq	r0, #4
 8008912:	079a      	lsls	r2, r3, #30
 8008914:	bf04      	itt	eq
 8008916:	089b      	lsreq	r3, r3, #2
 8008918:	3002      	addeq	r0, #2
 800891a:	07da      	lsls	r2, r3, #31
 800891c:	d403      	bmi.n	8008926 <__lo0bits+0x4e>
 800891e:	085b      	lsrs	r3, r3, #1
 8008920:	f100 0001 	add.w	r0, r0, #1
 8008924:	d005      	beq.n	8008932 <__lo0bits+0x5a>
 8008926:	600b      	str	r3, [r1, #0]
 8008928:	4770      	bx	lr
 800892a:	4610      	mov	r0, r2
 800892c:	e7e9      	b.n	8008902 <__lo0bits+0x2a>
 800892e:	2000      	movs	r0, #0
 8008930:	4770      	bx	lr
 8008932:	2020      	movs	r0, #32
 8008934:	4770      	bx	lr
	...

08008938 <__i2b>:
 8008938:	b510      	push	{r4, lr}
 800893a:	460c      	mov	r4, r1
 800893c:	2101      	movs	r1, #1
 800893e:	f7ff ff03 	bl	8008748 <_Balloc>
 8008942:	4602      	mov	r2, r0
 8008944:	b928      	cbnz	r0, 8008952 <__i2b+0x1a>
 8008946:	4b05      	ldr	r3, [pc, #20]	; (800895c <__i2b+0x24>)
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <__i2b+0x28>)
 800894a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800894e:	f000 fdf5 	bl	800953c <__assert_func>
 8008952:	2301      	movs	r3, #1
 8008954:	6144      	str	r4, [r0, #20]
 8008956:	6103      	str	r3, [r0, #16]
 8008958:	bd10      	pop	{r4, pc}
 800895a:	bf00      	nop
 800895c:	08009aa7 	.word	0x08009aa7
 8008960:	08009b18 	.word	0x08009b18

08008964 <__multiply>:
 8008964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008968:	4691      	mov	r9, r2
 800896a:	690a      	ldr	r2, [r1, #16]
 800896c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008970:	429a      	cmp	r2, r3
 8008972:	bfb8      	it	lt
 8008974:	460b      	movlt	r3, r1
 8008976:	460c      	mov	r4, r1
 8008978:	bfbc      	itt	lt
 800897a:	464c      	movlt	r4, r9
 800897c:	4699      	movlt	r9, r3
 800897e:	6927      	ldr	r7, [r4, #16]
 8008980:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008984:	68a3      	ldr	r3, [r4, #8]
 8008986:	6861      	ldr	r1, [r4, #4]
 8008988:	eb07 060a 	add.w	r6, r7, sl
 800898c:	42b3      	cmp	r3, r6
 800898e:	b085      	sub	sp, #20
 8008990:	bfb8      	it	lt
 8008992:	3101      	addlt	r1, #1
 8008994:	f7ff fed8 	bl	8008748 <_Balloc>
 8008998:	b930      	cbnz	r0, 80089a8 <__multiply+0x44>
 800899a:	4602      	mov	r2, r0
 800899c:	4b44      	ldr	r3, [pc, #272]	; (8008ab0 <__multiply+0x14c>)
 800899e:	4845      	ldr	r0, [pc, #276]	; (8008ab4 <__multiply+0x150>)
 80089a0:	f240 115d 	movw	r1, #349	; 0x15d
 80089a4:	f000 fdca 	bl	800953c <__assert_func>
 80089a8:	f100 0514 	add.w	r5, r0, #20
 80089ac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80089b0:	462b      	mov	r3, r5
 80089b2:	2200      	movs	r2, #0
 80089b4:	4543      	cmp	r3, r8
 80089b6:	d321      	bcc.n	80089fc <__multiply+0x98>
 80089b8:	f104 0314 	add.w	r3, r4, #20
 80089bc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80089c0:	f109 0314 	add.w	r3, r9, #20
 80089c4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80089c8:	9202      	str	r2, [sp, #8]
 80089ca:	1b3a      	subs	r2, r7, r4
 80089cc:	3a15      	subs	r2, #21
 80089ce:	f022 0203 	bic.w	r2, r2, #3
 80089d2:	3204      	adds	r2, #4
 80089d4:	f104 0115 	add.w	r1, r4, #21
 80089d8:	428f      	cmp	r7, r1
 80089da:	bf38      	it	cc
 80089dc:	2204      	movcc	r2, #4
 80089de:	9201      	str	r2, [sp, #4]
 80089e0:	9a02      	ldr	r2, [sp, #8]
 80089e2:	9303      	str	r3, [sp, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d80c      	bhi.n	8008a02 <__multiply+0x9e>
 80089e8:	2e00      	cmp	r6, #0
 80089ea:	dd03      	ble.n	80089f4 <__multiply+0x90>
 80089ec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d05a      	beq.n	8008aaa <__multiply+0x146>
 80089f4:	6106      	str	r6, [r0, #16]
 80089f6:	b005      	add	sp, #20
 80089f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089fc:	f843 2b04 	str.w	r2, [r3], #4
 8008a00:	e7d8      	b.n	80089b4 <__multiply+0x50>
 8008a02:	f8b3 a000 	ldrh.w	sl, [r3]
 8008a06:	f1ba 0f00 	cmp.w	sl, #0
 8008a0a:	d024      	beq.n	8008a56 <__multiply+0xf2>
 8008a0c:	f104 0e14 	add.w	lr, r4, #20
 8008a10:	46a9      	mov	r9, r5
 8008a12:	f04f 0c00 	mov.w	ip, #0
 8008a16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8008a1a:	f8d9 1000 	ldr.w	r1, [r9]
 8008a1e:	fa1f fb82 	uxth.w	fp, r2
 8008a22:	b289      	uxth	r1, r1
 8008a24:	fb0a 110b 	mla	r1, sl, fp, r1
 8008a28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8008a2c:	f8d9 2000 	ldr.w	r2, [r9]
 8008a30:	4461      	add	r1, ip
 8008a32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a36:	fb0a c20b 	mla	r2, sl, fp, ip
 8008a3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8008a3e:	b289      	uxth	r1, r1
 8008a40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008a44:	4577      	cmp	r7, lr
 8008a46:	f849 1b04 	str.w	r1, [r9], #4
 8008a4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8008a4e:	d8e2      	bhi.n	8008a16 <__multiply+0xb2>
 8008a50:	9a01      	ldr	r2, [sp, #4]
 8008a52:	f845 c002 	str.w	ip, [r5, r2]
 8008a56:	9a03      	ldr	r2, [sp, #12]
 8008a58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8008a5c:	3304      	adds	r3, #4
 8008a5e:	f1b9 0f00 	cmp.w	r9, #0
 8008a62:	d020      	beq.n	8008aa6 <__multiply+0x142>
 8008a64:	6829      	ldr	r1, [r5, #0]
 8008a66:	f104 0c14 	add.w	ip, r4, #20
 8008a6a:	46ae      	mov	lr, r5
 8008a6c:	f04f 0a00 	mov.w	sl, #0
 8008a70:	f8bc b000 	ldrh.w	fp, [ip]
 8008a74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8008a78:	fb09 220b 	mla	r2, r9, fp, r2
 8008a7c:	4492      	add	sl, r2
 8008a7e:	b289      	uxth	r1, r1
 8008a80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8008a84:	f84e 1b04 	str.w	r1, [lr], #4
 8008a88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008a8c:	f8be 1000 	ldrh.w	r1, [lr]
 8008a90:	0c12      	lsrs	r2, r2, #16
 8008a92:	fb09 1102 	mla	r1, r9, r2, r1
 8008a96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8008a9a:	4567      	cmp	r7, ip
 8008a9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8008aa0:	d8e6      	bhi.n	8008a70 <__multiply+0x10c>
 8008aa2:	9a01      	ldr	r2, [sp, #4]
 8008aa4:	50a9      	str	r1, [r5, r2]
 8008aa6:	3504      	adds	r5, #4
 8008aa8:	e79a      	b.n	80089e0 <__multiply+0x7c>
 8008aaa:	3e01      	subs	r6, #1
 8008aac:	e79c      	b.n	80089e8 <__multiply+0x84>
 8008aae:	bf00      	nop
 8008ab0:	08009aa7 	.word	0x08009aa7
 8008ab4:	08009b18 	.word	0x08009b18

08008ab8 <__pow5mult>:
 8008ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008abc:	4615      	mov	r5, r2
 8008abe:	f012 0203 	ands.w	r2, r2, #3
 8008ac2:	4606      	mov	r6, r0
 8008ac4:	460f      	mov	r7, r1
 8008ac6:	d007      	beq.n	8008ad8 <__pow5mult+0x20>
 8008ac8:	4c25      	ldr	r4, [pc, #148]	; (8008b60 <__pow5mult+0xa8>)
 8008aca:	3a01      	subs	r2, #1
 8008acc:	2300      	movs	r3, #0
 8008ace:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008ad2:	f7ff fe9b 	bl	800880c <__multadd>
 8008ad6:	4607      	mov	r7, r0
 8008ad8:	10ad      	asrs	r5, r5, #2
 8008ada:	d03d      	beq.n	8008b58 <__pow5mult+0xa0>
 8008adc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008ade:	b97c      	cbnz	r4, 8008b00 <__pow5mult+0x48>
 8008ae0:	2010      	movs	r0, #16
 8008ae2:	f7ff fe29 	bl	8008738 <malloc>
 8008ae6:	4602      	mov	r2, r0
 8008ae8:	6270      	str	r0, [r6, #36]	; 0x24
 8008aea:	b928      	cbnz	r0, 8008af8 <__pow5mult+0x40>
 8008aec:	4b1d      	ldr	r3, [pc, #116]	; (8008b64 <__pow5mult+0xac>)
 8008aee:	481e      	ldr	r0, [pc, #120]	; (8008b68 <__pow5mult+0xb0>)
 8008af0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8008af4:	f000 fd22 	bl	800953c <__assert_func>
 8008af8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008afc:	6004      	str	r4, [r0, #0]
 8008afe:	60c4      	str	r4, [r0, #12]
 8008b00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8008b04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008b08:	b94c      	cbnz	r4, 8008b1e <__pow5mult+0x66>
 8008b0a:	f240 2171 	movw	r1, #625	; 0x271
 8008b0e:	4630      	mov	r0, r6
 8008b10:	f7ff ff12 	bl	8008938 <__i2b>
 8008b14:	2300      	movs	r3, #0
 8008b16:	f8c8 0008 	str.w	r0, [r8, #8]
 8008b1a:	4604      	mov	r4, r0
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	f04f 0900 	mov.w	r9, #0
 8008b22:	07eb      	lsls	r3, r5, #31
 8008b24:	d50a      	bpl.n	8008b3c <__pow5mult+0x84>
 8008b26:	4639      	mov	r1, r7
 8008b28:	4622      	mov	r2, r4
 8008b2a:	4630      	mov	r0, r6
 8008b2c:	f7ff ff1a 	bl	8008964 <__multiply>
 8008b30:	4639      	mov	r1, r7
 8008b32:	4680      	mov	r8, r0
 8008b34:	4630      	mov	r0, r6
 8008b36:	f7ff fe47 	bl	80087c8 <_Bfree>
 8008b3a:	4647      	mov	r7, r8
 8008b3c:	106d      	asrs	r5, r5, #1
 8008b3e:	d00b      	beq.n	8008b58 <__pow5mult+0xa0>
 8008b40:	6820      	ldr	r0, [r4, #0]
 8008b42:	b938      	cbnz	r0, 8008b54 <__pow5mult+0x9c>
 8008b44:	4622      	mov	r2, r4
 8008b46:	4621      	mov	r1, r4
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f7ff ff0b 	bl	8008964 <__multiply>
 8008b4e:	6020      	str	r0, [r4, #0]
 8008b50:	f8c0 9000 	str.w	r9, [r0]
 8008b54:	4604      	mov	r4, r0
 8008b56:	e7e4      	b.n	8008b22 <__pow5mult+0x6a>
 8008b58:	4638      	mov	r0, r7
 8008b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b5e:	bf00      	nop
 8008b60:	08009c68 	.word	0x08009c68
 8008b64:	08009a35 	.word	0x08009a35
 8008b68:	08009b18 	.word	0x08009b18

08008b6c <__lshift>:
 8008b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	460c      	mov	r4, r1
 8008b72:	6849      	ldr	r1, [r1, #4]
 8008b74:	6923      	ldr	r3, [r4, #16]
 8008b76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008b7a:	68a3      	ldr	r3, [r4, #8]
 8008b7c:	4607      	mov	r7, r0
 8008b7e:	4691      	mov	r9, r2
 8008b80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008b84:	f108 0601 	add.w	r6, r8, #1
 8008b88:	42b3      	cmp	r3, r6
 8008b8a:	db0b      	blt.n	8008ba4 <__lshift+0x38>
 8008b8c:	4638      	mov	r0, r7
 8008b8e:	f7ff fddb 	bl	8008748 <_Balloc>
 8008b92:	4605      	mov	r5, r0
 8008b94:	b948      	cbnz	r0, 8008baa <__lshift+0x3e>
 8008b96:	4602      	mov	r2, r0
 8008b98:	4b2a      	ldr	r3, [pc, #168]	; (8008c44 <__lshift+0xd8>)
 8008b9a:	482b      	ldr	r0, [pc, #172]	; (8008c48 <__lshift+0xdc>)
 8008b9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008ba0:	f000 fccc 	bl	800953c <__assert_func>
 8008ba4:	3101      	adds	r1, #1
 8008ba6:	005b      	lsls	r3, r3, #1
 8008ba8:	e7ee      	b.n	8008b88 <__lshift+0x1c>
 8008baa:	2300      	movs	r3, #0
 8008bac:	f100 0114 	add.w	r1, r0, #20
 8008bb0:	f100 0210 	add.w	r2, r0, #16
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	4553      	cmp	r3, sl
 8008bb8:	db37      	blt.n	8008c2a <__lshift+0xbe>
 8008bba:	6920      	ldr	r0, [r4, #16]
 8008bbc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008bc0:	f104 0314 	add.w	r3, r4, #20
 8008bc4:	f019 091f 	ands.w	r9, r9, #31
 8008bc8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008bcc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8008bd0:	d02f      	beq.n	8008c32 <__lshift+0xc6>
 8008bd2:	f1c9 0e20 	rsb	lr, r9, #32
 8008bd6:	468a      	mov	sl, r1
 8008bd8:	f04f 0c00 	mov.w	ip, #0
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	fa02 f209 	lsl.w	r2, r2, r9
 8008be2:	ea42 020c 	orr.w	r2, r2, ip
 8008be6:	f84a 2b04 	str.w	r2, [sl], #4
 8008bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bee:	4298      	cmp	r0, r3
 8008bf0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8008bf4:	d8f2      	bhi.n	8008bdc <__lshift+0x70>
 8008bf6:	1b03      	subs	r3, r0, r4
 8008bf8:	3b15      	subs	r3, #21
 8008bfa:	f023 0303 	bic.w	r3, r3, #3
 8008bfe:	3304      	adds	r3, #4
 8008c00:	f104 0215 	add.w	r2, r4, #21
 8008c04:	4290      	cmp	r0, r2
 8008c06:	bf38      	it	cc
 8008c08:	2304      	movcc	r3, #4
 8008c0a:	f841 c003 	str.w	ip, [r1, r3]
 8008c0e:	f1bc 0f00 	cmp.w	ip, #0
 8008c12:	d001      	beq.n	8008c18 <__lshift+0xac>
 8008c14:	f108 0602 	add.w	r6, r8, #2
 8008c18:	3e01      	subs	r6, #1
 8008c1a:	4638      	mov	r0, r7
 8008c1c:	612e      	str	r6, [r5, #16]
 8008c1e:	4621      	mov	r1, r4
 8008c20:	f7ff fdd2 	bl	80087c8 <_Bfree>
 8008c24:	4628      	mov	r0, r5
 8008c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8008c2e:	3301      	adds	r3, #1
 8008c30:	e7c1      	b.n	8008bb6 <__lshift+0x4a>
 8008c32:	3904      	subs	r1, #4
 8008c34:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c38:	f841 2f04 	str.w	r2, [r1, #4]!
 8008c3c:	4298      	cmp	r0, r3
 8008c3e:	d8f9      	bhi.n	8008c34 <__lshift+0xc8>
 8008c40:	e7ea      	b.n	8008c18 <__lshift+0xac>
 8008c42:	bf00      	nop
 8008c44:	08009aa7 	.word	0x08009aa7
 8008c48:	08009b18 	.word	0x08009b18

08008c4c <__mcmp>:
 8008c4c:	b530      	push	{r4, r5, lr}
 8008c4e:	6902      	ldr	r2, [r0, #16]
 8008c50:	690c      	ldr	r4, [r1, #16]
 8008c52:	1b12      	subs	r2, r2, r4
 8008c54:	d10e      	bne.n	8008c74 <__mcmp+0x28>
 8008c56:	f100 0314 	add.w	r3, r0, #20
 8008c5a:	3114      	adds	r1, #20
 8008c5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008c60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008c64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008c68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008c6c:	42a5      	cmp	r5, r4
 8008c6e:	d003      	beq.n	8008c78 <__mcmp+0x2c>
 8008c70:	d305      	bcc.n	8008c7e <__mcmp+0x32>
 8008c72:	2201      	movs	r2, #1
 8008c74:	4610      	mov	r0, r2
 8008c76:	bd30      	pop	{r4, r5, pc}
 8008c78:	4283      	cmp	r3, r0
 8008c7a:	d3f3      	bcc.n	8008c64 <__mcmp+0x18>
 8008c7c:	e7fa      	b.n	8008c74 <__mcmp+0x28>
 8008c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8008c82:	e7f7      	b.n	8008c74 <__mcmp+0x28>

08008c84 <__mdiff>:
 8008c84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c88:	460c      	mov	r4, r1
 8008c8a:	4606      	mov	r6, r0
 8008c8c:	4611      	mov	r1, r2
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4690      	mov	r8, r2
 8008c92:	f7ff ffdb 	bl	8008c4c <__mcmp>
 8008c96:	1e05      	subs	r5, r0, #0
 8008c98:	d110      	bne.n	8008cbc <__mdiff+0x38>
 8008c9a:	4629      	mov	r1, r5
 8008c9c:	4630      	mov	r0, r6
 8008c9e:	f7ff fd53 	bl	8008748 <_Balloc>
 8008ca2:	b930      	cbnz	r0, 8008cb2 <__mdiff+0x2e>
 8008ca4:	4b3a      	ldr	r3, [pc, #232]	; (8008d90 <__mdiff+0x10c>)
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	f240 2132 	movw	r1, #562	; 0x232
 8008cac:	4839      	ldr	r0, [pc, #228]	; (8008d94 <__mdiff+0x110>)
 8008cae:	f000 fc45 	bl	800953c <__assert_func>
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008cb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cbc:	bfa4      	itt	ge
 8008cbe:	4643      	movge	r3, r8
 8008cc0:	46a0      	movge	r8, r4
 8008cc2:	4630      	mov	r0, r6
 8008cc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8008cc8:	bfa6      	itte	ge
 8008cca:	461c      	movge	r4, r3
 8008ccc:	2500      	movge	r5, #0
 8008cce:	2501      	movlt	r5, #1
 8008cd0:	f7ff fd3a 	bl	8008748 <_Balloc>
 8008cd4:	b920      	cbnz	r0, 8008ce0 <__mdiff+0x5c>
 8008cd6:	4b2e      	ldr	r3, [pc, #184]	; (8008d90 <__mdiff+0x10c>)
 8008cd8:	4602      	mov	r2, r0
 8008cda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008cde:	e7e5      	b.n	8008cac <__mdiff+0x28>
 8008ce0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8008ce4:	6926      	ldr	r6, [r4, #16]
 8008ce6:	60c5      	str	r5, [r0, #12]
 8008ce8:	f104 0914 	add.w	r9, r4, #20
 8008cec:	f108 0514 	add.w	r5, r8, #20
 8008cf0:	f100 0e14 	add.w	lr, r0, #20
 8008cf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8008cf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8008cfc:	f108 0210 	add.w	r2, r8, #16
 8008d00:	46f2      	mov	sl, lr
 8008d02:	2100      	movs	r1, #0
 8008d04:	f859 3b04 	ldr.w	r3, [r9], #4
 8008d08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008d0c:	fa1f f883 	uxth.w	r8, r3
 8008d10:	fa11 f18b 	uxtah	r1, r1, fp
 8008d14:	0c1b      	lsrs	r3, r3, #16
 8008d16:	eba1 0808 	sub.w	r8, r1, r8
 8008d1a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008d1e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008d22:	fa1f f888 	uxth.w	r8, r8
 8008d26:	1419      	asrs	r1, r3, #16
 8008d28:	454e      	cmp	r6, r9
 8008d2a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008d2e:	f84a 3b04 	str.w	r3, [sl], #4
 8008d32:	d8e7      	bhi.n	8008d04 <__mdiff+0x80>
 8008d34:	1b33      	subs	r3, r6, r4
 8008d36:	3b15      	subs	r3, #21
 8008d38:	f023 0303 	bic.w	r3, r3, #3
 8008d3c:	3304      	adds	r3, #4
 8008d3e:	3415      	adds	r4, #21
 8008d40:	42a6      	cmp	r6, r4
 8008d42:	bf38      	it	cc
 8008d44:	2304      	movcc	r3, #4
 8008d46:	441d      	add	r5, r3
 8008d48:	4473      	add	r3, lr
 8008d4a:	469e      	mov	lr, r3
 8008d4c:	462e      	mov	r6, r5
 8008d4e:	4566      	cmp	r6, ip
 8008d50:	d30e      	bcc.n	8008d70 <__mdiff+0xec>
 8008d52:	f10c 0203 	add.w	r2, ip, #3
 8008d56:	1b52      	subs	r2, r2, r5
 8008d58:	f022 0203 	bic.w	r2, r2, #3
 8008d5c:	3d03      	subs	r5, #3
 8008d5e:	45ac      	cmp	ip, r5
 8008d60:	bf38      	it	cc
 8008d62:	2200      	movcc	r2, #0
 8008d64:	441a      	add	r2, r3
 8008d66:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008d6a:	b17b      	cbz	r3, 8008d8c <__mdiff+0x108>
 8008d6c:	6107      	str	r7, [r0, #16]
 8008d6e:	e7a3      	b.n	8008cb8 <__mdiff+0x34>
 8008d70:	f856 8b04 	ldr.w	r8, [r6], #4
 8008d74:	fa11 f288 	uxtah	r2, r1, r8
 8008d78:	1414      	asrs	r4, r2, #16
 8008d7a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8008d7e:	b292      	uxth	r2, r2
 8008d80:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008d84:	f84e 2b04 	str.w	r2, [lr], #4
 8008d88:	1421      	asrs	r1, r4, #16
 8008d8a:	e7e0      	b.n	8008d4e <__mdiff+0xca>
 8008d8c:	3f01      	subs	r7, #1
 8008d8e:	e7ea      	b.n	8008d66 <__mdiff+0xe2>
 8008d90:	08009aa7 	.word	0x08009aa7
 8008d94:	08009b18 	.word	0x08009b18

08008d98 <__d2b>:
 8008d98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d9c:	4689      	mov	r9, r1
 8008d9e:	2101      	movs	r1, #1
 8008da0:	ec57 6b10 	vmov	r6, r7, d0
 8008da4:	4690      	mov	r8, r2
 8008da6:	f7ff fccf 	bl	8008748 <_Balloc>
 8008daa:	4604      	mov	r4, r0
 8008dac:	b930      	cbnz	r0, 8008dbc <__d2b+0x24>
 8008dae:	4602      	mov	r2, r0
 8008db0:	4b25      	ldr	r3, [pc, #148]	; (8008e48 <__d2b+0xb0>)
 8008db2:	4826      	ldr	r0, [pc, #152]	; (8008e4c <__d2b+0xb4>)
 8008db4:	f240 310a 	movw	r1, #778	; 0x30a
 8008db8:	f000 fbc0 	bl	800953c <__assert_func>
 8008dbc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008dc0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008dc4:	bb35      	cbnz	r5, 8008e14 <__d2b+0x7c>
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	9301      	str	r3, [sp, #4]
 8008dca:	d028      	beq.n	8008e1e <__d2b+0x86>
 8008dcc:	4668      	mov	r0, sp
 8008dce:	9600      	str	r6, [sp, #0]
 8008dd0:	f7ff fd82 	bl	80088d8 <__lo0bits>
 8008dd4:	9900      	ldr	r1, [sp, #0]
 8008dd6:	b300      	cbz	r0, 8008e1a <__d2b+0x82>
 8008dd8:	9a01      	ldr	r2, [sp, #4]
 8008dda:	f1c0 0320 	rsb	r3, r0, #32
 8008dde:	fa02 f303 	lsl.w	r3, r2, r3
 8008de2:	430b      	orrs	r3, r1
 8008de4:	40c2      	lsrs	r2, r0
 8008de6:	6163      	str	r3, [r4, #20]
 8008de8:	9201      	str	r2, [sp, #4]
 8008dea:	9b01      	ldr	r3, [sp, #4]
 8008dec:	61a3      	str	r3, [r4, #24]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	bf14      	ite	ne
 8008df2:	2202      	movne	r2, #2
 8008df4:	2201      	moveq	r2, #1
 8008df6:	6122      	str	r2, [r4, #16]
 8008df8:	b1d5      	cbz	r5, 8008e30 <__d2b+0x98>
 8008dfa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008dfe:	4405      	add	r5, r0
 8008e00:	f8c9 5000 	str.w	r5, [r9]
 8008e04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008e08:	f8c8 0000 	str.w	r0, [r8]
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	b003      	add	sp, #12
 8008e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e14:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008e18:	e7d5      	b.n	8008dc6 <__d2b+0x2e>
 8008e1a:	6161      	str	r1, [r4, #20]
 8008e1c:	e7e5      	b.n	8008dea <__d2b+0x52>
 8008e1e:	a801      	add	r0, sp, #4
 8008e20:	f7ff fd5a 	bl	80088d8 <__lo0bits>
 8008e24:	9b01      	ldr	r3, [sp, #4]
 8008e26:	6163      	str	r3, [r4, #20]
 8008e28:	2201      	movs	r2, #1
 8008e2a:	6122      	str	r2, [r4, #16]
 8008e2c:	3020      	adds	r0, #32
 8008e2e:	e7e3      	b.n	8008df8 <__d2b+0x60>
 8008e30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e38:	f8c9 0000 	str.w	r0, [r9]
 8008e3c:	6918      	ldr	r0, [r3, #16]
 8008e3e:	f7ff fd2b 	bl	8008898 <__hi0bits>
 8008e42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e46:	e7df      	b.n	8008e08 <__d2b+0x70>
 8008e48:	08009aa7 	.word	0x08009aa7
 8008e4c:	08009b18 	.word	0x08009b18

08008e50 <_calloc_r>:
 8008e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e52:	fba1 2402 	umull	r2, r4, r1, r2
 8008e56:	b94c      	cbnz	r4, 8008e6c <_calloc_r+0x1c>
 8008e58:	4611      	mov	r1, r2
 8008e5a:	9201      	str	r2, [sp, #4]
 8008e5c:	f000 f87a 	bl	8008f54 <_malloc_r>
 8008e60:	9a01      	ldr	r2, [sp, #4]
 8008e62:	4605      	mov	r5, r0
 8008e64:	b930      	cbnz	r0, 8008e74 <_calloc_r+0x24>
 8008e66:	4628      	mov	r0, r5
 8008e68:	b003      	add	sp, #12
 8008e6a:	bd30      	pop	{r4, r5, pc}
 8008e6c:	220c      	movs	r2, #12
 8008e6e:	6002      	str	r2, [r0, #0]
 8008e70:	2500      	movs	r5, #0
 8008e72:	e7f8      	b.n	8008e66 <_calloc_r+0x16>
 8008e74:	4621      	mov	r1, r4
 8008e76:	f7fe f85d 	bl	8006f34 <memset>
 8008e7a:	e7f4      	b.n	8008e66 <_calloc_r+0x16>

08008e7c <_free_r>:
 8008e7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e7e:	2900      	cmp	r1, #0
 8008e80:	d044      	beq.n	8008f0c <_free_r+0x90>
 8008e82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e86:	9001      	str	r0, [sp, #4]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	f1a1 0404 	sub.w	r4, r1, #4
 8008e8e:	bfb8      	it	lt
 8008e90:	18e4      	addlt	r4, r4, r3
 8008e92:	f000 fcdf 	bl	8009854 <__malloc_lock>
 8008e96:	4a1e      	ldr	r2, [pc, #120]	; (8008f10 <_free_r+0x94>)
 8008e98:	9801      	ldr	r0, [sp, #4]
 8008e9a:	6813      	ldr	r3, [r2, #0]
 8008e9c:	b933      	cbnz	r3, 8008eac <_free_r+0x30>
 8008e9e:	6063      	str	r3, [r4, #4]
 8008ea0:	6014      	str	r4, [r2, #0]
 8008ea2:	b003      	add	sp, #12
 8008ea4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ea8:	f000 bcda 	b.w	8009860 <__malloc_unlock>
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	d908      	bls.n	8008ec2 <_free_r+0x46>
 8008eb0:	6825      	ldr	r5, [r4, #0]
 8008eb2:	1961      	adds	r1, r4, r5
 8008eb4:	428b      	cmp	r3, r1
 8008eb6:	bf01      	itttt	eq
 8008eb8:	6819      	ldreq	r1, [r3, #0]
 8008eba:	685b      	ldreq	r3, [r3, #4]
 8008ebc:	1949      	addeq	r1, r1, r5
 8008ebe:	6021      	streq	r1, [r4, #0]
 8008ec0:	e7ed      	b.n	8008e9e <_free_r+0x22>
 8008ec2:	461a      	mov	r2, r3
 8008ec4:	685b      	ldr	r3, [r3, #4]
 8008ec6:	b10b      	cbz	r3, 8008ecc <_free_r+0x50>
 8008ec8:	42a3      	cmp	r3, r4
 8008eca:	d9fa      	bls.n	8008ec2 <_free_r+0x46>
 8008ecc:	6811      	ldr	r1, [r2, #0]
 8008ece:	1855      	adds	r5, r2, r1
 8008ed0:	42a5      	cmp	r5, r4
 8008ed2:	d10b      	bne.n	8008eec <_free_r+0x70>
 8008ed4:	6824      	ldr	r4, [r4, #0]
 8008ed6:	4421      	add	r1, r4
 8008ed8:	1854      	adds	r4, r2, r1
 8008eda:	42a3      	cmp	r3, r4
 8008edc:	6011      	str	r1, [r2, #0]
 8008ede:	d1e0      	bne.n	8008ea2 <_free_r+0x26>
 8008ee0:	681c      	ldr	r4, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	6053      	str	r3, [r2, #4]
 8008ee6:	4421      	add	r1, r4
 8008ee8:	6011      	str	r1, [r2, #0]
 8008eea:	e7da      	b.n	8008ea2 <_free_r+0x26>
 8008eec:	d902      	bls.n	8008ef4 <_free_r+0x78>
 8008eee:	230c      	movs	r3, #12
 8008ef0:	6003      	str	r3, [r0, #0]
 8008ef2:	e7d6      	b.n	8008ea2 <_free_r+0x26>
 8008ef4:	6825      	ldr	r5, [r4, #0]
 8008ef6:	1961      	adds	r1, r4, r5
 8008ef8:	428b      	cmp	r3, r1
 8008efa:	bf04      	itt	eq
 8008efc:	6819      	ldreq	r1, [r3, #0]
 8008efe:	685b      	ldreq	r3, [r3, #4]
 8008f00:	6063      	str	r3, [r4, #4]
 8008f02:	bf04      	itt	eq
 8008f04:	1949      	addeq	r1, r1, r5
 8008f06:	6021      	streq	r1, [r4, #0]
 8008f08:	6054      	str	r4, [r2, #4]
 8008f0a:	e7ca      	b.n	8008ea2 <_free_r+0x26>
 8008f0c:	b003      	add	sp, #12
 8008f0e:	bd30      	pop	{r4, r5, pc}
 8008f10:	20000830 	.word	0x20000830

08008f14 <sbrk_aligned>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	4e0e      	ldr	r6, [pc, #56]	; (8008f50 <sbrk_aligned+0x3c>)
 8008f18:	460c      	mov	r4, r1
 8008f1a:	6831      	ldr	r1, [r6, #0]
 8008f1c:	4605      	mov	r5, r0
 8008f1e:	b911      	cbnz	r1, 8008f26 <sbrk_aligned+0x12>
 8008f20:	f000 f9e6 	bl	80092f0 <_sbrk_r>
 8008f24:	6030      	str	r0, [r6, #0]
 8008f26:	4621      	mov	r1, r4
 8008f28:	4628      	mov	r0, r5
 8008f2a:	f000 f9e1 	bl	80092f0 <_sbrk_r>
 8008f2e:	1c43      	adds	r3, r0, #1
 8008f30:	d00a      	beq.n	8008f48 <sbrk_aligned+0x34>
 8008f32:	1cc4      	adds	r4, r0, #3
 8008f34:	f024 0403 	bic.w	r4, r4, #3
 8008f38:	42a0      	cmp	r0, r4
 8008f3a:	d007      	beq.n	8008f4c <sbrk_aligned+0x38>
 8008f3c:	1a21      	subs	r1, r4, r0
 8008f3e:	4628      	mov	r0, r5
 8008f40:	f000 f9d6 	bl	80092f0 <_sbrk_r>
 8008f44:	3001      	adds	r0, #1
 8008f46:	d101      	bne.n	8008f4c <sbrk_aligned+0x38>
 8008f48:	f04f 34ff 	mov.w	r4, #4294967295
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	bd70      	pop	{r4, r5, r6, pc}
 8008f50:	20000834 	.word	0x20000834

08008f54 <_malloc_r>:
 8008f54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f58:	1ccd      	adds	r5, r1, #3
 8008f5a:	f025 0503 	bic.w	r5, r5, #3
 8008f5e:	3508      	adds	r5, #8
 8008f60:	2d0c      	cmp	r5, #12
 8008f62:	bf38      	it	cc
 8008f64:	250c      	movcc	r5, #12
 8008f66:	2d00      	cmp	r5, #0
 8008f68:	4607      	mov	r7, r0
 8008f6a:	db01      	blt.n	8008f70 <_malloc_r+0x1c>
 8008f6c:	42a9      	cmp	r1, r5
 8008f6e:	d905      	bls.n	8008f7c <_malloc_r+0x28>
 8008f70:	230c      	movs	r3, #12
 8008f72:	603b      	str	r3, [r7, #0]
 8008f74:	2600      	movs	r6, #0
 8008f76:	4630      	mov	r0, r6
 8008f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f7c:	4e2e      	ldr	r6, [pc, #184]	; (8009038 <_malloc_r+0xe4>)
 8008f7e:	f000 fc69 	bl	8009854 <__malloc_lock>
 8008f82:	6833      	ldr	r3, [r6, #0]
 8008f84:	461c      	mov	r4, r3
 8008f86:	bb34      	cbnz	r4, 8008fd6 <_malloc_r+0x82>
 8008f88:	4629      	mov	r1, r5
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	f7ff ffc2 	bl	8008f14 <sbrk_aligned>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	4604      	mov	r4, r0
 8008f94:	d14d      	bne.n	8009032 <_malloc_r+0xde>
 8008f96:	6834      	ldr	r4, [r6, #0]
 8008f98:	4626      	mov	r6, r4
 8008f9a:	2e00      	cmp	r6, #0
 8008f9c:	d140      	bne.n	8009020 <_malloc_r+0xcc>
 8008f9e:	6823      	ldr	r3, [r4, #0]
 8008fa0:	4631      	mov	r1, r6
 8008fa2:	4638      	mov	r0, r7
 8008fa4:	eb04 0803 	add.w	r8, r4, r3
 8008fa8:	f000 f9a2 	bl	80092f0 <_sbrk_r>
 8008fac:	4580      	cmp	r8, r0
 8008fae:	d13a      	bne.n	8009026 <_malloc_r+0xd2>
 8008fb0:	6821      	ldr	r1, [r4, #0]
 8008fb2:	3503      	adds	r5, #3
 8008fb4:	1a6d      	subs	r5, r5, r1
 8008fb6:	f025 0503 	bic.w	r5, r5, #3
 8008fba:	3508      	adds	r5, #8
 8008fbc:	2d0c      	cmp	r5, #12
 8008fbe:	bf38      	it	cc
 8008fc0:	250c      	movcc	r5, #12
 8008fc2:	4629      	mov	r1, r5
 8008fc4:	4638      	mov	r0, r7
 8008fc6:	f7ff ffa5 	bl	8008f14 <sbrk_aligned>
 8008fca:	3001      	adds	r0, #1
 8008fcc:	d02b      	beq.n	8009026 <_malloc_r+0xd2>
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	442b      	add	r3, r5
 8008fd2:	6023      	str	r3, [r4, #0]
 8008fd4:	e00e      	b.n	8008ff4 <_malloc_r+0xa0>
 8008fd6:	6822      	ldr	r2, [r4, #0]
 8008fd8:	1b52      	subs	r2, r2, r5
 8008fda:	d41e      	bmi.n	800901a <_malloc_r+0xc6>
 8008fdc:	2a0b      	cmp	r2, #11
 8008fde:	d916      	bls.n	800900e <_malloc_r+0xba>
 8008fe0:	1961      	adds	r1, r4, r5
 8008fe2:	42a3      	cmp	r3, r4
 8008fe4:	6025      	str	r5, [r4, #0]
 8008fe6:	bf18      	it	ne
 8008fe8:	6059      	strne	r1, [r3, #4]
 8008fea:	6863      	ldr	r3, [r4, #4]
 8008fec:	bf08      	it	eq
 8008fee:	6031      	streq	r1, [r6, #0]
 8008ff0:	5162      	str	r2, [r4, r5]
 8008ff2:	604b      	str	r3, [r1, #4]
 8008ff4:	4638      	mov	r0, r7
 8008ff6:	f104 060b 	add.w	r6, r4, #11
 8008ffa:	f000 fc31 	bl	8009860 <__malloc_unlock>
 8008ffe:	f026 0607 	bic.w	r6, r6, #7
 8009002:	1d23      	adds	r3, r4, #4
 8009004:	1af2      	subs	r2, r6, r3
 8009006:	d0b6      	beq.n	8008f76 <_malloc_r+0x22>
 8009008:	1b9b      	subs	r3, r3, r6
 800900a:	50a3      	str	r3, [r4, r2]
 800900c:	e7b3      	b.n	8008f76 <_malloc_r+0x22>
 800900e:	6862      	ldr	r2, [r4, #4]
 8009010:	42a3      	cmp	r3, r4
 8009012:	bf0c      	ite	eq
 8009014:	6032      	streq	r2, [r6, #0]
 8009016:	605a      	strne	r2, [r3, #4]
 8009018:	e7ec      	b.n	8008ff4 <_malloc_r+0xa0>
 800901a:	4623      	mov	r3, r4
 800901c:	6864      	ldr	r4, [r4, #4]
 800901e:	e7b2      	b.n	8008f86 <_malloc_r+0x32>
 8009020:	4634      	mov	r4, r6
 8009022:	6876      	ldr	r6, [r6, #4]
 8009024:	e7b9      	b.n	8008f9a <_malloc_r+0x46>
 8009026:	230c      	movs	r3, #12
 8009028:	603b      	str	r3, [r7, #0]
 800902a:	4638      	mov	r0, r7
 800902c:	f000 fc18 	bl	8009860 <__malloc_unlock>
 8009030:	e7a1      	b.n	8008f76 <_malloc_r+0x22>
 8009032:	6025      	str	r5, [r4, #0]
 8009034:	e7de      	b.n	8008ff4 <_malloc_r+0xa0>
 8009036:	bf00      	nop
 8009038:	20000830 	.word	0x20000830

0800903c <__sfputc_r>:
 800903c:	6893      	ldr	r3, [r2, #8]
 800903e:	3b01      	subs	r3, #1
 8009040:	2b00      	cmp	r3, #0
 8009042:	b410      	push	{r4}
 8009044:	6093      	str	r3, [r2, #8]
 8009046:	da08      	bge.n	800905a <__sfputc_r+0x1e>
 8009048:	6994      	ldr	r4, [r2, #24]
 800904a:	42a3      	cmp	r3, r4
 800904c:	db01      	blt.n	8009052 <__sfputc_r+0x16>
 800904e:	290a      	cmp	r1, #10
 8009050:	d103      	bne.n	800905a <__sfputc_r+0x1e>
 8009052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009056:	f000 b99f 	b.w	8009398 <__swbuf_r>
 800905a:	6813      	ldr	r3, [r2, #0]
 800905c:	1c58      	adds	r0, r3, #1
 800905e:	6010      	str	r0, [r2, #0]
 8009060:	7019      	strb	r1, [r3, #0]
 8009062:	4608      	mov	r0, r1
 8009064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009068:	4770      	bx	lr

0800906a <__sfputs_r>:
 800906a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800906c:	4606      	mov	r6, r0
 800906e:	460f      	mov	r7, r1
 8009070:	4614      	mov	r4, r2
 8009072:	18d5      	adds	r5, r2, r3
 8009074:	42ac      	cmp	r4, r5
 8009076:	d101      	bne.n	800907c <__sfputs_r+0x12>
 8009078:	2000      	movs	r0, #0
 800907a:	e007      	b.n	800908c <__sfputs_r+0x22>
 800907c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009080:	463a      	mov	r2, r7
 8009082:	4630      	mov	r0, r6
 8009084:	f7ff ffda 	bl	800903c <__sfputc_r>
 8009088:	1c43      	adds	r3, r0, #1
 800908a:	d1f3      	bne.n	8009074 <__sfputs_r+0xa>
 800908c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009090 <_vfiprintf_r>:
 8009090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009094:	460d      	mov	r5, r1
 8009096:	b09d      	sub	sp, #116	; 0x74
 8009098:	4614      	mov	r4, r2
 800909a:	4698      	mov	r8, r3
 800909c:	4606      	mov	r6, r0
 800909e:	b118      	cbz	r0, 80090a8 <_vfiprintf_r+0x18>
 80090a0:	6983      	ldr	r3, [r0, #24]
 80090a2:	b90b      	cbnz	r3, 80090a8 <_vfiprintf_r+0x18>
 80090a4:	f7ff faa2 	bl	80085ec <__sinit>
 80090a8:	4b89      	ldr	r3, [pc, #548]	; (80092d0 <_vfiprintf_r+0x240>)
 80090aa:	429d      	cmp	r5, r3
 80090ac:	d11b      	bne.n	80090e6 <_vfiprintf_r+0x56>
 80090ae:	6875      	ldr	r5, [r6, #4]
 80090b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b2:	07d9      	lsls	r1, r3, #31
 80090b4:	d405      	bmi.n	80090c2 <_vfiprintf_r+0x32>
 80090b6:	89ab      	ldrh	r3, [r5, #12]
 80090b8:	059a      	lsls	r2, r3, #22
 80090ba:	d402      	bmi.n	80090c2 <_vfiprintf_r+0x32>
 80090bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090be:	f7ff fb38 	bl	8008732 <__retarget_lock_acquire_recursive>
 80090c2:	89ab      	ldrh	r3, [r5, #12]
 80090c4:	071b      	lsls	r3, r3, #28
 80090c6:	d501      	bpl.n	80090cc <_vfiprintf_r+0x3c>
 80090c8:	692b      	ldr	r3, [r5, #16]
 80090ca:	b9eb      	cbnz	r3, 8009108 <_vfiprintf_r+0x78>
 80090cc:	4629      	mov	r1, r5
 80090ce:	4630      	mov	r0, r6
 80090d0:	f000 f9c6 	bl	8009460 <__swsetup_r>
 80090d4:	b1c0      	cbz	r0, 8009108 <_vfiprintf_r+0x78>
 80090d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090d8:	07dc      	lsls	r4, r3, #31
 80090da:	d50e      	bpl.n	80090fa <_vfiprintf_r+0x6a>
 80090dc:	f04f 30ff 	mov.w	r0, #4294967295
 80090e0:	b01d      	add	sp, #116	; 0x74
 80090e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090e6:	4b7b      	ldr	r3, [pc, #492]	; (80092d4 <_vfiprintf_r+0x244>)
 80090e8:	429d      	cmp	r5, r3
 80090ea:	d101      	bne.n	80090f0 <_vfiprintf_r+0x60>
 80090ec:	68b5      	ldr	r5, [r6, #8]
 80090ee:	e7df      	b.n	80090b0 <_vfiprintf_r+0x20>
 80090f0:	4b79      	ldr	r3, [pc, #484]	; (80092d8 <_vfiprintf_r+0x248>)
 80090f2:	429d      	cmp	r5, r3
 80090f4:	bf08      	it	eq
 80090f6:	68f5      	ldreq	r5, [r6, #12]
 80090f8:	e7da      	b.n	80090b0 <_vfiprintf_r+0x20>
 80090fa:	89ab      	ldrh	r3, [r5, #12]
 80090fc:	0598      	lsls	r0, r3, #22
 80090fe:	d4ed      	bmi.n	80090dc <_vfiprintf_r+0x4c>
 8009100:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009102:	f7ff fb17 	bl	8008734 <__retarget_lock_release_recursive>
 8009106:	e7e9      	b.n	80090dc <_vfiprintf_r+0x4c>
 8009108:	2300      	movs	r3, #0
 800910a:	9309      	str	r3, [sp, #36]	; 0x24
 800910c:	2320      	movs	r3, #32
 800910e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009112:	f8cd 800c 	str.w	r8, [sp, #12]
 8009116:	2330      	movs	r3, #48	; 0x30
 8009118:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092dc <_vfiprintf_r+0x24c>
 800911c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009120:	f04f 0901 	mov.w	r9, #1
 8009124:	4623      	mov	r3, r4
 8009126:	469a      	mov	sl, r3
 8009128:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912c:	b10a      	cbz	r2, 8009132 <_vfiprintf_r+0xa2>
 800912e:	2a25      	cmp	r2, #37	; 0x25
 8009130:	d1f9      	bne.n	8009126 <_vfiprintf_r+0x96>
 8009132:	ebba 0b04 	subs.w	fp, sl, r4
 8009136:	d00b      	beq.n	8009150 <_vfiprintf_r+0xc0>
 8009138:	465b      	mov	r3, fp
 800913a:	4622      	mov	r2, r4
 800913c:	4629      	mov	r1, r5
 800913e:	4630      	mov	r0, r6
 8009140:	f7ff ff93 	bl	800906a <__sfputs_r>
 8009144:	3001      	adds	r0, #1
 8009146:	f000 80aa 	beq.w	800929e <_vfiprintf_r+0x20e>
 800914a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800914c:	445a      	add	r2, fp
 800914e:	9209      	str	r2, [sp, #36]	; 0x24
 8009150:	f89a 3000 	ldrb.w	r3, [sl]
 8009154:	2b00      	cmp	r3, #0
 8009156:	f000 80a2 	beq.w	800929e <_vfiprintf_r+0x20e>
 800915a:	2300      	movs	r3, #0
 800915c:	f04f 32ff 	mov.w	r2, #4294967295
 8009160:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009164:	f10a 0a01 	add.w	sl, sl, #1
 8009168:	9304      	str	r3, [sp, #16]
 800916a:	9307      	str	r3, [sp, #28]
 800916c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009170:	931a      	str	r3, [sp, #104]	; 0x68
 8009172:	4654      	mov	r4, sl
 8009174:	2205      	movs	r2, #5
 8009176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800917a:	4858      	ldr	r0, [pc, #352]	; (80092dc <_vfiprintf_r+0x24c>)
 800917c:	f7f7 f858 	bl	8000230 <memchr>
 8009180:	9a04      	ldr	r2, [sp, #16]
 8009182:	b9d8      	cbnz	r0, 80091bc <_vfiprintf_r+0x12c>
 8009184:	06d1      	lsls	r1, r2, #27
 8009186:	bf44      	itt	mi
 8009188:	2320      	movmi	r3, #32
 800918a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800918e:	0713      	lsls	r3, r2, #28
 8009190:	bf44      	itt	mi
 8009192:	232b      	movmi	r3, #43	; 0x2b
 8009194:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009198:	f89a 3000 	ldrb.w	r3, [sl]
 800919c:	2b2a      	cmp	r3, #42	; 0x2a
 800919e:	d015      	beq.n	80091cc <_vfiprintf_r+0x13c>
 80091a0:	9a07      	ldr	r2, [sp, #28]
 80091a2:	4654      	mov	r4, sl
 80091a4:	2000      	movs	r0, #0
 80091a6:	f04f 0c0a 	mov.w	ip, #10
 80091aa:	4621      	mov	r1, r4
 80091ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091b0:	3b30      	subs	r3, #48	; 0x30
 80091b2:	2b09      	cmp	r3, #9
 80091b4:	d94e      	bls.n	8009254 <_vfiprintf_r+0x1c4>
 80091b6:	b1b0      	cbz	r0, 80091e6 <_vfiprintf_r+0x156>
 80091b8:	9207      	str	r2, [sp, #28]
 80091ba:	e014      	b.n	80091e6 <_vfiprintf_r+0x156>
 80091bc:	eba0 0308 	sub.w	r3, r0, r8
 80091c0:	fa09 f303 	lsl.w	r3, r9, r3
 80091c4:	4313      	orrs	r3, r2
 80091c6:	9304      	str	r3, [sp, #16]
 80091c8:	46a2      	mov	sl, r4
 80091ca:	e7d2      	b.n	8009172 <_vfiprintf_r+0xe2>
 80091cc:	9b03      	ldr	r3, [sp, #12]
 80091ce:	1d19      	adds	r1, r3, #4
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	9103      	str	r1, [sp, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	bfbb      	ittet	lt
 80091d8:	425b      	neglt	r3, r3
 80091da:	f042 0202 	orrlt.w	r2, r2, #2
 80091de:	9307      	strge	r3, [sp, #28]
 80091e0:	9307      	strlt	r3, [sp, #28]
 80091e2:	bfb8      	it	lt
 80091e4:	9204      	strlt	r2, [sp, #16]
 80091e6:	7823      	ldrb	r3, [r4, #0]
 80091e8:	2b2e      	cmp	r3, #46	; 0x2e
 80091ea:	d10c      	bne.n	8009206 <_vfiprintf_r+0x176>
 80091ec:	7863      	ldrb	r3, [r4, #1]
 80091ee:	2b2a      	cmp	r3, #42	; 0x2a
 80091f0:	d135      	bne.n	800925e <_vfiprintf_r+0x1ce>
 80091f2:	9b03      	ldr	r3, [sp, #12]
 80091f4:	1d1a      	adds	r2, r3, #4
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	9203      	str	r2, [sp, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	bfb8      	it	lt
 80091fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8009202:	3402      	adds	r4, #2
 8009204:	9305      	str	r3, [sp, #20]
 8009206:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80092ec <_vfiprintf_r+0x25c>
 800920a:	7821      	ldrb	r1, [r4, #0]
 800920c:	2203      	movs	r2, #3
 800920e:	4650      	mov	r0, sl
 8009210:	f7f7 f80e 	bl	8000230 <memchr>
 8009214:	b140      	cbz	r0, 8009228 <_vfiprintf_r+0x198>
 8009216:	2340      	movs	r3, #64	; 0x40
 8009218:	eba0 000a 	sub.w	r0, r0, sl
 800921c:	fa03 f000 	lsl.w	r0, r3, r0
 8009220:	9b04      	ldr	r3, [sp, #16]
 8009222:	4303      	orrs	r3, r0
 8009224:	3401      	adds	r4, #1
 8009226:	9304      	str	r3, [sp, #16]
 8009228:	f814 1b01 	ldrb.w	r1, [r4], #1
 800922c:	482c      	ldr	r0, [pc, #176]	; (80092e0 <_vfiprintf_r+0x250>)
 800922e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009232:	2206      	movs	r2, #6
 8009234:	f7f6 fffc 	bl	8000230 <memchr>
 8009238:	2800      	cmp	r0, #0
 800923a:	d03f      	beq.n	80092bc <_vfiprintf_r+0x22c>
 800923c:	4b29      	ldr	r3, [pc, #164]	; (80092e4 <_vfiprintf_r+0x254>)
 800923e:	bb1b      	cbnz	r3, 8009288 <_vfiprintf_r+0x1f8>
 8009240:	9b03      	ldr	r3, [sp, #12]
 8009242:	3307      	adds	r3, #7
 8009244:	f023 0307 	bic.w	r3, r3, #7
 8009248:	3308      	adds	r3, #8
 800924a:	9303      	str	r3, [sp, #12]
 800924c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800924e:	443b      	add	r3, r7
 8009250:	9309      	str	r3, [sp, #36]	; 0x24
 8009252:	e767      	b.n	8009124 <_vfiprintf_r+0x94>
 8009254:	fb0c 3202 	mla	r2, ip, r2, r3
 8009258:	460c      	mov	r4, r1
 800925a:	2001      	movs	r0, #1
 800925c:	e7a5      	b.n	80091aa <_vfiprintf_r+0x11a>
 800925e:	2300      	movs	r3, #0
 8009260:	3401      	adds	r4, #1
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	4619      	mov	r1, r3
 8009266:	f04f 0c0a 	mov.w	ip, #10
 800926a:	4620      	mov	r0, r4
 800926c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009270:	3a30      	subs	r2, #48	; 0x30
 8009272:	2a09      	cmp	r2, #9
 8009274:	d903      	bls.n	800927e <_vfiprintf_r+0x1ee>
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0c5      	beq.n	8009206 <_vfiprintf_r+0x176>
 800927a:	9105      	str	r1, [sp, #20]
 800927c:	e7c3      	b.n	8009206 <_vfiprintf_r+0x176>
 800927e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009282:	4604      	mov	r4, r0
 8009284:	2301      	movs	r3, #1
 8009286:	e7f0      	b.n	800926a <_vfiprintf_r+0x1da>
 8009288:	ab03      	add	r3, sp, #12
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	462a      	mov	r2, r5
 800928e:	4b16      	ldr	r3, [pc, #88]	; (80092e8 <_vfiprintf_r+0x258>)
 8009290:	a904      	add	r1, sp, #16
 8009292:	4630      	mov	r0, r6
 8009294:	f7fd fef6 	bl	8007084 <_printf_float>
 8009298:	4607      	mov	r7, r0
 800929a:	1c78      	adds	r0, r7, #1
 800929c:	d1d6      	bne.n	800924c <_vfiprintf_r+0x1bc>
 800929e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092a0:	07d9      	lsls	r1, r3, #31
 80092a2:	d405      	bmi.n	80092b0 <_vfiprintf_r+0x220>
 80092a4:	89ab      	ldrh	r3, [r5, #12]
 80092a6:	059a      	lsls	r2, r3, #22
 80092a8:	d402      	bmi.n	80092b0 <_vfiprintf_r+0x220>
 80092aa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092ac:	f7ff fa42 	bl	8008734 <__retarget_lock_release_recursive>
 80092b0:	89ab      	ldrh	r3, [r5, #12]
 80092b2:	065b      	lsls	r3, r3, #25
 80092b4:	f53f af12 	bmi.w	80090dc <_vfiprintf_r+0x4c>
 80092b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092ba:	e711      	b.n	80090e0 <_vfiprintf_r+0x50>
 80092bc:	ab03      	add	r3, sp, #12
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	462a      	mov	r2, r5
 80092c2:	4b09      	ldr	r3, [pc, #36]	; (80092e8 <_vfiprintf_r+0x258>)
 80092c4:	a904      	add	r1, sp, #16
 80092c6:	4630      	mov	r0, r6
 80092c8:	f7fe f980 	bl	80075cc <_printf_i>
 80092cc:	e7e4      	b.n	8009298 <_vfiprintf_r+0x208>
 80092ce:	bf00      	nop
 80092d0:	08009ad8 	.word	0x08009ad8
 80092d4:	08009af8 	.word	0x08009af8
 80092d8:	08009ab8 	.word	0x08009ab8
 80092dc:	08009c74 	.word	0x08009c74
 80092e0:	08009c7e 	.word	0x08009c7e
 80092e4:	08007085 	.word	0x08007085
 80092e8:	0800906b 	.word	0x0800906b
 80092ec:	08009c7a 	.word	0x08009c7a

080092f0 <_sbrk_r>:
 80092f0:	b538      	push	{r3, r4, r5, lr}
 80092f2:	4d06      	ldr	r5, [pc, #24]	; (800930c <_sbrk_r+0x1c>)
 80092f4:	2300      	movs	r3, #0
 80092f6:	4604      	mov	r4, r0
 80092f8:	4608      	mov	r0, r1
 80092fa:	602b      	str	r3, [r5, #0]
 80092fc:	f7f8 fa0c 	bl	8001718 <_sbrk>
 8009300:	1c43      	adds	r3, r0, #1
 8009302:	d102      	bne.n	800930a <_sbrk_r+0x1a>
 8009304:	682b      	ldr	r3, [r5, #0]
 8009306:	b103      	cbz	r3, 800930a <_sbrk_r+0x1a>
 8009308:	6023      	str	r3, [r4, #0]
 800930a:	bd38      	pop	{r3, r4, r5, pc}
 800930c:	20000838 	.word	0x20000838

08009310 <__sread>:
 8009310:	b510      	push	{r4, lr}
 8009312:	460c      	mov	r4, r1
 8009314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009318:	f000 faa8 	bl	800986c <_read_r>
 800931c:	2800      	cmp	r0, #0
 800931e:	bfab      	itete	ge
 8009320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009322:	89a3      	ldrhlt	r3, [r4, #12]
 8009324:	181b      	addge	r3, r3, r0
 8009326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800932a:	bfac      	ite	ge
 800932c:	6563      	strge	r3, [r4, #84]	; 0x54
 800932e:	81a3      	strhlt	r3, [r4, #12]
 8009330:	bd10      	pop	{r4, pc}

08009332 <__swrite>:
 8009332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009336:	461f      	mov	r7, r3
 8009338:	898b      	ldrh	r3, [r1, #12]
 800933a:	05db      	lsls	r3, r3, #23
 800933c:	4605      	mov	r5, r0
 800933e:	460c      	mov	r4, r1
 8009340:	4616      	mov	r6, r2
 8009342:	d505      	bpl.n	8009350 <__swrite+0x1e>
 8009344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009348:	2302      	movs	r3, #2
 800934a:	2200      	movs	r2, #0
 800934c:	f000 f9f8 	bl	8009740 <_lseek_r>
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800935a:	81a3      	strh	r3, [r4, #12]
 800935c:	4632      	mov	r2, r6
 800935e:	463b      	mov	r3, r7
 8009360:	4628      	mov	r0, r5
 8009362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009366:	f000 b869 	b.w	800943c <_write_r>

0800936a <__sseek>:
 800936a:	b510      	push	{r4, lr}
 800936c:	460c      	mov	r4, r1
 800936e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009372:	f000 f9e5 	bl	8009740 <_lseek_r>
 8009376:	1c43      	adds	r3, r0, #1
 8009378:	89a3      	ldrh	r3, [r4, #12]
 800937a:	bf15      	itete	ne
 800937c:	6560      	strne	r0, [r4, #84]	; 0x54
 800937e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009386:	81a3      	strheq	r3, [r4, #12]
 8009388:	bf18      	it	ne
 800938a:	81a3      	strhne	r3, [r4, #12]
 800938c:	bd10      	pop	{r4, pc}

0800938e <__sclose>:
 800938e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009392:	f000 b8f1 	b.w	8009578 <_close_r>
	...

08009398 <__swbuf_r>:
 8009398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800939a:	460e      	mov	r6, r1
 800939c:	4614      	mov	r4, r2
 800939e:	4605      	mov	r5, r0
 80093a0:	b118      	cbz	r0, 80093aa <__swbuf_r+0x12>
 80093a2:	6983      	ldr	r3, [r0, #24]
 80093a4:	b90b      	cbnz	r3, 80093aa <__swbuf_r+0x12>
 80093a6:	f7ff f921 	bl	80085ec <__sinit>
 80093aa:	4b21      	ldr	r3, [pc, #132]	; (8009430 <__swbuf_r+0x98>)
 80093ac:	429c      	cmp	r4, r3
 80093ae:	d12b      	bne.n	8009408 <__swbuf_r+0x70>
 80093b0:	686c      	ldr	r4, [r5, #4]
 80093b2:	69a3      	ldr	r3, [r4, #24]
 80093b4:	60a3      	str	r3, [r4, #8]
 80093b6:	89a3      	ldrh	r3, [r4, #12]
 80093b8:	071a      	lsls	r2, r3, #28
 80093ba:	d52f      	bpl.n	800941c <__swbuf_r+0x84>
 80093bc:	6923      	ldr	r3, [r4, #16]
 80093be:	b36b      	cbz	r3, 800941c <__swbuf_r+0x84>
 80093c0:	6923      	ldr	r3, [r4, #16]
 80093c2:	6820      	ldr	r0, [r4, #0]
 80093c4:	1ac0      	subs	r0, r0, r3
 80093c6:	6963      	ldr	r3, [r4, #20]
 80093c8:	b2f6      	uxtb	r6, r6
 80093ca:	4283      	cmp	r3, r0
 80093cc:	4637      	mov	r7, r6
 80093ce:	dc04      	bgt.n	80093da <__swbuf_r+0x42>
 80093d0:	4621      	mov	r1, r4
 80093d2:	4628      	mov	r0, r5
 80093d4:	f000 f966 	bl	80096a4 <_fflush_r>
 80093d8:	bb30      	cbnz	r0, 8009428 <__swbuf_r+0x90>
 80093da:	68a3      	ldr	r3, [r4, #8]
 80093dc:	3b01      	subs	r3, #1
 80093de:	60a3      	str	r3, [r4, #8]
 80093e0:	6823      	ldr	r3, [r4, #0]
 80093e2:	1c5a      	adds	r2, r3, #1
 80093e4:	6022      	str	r2, [r4, #0]
 80093e6:	701e      	strb	r6, [r3, #0]
 80093e8:	6963      	ldr	r3, [r4, #20]
 80093ea:	3001      	adds	r0, #1
 80093ec:	4283      	cmp	r3, r0
 80093ee:	d004      	beq.n	80093fa <__swbuf_r+0x62>
 80093f0:	89a3      	ldrh	r3, [r4, #12]
 80093f2:	07db      	lsls	r3, r3, #31
 80093f4:	d506      	bpl.n	8009404 <__swbuf_r+0x6c>
 80093f6:	2e0a      	cmp	r6, #10
 80093f8:	d104      	bne.n	8009404 <__swbuf_r+0x6c>
 80093fa:	4621      	mov	r1, r4
 80093fc:	4628      	mov	r0, r5
 80093fe:	f000 f951 	bl	80096a4 <_fflush_r>
 8009402:	b988      	cbnz	r0, 8009428 <__swbuf_r+0x90>
 8009404:	4638      	mov	r0, r7
 8009406:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009408:	4b0a      	ldr	r3, [pc, #40]	; (8009434 <__swbuf_r+0x9c>)
 800940a:	429c      	cmp	r4, r3
 800940c:	d101      	bne.n	8009412 <__swbuf_r+0x7a>
 800940e:	68ac      	ldr	r4, [r5, #8]
 8009410:	e7cf      	b.n	80093b2 <__swbuf_r+0x1a>
 8009412:	4b09      	ldr	r3, [pc, #36]	; (8009438 <__swbuf_r+0xa0>)
 8009414:	429c      	cmp	r4, r3
 8009416:	bf08      	it	eq
 8009418:	68ec      	ldreq	r4, [r5, #12]
 800941a:	e7ca      	b.n	80093b2 <__swbuf_r+0x1a>
 800941c:	4621      	mov	r1, r4
 800941e:	4628      	mov	r0, r5
 8009420:	f000 f81e 	bl	8009460 <__swsetup_r>
 8009424:	2800      	cmp	r0, #0
 8009426:	d0cb      	beq.n	80093c0 <__swbuf_r+0x28>
 8009428:	f04f 37ff 	mov.w	r7, #4294967295
 800942c:	e7ea      	b.n	8009404 <__swbuf_r+0x6c>
 800942e:	bf00      	nop
 8009430:	08009ad8 	.word	0x08009ad8
 8009434:	08009af8 	.word	0x08009af8
 8009438:	08009ab8 	.word	0x08009ab8

0800943c <_write_r>:
 800943c:	b538      	push	{r3, r4, r5, lr}
 800943e:	4d07      	ldr	r5, [pc, #28]	; (800945c <_write_r+0x20>)
 8009440:	4604      	mov	r4, r0
 8009442:	4608      	mov	r0, r1
 8009444:	4611      	mov	r1, r2
 8009446:	2200      	movs	r2, #0
 8009448:	602a      	str	r2, [r5, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	f7f8 f913 	bl	8001676 <_write>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d102      	bne.n	800945a <_write_r+0x1e>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	b103      	cbz	r3, 800945a <_write_r+0x1e>
 8009458:	6023      	str	r3, [r4, #0]
 800945a:	bd38      	pop	{r3, r4, r5, pc}
 800945c:	20000838 	.word	0x20000838

08009460 <__swsetup_r>:
 8009460:	4b32      	ldr	r3, [pc, #200]	; (800952c <__swsetup_r+0xcc>)
 8009462:	b570      	push	{r4, r5, r6, lr}
 8009464:	681d      	ldr	r5, [r3, #0]
 8009466:	4606      	mov	r6, r0
 8009468:	460c      	mov	r4, r1
 800946a:	b125      	cbz	r5, 8009476 <__swsetup_r+0x16>
 800946c:	69ab      	ldr	r3, [r5, #24]
 800946e:	b913      	cbnz	r3, 8009476 <__swsetup_r+0x16>
 8009470:	4628      	mov	r0, r5
 8009472:	f7ff f8bb 	bl	80085ec <__sinit>
 8009476:	4b2e      	ldr	r3, [pc, #184]	; (8009530 <__swsetup_r+0xd0>)
 8009478:	429c      	cmp	r4, r3
 800947a:	d10f      	bne.n	800949c <__swsetup_r+0x3c>
 800947c:	686c      	ldr	r4, [r5, #4]
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009484:	0719      	lsls	r1, r3, #28
 8009486:	d42c      	bmi.n	80094e2 <__swsetup_r+0x82>
 8009488:	06dd      	lsls	r5, r3, #27
 800948a:	d411      	bmi.n	80094b0 <__swsetup_r+0x50>
 800948c:	2309      	movs	r3, #9
 800948e:	6033      	str	r3, [r6, #0]
 8009490:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009494:	81a3      	strh	r3, [r4, #12]
 8009496:	f04f 30ff 	mov.w	r0, #4294967295
 800949a:	e03e      	b.n	800951a <__swsetup_r+0xba>
 800949c:	4b25      	ldr	r3, [pc, #148]	; (8009534 <__swsetup_r+0xd4>)
 800949e:	429c      	cmp	r4, r3
 80094a0:	d101      	bne.n	80094a6 <__swsetup_r+0x46>
 80094a2:	68ac      	ldr	r4, [r5, #8]
 80094a4:	e7eb      	b.n	800947e <__swsetup_r+0x1e>
 80094a6:	4b24      	ldr	r3, [pc, #144]	; (8009538 <__swsetup_r+0xd8>)
 80094a8:	429c      	cmp	r4, r3
 80094aa:	bf08      	it	eq
 80094ac:	68ec      	ldreq	r4, [r5, #12]
 80094ae:	e7e6      	b.n	800947e <__swsetup_r+0x1e>
 80094b0:	0758      	lsls	r0, r3, #29
 80094b2:	d512      	bpl.n	80094da <__swsetup_r+0x7a>
 80094b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80094b6:	b141      	cbz	r1, 80094ca <__swsetup_r+0x6a>
 80094b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80094bc:	4299      	cmp	r1, r3
 80094be:	d002      	beq.n	80094c6 <__swsetup_r+0x66>
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7ff fcdb 	bl	8008e7c <_free_r>
 80094c6:	2300      	movs	r3, #0
 80094c8:	6363      	str	r3, [r4, #52]	; 0x34
 80094ca:	89a3      	ldrh	r3, [r4, #12]
 80094cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80094d0:	81a3      	strh	r3, [r4, #12]
 80094d2:	2300      	movs	r3, #0
 80094d4:	6063      	str	r3, [r4, #4]
 80094d6:	6923      	ldr	r3, [r4, #16]
 80094d8:	6023      	str	r3, [r4, #0]
 80094da:	89a3      	ldrh	r3, [r4, #12]
 80094dc:	f043 0308 	orr.w	r3, r3, #8
 80094e0:	81a3      	strh	r3, [r4, #12]
 80094e2:	6923      	ldr	r3, [r4, #16]
 80094e4:	b94b      	cbnz	r3, 80094fa <__swsetup_r+0x9a>
 80094e6:	89a3      	ldrh	r3, [r4, #12]
 80094e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80094ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f0:	d003      	beq.n	80094fa <__swsetup_r+0x9a>
 80094f2:	4621      	mov	r1, r4
 80094f4:	4630      	mov	r0, r6
 80094f6:	f000 f95b 	bl	80097b0 <__smakebuf_r>
 80094fa:	89a0      	ldrh	r0, [r4, #12]
 80094fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009500:	f010 0301 	ands.w	r3, r0, #1
 8009504:	d00a      	beq.n	800951c <__swsetup_r+0xbc>
 8009506:	2300      	movs	r3, #0
 8009508:	60a3      	str	r3, [r4, #8]
 800950a:	6963      	ldr	r3, [r4, #20]
 800950c:	425b      	negs	r3, r3
 800950e:	61a3      	str	r3, [r4, #24]
 8009510:	6923      	ldr	r3, [r4, #16]
 8009512:	b943      	cbnz	r3, 8009526 <__swsetup_r+0xc6>
 8009514:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009518:	d1ba      	bne.n	8009490 <__swsetup_r+0x30>
 800951a:	bd70      	pop	{r4, r5, r6, pc}
 800951c:	0781      	lsls	r1, r0, #30
 800951e:	bf58      	it	pl
 8009520:	6963      	ldrpl	r3, [r4, #20]
 8009522:	60a3      	str	r3, [r4, #8]
 8009524:	e7f4      	b.n	8009510 <__swsetup_r+0xb0>
 8009526:	2000      	movs	r0, #0
 8009528:	e7f7      	b.n	800951a <__swsetup_r+0xba>
 800952a:	bf00      	nop
 800952c:	2000000c 	.word	0x2000000c
 8009530:	08009ad8 	.word	0x08009ad8
 8009534:	08009af8 	.word	0x08009af8
 8009538:	08009ab8 	.word	0x08009ab8

0800953c <__assert_func>:
 800953c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800953e:	4614      	mov	r4, r2
 8009540:	461a      	mov	r2, r3
 8009542:	4b09      	ldr	r3, [pc, #36]	; (8009568 <__assert_func+0x2c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4605      	mov	r5, r0
 8009548:	68d8      	ldr	r0, [r3, #12]
 800954a:	b14c      	cbz	r4, 8009560 <__assert_func+0x24>
 800954c:	4b07      	ldr	r3, [pc, #28]	; (800956c <__assert_func+0x30>)
 800954e:	9100      	str	r1, [sp, #0]
 8009550:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009554:	4906      	ldr	r1, [pc, #24]	; (8009570 <__assert_func+0x34>)
 8009556:	462b      	mov	r3, r5
 8009558:	f000 f8e0 	bl	800971c <fiprintf>
 800955c:	f000 f9a5 	bl	80098aa <abort>
 8009560:	4b04      	ldr	r3, [pc, #16]	; (8009574 <__assert_func+0x38>)
 8009562:	461c      	mov	r4, r3
 8009564:	e7f3      	b.n	800954e <__assert_func+0x12>
 8009566:	bf00      	nop
 8009568:	2000000c 	.word	0x2000000c
 800956c:	08009c85 	.word	0x08009c85
 8009570:	08009c92 	.word	0x08009c92
 8009574:	08009cc0 	.word	0x08009cc0

08009578 <_close_r>:
 8009578:	b538      	push	{r3, r4, r5, lr}
 800957a:	4d06      	ldr	r5, [pc, #24]	; (8009594 <_close_r+0x1c>)
 800957c:	2300      	movs	r3, #0
 800957e:	4604      	mov	r4, r0
 8009580:	4608      	mov	r0, r1
 8009582:	602b      	str	r3, [r5, #0]
 8009584:	f7f8 f893 	bl	80016ae <_close>
 8009588:	1c43      	adds	r3, r0, #1
 800958a:	d102      	bne.n	8009592 <_close_r+0x1a>
 800958c:	682b      	ldr	r3, [r5, #0]
 800958e:	b103      	cbz	r3, 8009592 <_close_r+0x1a>
 8009590:	6023      	str	r3, [r4, #0]
 8009592:	bd38      	pop	{r3, r4, r5, pc}
 8009594:	20000838 	.word	0x20000838

08009598 <__sflush_r>:
 8009598:	898a      	ldrh	r2, [r1, #12]
 800959a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800959e:	4605      	mov	r5, r0
 80095a0:	0710      	lsls	r0, r2, #28
 80095a2:	460c      	mov	r4, r1
 80095a4:	d458      	bmi.n	8009658 <__sflush_r+0xc0>
 80095a6:	684b      	ldr	r3, [r1, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	dc05      	bgt.n	80095b8 <__sflush_r+0x20>
 80095ac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	dc02      	bgt.n	80095b8 <__sflush_r+0x20>
 80095b2:	2000      	movs	r0, #0
 80095b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095ba:	2e00      	cmp	r6, #0
 80095bc:	d0f9      	beq.n	80095b2 <__sflush_r+0x1a>
 80095be:	2300      	movs	r3, #0
 80095c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80095c4:	682f      	ldr	r7, [r5, #0]
 80095c6:	602b      	str	r3, [r5, #0]
 80095c8:	d032      	beq.n	8009630 <__sflush_r+0x98>
 80095ca:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80095cc:	89a3      	ldrh	r3, [r4, #12]
 80095ce:	075a      	lsls	r2, r3, #29
 80095d0:	d505      	bpl.n	80095de <__sflush_r+0x46>
 80095d2:	6863      	ldr	r3, [r4, #4]
 80095d4:	1ac0      	subs	r0, r0, r3
 80095d6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80095d8:	b10b      	cbz	r3, 80095de <__sflush_r+0x46>
 80095da:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80095dc:	1ac0      	subs	r0, r0, r3
 80095de:	2300      	movs	r3, #0
 80095e0:	4602      	mov	r2, r0
 80095e2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80095e4:	6a21      	ldr	r1, [r4, #32]
 80095e6:	4628      	mov	r0, r5
 80095e8:	47b0      	blx	r6
 80095ea:	1c43      	adds	r3, r0, #1
 80095ec:	89a3      	ldrh	r3, [r4, #12]
 80095ee:	d106      	bne.n	80095fe <__sflush_r+0x66>
 80095f0:	6829      	ldr	r1, [r5, #0]
 80095f2:	291d      	cmp	r1, #29
 80095f4:	d82c      	bhi.n	8009650 <__sflush_r+0xb8>
 80095f6:	4a2a      	ldr	r2, [pc, #168]	; (80096a0 <__sflush_r+0x108>)
 80095f8:	40ca      	lsrs	r2, r1
 80095fa:	07d6      	lsls	r6, r2, #31
 80095fc:	d528      	bpl.n	8009650 <__sflush_r+0xb8>
 80095fe:	2200      	movs	r2, #0
 8009600:	6062      	str	r2, [r4, #4]
 8009602:	04d9      	lsls	r1, r3, #19
 8009604:	6922      	ldr	r2, [r4, #16]
 8009606:	6022      	str	r2, [r4, #0]
 8009608:	d504      	bpl.n	8009614 <__sflush_r+0x7c>
 800960a:	1c42      	adds	r2, r0, #1
 800960c:	d101      	bne.n	8009612 <__sflush_r+0x7a>
 800960e:	682b      	ldr	r3, [r5, #0]
 8009610:	b903      	cbnz	r3, 8009614 <__sflush_r+0x7c>
 8009612:	6560      	str	r0, [r4, #84]	; 0x54
 8009614:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009616:	602f      	str	r7, [r5, #0]
 8009618:	2900      	cmp	r1, #0
 800961a:	d0ca      	beq.n	80095b2 <__sflush_r+0x1a>
 800961c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009620:	4299      	cmp	r1, r3
 8009622:	d002      	beq.n	800962a <__sflush_r+0x92>
 8009624:	4628      	mov	r0, r5
 8009626:	f7ff fc29 	bl	8008e7c <_free_r>
 800962a:	2000      	movs	r0, #0
 800962c:	6360      	str	r0, [r4, #52]	; 0x34
 800962e:	e7c1      	b.n	80095b4 <__sflush_r+0x1c>
 8009630:	6a21      	ldr	r1, [r4, #32]
 8009632:	2301      	movs	r3, #1
 8009634:	4628      	mov	r0, r5
 8009636:	47b0      	blx	r6
 8009638:	1c41      	adds	r1, r0, #1
 800963a:	d1c7      	bne.n	80095cc <__sflush_r+0x34>
 800963c:	682b      	ldr	r3, [r5, #0]
 800963e:	2b00      	cmp	r3, #0
 8009640:	d0c4      	beq.n	80095cc <__sflush_r+0x34>
 8009642:	2b1d      	cmp	r3, #29
 8009644:	d001      	beq.n	800964a <__sflush_r+0xb2>
 8009646:	2b16      	cmp	r3, #22
 8009648:	d101      	bne.n	800964e <__sflush_r+0xb6>
 800964a:	602f      	str	r7, [r5, #0]
 800964c:	e7b1      	b.n	80095b2 <__sflush_r+0x1a>
 800964e:	89a3      	ldrh	r3, [r4, #12]
 8009650:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009654:	81a3      	strh	r3, [r4, #12]
 8009656:	e7ad      	b.n	80095b4 <__sflush_r+0x1c>
 8009658:	690f      	ldr	r7, [r1, #16]
 800965a:	2f00      	cmp	r7, #0
 800965c:	d0a9      	beq.n	80095b2 <__sflush_r+0x1a>
 800965e:	0793      	lsls	r3, r2, #30
 8009660:	680e      	ldr	r6, [r1, #0]
 8009662:	bf08      	it	eq
 8009664:	694b      	ldreq	r3, [r1, #20]
 8009666:	600f      	str	r7, [r1, #0]
 8009668:	bf18      	it	ne
 800966a:	2300      	movne	r3, #0
 800966c:	eba6 0807 	sub.w	r8, r6, r7
 8009670:	608b      	str	r3, [r1, #8]
 8009672:	f1b8 0f00 	cmp.w	r8, #0
 8009676:	dd9c      	ble.n	80095b2 <__sflush_r+0x1a>
 8009678:	6a21      	ldr	r1, [r4, #32]
 800967a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800967c:	4643      	mov	r3, r8
 800967e:	463a      	mov	r2, r7
 8009680:	4628      	mov	r0, r5
 8009682:	47b0      	blx	r6
 8009684:	2800      	cmp	r0, #0
 8009686:	dc06      	bgt.n	8009696 <__sflush_r+0xfe>
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	f04f 30ff 	mov.w	r0, #4294967295
 8009694:	e78e      	b.n	80095b4 <__sflush_r+0x1c>
 8009696:	4407      	add	r7, r0
 8009698:	eba8 0800 	sub.w	r8, r8, r0
 800969c:	e7e9      	b.n	8009672 <__sflush_r+0xda>
 800969e:	bf00      	nop
 80096a0:	20400001 	.word	0x20400001

080096a4 <_fflush_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	690b      	ldr	r3, [r1, #16]
 80096a8:	4605      	mov	r5, r0
 80096aa:	460c      	mov	r4, r1
 80096ac:	b913      	cbnz	r3, 80096b4 <_fflush_r+0x10>
 80096ae:	2500      	movs	r5, #0
 80096b0:	4628      	mov	r0, r5
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	b118      	cbz	r0, 80096be <_fflush_r+0x1a>
 80096b6:	6983      	ldr	r3, [r0, #24]
 80096b8:	b90b      	cbnz	r3, 80096be <_fflush_r+0x1a>
 80096ba:	f7fe ff97 	bl	80085ec <__sinit>
 80096be:	4b14      	ldr	r3, [pc, #80]	; (8009710 <_fflush_r+0x6c>)
 80096c0:	429c      	cmp	r4, r3
 80096c2:	d11b      	bne.n	80096fc <_fflush_r+0x58>
 80096c4:	686c      	ldr	r4, [r5, #4]
 80096c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d0ef      	beq.n	80096ae <_fflush_r+0xa>
 80096ce:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80096d0:	07d0      	lsls	r0, r2, #31
 80096d2:	d404      	bmi.n	80096de <_fflush_r+0x3a>
 80096d4:	0599      	lsls	r1, r3, #22
 80096d6:	d402      	bmi.n	80096de <_fflush_r+0x3a>
 80096d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096da:	f7ff f82a 	bl	8008732 <__retarget_lock_acquire_recursive>
 80096de:	4628      	mov	r0, r5
 80096e0:	4621      	mov	r1, r4
 80096e2:	f7ff ff59 	bl	8009598 <__sflush_r>
 80096e6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80096e8:	07da      	lsls	r2, r3, #31
 80096ea:	4605      	mov	r5, r0
 80096ec:	d4e0      	bmi.n	80096b0 <_fflush_r+0xc>
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	059b      	lsls	r3, r3, #22
 80096f2:	d4dd      	bmi.n	80096b0 <_fflush_r+0xc>
 80096f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80096f6:	f7ff f81d 	bl	8008734 <__retarget_lock_release_recursive>
 80096fa:	e7d9      	b.n	80096b0 <_fflush_r+0xc>
 80096fc:	4b05      	ldr	r3, [pc, #20]	; (8009714 <_fflush_r+0x70>)
 80096fe:	429c      	cmp	r4, r3
 8009700:	d101      	bne.n	8009706 <_fflush_r+0x62>
 8009702:	68ac      	ldr	r4, [r5, #8]
 8009704:	e7df      	b.n	80096c6 <_fflush_r+0x22>
 8009706:	4b04      	ldr	r3, [pc, #16]	; (8009718 <_fflush_r+0x74>)
 8009708:	429c      	cmp	r4, r3
 800970a:	bf08      	it	eq
 800970c:	68ec      	ldreq	r4, [r5, #12]
 800970e:	e7da      	b.n	80096c6 <_fflush_r+0x22>
 8009710:	08009ad8 	.word	0x08009ad8
 8009714:	08009af8 	.word	0x08009af8
 8009718:	08009ab8 	.word	0x08009ab8

0800971c <fiprintf>:
 800971c:	b40e      	push	{r1, r2, r3}
 800971e:	b503      	push	{r0, r1, lr}
 8009720:	4601      	mov	r1, r0
 8009722:	ab03      	add	r3, sp, #12
 8009724:	4805      	ldr	r0, [pc, #20]	; (800973c <fiprintf+0x20>)
 8009726:	f853 2b04 	ldr.w	r2, [r3], #4
 800972a:	6800      	ldr	r0, [r0, #0]
 800972c:	9301      	str	r3, [sp, #4]
 800972e:	f7ff fcaf 	bl	8009090 <_vfiprintf_r>
 8009732:	b002      	add	sp, #8
 8009734:	f85d eb04 	ldr.w	lr, [sp], #4
 8009738:	b003      	add	sp, #12
 800973a:	4770      	bx	lr
 800973c:	2000000c 	.word	0x2000000c

08009740 <_lseek_r>:
 8009740:	b538      	push	{r3, r4, r5, lr}
 8009742:	4d07      	ldr	r5, [pc, #28]	; (8009760 <_lseek_r+0x20>)
 8009744:	4604      	mov	r4, r0
 8009746:	4608      	mov	r0, r1
 8009748:	4611      	mov	r1, r2
 800974a:	2200      	movs	r2, #0
 800974c:	602a      	str	r2, [r5, #0]
 800974e:	461a      	mov	r2, r3
 8009750:	f7f7 ffd4 	bl	80016fc <_lseek>
 8009754:	1c43      	adds	r3, r0, #1
 8009756:	d102      	bne.n	800975e <_lseek_r+0x1e>
 8009758:	682b      	ldr	r3, [r5, #0]
 800975a:	b103      	cbz	r3, 800975e <_lseek_r+0x1e>
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	bd38      	pop	{r3, r4, r5, pc}
 8009760:	20000838 	.word	0x20000838

08009764 <__swhatbuf_r>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	460e      	mov	r6, r1
 8009768:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800976c:	2900      	cmp	r1, #0
 800976e:	b096      	sub	sp, #88	; 0x58
 8009770:	4614      	mov	r4, r2
 8009772:	461d      	mov	r5, r3
 8009774:	da08      	bge.n	8009788 <__swhatbuf_r+0x24>
 8009776:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800977a:	2200      	movs	r2, #0
 800977c:	602a      	str	r2, [r5, #0]
 800977e:	061a      	lsls	r2, r3, #24
 8009780:	d410      	bmi.n	80097a4 <__swhatbuf_r+0x40>
 8009782:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009786:	e00e      	b.n	80097a6 <__swhatbuf_r+0x42>
 8009788:	466a      	mov	r2, sp
 800978a:	f000 f895 	bl	80098b8 <_fstat_r>
 800978e:	2800      	cmp	r0, #0
 8009790:	dbf1      	blt.n	8009776 <__swhatbuf_r+0x12>
 8009792:	9a01      	ldr	r2, [sp, #4]
 8009794:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009798:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800979c:	425a      	negs	r2, r3
 800979e:	415a      	adcs	r2, r3
 80097a0:	602a      	str	r2, [r5, #0]
 80097a2:	e7ee      	b.n	8009782 <__swhatbuf_r+0x1e>
 80097a4:	2340      	movs	r3, #64	; 0x40
 80097a6:	2000      	movs	r0, #0
 80097a8:	6023      	str	r3, [r4, #0]
 80097aa:	b016      	add	sp, #88	; 0x58
 80097ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080097b0 <__smakebuf_r>:
 80097b0:	898b      	ldrh	r3, [r1, #12]
 80097b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097b4:	079d      	lsls	r5, r3, #30
 80097b6:	4606      	mov	r6, r0
 80097b8:	460c      	mov	r4, r1
 80097ba:	d507      	bpl.n	80097cc <__smakebuf_r+0x1c>
 80097bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097c0:	6023      	str	r3, [r4, #0]
 80097c2:	6123      	str	r3, [r4, #16]
 80097c4:	2301      	movs	r3, #1
 80097c6:	6163      	str	r3, [r4, #20]
 80097c8:	b002      	add	sp, #8
 80097ca:	bd70      	pop	{r4, r5, r6, pc}
 80097cc:	ab01      	add	r3, sp, #4
 80097ce:	466a      	mov	r2, sp
 80097d0:	f7ff ffc8 	bl	8009764 <__swhatbuf_r>
 80097d4:	9900      	ldr	r1, [sp, #0]
 80097d6:	4605      	mov	r5, r0
 80097d8:	4630      	mov	r0, r6
 80097da:	f7ff fbbb 	bl	8008f54 <_malloc_r>
 80097de:	b948      	cbnz	r0, 80097f4 <__smakebuf_r+0x44>
 80097e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e4:	059a      	lsls	r2, r3, #22
 80097e6:	d4ef      	bmi.n	80097c8 <__smakebuf_r+0x18>
 80097e8:	f023 0303 	bic.w	r3, r3, #3
 80097ec:	f043 0302 	orr.w	r3, r3, #2
 80097f0:	81a3      	strh	r3, [r4, #12]
 80097f2:	e7e3      	b.n	80097bc <__smakebuf_r+0xc>
 80097f4:	4b0d      	ldr	r3, [pc, #52]	; (800982c <__smakebuf_r+0x7c>)
 80097f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80097f8:	89a3      	ldrh	r3, [r4, #12]
 80097fa:	6020      	str	r0, [r4, #0]
 80097fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009800:	81a3      	strh	r3, [r4, #12]
 8009802:	9b00      	ldr	r3, [sp, #0]
 8009804:	6163      	str	r3, [r4, #20]
 8009806:	9b01      	ldr	r3, [sp, #4]
 8009808:	6120      	str	r0, [r4, #16]
 800980a:	b15b      	cbz	r3, 8009824 <__smakebuf_r+0x74>
 800980c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009810:	4630      	mov	r0, r6
 8009812:	f000 f863 	bl	80098dc <_isatty_r>
 8009816:	b128      	cbz	r0, 8009824 <__smakebuf_r+0x74>
 8009818:	89a3      	ldrh	r3, [r4, #12]
 800981a:	f023 0303 	bic.w	r3, r3, #3
 800981e:	f043 0301 	orr.w	r3, r3, #1
 8009822:	81a3      	strh	r3, [r4, #12]
 8009824:	89a0      	ldrh	r0, [r4, #12]
 8009826:	4305      	orrs	r5, r0
 8009828:	81a5      	strh	r5, [r4, #12]
 800982a:	e7cd      	b.n	80097c8 <__smakebuf_r+0x18>
 800982c:	08008585 	.word	0x08008585

08009830 <__ascii_mbtowc>:
 8009830:	b082      	sub	sp, #8
 8009832:	b901      	cbnz	r1, 8009836 <__ascii_mbtowc+0x6>
 8009834:	a901      	add	r1, sp, #4
 8009836:	b142      	cbz	r2, 800984a <__ascii_mbtowc+0x1a>
 8009838:	b14b      	cbz	r3, 800984e <__ascii_mbtowc+0x1e>
 800983a:	7813      	ldrb	r3, [r2, #0]
 800983c:	600b      	str	r3, [r1, #0]
 800983e:	7812      	ldrb	r2, [r2, #0]
 8009840:	1e10      	subs	r0, r2, #0
 8009842:	bf18      	it	ne
 8009844:	2001      	movne	r0, #1
 8009846:	b002      	add	sp, #8
 8009848:	4770      	bx	lr
 800984a:	4610      	mov	r0, r2
 800984c:	e7fb      	b.n	8009846 <__ascii_mbtowc+0x16>
 800984e:	f06f 0001 	mvn.w	r0, #1
 8009852:	e7f8      	b.n	8009846 <__ascii_mbtowc+0x16>

08009854 <__malloc_lock>:
 8009854:	4801      	ldr	r0, [pc, #4]	; (800985c <__malloc_lock+0x8>)
 8009856:	f7fe bf6c 	b.w	8008732 <__retarget_lock_acquire_recursive>
 800985a:	bf00      	nop
 800985c:	2000082c 	.word	0x2000082c

08009860 <__malloc_unlock>:
 8009860:	4801      	ldr	r0, [pc, #4]	; (8009868 <__malloc_unlock+0x8>)
 8009862:	f7fe bf67 	b.w	8008734 <__retarget_lock_release_recursive>
 8009866:	bf00      	nop
 8009868:	2000082c 	.word	0x2000082c

0800986c <_read_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4d07      	ldr	r5, [pc, #28]	; (800988c <_read_r+0x20>)
 8009870:	4604      	mov	r4, r0
 8009872:	4608      	mov	r0, r1
 8009874:	4611      	mov	r1, r2
 8009876:	2200      	movs	r2, #0
 8009878:	602a      	str	r2, [r5, #0]
 800987a:	461a      	mov	r2, r3
 800987c:	f7f7 fede 	bl	800163c <_read>
 8009880:	1c43      	adds	r3, r0, #1
 8009882:	d102      	bne.n	800988a <_read_r+0x1e>
 8009884:	682b      	ldr	r3, [r5, #0]
 8009886:	b103      	cbz	r3, 800988a <_read_r+0x1e>
 8009888:	6023      	str	r3, [r4, #0]
 800988a:	bd38      	pop	{r3, r4, r5, pc}
 800988c:	20000838 	.word	0x20000838

08009890 <__ascii_wctomb>:
 8009890:	b149      	cbz	r1, 80098a6 <__ascii_wctomb+0x16>
 8009892:	2aff      	cmp	r2, #255	; 0xff
 8009894:	bf85      	ittet	hi
 8009896:	238a      	movhi	r3, #138	; 0x8a
 8009898:	6003      	strhi	r3, [r0, #0]
 800989a:	700a      	strbls	r2, [r1, #0]
 800989c:	f04f 30ff 	movhi.w	r0, #4294967295
 80098a0:	bf98      	it	ls
 80098a2:	2001      	movls	r0, #1
 80098a4:	4770      	bx	lr
 80098a6:	4608      	mov	r0, r1
 80098a8:	4770      	bx	lr

080098aa <abort>:
 80098aa:	b508      	push	{r3, lr}
 80098ac:	2006      	movs	r0, #6
 80098ae:	f000 f84d 	bl	800994c <raise>
 80098b2:	2001      	movs	r0, #1
 80098b4:	f7f7 feb8 	bl	8001628 <_exit>

080098b8 <_fstat_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4d07      	ldr	r5, [pc, #28]	; (80098d8 <_fstat_r+0x20>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4604      	mov	r4, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	602b      	str	r3, [r5, #0]
 80098c6:	f7f7 fefe 	bl	80016c6 <_fstat>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d102      	bne.n	80098d4 <_fstat_r+0x1c>
 80098ce:	682b      	ldr	r3, [r5, #0]
 80098d0:	b103      	cbz	r3, 80098d4 <_fstat_r+0x1c>
 80098d2:	6023      	str	r3, [r4, #0]
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	bf00      	nop
 80098d8:	20000838 	.word	0x20000838

080098dc <_isatty_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4d06      	ldr	r5, [pc, #24]	; (80098f8 <_isatty_r+0x1c>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4604      	mov	r4, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	602b      	str	r3, [r5, #0]
 80098e8:	f7f7 fefd 	bl	80016e6 <_isatty>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_isatty_r+0x1a>
 80098f0:	682b      	ldr	r3, [r5, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_isatty_r+0x1a>
 80098f4:	6023      	str	r3, [r4, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	20000838 	.word	0x20000838

080098fc <_raise_r>:
 80098fc:	291f      	cmp	r1, #31
 80098fe:	b538      	push	{r3, r4, r5, lr}
 8009900:	4604      	mov	r4, r0
 8009902:	460d      	mov	r5, r1
 8009904:	d904      	bls.n	8009910 <_raise_r+0x14>
 8009906:	2316      	movs	r3, #22
 8009908:	6003      	str	r3, [r0, #0]
 800990a:	f04f 30ff 	mov.w	r0, #4294967295
 800990e:	bd38      	pop	{r3, r4, r5, pc}
 8009910:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009912:	b112      	cbz	r2, 800991a <_raise_r+0x1e>
 8009914:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009918:	b94b      	cbnz	r3, 800992e <_raise_r+0x32>
 800991a:	4620      	mov	r0, r4
 800991c:	f000 f830 	bl	8009980 <_getpid_r>
 8009920:	462a      	mov	r2, r5
 8009922:	4601      	mov	r1, r0
 8009924:	4620      	mov	r0, r4
 8009926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800992a:	f000 b817 	b.w	800995c <_kill_r>
 800992e:	2b01      	cmp	r3, #1
 8009930:	d00a      	beq.n	8009948 <_raise_r+0x4c>
 8009932:	1c59      	adds	r1, r3, #1
 8009934:	d103      	bne.n	800993e <_raise_r+0x42>
 8009936:	2316      	movs	r3, #22
 8009938:	6003      	str	r3, [r0, #0]
 800993a:	2001      	movs	r0, #1
 800993c:	e7e7      	b.n	800990e <_raise_r+0x12>
 800993e:	2400      	movs	r4, #0
 8009940:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009944:	4628      	mov	r0, r5
 8009946:	4798      	blx	r3
 8009948:	2000      	movs	r0, #0
 800994a:	e7e0      	b.n	800990e <_raise_r+0x12>

0800994c <raise>:
 800994c:	4b02      	ldr	r3, [pc, #8]	; (8009958 <raise+0xc>)
 800994e:	4601      	mov	r1, r0
 8009950:	6818      	ldr	r0, [r3, #0]
 8009952:	f7ff bfd3 	b.w	80098fc <_raise_r>
 8009956:	bf00      	nop
 8009958:	2000000c 	.word	0x2000000c

0800995c <_kill_r>:
 800995c:	b538      	push	{r3, r4, r5, lr}
 800995e:	4d07      	ldr	r5, [pc, #28]	; (800997c <_kill_r+0x20>)
 8009960:	2300      	movs	r3, #0
 8009962:	4604      	mov	r4, r0
 8009964:	4608      	mov	r0, r1
 8009966:	4611      	mov	r1, r2
 8009968:	602b      	str	r3, [r5, #0]
 800996a:	f7f7 fe4d 	bl	8001608 <_kill>
 800996e:	1c43      	adds	r3, r0, #1
 8009970:	d102      	bne.n	8009978 <_kill_r+0x1c>
 8009972:	682b      	ldr	r3, [r5, #0]
 8009974:	b103      	cbz	r3, 8009978 <_kill_r+0x1c>
 8009976:	6023      	str	r3, [r4, #0]
 8009978:	bd38      	pop	{r3, r4, r5, pc}
 800997a:	bf00      	nop
 800997c:	20000838 	.word	0x20000838

08009980 <_getpid_r>:
 8009980:	f7f7 be3a 	b.w	80015f8 <_getpid>

08009984 <_init>:
 8009984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009986:	bf00      	nop
 8009988:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800998a:	bc08      	pop	{r3}
 800998c:	469e      	mov	lr, r3
 800998e:	4770      	bx	lr

08009990 <_fini>:
 8009990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009992:	bf00      	nop
 8009994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009996:	bc08      	pop	{r3}
 8009998:	469e      	mov	lr, r3
 800999a:	4770      	bx	lr
